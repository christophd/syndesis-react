{"version":3,"sources":["modules/dashboard/pages/DashboardPage.tsx","modules/dashboard/DashboardApp.tsx"],"names":["getTimestamp","integration","updatedAt","createdAt","byTimestamp","a","b","aTimestamp","DashboardPage","react","api","_ref","integrationsData","data","hasIntegrations","hasData","integrationsError","error","_ref2","metricsData","_ref3","connectionsData","hasConnections","connectionsError","integrationStatesCount","items","reduce","counts","mi","stateCount","currentState","Object","objectSpread","defineProperty","Error","Pending","Published","Unpublished","recentlyUpdatedIntegrations","integrations","map","sort","slice","getRecentlyUpdatedIntegrations","topIntegrations","arguments","length","undefined","topIntegrationsArray","keys","key","count","id","miA","miB","index","findIndex","i","reverse","getTopIntegrations","es","ns","t","ui","linkToIntegrations","resolvers","list","linkToIntegrationCreation","create","start","selectStep","linkToConnections","connections","linkToConnectionCreation","selectConnector","integrationsOverview","data-testid","title","totalCount","ok","connectionsOverview","i18nTitle","connectionsForDisplay","messagesOverview","messages","errors","uptimeOverview","parseInt","i18nLast30Days","numberOfDays","i18nLast60Days","i18nLast90Days","integrations_components","loading","integrationBoard","runningIntegrations","pendingIntegrations","stoppedIntegrations","i18nIntegrationStatePending","i18nIntegrationStateRunning","i18nIntegrationStateStopped","i18nIntegrations","i18nTotal","integrationUpdates","utils","loaderChildren","errorChildren","shared","integrationName","name","integrationCurrentState","integrationDate","i18nError","i18nPublished","i18nUnpublished","components","includeConnectionMenu","getConnectionHref","connection","details","getConnectionEditHref","edit","i18nConnections","i18nLinkCreateConnection","i18nLinkCreateIntegration","i18nLinkToConnections","i18nLinkToIntegrations","DashboardApp","Switch","Route","path","this","props","baseurl","exact","component","React"],"mappings":"oPAoDO,SAASA,EAAaC,GAC3B,OAAiC,IAA1BA,EAAYC,UACfD,EAAYC,UACZD,EAAYE,UAGX,SAASC,EAAYC,EAAwBC,GAClD,IAAMC,EAAaP,EAAaK,IAAM,EAEtC,OADmBL,EAAaM,IAAM,GAClBC,EAuCP,IAAAC,EAAA,kBACbC,EAAA,cAACC,EAAA,0BAAD,KACG,SAAAC,GAAA,IACOC,EADPD,EACCE,KACSC,EAFVH,EAECI,QACOC,EAHRL,EAGCM,MAHD,OAKCR,EAAA,cAACC,EAAA,wBAAD,KACG,SAAAQ,GAAA,IAASC,EAATD,EAAGL,KAAH,OACCJ,EAAA,cAACC,EAAA,gBAAD,KACG,SAAAU,GAIK,IAHEC,EAGFD,EAHJP,KACSS,EAELF,EAFJL,QACOQ,EACHH,EADJH,MAEMO,EACJZ,EAAiBa,MAjFXC,OAClB,SAACC,EAAQC,GACP,IAAMC,EAAaF,EAAOC,EAAG3B,YAAY6B,eAAkB,EAC3D,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFJ,EADLI,OAAAE,EAAA,EAAAF,CAAA,GAEGH,EAAG3B,YAAY6B,aAAgBD,EAAa,KAGjD,CACEK,MAAO,EACPC,QAAS,EACTC,UAAW,EACXC,YAAa,IAuECC,EAtDb,SACLC,GAEA,OAAOA,EACJC,IAAI,SAAAZ,GAAE,OAAIA,EAAG3B,cACbwC,KAAKrC,GACLsC,MAAM,EAAG,GAgDoCC,CAClC/B,EAAiBa,OAEbmB,EAhDb,SACLL,GAE2B,IAD3BK,EAC2BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADmB,GAExCG,EAAuBjB,OAAOkB,KAAKL,GACtCJ,IAAI,SAAAU,GACH,MAAO,CACLC,MAAOP,EAAgBM,GACvBE,GAAIF,KAGPT,KAAK,SAACpC,EAAGC,GACR,OAAOA,EAAE6C,MAAQ9C,EAAE8C,QAGvB,OAAOZ,EACJE,KAAK,SAACY,EAAKC,GAAN,OAAclD,EAAYiD,EAAIpD,YAAaqD,EAAIrD,eACpDwC,KAAK,SAACpC,EAAGC,GACR,IAAMiD,EAAQP,EAAqBQ,UACjC,SAAAC,GAAC,OAAIA,EAAEL,KAAO9C,EAAEL,YAAYmD,KAE9B,OAAkB,IAAXG,EAAeP,EAAqBF,OAAS,EAAIS,IAEzDG,UACAhB,MAAM,EAAG,GAwBwBiB,CACtB/C,EAAiBa,MACjBN,EAAYyB,iBAEd,OACEnC,EAAA,cAACmD,EAAA,EAAD,CAAaC,GAAI,CAAC,YAAa,eAAgB,WAC5C,SAAAC,GAAC,OACArD,EAAA,cAACsD,EAAA,UAAD,CACEC,mBAAoBC,IAAU1B,aAAa2B,OAC3CC,0BAA2BF,IAAU1B,aAAa6B,OAAOC,MAAMC,aAC/DC,kBAAmBN,IAAUO,YAAYA,cACzCC,yBAA0BR,IAAUO,YAAYJ,OAAOM,kBACvDC,qBACElE,EAAA,qBAAKmE,cAAY,sBACfnE,EAAA,cAACsD,EAAA,qBAAD,CACEc,MAAOf,EAAE,yBAA0B,CACjCX,MAAOvC,EAAiBkE,aAE1BC,GACEnE,EAAiBkE,WACjBtD,EAAuBU,MAEzBjB,MAAOO,EAAuBU,SAIpC8C,oBACEvE,EAAA,qBAAKmE,cAAY,qBACfnE,EAAA,cAACsD,EAAA,kBAAD,CACEkB,UAAWnB,EAAE,wBAAyB,CACpCX,MACE9B,EAAgB6D,sBAAsBpC,YAKhDqC,iBACE1E,EAAA,qBAAKmE,cAAY,kBACfnE,EAAA,cAACsD,EAAA,qBAAD,CACEc,MAAOf,EAAE,qBAAsB,CAC7BX,MAAOhC,EAAYiE,WAErBL,GAAI5D,EAAYiE,SAAYjE,EAAYkE,OACxCpE,MAAOE,EAAYkE,UAIzBC,eACE7E,EAAA,cAACsD,EAAA,aAAD,CACEM,MAAOkB,SAASpE,EAAYkD,MAAQ,IACpCY,UAAWnB,EAAE,uBAGjBlB,gBACEnC,EAAA,cAACsD,EAAA,oBAAD,CACEkB,UAAWnB,EAAE,uBAAwB,CACnCX,MAAO,IAETqC,eAAgB1B,EAAE,mBAAoB,CACpC2B,aAAc,KAEhBC,eAAgB5B,EAAE,mBAAoB,CACpC2B,aAAc,KAEhBE,eAAgB7B,EAAE,mBAAoB,CACpC2B,aAAc,MAGhBhF,EAAA,cAACmF,EAAA,EAAD,CACE3E,MAAOD,EACP6E,SAAU/E,EACVyB,aAAcK,KAIpBkD,iBACErF,EAAA,cAACsD,EAAA,iBAAD,CACEgC,oBAAqBvE,EAAuBY,UAC5C4D,oBAAqBxE,EAAuBW,QAC5C8D,oBACEzE,EAAuBa,YAEzB4C,UAAWnB,EAAE,yBACboC,4BAA6BpC,EAC3B,2BAEFqC,4BAA6BrC,EAC3B,2BAEFsC,4BAA6BtC,EAC3B,2BAEFuC,iBAAkBvC,EAAE,uBACpBwC,UAAWxC,EAAE,kBAGjByC,mBACE9F,EAAA,cAACsD,EAAA,kBAAD,CACEkB,UAAWnB,EAAE,4BAEbrD,EAAA,cAAC+F,EAAA,WAAD,CACEvF,OAAO,EACP4E,SAAU/E,EACV2F,eAAgBhG,EAAA,cAACsD,EAAA,sBAAD,MAChB2C,cAAejG,EAAA,cAACkG,EAAA,EAAD,OAEd,kBACCrE,EAA4BE,IAAI,SAAAiB,GAAC,OAC/BhD,EAAA,cAACsD,EAAA,kBAAD,CACEb,IAAKO,EAAEL,GACPwD,gBAAiBnD,EAAEoD,KACnBC,wBAAyBrD,EAAE3B,aAC3BiF,gBAAiBtD,EAAEvD,WAAcuD,EAAEtD,UACnC6G,UAAWlD,EAAE,gBACbmD,cAAenD,EAAE,oBACjBoD,gBAAiBpD,EAAE,6BAO/BU,YACE/D,EAAA,cAAC0G,EAAA,EAAD,CACElG,MAAOM,EACP6F,uBAAuB,EACvBvB,SAAUvE,EACVkD,YAAanD,EAAgB6D,sBAC7BmC,kBAAmB,SAAAC,GAAU,OAC3BrD,IAAUO,YAAY8C,WAAWC,QAAQ,CACvCD,gBAGJE,sBAAuB,SAAAF,GAAU,OAC/BrD,IAAUO,YAAY8C,WAAWG,KAAK,CACpCH,kBAKRI,gBAAiB5D,EAAE,sBACnB6D,yBAA0B7D,EACxB,+BAEF8D,0BAA2B9D,EACzB,gCAEF+D,sBAAuB/D,EAAE,qBACzBgE,uBAAwBhE,EAAE,sBAC1BmB,UAAWnB,EAAE,8DCtQdiE,mLAEjB,OACEtH,EAAA,cAACuH,EAAA,EAAD,KACEvH,EAAA,cAACwH,EAAA,EAAD,CACEC,KAAMC,KAAKC,MAAMC,QACjBC,OAAO,EACPC,UAAW/H,YAPqBgI","file":"static/js/Dashboard.12fa89e7.chunk.js","sourcesContent":["import {\n  WithConnections,\n  WithIntegrationsMetrics,\n  WithMonitoredIntegrations,\n} from '@syndesis/api';\nimport { IntegrationOverview, IntegrationWithOverview } from '@syndesis/models';\nimport {\n  AggregatedMetricCard,\n  ConnectionsMetric,\n  Dashboard,\n  IntegrationBoard,\n  RecentUpdatesCard,\n  RecentUpdatesItem,\n  RecentUpdatesSkeleton,\n  TopIntegrationsCard,\n  UptimeMetric,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { ApiError } from '../../../shared';\nimport { Connections } from '../../connections/components';\nimport { Integrations } from '../../integrations/components';\nimport resolvers from '../../resolvers';\n\nexport interface IIntegrationCountsByState {\n  Error: number;\n  Pending: number;\n  Published: number;\n  Unpublished: number;\n}\n\nexport function getIntegrationsCountsByState(\n  integrations: IntegrationWithOverview[]\n): IIntegrationCountsByState {\n  return integrations.reduce(\n    (counts, mi) => {\n      const stateCount = counts[mi.integration.currentState!] || 0;\n      return {\n        ...counts,\n        [mi.integration.currentState!]: stateCount + 1,\n      };\n    },\n    {\n      Error: 0,\n      Pending: 0,\n      Published: 0,\n      Unpublished: 0,\n    } as IIntegrationCountsByState\n  );\n}\n\nexport function getTimestamp(integration: IntegrationOverview) {\n  return integration.updatedAt !== 0\n    ? integration.updatedAt\n    : integration.createdAt;\n}\n\nexport function byTimestamp(a: IntegrationOverview, b: IntegrationOverview) {\n  const aTimestamp = getTimestamp(a) || 0;\n  const bTimestamp = getTimestamp(b) || 0;\n  return bTimestamp - aTimestamp;\n}\n\nexport function getRecentlyUpdatedIntegrations(\n  integrations: IntegrationWithOverview[]\n): IntegrationOverview[] {\n  return integrations\n    .map(mi => mi.integration)\n    .sort(byTimestamp)\n    .slice(0, 5);\n}\n\nexport function getTopIntegrations(\n  integrations: IntegrationWithOverview[],\n  topIntegrations: { [name: string]: number } = {}\n): IntegrationWithOverview[] {\n  const topIntegrationsArray = Object.keys(topIntegrations)\n    .map(key => {\n      return {\n        count: topIntegrations[key],\n        id: key,\n      } as any;\n    })\n    .sort((a, b) => {\n      return b.count - a.count;\n    });\n\n  return integrations\n    .sort((miA, miB) => byTimestamp(miA.integration, miB.integration))\n    .sort((a, b) => {\n      const index = topIntegrationsArray.findIndex(\n        i => i.id === b.integration.id\n      );\n      return index === -1 ? topIntegrationsArray.length + 1 : index;\n    })\n    .reverse()\n    .slice(0, 5);\n}\n\nexport default () => (\n  <WithMonitoredIntegrations>\n    {({\n      data: integrationsData,\n      hasData: hasIntegrations,\n      error: integrationsError,\n    }) => (\n      <WithIntegrationsMetrics>\n        {({ data: metricsData }) => (\n          <WithConnections>\n            {({\n              data: connectionsData,\n              hasData: hasConnections,\n              error: connectionsError,\n            }) => {\n              const integrationStatesCount = getIntegrationsCountsByState(\n                integrationsData.items\n              );\n              const recentlyUpdatedIntegrations = getRecentlyUpdatedIntegrations(\n                integrationsData.items\n              );\n              const topIntegrations = getTopIntegrations(\n                integrationsData.items,\n                metricsData.topIntegrations\n              );\n              return (\n                <Translation ns={['dashboard', 'integrations', 'shared']}>\n                  {t => (\n                    <Dashboard\n                      linkToIntegrations={resolvers.integrations.list()}\n                      linkToIntegrationCreation={resolvers.integrations.create.start.selectStep()}\n                      linkToConnections={resolvers.connections.connections()}\n                      linkToConnectionCreation={resolvers.connections.create.selectConnector()}\n                      integrationsOverview={\n                        <div data-testid=\"total-integrations\">\n                          <AggregatedMetricCard\n                            title={t('titleTotalIntegrations', {\n                              count: integrationsData.totalCount,\n                            })}\n                            ok={\n                              integrationsData.totalCount -\n                              integrationStatesCount.Error\n                            }\n                            error={integrationStatesCount.Error}\n                          />\n                        </div>\n                      }\n                      connectionsOverview={\n                        <div data-testid=\"total-connections\">\n                          <ConnectionsMetric\n                            i18nTitle={t('titleTotalConnections', {\n                              count:\n                                connectionsData.connectionsForDisplay.length,\n                            })}\n                          />\n                        </div>\n                      }\n                      messagesOverview={\n                        <div data-testid=\"total-messages\">\n                          <AggregatedMetricCard\n                            title={t('titleTotalMessages', {\n                              count: metricsData.messages,\n                            })}\n                            ok={metricsData.messages! - metricsData.errors!}\n                            error={metricsData.errors!}\n                          />\n                        </div>\n                      }\n                      uptimeOverview={\n                        <UptimeMetric\n                          start={parseInt(metricsData.start!, 10)}\n                          i18nTitle={t('titleUptimeMetric')}\n                        />\n                      }\n                      topIntegrations={\n                        <TopIntegrationsCard\n                          i18nTitle={t('titleTopIntegrations', {\n                            count: 5,\n                          })}\n                          i18nLast30Days={t('lastNumberOfDays', {\n                            numberOfDays: 30,\n                          })}\n                          i18nLast60Days={t('lastNumberOfDays', {\n                            numberOfDays: 60,\n                          })}\n                          i18nLast90Days={t('lastNumberOfDays', {\n                            numberOfDays: 90,\n                          })}\n                        >\n                          <Integrations\n                            error={integrationsError}\n                            loading={!hasIntegrations}\n                            integrations={topIntegrations}\n                          />\n                        </TopIntegrationsCard>\n                      }\n                      integrationBoard={\n                        <IntegrationBoard\n                          runningIntegrations={integrationStatesCount.Published}\n                          pendingIntegrations={integrationStatesCount.Pending}\n                          stoppedIntegrations={\n                            integrationStatesCount.Unpublished\n                          }\n                          i18nTitle={t('titleIntegrationBoard')}\n                          i18nIntegrationStatePending={t(\n                            'integrationStatePending'\n                          )}\n                          i18nIntegrationStateRunning={t(\n                            'integrationStateRunning'\n                          )}\n                          i18nIntegrationStateStopped={t(\n                            'integrationStateStopped'\n                          )}\n                          i18nIntegrations={t('shared:Integrations')}\n                          i18nTotal={t('shared:Total')}\n                        />\n                      }\n                      integrationUpdates={\n                        <RecentUpdatesCard\n                          i18nTitle={t('titleIntegrationUpdates')}\n                        >\n                          <WithLoader\n                            error={false}\n                            loading={!hasIntegrations}\n                            loaderChildren={<RecentUpdatesSkeleton />}\n                            errorChildren={<ApiError />}\n                          >\n                            {() =>\n                              recentlyUpdatedIntegrations.map(i => (\n                                <RecentUpdatesItem\n                                  key={i.id}\n                                  integrationName={i.name}\n                                  integrationCurrentState={i.currentState!}\n                                  integrationDate={i.updatedAt! || i.createdAt!}\n                                  i18nError={t('shared:Error')}\n                                  i18nPublished={t('shared:Published')}\n                                  i18nUnpublished={t('shared:Unpublished')}\n                                />\n                              ))\n                            }\n                          </WithLoader>\n                        </RecentUpdatesCard>\n                      }\n                      connections={\n                        <Connections\n                          error={connectionsError}\n                          includeConnectionMenu={false}\n                          loading={!hasConnections}\n                          connections={connectionsData.connectionsForDisplay}\n                          getConnectionHref={connection =>\n                            resolvers.connections.connection.details({\n                              connection,\n                            })\n                          }\n                          getConnectionEditHref={connection =>\n                            resolvers.connections.connection.edit({\n                              connection,\n                            })\n                          }\n                        />\n                      }\n                      i18nConnections={t('shared:Connections')}\n                      i18nLinkCreateConnection={t(\n                        'shared:linkCreateConnection'\n                      )}\n                      i18nLinkCreateIntegration={t(\n                        'shared:linkCreateIntegration'\n                      )}\n                      i18nLinkToConnections={t('linkToConnections')}\n                      i18nLinkToIntegrations={t('linkToIntegrations')}\n                      i18nTitle={t('title')}\n                    />\n                  )}\n                </Translation>\n              );\n            }}\n          </WithConnections>\n        )}\n      </WithIntegrationsMetrics>\n    )}\n  </WithMonitoredIntegrations>\n);\n","import * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport DashboardPage from './pages/DashboardPage';\n\nexport interface IDashboardAppProps {\n  baseurl: string;\n}\n\nexport default class DashboardApp extends React.Component<IDashboardAppProps> {\n  public render() {\n    return (\n      <Switch>\n        <Route\n          path={this.props.baseurl}\n          exact={true}\n          component={DashboardPage}\n        />\n      </Switch>\n    );\n  }\n}\n"],"sourceRoot":""}