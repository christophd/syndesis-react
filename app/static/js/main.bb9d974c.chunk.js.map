{"version":3,"sources":["modules/customizations/resolvers.ts","../../src/DataMapperAdapter.tsx","i18n/locales/index.ts","i18n/index.ts","modules/integrations/resolvers.ts","shared/ApiError.tsx","shared/ModuleLoader.tsx","shared/PageNotFound.tsx","shared/PageTitle.tsx","shared/WithClosedNavigation.tsx","shared/WithErrorBoundary.tsx","shared/index.ts","modules/integrations/routes.ts","modules/integrations/components/IntegrationEditorStepAdder.tsx","modules/dashboard/routes.ts","modules/dashboard/resolvers.ts","modules/resolvers.ts","../../src/Shared/ConfirmationDialog.tsx","../../src/Shared/AggregatedMetricCard.tsx","../../src/Shared/Dialog.tsx","../../src/Layout/Container.tsx","../../src/Shared/DndFileChooser.tsx","../../src/Layout/AppLayout.tsx","../../src/Layout/AppTopMenu.tsx","../../src/Layout/ButtonLink.tsx","../../src/Layout/Loader.tsx","../../src/Layout/PfNavLink.tsx","../../src/Layout/PfVerticalNavItem.tsx","../../src/Layout/TabBarItem.tsx","../../src/Layout/WizardSteps.tsx","../../src/Shared/InlineTextEdit.tsx","../../src/Shared/ListViewToolbar.tsx","../../src/Shared/LogViewer.tsx","../../src/Shared/Notifications.tsx","../../src/Shared/SimplePageHeader.tsx","../../src/Shared/ProgressWithLink.tsx","../../src/Shared/PfDropdownItem.tsx","../../src/Connection/ConnectionCard.tsx","../../src/Connection/ConnectionDetailsForm.tsx","../../src/Connection/ConnectionDetailsHeader.tsx","../../src/Connection/ConnectionsGrid.tsx","../../src/Connection/ConnectionsGridCell.tsx","../../src/Connection/ConnectionsListView.tsx","../../src/Connection/ConnectorConfigurationForm.tsx","../../src/Integration/CiCd/CiCdUIModels.ts","../../src/Customization/ApiConnectorDetailCard.tsx","../../src/Customization/ApiConnectorInfo.tsx","../../src/Customization/ApiConnectorReview.tsx","../../src/Customization/ApiConnectorDetail.tsx","../../src/Customization/ApiConnectorListItem.tsx","../../src/Customization/ApiConnectorListView.tsx","../../src/Customization/ExtensionDetail.tsx","../../src/Customization/ExtensionImportCard.tsx","../../src/Customization/ExtensionImportReview.tsx","../../src/Customization/ExtensionIntegrationsTable.tsx","../../src/Customization/ExtensionListItem.tsx","../../src/Customization/ExtensionListView.tsx","../../src/Customization/ExtensionOverview.tsx","../../src/Customization/ExtensionSupports.tsx","../../src/Dashboard/ConnectionsMetric.tsx","../../src/Dashboard/Dashboard.tsx","../../src/Dashboard/IntegrationBoard.tsx","../../src/Dashboard/RecentUpdatesCard.tsx","../../src/Integration/CiCd/CiCdEditDialog.tsx","../../src/Integration/CiCd/CiCdList.tsx","../../src/Integration/CiCd/CiCdListEmptyState.tsx","../../src/Integration/CiCd/CiCdListItem.tsx","../../src/Integration/CiCd/CiCdListView.tsx","../../src/Integration/CiCd/CiCdManagePageUI.tsx","../../src/Integration/CiCd/CiCdListSkeleton.tsx","../../src/Integration/CiCd/TagIntegrationDialog.tsx","../../src/Integration/CiCd/TagIntegrationListItem.tsx","../../src/Integration/CiCd/TagIntegrationDialogEmptyState.tsx","../../src/Integration/CiCd/TagIntegrationDialogBody.tsx","../../src/Integration/Import/ImportPageUI.tsx","../../src/Integration/IntegrationActions.tsx","../../src/Integration/IntegrationDetailActivity.tsx","../../src/Integration/IntegrationDetailActivityItem.tsx","../../src/Integration/IntegrationDetailActivityItemSteps.tsx","../../src/Integration/IntegrationDetailDescription.tsx","../../src/Integration/IntegrationDetailEditableName.tsx","../../src/Integration/IntegrationDetailHistoryListView.tsx","../../src/Integration/IntegrationDetailHistoryListViewItem.tsx","../../src/Integration/IntegrationDetailInfo.tsx","../../src/Integration/IntegrationDetailMetrics.tsx","../../src/Integration/IntegrationEditorActionsListItem.tsx","../../src/Integration/IntegrationEditorChooseAction.tsx","../../src/Integration/IntegrationEditorChooseConnection.tsx","../../src/Integration/IntegrationEditorConnectionsListItem.tsx","../../src/Integration/IntegrationEditorForm.tsx","../../src/Integration/IntegrationEditorNothingToConfigure.tsx","../../src/Integration/IntegrationEditorStepsList.tsx","../../src/Integration/IntegrationEditorStepsListItem.tsx","../../src/Integration/IntegrationFlowAddStep.tsx","../../src/Integration/IntegrationFlowStep.tsx","../../src/Integration/IntegrationFlowStepDetails.tsx","../../src/Integration/IntegrationFlowStepGeneric.tsx","../../src/Integration/IntegrationIcon.tsx","../../src/Integration/IntegrationStatus.tsx","../../src/Integration/models.ts","../../src/Integration/IntegrationStatusDetail.tsx","../../src/Integration/IntegrationStepsHorizontalItem.tsx","../../src/Integration/IntegrationStepsHorizontalView.tsx","../../src/Integration/IntegrationVerticalFlow.tsx","../../src/Integration/IntegrationsList.tsx","../../src/Integration/IntegrationsListItem.tsx","../../src/Integration/IntegrationsListSkeleton.tsx","../../src/Data/DvConnection/DvConnectionCard.tsx","../../src/Integration/IntegrationsListView.tsx","../../src/Dashboard/TopIntegrationsCard.tsx","../../src/Dashboard/UptimeMetric.tsx","../../src/Data/Virtualizations/Views/ViewListItem.tsx","../../src/Data/Virtualizations/Views/ViewList.tsx","../../src/Data/DvConnection/DvConnectionsGrid.tsx","../../src/Data/DvConnection/DvConnectionsGridCell.tsx","../../src/Data/DvConnection/DvConnectionsListView.tsx","../../src/Data/Virtualizations/Views/ViewInfoListItem.tsx","../../src/Data/Virtualizations/Views/ViewInfoList.tsx","../../src/Data/Virtualizations/VirtualizationListItem.tsx","../../src/Data/Virtualizations/models.ts","../../src/Data/Virtualizations/VirtualizationList.tsx","../../src/Data/Virtualizations/VirtualizationPublishStatus.tsx","../../src/Data/Virtualizations/VirtualizationPublishStatusDetail.tsx","../../src/Connection/ConnectionCreatorLayout.tsx","../../src/Connection/ConnectionSkeleton.tsx","../../src/Customization/ApiConnectorListSkeleton.tsx","../../src/Customization/ExtensionListSkeleton.tsx","../../src/Dashboard/RecentUpdatesItem.tsx","../../src/Dashboard/RecentUpdatesSkeleton.tsx","../../src/Data/Virtualizations/Views/ViewListSkeleton.tsx","../../src/Data/DvConnection/DvConnectionSkeleton.tsx","../../src/Data/Virtualizations/Views/ViewInfoListSkeleton.tsx","../../src/Data/Virtualizations/Views/ViewsCreateLayout.tsx","../../src/Data/Virtualizations/VirtualizationListSkeleton.tsx","../../src/Integration/IntegrationActionSelectorCard.tsx","../../src/Integration/IntegrationEditorLayout.tsx","../../src/Integration/IntegrationFlowStepWithOverview.tsx","../../src/Integration/IntegrationsListItemUnreadable.tsx","../../src/Layout/Breadcrumb.tsx","../../src/Layout/TabBar.tsx","../../src/Layout/WizardStep.tsx","../../src/Shared/GenericTable.tsx","../../src/Shared/UnrecoverableError.tsx","modules/integrations/components/TagIntegrationDialogWrapper.tsx","modules/integrations/components/Integrations.tsx","modules/integrations/components/IntegrationCreatorBreadcrumbs.tsx","modules/integrations/components/IntegrationDetailHistory.tsx","modules/integrations/components/IntegrationDetailSteps.tsx","modules/integrations/components/IntegrationEditorBreadcrumbs.tsx","modules/integrations/components/IntegrationEditorSidebar.tsx","modules/integrations/components/index.ts","modules/customizations/routes.ts","app/syndesis_logo_full_darkbkg.svg","modules/data/routes.ts","modules/connections/resolvers.ts","app/AppContext.tsx","app/WithConfig.tsx","app/App.tsx","app/index.ts","modules/connections/routes.ts","../../src/widgets/helpers.ts","../../src/widgets/FormInputComponent.tsx","../../src/widgets/FormSelectComponent.tsx","../../src/widgets/FormTextAreaComponent.tsx","../../src/widgets/FormCheckboxComponent.tsx","../../src/widgets/FormHiddenComponent.tsx","../../src/widgets/FormDurationComponent.tsx","../../src/FormBuilder.tsx","../../src/AutoForm.tsx","../../src/autoformHelpers.ts","../../src/key.ts","../../src/WithListViewToolbarHelpers.tsx","../../src/WithLoader.tsx","../../src/WithRouteData.tsx","../../src/WithRouter.tsx","../../src/makeResolver.ts","../../src/OptionalIntUtil.ts","modules/connections/components/ConnectionCreatorBreadcrumbs.tsx","modules/connections/components/Connections.tsx","modules/connections/components/ConnectionsWithToolbar.tsx","modules/connections/components/WithConnectorForm.tsx","modules/connections/components/index.ts","../../packages/atlasmap-assembly/dist/atlasmap/runtime.js","../../packages/atlasmap-assembly/dist/atlasmap/polyfills.js","../../packages/atlasmap-assembly/dist/atlasmap/styles.js","../../packages/atlasmap-assembly/dist/atlasmap/scripts.js","../../packages/atlasmap-assembly/dist/atlasmap/vendor.js","../../packages/atlasmap-assembly/dist/atlasmap/main.js","modules/connections/pages/ConnectionDetailsPage.tsx","modules/connections/pages/ConnectionsPage.tsx","modules/connections/pages/create/ConfigurationPage.tsx","modules/connections/pages/create/ConnectorsPage.tsx","modules/connections/pages/create/index.ts","modules/connections/pages/create/ReviewPage.tsx","modules/connections/ConnectionsCreatorApp.tsx","modules/connections/index.tsx","modules/customizations/shared/CustomizationsNavBar.tsx","modules/customizations/pages/ApiConnectorsPage.tsx","modules/customizations/shared/ExtensionIntegrations.tsx","modules/customizations/pages/ExtensionDetailsPage.tsx","modules/customizations/customizationsUtils.ts","modules/customizations/pages/ExtensionImportPage.tsx","modules/customizations/pages/ExtensionsPage.tsx","modules/data/shared/VirtualizationUtils.ts","modules/customizations/CustomizationsApp.tsx","modules/customizations/index.tsx","modules/dashboard/index.tsx","modules/routes.ts","modules/data/shared/HeaderView.tsx","modules/data/shared/VirtualizationNavBar.tsx","modules/data/shared/ViewsCreateSteps.tsx","modules/data/shared/ViewInfosContent.tsx","modules/data/shared/ViewSqlForm.tsx","modules/data/shared/ViewSqlFormAndTable.tsx","modules/data/shared/DvConnections.tsx","modules/data/shared/DvConnectionsWithToolbar.tsx","modules/data/pages/views/SelectConnectionPage.tsx","modules/data/pages/views/SelectViewsPage.tsx","modules/data/CreateViewsApp.tsx","modules/data/pages/VirtualizationCreatePage.tsx","modules/data/pages/VirtualizationMetricsPage.tsx","modules/data/pages/VirtualizationRelationshipPage.tsx","modules/data/pages/VirtualizationsPage.tsx","modules/data/pages/VirtualizationSqlClientPage.tsx","modules/data/pages/VirtualizationViewsPage.tsx","modules/data/index.tsx","modules/integrations/components/editor/AddStepPage.tsx","modules/integrations/shared/IntegrationDetailNavBar.tsx","modules/integrations/shared/WithConfigurationForm.tsx","modules/integrations/components/editor/endpoint/ConfigureActionPage.tsx","modules/integrations/components/editor/endpoint/SelectActionPage.tsx","modules/integrations/components/editor/SaveIntegrationPage.tsx","modules/integrations/components/editor/SelectConnectionPage.tsx","modules/integrations/IntegrationCreatorApp.tsx","modules/integrations/IntegrationEditorApp.tsx","modules/integrations/pages/detail/ActivityPage.tsx","modules/integrations/pages/detail/DetailsPage.tsx","modules/integrations/pages/detail/MetricsPage.tsx","modules/integrations/pages/import/ImportPage.tsx","modules/integrations/pages/IntegrationsPage.tsx","modules/integrations/pages/TestAtlasmapPage.tsx","modules/integrations/pages/cicd/ManageCiCdPage.tsx","modules/integrations/index.tsx","registerServiceWorker.ts","index.tsx","../../src/ApiContext.tsx","../../../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../../src/callFetch.ts","../../src/Fetch.tsx","../../src/Stream.tsx","../../src/SyndesisFetch.tsx","../../src/DVFetch.tsx","../../src/constants.ts","../../src/ServerEventsContext.tsx","../../src/WithIntegrationHelpers.tsx","../../src/WithChangeListener.tsx","../../src/WithApiConnectors.tsx","../../src/WithPolling.tsx","../../src/WithEnvironments.tsx","../../src/WithEnvironmentHelpers.tsx","../../src/WithExtension.tsx","../../src/WithExtensionHelpers.tsx","../../src/WithExtensionIntegrations.tsx","../../src/WithExtensions.tsx","../../src/WithIntegration.tsx","../../src/WithIntegrations.tsx","../../src/WithIntegrationTags.tsx","../../src/WithMonitoredIntegrations.tsx","../../src/WithIntegrationsMetrics.tsx","../../src/WithConnections.tsx","../../src/helpers/connectionFunctions.ts","../../src/helpers/integrationFunctions.ts","../../src/WithConnection.tsx","../../src/WithConnectionHelpers.tsx","../../src/WithConnector.tsx","../../src/WithConnectors.tsx","../../src/WithSteps.tsx","../../src/WithServerEvents.tsx","../../src/WithViews.tsx","../../src/WithViewEditorStates.tsx","../../src/WithVirtualizationHelpers.tsx","../../src/WithVirtualization.tsx","../../src/WithVirtualizations.tsx","../../src/WithVirtualizationConnectionStatuses.tsx","../../src/WithVirtualizationConnectionSchema.tsx","../../src/helpers/serializeIntegration.ts","../../src/helpers/deserializeIntegration.ts","modules/data/resolvers.ts"],"names":["_syndesis_utils__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_routes__WEBPACK_IMPORTED_MODULE_1__","__webpack_exports__","apiConnectors","apiConnector","makeResolver","routes","_ref","params","apiConnectorId","id","state","create","upload","makeResolverNoParams","review","security","save","list","extensions","extension","details","_ref2","extensionId","update","_ref3","import","root","const","DocumentType","InspectionType","runtime","require","polyfills","styles","scripts","vendor","main","DataMapperAdapter","constructor","props","iframe","messageChannel","MessageChannel","onIframeLoad","this","bind","onMessages","componentDidMount","addEventListener","componentWillReceiveProps","nextProps","prevPayload","_","nextPayload","equal","updateDataMapperApp","shouldComponentUpdate","componentWillUnmount","removeEventListener","messagePort","port1","onmessage","contentWindow","postMessage","port2","event","message","payload","onMappings","mappings","documentId","inputDataShape","inputDescription","inputDocumentType","inputInspectionType","inputName","outputDataShape","outputDescription","outputDocumentType","outputInspectionType","outputName","render","srcDoc","React","createElement","Object","assign","style","width","height","frameBorder","allowtransparency","extraProps","ref","el","en","app","appEn","it","appIt","modules","connections","connectionsEn","connectionsIt","customizations","customizationsEn","customizationsIt","dashboard","dashboardEn","dashboardIt","data","dataEn","dataIt","integrations","integrationsEn","integrationsIt","options","interpolation","escapeValue","debug","resources","shared","defaultNS","fallbackLng","fallbackNS","keySeparator","ns","i18n","use","LanguageDetector","init","configureIndexMapper","flowId","integration","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","flows","integrationId","configureSelectConnectionMapper","position","rest","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_configureIndexMapper","configureSelectActionMapper","connection","_configureSelectConne","connectionId","configureConfigureActionMapper","_ref4","actionId","step","updatedIntegration","_configureSelectActio","positionAsNumber","parseInt","stepObject","getStep","concat","configuredProperties","listResolver","manageCicdResolver","manageCicd","createRootResolver","createStartSelectStepResolver","makeResolverNoParamsWithDefaults","start","selectStep","getEmptyIntegration","createStartSelectActionResolver","selectAction","createStartConfigureActionResolver","configureAction","createFinishSelectStepResolver","finish","createFinishSelectActionResolver","createFinishConfigureActionResolver","createConfigureIndexResolver","configure","index","createConfigureAddStepSelectStepResolver","addStep","createConfigureAddStepSelectActionResolver","createConfigureAddStepConfigureActionResolver","createConfigureEditStepSelectActionResolver","editStep","createConfigureEditStepConfigureActionResolver","createConfigureEditStepSaveAndPublishResolver","saveAndPublish","_ref5","integrationActivityResolver","activity","_ref6","integrationDetailsResolver","_ref7","integrationEditIndexResolver","edit","integrationEditAddStepSelectStepResolver","integrationEditAddStepSelectActionResolver","integrationEditAddStepConfigureActionResolver","integrationEditEditStepSelectActionResolver","integrationEditEditStepConfigureActionResolver","integrationEditSaveAndPublish","metricsResolver","metrics","_ref8","ApiError","react","es","t","ui","i18nTitle","i18nInfo","i18nHelp","i18nRefreshLabel","i18nReportIssue","error","errorInfo","ModuleLoader","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this","timedOut","console","i18nShowErrorInfoLabel","pastDelay","PageNotFound","PageTitle","_React$PureComponent","Consumer","config","Helmet_default","a","title","WithClosedNavigation","children","context","AppContext","hideNavigation","showNavigation","WithErrorBoundary","_getPrototypeOf2","_len","length","args","Array","_key","call","setState","nextContext","undefined","_this2","errorComponent","d","ApiError_ApiError","ModuleLoader_ModuleLoader","PageNotFound_PageNotFound","PageTitle_PageTitle","WithClosedNavigation_WithClosedNavigation","WithErrorBoundary_WithErrorBoundary","named_urls__WEBPACK_IMPORTED_MODULE_0__","stepRoutes","apiProvider","include","specification","dataMapper","basicFilter","template","describeData","editorRoutes","IntegrationEditorStepAdder","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_6__","_syndesis_ui__WEBPACK_IMPORTED_MODULE_5__","steps","map","s","idx","stepName","connector","name","stepDescription","action","icon","src","actions","href","configureStepHref","as","className","active","showDetails","addStepHref","i18nAddStep","route","dashboard_resolvers","reverse","ConfirmationIconType","ConfirmationButtonStyle","AggregatedMetricCard","Card","accented","aggregated","matchHeight","AggregateStatusCount","Body","AggregateStatusNotifications","AggregateStatusNotification","Icon","type","ok","ConfirmationDialog","MessageDialog","accessibleName","accessibleDescription","NONE","onHide","onCancel","primaryAction","onConfirm","primaryActionButtonContent","i18nConfirmButtonText","primaryActionButtonBsStyle","buttonStyle","primaryContent","i18nConfirmationMessage","secondaryAction","secondaryActionButtonContent","i18nCancelButtonText","secondaryContent","i18nDetailsMessage","show","showDialog","Dialog","body","footer","Container","classnames","DndFileChooser","files","notifications","handleAcceptedFiles","handleRejectedFiles","getSelectedFileMessage","file","i18nNoFileSelectedMessage","getUploadMessage","i18nUploadSuccessMessage","i18nUploadFailedMessage","i18nUploadSuccessMessages","i18nUploadFailedMessages","acceptedFiles","onUploadAccepted","rejectedFiles","Dropzone","accept","fileExtensions","disabled","disableDropzone","multiple","allowMultiple","onDropAccepted","onDropRejected","getInputProps","Grid","fluid","getRootProps","refKey","Row","Col","dangerouslySetInnerHTML","__html","i18nInstructions","xs","i18nSelectedFileLabel","AppLayout","isNavOpen","onNavToggle","Header","PageHeader","logo","pictograph","logoProps","toolbar","appNav","showNavToggle","Sidebar","PageSidebar","nav","Nav","NavList","Page","header","sidebar","PageSection","AppTopMenu","isOpen","onToggle","onSelect","username","Dropdown","isPlain","toggle","DropdownToggle","dropdownItems","ButtonLink","size","Link","to","onClick","Loader","inline","Spinner","loading","inverse","PfNavLink","classNameProp","exact","isActiveProp","location","strict","styleProp","label","path","pathname","escapedPath","Route","match","isActive","childLocation","i","joinClassnames","activeClassName","activeStyle","PfVerticalNavItem","classNames","obj","WizardSteps","mainSteps","altSteps","ReadWidget","allowEditing","onEdit","EditWidget","placeholder","errorMsg","saving","asTextarea","onChange","Fragment","FormGroup","controlId","validationState","valid","FormControl","componentClass","InlineEdit","ConfirmButton","CancelButton","HelpBlock","InputGroup","Button","InlineTextEdit","i18nPlaceholder","isTextArea","onValidate","attrs","currentValue","setCurrentValue","editing","setEditing","setSaving","useState","ref$4_0","ref$4","setValidity","validate","valueToValidate","then","result","e","handleConfirm","success","handleChange","isEditing","renderValue","v","renderEdit","ListViewToolbar","renderInput","currentFilterType","Filter","ValueSelector","filterValues","onFilterValueSelected","filterType","onUpdateCurrentValue","onKeyPress","onValueKeyPress","Toolbar","TypeSelector","filterTypes","onFilterTypeSelected","onSelectFilterType","Sort","sortTypes","currentSortType","onSortTypeSelected","onUpdateCurrentSortType","DirectionSelector","isNumeric","isAscending","isSortAscending","onToggleCurrentSortDirection","Results","i18nResultsCount","activeFilters","List","item","Item","onRemove","onRemoveFilter","filterData","onClearFilters","LogViewer","count","followScroll","previousCount","renderRow","parent","CellMeasurer","cache","cellMeasurerCache","columnIndex","rowIndex","toggleFollow","CellMeasurerCache","fixedWidth","minHeight","getDerivedStateFromProps","sm","AutoSizer","disableHeight","disableWidth","deferredMeasurementCache","rowCount","rowHeight","rowRenderer","scrollToLine","scrollToIndex","Switch","labelText","Notifications","ToastNotificationList","notification","TimedToastNotification","persistent","onDismiss","timerdelay","notificationTimerDelay","SimplePageHeader","i18nDescription","Title","headingLevel","TitleLevel","h2","Text","ProgressWithLink","currentStep","totalSteps","logUrl","target","i18nLogUrlText","ProgressBar","now","max","PfDropdownItem","superclass","DropdownItem","ConnectionCard","showDeleteDialog","menuProps","doCancel","doDelete","onDelete","DANGER","i18nCancelLabel","i18nDeleteLabel","i18nDeleteModalMessage","i18nDeleteModalTitle","DropdownKebab","pullRight","i18nMenuTitle","role","tabIndex","i18nViewLabel","editHref","i18nEditLabel","isDeleteEnabled","alt","description","ConnectionDetailsForm","onSubmit","handleSubmit","validationResults","Alert","bsStyle","isWorking","isValid","i18nValidateLabel","onCancelEditing","i18nSaveLabel","onStartEditing","ConnectionDetailsHeader","connectionIcon","connectionName","i18nNamePlaceholder","onChangeName","i18nDescriptionLabel","connectionDescription","i18nDescriptionPlaceholder","onChangeDescription","i18nUsageMessage","ConnectionsGrid","CardGrid","ConnectionsGridCell","md","ConnectionsListView","linkToConnectionCreate","ConnectorConfigurationForm","i18nFormTitle","TagNameValidationError","ApiConnectorDetailCard","CardBody","ApiConnectorInfo","ApiConnectorReview","ApiConnectorDetail","CardHeading","CardTitle","ApiConnectorListItem","handleDelete","handleDetails","getDeleteTooltip","Tooltip","i18nDeleteTip","i18nDelete","getDetailsTooltip","i18nDetailsTip","i18nDetails","onDetails","ListViewItem","OverlayTrigger","overlay","placement","usedBy","additionalInfo","ListViewInfoItem","i18nUsedByMessage","apiConnectorDescription","heading","apiConnectorName","hideCloseIcon","leftContent","apiConnectorIcon","stacked","ApiConnectorListView","getCreateConnectorTooltip","linkCreateApiConnector","ListView","EmptyState","i18nEmptyStateTitle","i18nEmptyStateInfo","Action","i18nLinkCreateApiConnector","i18nLinkCreateApiConnectorTip","ExtensionDetail","getUpdateTooltip","i18nUpdateTip","i18nUpdate","i18nCancelText","extensionName","i18nIdMessage","linkUpdateExtension","extensionUses","h3","integrationsSection","ExtensionImportCard","i18nImportInstructions","i18nAlertMessage","dndDisabled","i18nHelpMessage","i18nDndHelpMessage","i18nDndInstructions","i18nDndNoFileSelectedMessage","i18nDndSelectedFileLabel","i18nDndUploadFailedMessage","i18nDndUploadSuccessMessage","onDndUploadAccepted","onUploadRejected","onDndUploadRejected","ExtensionImportReview","handleImport","getActions","onImport","extensionUid","i18nNameLabel","extensionDescription","i18nTypeLabel","i18nExtensionTypeMessage","i18nActionsLabel","xsOffset","i18nImport","cancelLink","i18nCancel","ExtensionIntegrationsTable","getColumns","headerFormat","Table","cell","formatters","rowData","i18nName","property","onIntegrationSelected","onSelectIntegration","PfProvider","striped","bordered","hover","columns","rows","rowKey","ExtensionListItem","detailsPageLink","i18nExtensionType","extensionIcon","ExtensionListView","getImportTooltip","i18nLinkImportExtensionTip","i18nLinkImportExtension","linkImportExtension","ExtensionOverview","i18nType","i18nLastUpdate","i18nLastUpdateDate","ExtensionSupports","extensionActions","ConnectionsMetric","Dashboard","linkToIntegrations","i18nLinkToIntegrations","linkToIntegrationCreation","topIntegrations","integrationBoard","marginTop","i18nConnections","linkToConnections","i18nLinkToConnections","linkToConnectionCreation","IntegrationBoard","colors","Pending","patternfly","black200","Published","blue400","Stopped","black300","i18nIntegrationStateRunning","runningIntegrations","i18nIntegrationStateStopped","stoppedIntegrations","i18nIntegrationStatePending","pendingIntegrations","DonutChart","tooltip","contents","pfDonutTooltipContents","secondary","i18nIntegrations","i18nTotal","legend","RecentUpdatesCard","CiCdEditDialog","tagName","handleClick","trim","onSave","validationError","NoErrors","htmlFor","i18nInputLabel","defaultValue","NoName","i18nNoNameError","NameInUse","i18nNameInUseError","CiCdList","CiCdListEmptyState","bsSize","onAddNew","i18nAddNewButtonText","CiCdListItem","handleEditClicked","handleRemoveClicked","onEditClicked","onRemoveClicked","i18nUsesText","CiCdListView","resultsCount","CiCdManagePageUI","showAddDialog","showEditDialog","showRemoveDialog","openAddDialog","closeAddDialog","openEditDialog","closeEditDialog","openRemoveDialog","closeRemoveDialog","handleSave","handleRemoveConfirm","onEditItem","currentItemName","onAddItem","onRemoveItem","i18nPageTitle","i18nPageDescription","i18nAddTagDialogTitle","i18nAddTagDialogDescription","i18nTagInputLabel","i18nSaveButtonText","nameValidationError","onValidateItem","i18nEditTagDialogTitle","i18nEditTagDialogDescription","NORMAL","i18nConfirmCancelButtonText","i18nConfirmRemoveButtonText","i18nRemoveConfirmationMessage","i18nRemoveConfirmationTitle","i18nRemoveConfirmationDetailMessage","onFilterAdded","ItemSkeleton","ContentLoader","speed","primaryColor","secondaryColor","x","y","rx","ry","min","Math","CiCdListSkeleton","TagIntegrationDialog","disableSave","items","initialItems","selected","acc","current","itemsDraft","TagIntegrationListItem","checked","checkboxInput","defaultChecked","TagIntegrationDialogEmptyState","background","border","i18nGoToManageCiCdButtonText","TagIntegrationDialogBody","manageCiCdHref","i18nEmptyStateButtonText","ImportPageUI","IntegrationActions","detailsHref","IntegrationDetailActivity","linkToOpenShiftLog","i18nViewLogOpenShift","i18nLastRefresh","IntegrationDetailActivityItem","cellFormat","errorCount","i18nErrorsFound","date","time","i18nVersion","version","i18nNoSteps","IntegrationDetailActivityItemSteps","duration","output","status","IntegrationDetailDescription","i18nNoDescription","IntegrationDetailEditableName","IntegrationDetailHistoryListView","isDraft","i18nTextDraft","hasHistory","IntegrationDetailHistoryListViewItem","i18nTextLastPublished","updatedAt","currentState","Error","Unpublished","states","IntegrationDetailInfo","IntegrationDetailMetrics","startAsHuman","Date","uptimeStart","toLocaleString","marginBottom","errorMessagesCount","okMessagesCount","IntegrationEditorActionsListItem","integrationName","integrationDescription","IntegrationEditorChooseAction","IntegrationEditorChooseConnection","IntegrationEditorConnectionsListItem","IntegrationEditorForm","IntegrationEditorNothingToConfigure","i18nAlert","IntegrationEditorStepsList","IntegrationEditorStepsListItem","IntegrationFlowAddStep","showTooltip","containerRef","createRef","hideTooltip","toggleTooltip","onMouseEnter","onMouseLeave","onTouchStart","IntegrationFlowStep","i18nTooltip","trigger","rootClose","GenericDescription","StepOverview","actionI18nLabel","dataTypeI18nLabel","dataType","nameI18nLabel","IntegrationFlowStepDetails","IntegrationIcon","finishConnectionIcon","startConnectionIcon","IntegrationStatus","labelType","Label","IntegrationStatusDetail","fallbackText","i18nProgressPending","targetState","IntegrationStepsHorizontalItem","isFirst","IntegrationStepsHorizontalView","IntegrationVerticalFlow","expanded","localStorage","toggleExpanded","IntegrationsList","IntegrationsListItem","isConfigurationRequired","i18nConfigurationRequired","InfoItem","monitoringValue","monitoringCurrentStep","monitoringTotalSteps","monitoringLogUrl","i18nProgressStarting","i18nProgressStopping","i18nPublished","i18nUnpublished","i18nError","getRandom$1","ConnectionStatus","cx","cy","r","getRandom","IntegrationsListSkeleton","IntegrationsListView","linkToManageCiCd","i18nManageCiCd","linkToIntegrationImport","TopIntegrationsCard","DropdownButton","i18nLast30Days","MenuItem","eventKey","i18nLast60Days","UptimeMetric","ViewListItem","handleEdit","viewName","handleCancel","getEditTooltip","i18nEdit","viewDescription","viewIcon","ListViewIcon","i18nEditTip","ViewList","getImportViewsTooltip","linkImportViewsHRef","i18nImportViews","getCreateViewTooltip","linkCreateViewHRef","hasListData","i18nCreateView","i18nCreateViewTip","i18nImportViewsTip","DvConnectionCard","toggleSelected","connName","ACTIVE","isSelected","onSelectionChanged","dvStatus","DvConnectionsGrid","DvConnectionsGridCell","DvConnectionsListView","ViewInfoListItem","handleCheckboxToggle","itemSelected","temp","getNodePathStr","nodePath","segment","isUpdateView","ViewInfoList","VirtualizationListItem","showConfirmationDialog","handleExport","handleUnpublish","handlePublish","virtualizationName","onExport","onPublish","serviceVdbName","onUnpublish","handleAcceptConfirmation","currentPublishedState","isPublished","publishInProgress","WARNING","i18nUnpublish","i18nUnpublishModalMessage","i18nUnpublishModalTitle","VirtualizationPublishStatusDetail","publishingLogUrl","stepText","publishingStepText","publishingCurrentStep","publishingTotalSteps","i18nPublishInProgress","i18nPublishLogUrlText","VirtualizationPublishStatus","i18nDraft","i18nExport","i18nPublish","virtualizationDescription","VirtualizationList","getCreateVirtualizationTooltip","i18nLinkCreateVirtualizationTip","i18nLinkCreateVirtualization","getImportVirtualizationTooltip","i18nImportTip","linkCreateHRef","content","onBack","onNext","cancelHref","backHref","nextHref","isNextLoading","isNextDisabled","extraButtons","isLastStep","integrationCurrentState","integrationDate","onCreateViews","rawObject","window","PfBreadcrumb","Breadcrumb","margin","paddingLeft","c","bsClass","isDisabled","isAlt","subSteps","showErrorInfo","setShowErrorInfo","Help","textAlign","componentStack","TagIntegrationDialogWrapper","assertThisInitialized","newEnvironments","filter","tagIntegration","targetIntegrationId","api","tags","hasTags","hasData","tagError","disableUpdates","environments","hasEnvironments","environmentsError","utils","loaderChildren","errorChildren","mappedItems","JSON","stringify","Integrations","showActionPromptDialog","showCiCdPromptDialog","handleAction","handleActionCancel","promptForAction","closeCiCdDialog","promptDialogButtonText","promptDialogIcon","promptDialogText","promptDialogTitle","getPodLogUrl","pushNotification","deleteIntegration","deployIntegration","exportIntegration","undeployIntegration","TagIntegrationDialogWrapper_TagIntegrationDialogWrapper","resolvers","mi","editAction","startAction","_handleAction","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","t0","stop","promptDialogButtonStyle","stopAction","_handleAction2","_callee2","_context2","err","deleteAction","_handleAction3","_callee3","_context3","exportAction","ciCdAction","promptForCiCd","canEdit","push","canActivate","canDeactivate","board","warnings","errors","notices","monitoring","detailedState","getStartIcon","apiEndpoint","getFinishIcon","IntegrationCreatorBreadcrumbs","toggleActive","activeSubstep","subStep","IntegrationDetailHistory","deployments","deployment","i18nTextVersion","IntegrationDetailSteps","getSteps","getStepIcon","process","IntegrationEditorBreadcrumbs","IntegrationEditorSidebar","activeIndex","hasAddStep","addAtIndex","activeAddStep","addIcon","addI18nTitle","addI18nTooltip","addI18nDescription","stepKind","getConnectionIcon","Integrations_Integrations","IntegrationCreatorBreadcrumbs_IntegrationCreatorBreadcrumbs","IntegrationDetailHistory_IntegrationDetailHistory","IntegrationDetailSteps_IntegrationDetailSteps","IntegrationEditorBreadcrumbs_IntegrationEditorBreadcrumbs","IntegrationEditorSidebar_IntegrationEditorSidebar","module","exports","p","virtualizations","virtualization","relationship","sqlClient","views","importSource","selectConnection","selectViews","selectConnector","configureConnector","connectorId","WithConfig","_componentDidMount","configResponse","_config","fetch","sent","json","App","logout","removeNotificationAction","notifToRemove","n","msg","toConsumableArray","toString","linkType","namespace","podName","baseUrl","consoleUrl","data-testid","WithConfig_WithConfig","minWait","Provider","apiUri","apiBase","dvApiUri","datavirt","dvUrl","headers","SYNDESIS-XSRF-TOKEN","functions","appTitle","renderAppNav","verticalNav","renderVerticalNav","minWidth","logoHref","onNavigationCollapse","onNavigationExpand","url","component","App_App","getValidationState","field","form","FormInputComponent","ControlLabel","displayName","FieldLevelHelp","labelHint","fieldAttributes","controlHint","FormSelectComponent","isMultiple","onBlur","newValue","select","currentTarget","option","enum","opt","FormTextAreaComponent","FormCheckboxComponent","Checkbox","FormHiddenComponent","durations","calculateValue","FormDurationComponent","inputField","handleOnSelect","handleBlur","receiveInputRef","newDuration","setFieldValue","valueAsNumber","Form","initialValue","isSubmitting","inputRef","FormBuilder","getField","componentTypemaps","checkbox","hidden","textarea","Field","i18nRequiredProperty","fields","enrichAndOrderProperties","definition","massagedValue","sanitizeValues","keys","reduce","prop","required","sort","b","massageType","secret","massageRequired","massageValue","String","AutoForm","Formik","initialValues","values","touched","dirty","isValidating","resetForm","validateForm","submitForm","this$1","toFormDefinitionProperty","controlTooltip","labelTooltip","formDefinitionProperty","cols","ALPHABET","RANDOMNESS","lastTimestamp","let","WithListViewToolbarHelpers","keyEvent","filterValue","updated","sortType","defaultFilterType","defaultSortType","filterCategory","WithLoader","loaded","componentDidUpdate","prevProps","waitTimeout","setTimeout","clearTimeout","WithRouteData","WithRouterBase","WithRouter","withRouter","properties","answer","timestamp","getTime","remainingTimestamp","defaultRoute","mapper","present","asInt","optional","ConnectionCreatorBreadcrumbs","Connections","deleteConnection","_x","_x2","fill","getConnectionHref","includeConnectionMenu","getConnectionEditHref","uses","filterByName","sortByName","ConnectionsWithToolbar","helpers","filteredAndSortedConnections","forEach","valueToLower","toLowerCase","includes","miA","miB","right","localeCompare","getFilteredAndSortedConnections","i18nLinkCreateConnection","Connections_Connections","defaultProps","includeHidden","WithConnectorForm","def","objectSpread","validateConfiguration","shouldValidateAgainstBackend","validateFormAgainstBackend","find","scope","parameters","auto_form","toFormDefinition","enableValidationAgainstBackend","ConnectionCreatorBreadcrumbs_ConnectionCreatorBreadcrumbs","ConnectionsWithToolbar_ConnectionsWithToolbar","WithConnectorForm_WithConnectorForm","ConnectionDetailsPage","numUsedBy","history","dist_api","updateConnection","saveConnection","validateName","updatedConnection","abrupt","saveDescription","_ref9","saved","saveName","_ref10","validation","doValidateName","_x3","saveConnector","_ref11","_callee4","_context4","setSubmitting","_x4","_x5","_ref12","_callee5","proposedName","response","_context5","isError","_x6","cancelEditing","startEditing","components","_ref13","i18nUsageLabel","getUsedByMessage","ConnectionsPage","connectionsForDisplay","ConfigurationPage","ConnectorsPage","connectorsForDisplay","ReviewPage","createConnection","ConnectionsCreatorApp","ConnectionsModule","ConnectionDetailsPage_ConnectionDetailsPage","CustomizationsNavBar","ApiConnectorsPage","optionalIntValue","alert","filteredAndSorted","thisApi","thatApi","getFilteredAndSortedApiConnectors","CustomizationsNavBar_CustomizationsNavBar","backgroundColor","filterUndefinedId","ExtensionIntegrations","getUsageMessage","ExtensionDetailsPage","handleSelectIntegration","selectedIntegrationId","deleteExtension","i18nOverviewSectionTitle","i18nSupportsSectionTitle","extensionType","i18nUsageSectionTitle","ExtensionIntegrations_ExtensionIntegrations","overviewSection","lastUpdated","i18nTypeMessage","getTypeMessage","supportsSection","getExtensionTypeName","ExtensionImportPage","actionDescription","actionName","onDndUploadRejectedHandler","failedFileName","text","fileName","importExtension","uploadExtension","onDndUploadAcceptedHandler","uploaded","dndUploadFailedMessage","dndUploadSuccessMessage","t1","importExtensionId","getActionsLabel","i18nIdLabel","i18nActionText","getActionText","DvConnectionStatus","DvConnectionSelection","ExtensionsPage","thisExtension","thatExtension","getFilteredAndSortedExtensions","i18nNameFilterPlaceholder","CustomizationApp","Redirect","CustomizationsModule","CustomizationsApp","LoadableDashboardPage","Loadable","loader","DashboardModule","baseurl","modules_routes","HeaderView","virtualizationId","keng__id","tko__description","VirtualizationNavBar","ViewsCreateSteps","PREVIEW_VDB_NAME","SCHEMA_MODEL_SUFFIX","generateViewEditorStates","viewInfos","editorStates","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","Symbol","iterator","done","viewInfo","srcPaths","viewSourceNode","projCols","viewDefn","compositions","isComplete","keng__description","projectedColumns","sourcePaths","editorState","viewDefinition","return","getDvConnectionStatus","conn","dvState","INACTIVE","isDvConnectionSelected","dvSelected","SELECTED","getPreviewSql","sourcePath","split","getConnectionName","segments","getNodeName","getPreviewTableName","getFilteredAndSortedViewInfos","schemaNodes","selectedViewNames","existingViewNames","generateViewInfos","schemaNode","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","seg","queryable","vwName","selectedState","findIndex","hasExistingView","view","isUpdate","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","thisViewInfo","thatViewInfo","ViewInfosContent","displayedViews","handleViewSelectionChange","onViewSelected","onViewDeselected","ViewSqlForm","queryResults","queryResultsEmpty","querySql","updateQueryResults","viewSelected","results","onQueryResultsChanged","viewSql","selectedView","formDefinition","rowLimit","componentProperty","deprecated","javaType","kind","order","rowOffset","sqlStatement","queryVirtualization","doSubmit","targetVdb","ViewSqlFormAndTable","setQueryResults","defaultCellFormat","Heading","defaultHeaderFormat","Cell","ViewSqlForm_ViewSqlForm","row","defineProperty","Info","DvConnections","handleConnSourceSelectionChanged","onConnectionSelectionChanged","dvSourceStatuses","selectedConn","conns","virtualizationsSourceStatuses","dvConns","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_loop","connStatus","virtSrcStatus","virtStatus","sourceName","vdbState","schemaState","selectionState","NOTSELECTED","_iterator4","generateDvConnections","DvConnectionsWithToolbar","selectedConnection","handleConnectionSelectionChanged","DvConnections_DvConnections","SelectConnectionPage","selConn","ViewsCreateSteps_ViewsCreateSteps","DvConnectionsWithToolbar_DvConnectionsWithToolbar","SelectViewsPage","selectedViews","hasSelectedTables","handleAddView","handleRemoveView","viewNames","splice","refreshVirtualizationViews","handleCreateViews","viewEditorStates","idPattern","ViewInfosContent_ViewInfosContent","getExistingViewNames","CreateViewsApp","VirtualizationCreatePage","virtDescription","virtName","createVirtualization","handleCreate","VirtualizationMetricsPage","HeaderView_HeaderView","VirtualizationNavBar_VirtualizationNavBar","VirtualizationRelationshipPage","VirtualizationsPage","read","deleteVirtualization","publishVirtualization","unpublishServiceVdb","thisVirtualization","thatVirtualization","getFilteredAndSortedVirtualizations","i18nCreateDataVirtualization","i18nCreateDataVirtualizationTip","handleImportVirt","publishingDetails","publishStepDetails","publishedState","stepNumber","stepTotal","publishLogUrl","getPublishingDetails","handleExportVirtualization","VirtualizationSqlClientPage","ViewSqlFormAndTable_ViewSqlFormAndTable","VirtualizationViewsPage","deleteView","handleDeleteView","viewDefinitions","thisView","thatView","getFilteredAndSortedViewDefns","onImportView","handleImportView","handleEditView","DataModule","AddStepPage","getEditAddStepHref","stepIdx","getEditConfigureStepHrefCallback","IntegrationDetailNavBar","WithConfigurationForm","descriptor","getActionDescriptor","getActionSteps","getActionStep","configurationStep","getActionStepDefinition","moreConfigurationSteps","onUpdatedIntegration","i18nSubtitle","getActionById","getConnectorActions","getConnectionConnector","renderConfigurationForm","renderNoPropertiesInfo","ConfigureActionPage","addConnection","_ref2$step","stepAsNumber","mode","nextStepHref","postConfigureHref","WithConfigurationForm_WithConfigurationForm","SelectActionPage","actionsWithTo","actionsWithFrom","selectHref","SaveIntegrationPage","saveIntegration","setIntegrationName","postSaveHref","_state$integration","integrationSteps","connectionsData","hasConnectionsData","connectionsError","extensionsData","hasExtensionsData","extensionsError","visibleStepsByPosition","extentionsByAction","isArray","propertyDefinitionSteps","actionType","getExtensionIcon","getStepKindIcon","toStepKindCollection","connectionsWithFromAction","connectionsWithToAction","connectionOrStep","stepOrConnection","apiProviderHref","connectionHref","onStepClick","addStepPage","AddStepPage_AddStepPage","integrations_components","saveIntegrationPage","SaveIntegrationPage_SaveIntegrationPage","startStepSelectConnectionPage","editor_SelectConnectionPage_SelectConnectionPage","startStepSelectActionPage","SelectActionPage_SelectActionPage","startStepConfigureActionPage","ConfigureActionPage_ConfigureActionPage","finishStepSelectConnectionPage","finishStepSelectActionPage","finishStepConfigureActionPage","addStepSelectConnectionPage","addStepSelectActionPage","addStepConfigureActionPage","_ref14","editStepSelectActionPage","_ref15","editStepConfigureActionPage","_ref16","IntegrationCreatorApp","selectConnectionPage","IntegrationEditorApp","ActivityPage","IntegrationDetailNavBar_IntegrationDetailNavBar","DetailsPage","showPromptDialog","draftActions","i18nTextHistory","MetricsPage","ImportPage","importIntegration","handleUploadAccepted","uploadFails","uploadWins","uploadFailedMessages","uploadSuccessMessages","failed","filterByConnection","sortByStatus","IntegrationsPage","integrationsData","filteredAndSortedIntegrations","flow","found","left","getFilteredAndSortedIntegrations","TestAtlasmapPage","onReset","display","flexFlow","atlasmap_adapter","SCHEMA","createConfirmRemoveString","tag","ManageCiCdPage","filteredAndSortedEnvironments","getFilteredAndSortedEnvironments","handleValidateItem","indexOf","createEnvironment","deleteEnvironment","renameEnvironment","newName","finally","listItem","i18nEditButtonText","i18nRemoveButtonText","IntegrationsModule","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","ReactDOM","BrowserRouter","document","getElementById","URL","origin","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","ApiContextDefaultValue","ApiContext","_Pact","onFulfilled","onRejected","callback","_settle","o","pact","observer","_catch","recover","_earlyReturn","_AsyncGenerator","entry","_entry","_pact","_resolve","_return","_promise","_wrapReturnedValue","_wrapYieldedValue","Promise","resolve","returnValue","reject","callFetch","method","includeAccept","includeContentType","includeReferrerPolicy","contentType","credentials","redirect","Fetch","nextState","_this3","statusText","_response$text","_response$json","deepmerge","errorMessage","Stream","reader","getReader","textDecoder","TextDecoder","pushData","cancel","SyndesisFetch","stream","FetchOrStream","MessageLevel","DataShapeKinds","MessageCode","DVFetch","ServerEventsContextDefaultValue","ServerEventsContext","IntegrationType","ConsoleLinkType","DetailedStatus","HIDE_FROM_STEP_SELECT","ENDPOINT","DATA_MAPPER","BASIC_FILTER","ADVANCED_FILTER","SPLIT","AGGREGATE","TEMPLATE","WithIntegrationHelpersWrapped","updateOrAddConnection","actionDescriptor","produce","draft","f","Set","blob","_body$blob","saveAs","isIntegrationDeployment","WithChangeListener","changeListener","registerChangeListener","unregisterChangeListener","WithApiConnectors","changeFilter","change","totalCount","WithPolling","poller","startPolling","stopPolling","setPoller","func","polling","pollingTimer","setInterval","clearInterval","WithEnvironments","WithEnvironmentHelpersWrapped","stringifyBody","WithExtension","schemaVersion","WithExtensionHelpersWrapped","FormData","WithExtensionIntegrations","WithExtensions","WithIntegration","WithIntegrations","WithIntegrationTags","WithMonitoredIntegrations","getMonitoredIntegrations","WithIntegrationsMetrics","integrationDeploymentMetrics","lastProcessed","messages","metricsProvider","getConnectionsForDisplay","metadata","getConnectionsWithFromAction","some","getConnectionsWithToAction","transformResponse","dangerouslyUnfilteredConnections","WithConnections","getActionsWithFrom","getActionsWithTo","iconFile","File","NEW_INTEGRATION","getFlow","stepIndex","getLastPosition","filterStepsByPosition","atStart","atEnd","getPreviousSteps","getSubsequentSteps","WithConnection","WithConnectionHelpersWrapped","testConn","WithConnector","getConnectorsForDisplay","connectors","transformConnectorsResponse","WithConnectors","WithServerEvents","starting","started","unmounting","retries","preferredProtocol","changeListeners","messageListeners","registerMessageListener","unregisterMessageListener","listener","l","close","webSocket","eventSource","startConnection","onFailure","reconnectIn","connectUsingWebSockets","reservation","wsApiEndpoint","replace","connectWebSocket","connectEventSource","postMessageEvent","messageEvent","postChangeEvent","changeEvent","EventSource","onError","WebSocket","onclose","ALL_STEPS","anyPrevious","anySubsequent","previousSteps","subsequentSteps","previousStep","dataShapeExists","subsequentStep","stepsHaveOutputDataShape","ANY","requiresInputOutputDataShapes","requiresOutputDataShape","hasPrecedingCollection","contextLoggingEnabled","bodyLoggingEnabled","customText","positionNextSplit","positionNextAggregate","requiresConsistentSplitAggregate","input","previousDataShape","noCollectionSupportP","WithViews","vdbId","WithViewEditorStates","WithVirtualizationHelpersWrapped","updateViewEditorStates","deleteViewEditorState","virtDesc","newVirtualization","keng__dataPath","vdbName","editorStateId","pubVirtualization","sqlQuery","rowlimit","queryBody","limit","offset","query","viewEditorStateId","_this9","WithVirtualization","drivers","keng___links","keng__baseUri","keng__hasChildren","keng__kType","serviceVdbVersion","serviceViewDefinitions","serviceViewModel","WithVirtualizations","WithVirtualizationConnectionStatuses","WithVirtualizationConnectionSchema","apiContext","nextIntegration","visible","btoa","encodeURIComponent","decodeURIComponent","atob"],"mappings":"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","file":"static/js/main.bb9d974c.chunk.js","sourcesContent":["/* tslint:disable:object-literal-sort-keys no-empty-interface */\nimport { Connector, Extension } from '@syndesis/models';\nimport { makeResolver, makeResolverNoParams } from '@syndesis/utils';\nimport routes from './routes';\n\nexport default {\n  apiConnectors: {\n    apiConnector: makeResolver<{ apiConnector: Connector }>(\n      routes.apiConnectors.apiConnector,\n      ({ apiConnector }) => ({\n        params: {\n          apiConnectorId: apiConnector.id,\n        },\n        state: {\n          apiConnector,\n        },\n      })\n    ),\n    create: {\n      upload: makeResolverNoParams(routes.apiConnectors.create.upload),\n      review: makeResolverNoParams(routes.apiConnectors.create.review),\n      security: makeResolverNoParams(routes.apiConnectors.create.security),\n      save: makeResolverNoParams(routes.apiConnectors.create.save),\n    },\n    list: makeResolverNoParams(routes.apiConnectors.list),\n  },\n  extensions: {\n    extension: {\n      details: makeResolver<{ extension: Extension }>(\n        routes.extensions.extension.details,\n        ({ extension }) => ({\n          params: {\n            extensionId: extension.id,\n          },\n          state: {\n            extension,\n          },\n        })\n      ),\n      update: makeResolver<{ extension: Extension }>(\n        routes.extensions.extension.update,\n        ({ extension }) => ({\n          params: {\n            extensionId: extension.id,\n          },\n          state: {\n            extension,\n          },\n        })\n      ),\n    },\n    import: makeResolverNoParams(routes.extensions.import),\n    list: makeResolverNoParams(routes.extensions.list),\n  },\n  root: makeResolverNoParams(routes.apiConnectors.list),\n};\n","import {\n  IInitMessagePayload,\n  IMappingsMessagePayload,\n} from '@syndesis/atlasmap-assembly/src/app/app.component';\nimport * as React from 'react';\nimport equal from 'react-fast-compare';\n\n/* tslint:disable */\nconst runtime = require('file-loader?name=atlasmap-runtime.js!@syndesis/atlasmap-assembly/dist/atlasmap/runtime.js');\nconst polyfills = require('file-loader?name=atlasmap-polyfills.js!@syndesis/atlasmap-assembly/dist/atlasmap/polyfills.js');\nconst styles = require('file-loader?name=atlasmap-styles.js!@syndesis/atlasmap-assembly/dist/atlasmap/styles.js');\nconst scripts = require('file-loader?name=atlasmap-scripts.js!@syndesis/atlasmap-assembly/dist/atlasmap/scripts.js');\nconst vendor = require('file-loader?name=atlasmap-vendor.js!@syndesis/atlasmap-assembly/dist/atlasmap/vendor.js');\nconst main = require('file-loader?name=atlasmap-main.js!@syndesis/atlasmap-assembly/dist/atlasmap/main.js');\n/* tslint:enable*/\n\nexport enum DocumentType {\n  JAVA = 'Java',\n  XML = 'XML',\n  XSD = 'XSD',\n  JSON = 'JSON',\n  CORE = 'Core',\n  CSV = 'CSV',\n  CONSTANT = 'Constants',\n  PROPERTY = 'Property',\n}\nexport enum InspectionType {\n  JAVA_CLASS = 'JAVA_CLASS',\n  SCHEMA = 'SCHEMA',\n  INSTANCE = 'INSTANCE',\n  UNKNOWN = 'UNKNOWN',\n}\n\nexport interface IDataMapperAdapterProps extends IInitMessagePayload {\n  onMappings(mappings: string): void;\n}\n\nexport class DataMapperAdapter extends React.Component<\n  IDataMapperAdapterProps\n> {\n  protected messageChannel: MessageChannel;\n  protected messagePort?: MessagePort;\n  protected iframe: HTMLIFrameElement | null = null;\n\n  constructor(props: IDataMapperAdapterProps) {\n    super(props);\n    this.messageChannel = new MessageChannel();\n    this.onIframeLoad = this.onIframeLoad.bind(this);\n    this.onMessages = this.onMessages.bind(this);\n  }\n\n  public componentDidMount() {\n    if (this.iframe) {\n      this.iframe.addEventListener('load', this.onIframeLoad);\n    }\n  }\n\n  public componentWillReceiveProps(nextProps: IDataMapperAdapterProps) {\n    const { onMappings: _, ...prevPayload } = this.props;\n    const { onMappings: __, ...nextPayload } = nextProps;\n    if (!equal(prevPayload, nextPayload)) {\n      this.updateDataMapperApp(nextPayload);\n    }\n  }\n\n  public shouldComponentUpdate() {\n    return false;\n  }\n\n  public componentWillUnmount() {\n    if (this.iframe) {\n      this.iframe.removeEventListener('load', this.onIframeLoad);\n    }\n  }\n\n  public onIframeLoad() {\n    this.messagePort = this.messageChannel.port1;\n    this.messagePort.onmessage = this.onMessages;\n    this.iframe!.contentWindow!.postMessage('init', '*', [\n      this.messageChannel.port2,\n    ]);\n  }\n\n  public onMessages(event: MessageEvent) {\n    switch (event.data.message) {\n      case 'ready': {\n        const { onMappings, ...payload } = this.props;\n        this.updateDataMapperApp(payload);\n        break;\n      }\n      case 'mappings': {\n        const payload: IMappingsMessagePayload = event.data.payload;\n        this.props.onMappings(payload.mappings);\n        break;\n      }\n    }\n  }\n\n  public updateDataMapperApp(props: IInitMessagePayload) {\n    if (this.messagePort) {\n      const message = {\n        message: 'update',\n        payload: {\n          documentId: props.documentId,\n          inputDataShape: props.inputDataShape,\n          inputDescription: props.inputDescription,\n          inputDocumentType: props.inputDocumentType,\n          inputInspectionType: props.inputInspectionType,\n          inputName: props.inputName,\n          mappings: props.mappings,\n          outputDataShape: props.outputDataShape,\n          outputDescription: props.outputDescription,\n          outputDocumentType: props.outputDocumentType,\n          outputInspectionType: props.outputInspectionType,\n          outputName: props.outputName,\n        },\n      };\n      this.messagePort.postMessage(message);\n    }\n  }\n\n  public render() {\n    const srcDoc = `<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Atlasmap</title>\n  <base href=\"/dm\">\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body style=\"background: transparent;\">\n  <app-root></app-root>\n  <script type=\"text/javascript\" src=\"${runtime}\"></script>\n  <script type=\"text/javascript\" src=\"${polyfills}\"></script>\n  <script type=\"text/javascript\" src=\"${styles}\"></script>\n  <script type=\"text/javascript\" src=\"${scripts}\"></script>\n  <script type=\"text/javascript\" src=\"${vendor}\"></script>\n  <script type=\"text/javascript\" src=\"${main}\"></script></body>\n</html>\n\n`;\n    // bypass some odd typing incompatibility with base React when using \"exotic\"\n    // html attributes\n    const extraProps = {\n      allowtransparency: '',\n    };\n    return (\n      <iframe\n        srcDoc={srcDoc}\n        style={{ width: '100%', height: '100%' }}\n        frameBorder={0}\n        {...extraProps}\n        ref={el => (this.iframe = el)}\n      />\n    );\n  }\n}\n","import appEn from '../../app/locales/app-translations.en.json';\nimport appIt from '../../app/locales/app-translations.it.json';\nimport connectionsEn from '../../modules/connections/locales/connections-translations.en.json';\nimport connectionsIt from '../../modules/connections/locales/connections-translations.it.json';\nimport customizationsEn from '../../modules/customizations/locales/customizations-translations.en.json';\nimport customizationsIt from '../../modules/customizations/locales/customizations-translations.it.json';\nimport dashboardEn from '../../modules/dashboard/locales/dashboard-translations.en.json';\nimport dashboardIt from '../../modules/dashboard/locales/dashboard-translations.it.json';\nimport dataEn from '../../modules/data/locales/data-translations.en.json';\nimport dataIt from '../../modules/data/locales/data-translations.it.json';\nimport integrationsEn from '../../modules/integrations/locales/integrations-translations.en.json';\nimport integrationsIt from '../../modules/integrations/locales/integrations-translations.it.json';\nimport en from './shared-translations.en.json';\nimport it from './shared-translations.it.json';\n\n// app\nen.en.app = appEn;\nit.it.app = appIt;\n\n// connections\nen.en.modules.connections = connectionsEn;\nit.it.modules.connections = connectionsIt;\n\n// customizations\nen.en.modules.customizations = customizationsEn;\nit.it.modules.customizations = customizationsIt;\n\n// dashboard\nen.en.modules.dashboard = dashboardEn;\nit.it.modules.dashboard = dashboardIt;\n\n// data\nen.en.modules.data = dataEn;\nit.it.modules.data = dataIt;\n\n// integrations\nen.en.modules.integrations = integrationsEn;\nit.it.modules.integrations = integrationsIt;\n\nexport { en, it };\n","import i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { en, it } from './locales';\n\nconst options = {\n  interpolation: {\n    escapeValue: false, // not needed for react!!\n  },\n\n  debug: false,\n\n  resources: {\n    en: {\n      app: en.en.app,\n      connections: en.en.modules.connections,\n      customizations: en.en.modules.customizations,\n      dashboard: en.en.modules.dashboard,\n      data: en.en.modules.data,\n      integrations: en.en.modules.integrations,\n      shared: en.en.shared,\n    },\n    it: {\n      app: it.it.app,\n      connections: it.it.modules.connections,\n      customizations: it.it.modules.customizations,\n      dashboard: it.it.modules.dashboard,\n      data: it.it.modules.data,\n      integrations: it.it.modules.integrations,\n      shared: it.it.shared,\n    },\n  },\n\n  defaultNS: 'shared',\n  fallbackLng: process.env.NODE_ENV === 'production' ? 'en' : 'it',\n  fallbackNS: ['shared'],\n  keySeparator: '.',\n  ns: ['shared', 'app', 'customizations', 'dashboard', 'integrations'],\n} as i18n.InitOptions;\n\ni18n.use(LanguageDetector).init(options);\nexport default i18n;\n","/* tslint:disable:object-literal-sort-keys no-empty-interface */\nimport { getEmptyIntegration, getStep } from '@syndesis/api';\nimport { ConnectionOverview, Integration } from '@syndesis/models';\nimport {\n  makeResolver,\n  makeResolverNoParams,\n  makeResolverNoParamsWithDefaults,\n} from '@syndesis/utils';\nimport {\n  IBaseRouteParams,\n  IBaseRouteState,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState,\n  ISaveIntegrationRouteParams,\n  ISaveIntegrationRouteState,\n  ISelectActionRouteParams,\n  ISelectActionRouteState,\n  ISelectConnectionRouteParams,\n  ISelectConnectionRouteState,\n} from './components/editor/interfaces';\nimport {\n  IActivityPageParams,\n  IActivityPageState,\n  IIntegrationDetailsRouteParams,\n  IMetricsPageParams,\n  IMetricsPageState,\n} from './pages/detail';\nimport routes from './routes';\n\ninterface IEditorIndex {\n  flowId: string;\n  integration: Integration;\n}\n\ninterface IEditorSelectConnection extends IEditorIndex {\n  position: string;\n}\n\ninterface IEditorSelectAction extends IEditorSelectConnection {\n  connection: ConnectionOverview;\n}\n\ninterface IEditorConfigureAction extends IEditorSelectAction {\n  actionId: string;\n  step?: string;\n  updatedIntegration?: Integration;\n}\n\nexport const configureIndexMapper = ({\n  flowId,\n  integration,\n}: IEditorIndex) => ({\n  params: {\n    flowId: flowId ? flowId : integration.flows![0].id!,\n    ...(integration && integration.id ? { integrationId: integration.id } : {}),\n  } as IBaseRouteParams,\n  state: {\n    integration,\n  } as IBaseRouteState,\n});\n\nexport const configureSelectConnectionMapper = ({\n  position,\n  ...rest\n}: IEditorSelectConnection) => {\n  const { params, state } = configureIndexMapper(rest);\n  return {\n    params: {\n      ...params,\n      position,\n    } as ISelectConnectionRouteParams,\n    state,\n  };\n};\n\nexport const configureSelectActionMapper = ({\n  connection,\n  ...rest\n}: IEditorSelectAction) => {\n  const { params, state } = configureSelectConnectionMapper(rest);\n  return {\n    params: {\n      ...params,\n      connectionId: connection.id!,\n    } as ISelectActionRouteParams,\n    state: {\n      ...state,\n      connection,\n    } as ISelectActionRouteState,\n  };\n};\n\nexport const configureConfigureActionMapper = ({\n  actionId,\n  flowId,\n  step,\n  integration,\n  updatedIntegration,\n  position,\n  ...rest\n}: IEditorConfigureAction) => {\n  const { params, state } = configureSelectActionMapper({\n    ...rest,\n    flowId,\n    integration,\n    position,\n  });\n  const positionAsNumber = parseInt(position, 10);\n  const stepObject = getStep(integration, flowId, positionAsNumber) || {};\n  return {\n    params: {\n      ...params,\n      actionId,\n      step: `${step || 0}`,\n    } as IConfigureActionRouteParams,\n    state: {\n      ...state,\n      updatedIntegration,\n      configuredProperties: stepObject.configuredProperties,\n    } as IConfigureActionRouteState,\n  };\n};\n\n// TODO: unit test every single one of these resolvers 😫\n\nexport const listResolver = makeResolverNoParams(routes.list);\n\nexport const manageCicdResolver = makeResolverNoParams(routes.manageCicd.root);\n\nexport const createRootResolver = makeResolverNoParams(routes.create.root);\n\nexport const createStartSelectStepResolver = makeResolverNoParamsWithDefaults<\n  ISelectConnectionRouteParams,\n  ISelectConnectionRouteState\n>(routes.create.start.selectStep, () => {\n  const integration = getEmptyIntegration();\n  return {\n    params: {\n      flowId: integration.flows![0].id!,\n      position: '0',\n    },\n    state: {\n      integration,\n    },\n  };\n});\n\nexport const createStartSelectActionResolver = makeResolver<\n  IEditorSelectAction,\n  ISelectActionRouteParams,\n  ISelectActionRouteState\n>(routes.create.start.connection.selectAction, configureSelectActionMapper);\n\nexport const createStartConfigureActionResolver = makeResolver<\n  IEditorConfigureAction,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState\n>(\n  routes.create.start.connection.configureAction,\n  configureConfigureActionMapper\n);\n\nexport const createFinishSelectStepResolver = makeResolver<\n  IEditorSelectConnection,\n  ISelectConnectionRouteParams,\n  ISelectConnectionRouteState\n>(routes.create.finish.selectStep, configureSelectConnectionMapper);\n\nexport const createFinishSelectActionResolver = makeResolver<\n  IEditorSelectAction,\n  ISelectActionRouteParams,\n  ISelectActionRouteState\n>(routes.create.finish.connection.selectAction, configureSelectActionMapper);\n\nexport const createFinishConfigureActionResolver = makeResolver<\n  IEditorConfigureAction,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState\n>(\n  routes.create.finish.connection.configureAction,\n  configureConfigureActionMapper\n);\n\nexport const createConfigureIndexResolver = makeResolver<\n  IEditorIndex,\n  IBaseRouteParams,\n  IBaseRouteState\n>(routes.create.configure.index, configureIndexMapper);\n\nexport const createConfigureAddStepSelectStepResolver = makeResolver<\n  IEditorSelectConnection,\n  ISelectConnectionRouteParams,\n  ISelectConnectionRouteState\n>(routes.create.configure.addStep.selectStep, configureSelectConnectionMapper);\n\nexport const createConfigureAddStepSelectActionResolver = makeResolver<\n  IEditorSelectAction,\n  ISelectActionRouteParams,\n  ISelectActionRouteState\n>(\n  routes.create.configure.addStep.connection.selectAction,\n  configureSelectActionMapper\n);\n\nexport const createConfigureAddStepConfigureActionResolver = makeResolver<\n  IEditorConfigureAction,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState\n>(\n  routes.create.configure.addStep.connection.configureAction,\n  configureConfigureActionMapper\n);\n\nexport const createConfigureEditStepSelectActionResolver = makeResolver<\n  IEditorSelectAction,\n  ISelectActionRouteParams,\n  ISelectActionRouteState\n>(\n  routes.create.configure.editStep.connection.selectAction,\n  configureSelectActionMapper\n);\n\nexport const createConfigureEditStepConfigureActionResolver = makeResolver<\n  IEditorConfigureAction,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState\n>(\n  routes.create.configure.editStep.connection.configureAction,\n  configureConfigureActionMapper\n);\n\nexport const createConfigureEditStepSaveAndPublishResolver = makeResolver<\n  { integration: Integration },\n  null,\n  ISaveIntegrationRouteState\n>(routes.create.configure.saveAndPublish, ({ integration }) => ({\n  params: null,\n  state: {\n    integration,\n  },\n}));\n\nexport const integrationActivityResolver = makeResolver<\n  { integration: Integration },\n  IActivityPageParams,\n  IActivityPageState\n>(routes.integration.activity, ({ integration }) => ({\n  params: {\n    integrationId: integration.id!,\n  },\n  state: {\n    integration,\n  },\n}));\n\nexport const integrationDetailsResolver = makeResolver<\n  { integrationId: string },\n  IIntegrationDetailsRouteParams,\n  null\n>(routes.integration.details, ({ integrationId }) => ({\n  params: {\n    integrationId,\n  },\n}));\n\nexport const integrationEditIndexResolver = makeResolver<\n  IEditorIndex,\n  IBaseRouteParams,\n  IBaseRouteState\n>(routes.integration.edit.index, configureIndexMapper);\n\nexport const integrationEditAddStepSelectStepResolver = makeResolver<\n  IEditorSelectConnection,\n  ISelectConnectionRouteParams,\n  ISelectConnectionRouteState\n>(routes.integration.edit.addStep.selectStep, configureSelectConnectionMapper);\n\nexport const integrationEditAddStepSelectActionResolver = makeResolver<\n  IEditorSelectAction,\n  ISelectActionRouteParams,\n  ISelectConnectionRouteState\n>(\n  routes.integration.edit.addStep.connection.selectAction,\n  configureSelectActionMapper\n);\n\nexport const integrationEditAddStepConfigureActionResolver = makeResolver<\n  IEditorConfigureAction,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState\n>(\n  routes.integration.edit.addStep.connection.configureAction,\n  configureConfigureActionMapper\n);\n\nexport const integrationEditEditStepSelectActionResolver = makeResolver<\n  IEditorSelectAction,\n  ISelectActionRouteParams,\n  ISelectActionRouteState\n>(\n  routes.integration.edit.editStep.connection.selectAction,\n  configureSelectActionMapper\n);\n\nexport const integrationEditEditStepConfigureActionResolver = makeResolver<\n  IEditorConfigureAction,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState\n>(\n  routes.integration.edit.editStep.connection.configureAction,\n  configureConfigureActionMapper\n);\n\nexport const integrationEditSaveAndPublish = makeResolver<\n  IEditorIndex,\n  ISaveIntegrationRouteParams,\n  ISaveIntegrationRouteState\n>(routes.integration.edit.saveAndPublish, configureIndexMapper);\n\nexport const metricsResolver = makeResolver<\n  { integration: Integration },\n  IMetricsPageParams,\n  IMetricsPageState\n>(routes.integration.metrics, ({ integration }) => ({\n  params: {\n    integrationId: integration.id!,\n  },\n  state: {\n    integration,\n  },\n}));\n\nexport default {\n  list: listResolver,\n  manageCicd: {\n    root: manageCicdResolver,\n  },\n  create: {\n    root: createRootResolver,\n    start: {\n      selectStep: createStartSelectStepResolver,\n      connection: {\n        selectAction: createStartSelectActionResolver,\n        configureAction: createStartConfigureActionResolver,\n      },\n    },\n    finish: {\n      selectStep: createFinishSelectStepResolver,\n      connection: {\n        selectAction: createFinishSelectActionResolver,\n        configureAction: createFinishConfigureActionResolver,\n      },\n    },\n    configure: {\n      index: createConfigureIndexResolver,\n      addStep: {\n        selectStep: createConfigureAddStepSelectStepResolver,\n        connection: {\n          selectAction: createConfigureAddStepSelectActionResolver,\n          configureAction: createConfigureAddStepConfigureActionResolver,\n        },\n      },\n      editStep: {\n        index: 'todo',\n        connection: {\n          selectAction: createConfigureEditStepSelectActionResolver,\n          configureAction: createConfigureEditStepConfigureActionResolver,\n        },\n      },\n      saveAndPublish: createConfigureEditStepSaveAndPublishResolver,\n    },\n  },\n  integration: {\n    activity: integrationActivityResolver,\n    details: integrationDetailsResolver,\n    edit: {\n      index: integrationEditIndexResolver,\n      addStep: {\n        selectStep: integrationEditAddStepSelectStepResolver,\n        connection: {\n          selectAction: integrationEditAddStepSelectActionResolver,\n          configureAction: integrationEditAddStepConfigureActionResolver,\n        },\n      },\n      editStep: {\n        index: 'todo',\n        connection: {\n          selectAction: integrationEditEditStepSelectActionResolver,\n          configureAction: integrationEditEditStepConfigureActionResolver,\n        },\n      },\n      saveAndPublish: integrationEditSaveAndPublish,\n    },\n    metrics: metricsResolver,\n  },\n};\n","import { UnrecoverableError } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\n\nexport interface IApiErrorProps {\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\nexport const ApiError: React.SFC<IApiErrorProps> = props => (\n  <Translation ns={['shared']}>\n    {t => (\n      <UnrecoverableError\n        i18nTitle={t('error.title')}\n        i18nInfo={'error.info'}\n        i18nHelp={'error.help'}\n        i18nRefreshLabel={'error.refreshButton'}\n        i18nReportIssue={'error.reportIssueButton'}\n        error={props.error}\n        errorInfo={props.errorInfo}\n      />\n    )}\n  </Translation>\n);\n","import { Loader, UnrecoverableError } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { LoadingComponentProps } from 'react-loadable';\n\nexport class ModuleLoader extends React.Component<LoadingComponentProps> {\n  public render() {\n    if (this.props.error || this.props.timedOut) {\n      console.error(this.props.error); // tslint:disable-line\n      return (\n        <Translation ns={['shared']}>\n          {t => (\n            <UnrecoverableError\n              i18nTitle={t('error.title')}\n              i18nInfo={t('error.info')}\n              i18nHelp={t('error.help')}\n              i18nRefreshLabel={t('error.refreshButton')}\n              i18nReportIssue={t('shared:error.reportIssueButton')}\n              i18nShowErrorInfoLabel={t('error.showErrorInfoButton')}\n              error={this.props.error}\n            />\n          )}\n        </Translation>\n      );\n    } else if (this.props.pastDelay) {\n      return <Loader />;\n    }\n    return null;\n  }\n}\n","import { UnrecoverableError } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\n\nexport const PageNotFound: React.FC = () => (\n  <Translation ns={['shared']}>\n    {t => (\n      <UnrecoverableError\n        i18nTitle={t('404.title')}\n        i18nInfo={t('404.info')}\n        i18nHelp={t('404.help')}\n        i18nRefreshLabel={t('404.refreshButton')}\n        i18nReportIssue={t('404.reportIssueButton')}\n      />\n    )}\n  </Translation>\n);\n","import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { AppContext } from '../app';\n\nexport interface IPageTitleProps {\n  /**\n   * The page title. Don't append or prepend the application name, the right one\n   * will be added automatically.\n   */\n  title: string;\n}\n\n/**\n * A component to set the title in the document metadata. This title will be\n * visible in the browser's title bar, tab and history.\n * @see [title]{@link IPageTitleProps#title}\n */\nexport class PageTitle extends React.PureComponent<IPageTitleProps> {\n  public render() {\n    return (\n      <AppContext.Consumer>\n        {({ config }) => (\n          <Helmet>\n            <title>{`${this.props.title} - ${config.title ||\n              'Syndesis'}`}</title>\n          </Helmet>\n        )}\n      </AppContext.Consumer>\n    );\n  }\n}\n","import * as React from 'react';\nimport { AppContext } from '../app';\n\n/**\n * This component will automatically close the app left navigation bar when\n * mounted in the DOM, and will reopen it when unmounted.\n *\n * If you need this behaviour for a whole section, keep this component high in\n * the DOM tree, ideally before any component that will re-render on his\n * lifecycle - like data fetching components - to avoid firing quick unmount/mount\n * events that will lead to a bad UX.\n */\nexport const WithClosedNavigation: React.FunctionComponent = ({ children }) => {\n  const context = React.useContext(AppContext);\n  React.useEffect(() => {\n    context.hideNavigation();\n\n    return () => {\n      context.showNavigation();\n    };\n  }, []);\n  return <>{children}</>;\n};\n","import { UnrecoverableError } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\n\nexport interface IWithErrorBoundaryState {\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n  errorComponent?: React.ReactElement<{\n    error: Error;\n    errorInfo: React.ErrorInfo;\n  }>;\n}\n\nexport class WithErrorBoundary extends React.Component<\n  any,\n  IWithErrorBoundaryState\n> {\n  public state: IWithErrorBoundaryState = {};\n\n  public componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n    this.setState({\n      error,\n      errorInfo,\n    });\n  }\n\n  public componentWillReceiveProps(\n    nextProps: Readonly<any>,\n    nextContext: any\n  ): void {\n    this.setState({\n      error: undefined,\n      errorInfo: undefined,\n    });\n  }\n\n  public render() {\n    return this.state.error && this.state.errorInfo ? (\n      this.props.errorComponent ? (\n        React.createElement(this.props.errorComponent, {\n          error: this.state.error,\n          errorInfo: this.state.errorInfo,\n        })\n      ) : (\n        <Translation ns={['shared']}>\n          {t => (\n            <UnrecoverableError\n              i18nTitle={t('error.title')}\n              i18nInfo={t('error.info')}\n              i18nHelp={t('error.help')}\n              i18nRefreshLabel={t('error.refreshButton')}\n              i18nReportIssue={t('shared:error.reportIssueButton')}\n              i18nShowErrorInfoLabel={t('error.showErrorInfoButton')}\n              error={this.state.error}\n              errorInfo={this.state.errorInfo}\n            />\n          )}\n        </Translation>\n      )\n    ) : (\n      this.props.children\n    );\n  }\n}\n","export * from './ApiError';\nexport * from './ModuleLoader';\nexport * from './PageNotFound';\nexport * from './PageTitle';\nexport * from './WithClosedNavigation';\nexport * from './WithErrorBoundary';\n","/* tslint:disable:object-literal-sort-keys */\nimport { include } from 'named-urls';\n\nconst stepRoutes = {\n  // step 1\n  selectStep: '',\n  // if selected step is api provider\n  apiProvider: include('api-provider', {\n    specification: 'specification',\n    review: 'review',\n    edit: 'edit',\n    save: 'save',\n  }),\n  // if selected step kind is data mapper\n  dataMapper: 'mapper',\n  // if selected step kind is basic filter\n  basicFilter: 'filter',\n  // if selected step kind is template\n  template: 'template',\n  // if selected step kind is step\n  step: 'step',\n  // if selected step kind is endpoint\n  connection: include('connection/:connectionId', {\n    selectAction: 'action',\n    configureAction: 'action/:actionId/step/:step',\n    // if 'any' data shape\n    describeData: 'describe-data/:position/:direction(input|output)',\n  }),\n};\n\n/**\n * Both the integration creator and editor share the same routes when the creator\n * reaches the third step in the wizard. This object is to keep them DRY.\n */\nconst editorRoutes = include('flow/:flowId', {\n  index: 'add-step',\n  addStep: include('position/:position/connection', stepRoutes),\n  editStep: include('position/:position/edit-connection', stepRoutes),\n  saveAndPublish: 'save',\n  root: '',\n});\n\nexport default include('/integrations', {\n  list: '',\n  manageCicd: include('manageCicd', { root: '' }),\n  import: include('import', { root: '' }),\n  create: include('create', {\n    start: include('start/flow/:flowId/position/:position', stepRoutes),\n    finish: include('finish/flow/:flowId/position/:position', stepRoutes),\n    configure: include('configure', editorRoutes),\n    root: '',\n  }),\n  integration: include(':integrationId', {\n    details: 'details',\n    activity: 'activity',\n    metrics: 'metrics',\n    edit: include('edit', editorRoutes),\n    root: '',\n  }),\n});\n","import { Step } from '@syndesis/models';\nimport {\n  ButtonLink,\n  IntegrationEditorStepsList,\n  IntegrationEditorStepsListItem,\n  IntegrationFlowAddStep,\n} from '@syndesis/ui';\nimport * as H from 'history';\nimport * as React from 'react';\n\nexport interface IIntegrationEditorStepAdderProps {\n  /**\n   * the list of steps to render.\n   */\n  steps: Step[];\n  /**\n   * a callback to get the `LocationDescriptor` that should be reached when\n   * clicking the Add Connection button\n   * @param idx - the zero-based index where a new connection should be added\n   */\n  addStepHref: (idx: number) => H.LocationDescriptor;\n  /**\n   * a callback to get the `LocationDescriptor` that should be reached when\n   * clicking the Edit Step button\n   * @param stepIdx - the zero-based index of the integration step that should\n   * be edited\n   * @param step - the integration step object that should be edited\n   */\n  // tslint:disable-next-line:react-unused-props-and-state\n  configureStepHref: (stepIdx: number, step: Step) => H.LocationDescriptor;\n}\n\n/**\n * A component to render the steps of an integration with the required action\n * buttons to add a new step, edit an existing one, etc.\n *\n * @see [steps]{@link IIntegrationEditorStepAdderProps#steps}\n * @see [addStepHref]{@link IIntegrationEditorStepAdderProps#addStepHref}\n * @see [addStepHref]{@link IIntegrationEditorStepAdderProps#addStepHref}\n * @see [configureStepHref]{@link IIntegrationEditorStepAdderProps#configureStepHref}\n *\n * @todo add the delete step button\n */\nexport class IntegrationEditorStepAdder extends React.Component<\n  IIntegrationEditorStepAdderProps\n> {\n  public render() {\n    return (\n      <IntegrationEditorStepsList>\n        {this.props.steps.map((s, idx) => {\n          return (\n            <React.Fragment key={idx}>\n              <IntegrationEditorStepsListItem\n                stepName={s.connection!.connector!.name}\n                stepDescription={s.action!.name}\n                icon={<img src={s.connection!.icon} width={24} height={24} />}\n                actions={\n                  <>\n                    <ButtonLink href={this.props.configureStepHref(idx, s)}>\n                      Configure\n                    </ButtonLink>\n                    <ButtonLink href={'#'} as={'danger'}>\n                      <i className=\"fa fa-trash\" />\n                    </ButtonLink>\n                  </>\n                }\n              />\n              {idx < this.props.steps.length - 1 && (\n                <IntegrationFlowAddStep\n                  active={false}\n                  showDetails={false}\n                  addStepHref={this.props.addStepHref(idx + 1)}\n                  i18nAddStep={'Add a step'}\n                />\n              )}\n            </React.Fragment>\n          );\n        })}\n      </IntegrationEditorStepsList>\n    );\n  }\n}\n","import { include } from 'named-urls';\n\nexport default include('/', {\n  root: '',\n});\n","/* tslint:disable:object-literal-sort-keys no-empty-interface */\nimport { reverse } from 'named-urls';\nimport routes from './routes';\n\n/**\n * Creates a function that takes a route and some `data` `T` that returns the\n * reversed URL.\n * @param route\n *\n * @todo perhaps move in the @syndesis/utils package?\n */\nfunction makeResolverNoParams(route: string) {\n  return () => reverse(route);\n}\n\n// TODO: unit test every single one of these resolvers 😫\nexport default {\n  root: makeResolverNoParams(routes.root),\n};\n","import connections from './connections/resolvers';\nimport customizations from './customizations/resolvers';\nimport dashboard from './dashboard/resolvers';\nimport data from './data/resolvers';\nimport integrations from './integrations/resolvers';\n\nexport default {\n  connections,\n  customizations,\n  dashboard,\n  data,\n  integrations,\n};\n","import { Icon, MessageDialog } from 'patternfly-react';\nimport * as React from 'react';\n\n/**\n * Icon type enum that maps to patternfly icon types\n */\nexport enum ConfirmationIconType {\n  DANGER = 'error-circle-o',\n  WARNING = 'warning-triangle-o',\n  INFO = 'info',\n  OK = 'ok',\n  NONE = 'NONE',\n}\n\n/**\n * Button style enum that maps to patternfly button classes\n */\nexport enum ConfirmationButtonStyle {\n  NORMAL = 'primary',\n  SUCCESS = 'success',\n  DANGER = 'danger',\n  WARNING = 'warning',\n  INFO = 'info',\n  LINK = 'link',\n}\n\n/**\n * A dialog that can be used to obtain user confirmation when deleting an object.\n */\nexport interface IConfirmationDialogProps {\n  /**\n   * The style of button to use for the primary action\n   */\n  buttonStyle: ConfirmationButtonStyle;\n  /**\n   * The localized cancel button text.\n   */\n  i18nCancelButtonText: string;\n\n  /**\n   * The localized confirmation button text.\n   */\n  i18nConfirmButtonText: string;\n\n  /**\n   * The localized confirmation message.\n   */\n  i18nConfirmationMessage: string;\n\n  /**\n   * An optional localized message providing more details.\n   */\n  i18nDetailsMessage?: string;\n\n  /**\n   * The localized dialog title.\n   */\n  i18nTitle: string;\n\n  /**\n   * The icon type to use, or unset for no icon\n   */\n  icon: ConfirmationIconType;\n\n  /**\n   * A callback for when the cancel button is clicked. Caller should hide dialog.\n   */\n  onCancel: () => void;\n\n  /**\n   * A callback for when the confirmation button is clicked. Caller should hide dialog.\n   */\n  onConfirm: () => void;\n\n  /**\n   * Indicates if the dialog should be visible.\n   */\n  showDialog: boolean;\n}\n\n/**\n * A modal dialog to display when an object is being deleted.\n */\nexport class ConfirmationDialog extends React.Component<\n  IConfirmationDialogProps\n> {\n  public render() {\n    return (\n      <MessageDialog\n        accessibleName=\"deleteConfirmationDialog\"\n        accessibleDescription=\"deleteConfirmationDialogContent\"\n        icon={\n          this.props.icon !== ConfirmationIconType.NONE && (\n            <Icon type=\"pf\" name={this.props.icon} />\n          )\n        }\n        onHide={this.props.onCancel}\n        primaryAction={this.props.onConfirm}\n        primaryActionButtonContent={this.props.i18nConfirmButtonText}\n        primaryActionButtonBsStyle={this.props.buttonStyle}\n        primaryContent={\n          <p className=\"lead\">{this.props.i18nConfirmationMessage}</p>\n        }\n        secondaryAction={this.props.onCancel}\n        secondaryActionButtonContent={this.props.i18nCancelButtonText}\n        secondaryContent={\n          this.props.i18nDetailsMessage ? (\n            <p>{this.props.i18nDetailsMessage}</p>\n          ) : (\n            undefined\n          )\n        }\n        show={this.props.showDialog}\n        title={this.props.i18nTitle}\n      />\n    );\n  }\n}\n","import {\n  AggregateStatusCount,\n  AggregateStatusNotification,\n  AggregateStatusNotifications,\n  Card,\n  Icon,\n} from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IAggregatedMetricProps {\n  title: string;\n  ok: number;\n  error: number;\n}\n\nexport class AggregatedMetricCard extends React.PureComponent<\n  IAggregatedMetricProps\n> {\n  public render() {\n    return (\n      <Card accented={true} aggregated={true} matchHeight={true}>\n        <Card.Title>\n          <AggregateStatusCount>\n            <span data-testid=\"aggregate-title\">{this.props.title}</span>\n          </AggregateStatusCount>\n        </Card.Title>\n        <Card.Body>\n          <AggregateStatusNotifications>\n            <AggregateStatusNotification>\n              <Icon type=\"pf\" name=\"ok\" />\n              <span data-testid=\"aggregate-ok-count\">{this.props.ok}</span>{' '}\n            </AggregateStatusNotification>\n            <AggregateStatusNotification>\n              <Icon type=\"pf\" name=\"error-circle-o\" />\n              <span data-testid=\"aggregate-error-count\">\n                {this.props.error}\n              </span>\n            </AggregateStatusNotification>\n          </AggregateStatusNotifications>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n","import { MessageDialog } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IDialogProps {\n  body: any;\n  footer: any;\n  onHide: () => void;\n  title: string;\n}\n\nexport class Dialog extends React.Component<IDialogProps> {\n  public render() {\n    return (\n      <MessageDialog\n        title={this.props.title}\n        primaryContent={this.props.body}\n        footer={this.props.footer}\n        show={true}\n        onHide={this.props.onHide}\n      />\n    );\n  }\n}\n","import classnames from 'classnames';\nimport * as React from 'react';\n\nexport interface IContainerProps {\n  className?: string;\n  [key: string]: any;\n}\n\nexport const Container: React.FunctionComponent<IContainerProps> = ({\n  children,\n  className,\n  ...props\n}) => (\n  <div className={classnames('container-fluid', className)} {...props}>\n    {children}\n  </div>\n);\n","import { Grid, Icon } from 'patternfly-react';\nimport * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport { Container } from '../Layout/Container';\nimport './DndFileChooser.css';\nimport { INotification, INotificationType } from './Notifications';\n\n/**\n * The properties of the `DndFileChooser`.\n */\nexport interface IDndFileChooserProps {\n  /**\n   * Indicates if multiple files can be added. Defaults to `false`.\n   */\n  allowMultiple?: boolean;\n\n  /**\n   * `true` if the dropzone should be disabled. Defaults to `false`.\n   */\n  disableDropzone: boolean;\n\n  /**\n   * A comma delimited string of file extensions. For example, '.jar,.txt'. Defaults to any file extension.\n   */\n  fileExtensions?: string;\n\n  /**\n   * The localized text that appears below the selected file information at the bottom of the drop area.\n   */\n  i18nHelpMessage?: string;\n\n  /**\n   * The localized text (may include HTML tags) that appears above the selected file information at the\n   * top of the drop area.\n   */\n  i18nInstructions: string;\n\n  /**\n   * The localized text that appears when no file has been selected.\n   */\n  i18nNoFileSelectedMessage: string;\n\n  /**\n   * The localized text for the label that appears before the selected file information.\n   */\n  i18nSelectedFileLabel: string;\n\n  /**\n   * A general, localized message for when a file upload failed. This message will be shown\n   * along with an error icon and appears next to the selected file message. If this property\n   * is set then `i18nUploadSuccessMessage` should not be set.\n   */\n  i18nUploadFailedMessage?: string;\n\n  /**\n   * A list of error messages for failed uploads\n   */\n  i18nUploadFailedMessages?: string[];\n\n  /**\n   * A general, localized message for when a file upload was successful. This message will be shown\n   * along with an OK icon and appear next to the selected file message. If this property\n   * is set then `i18nUploadFailedMessage` should not be set.\n   */\n  i18nUploadSuccessMessage?: string;\n\n  /**\n   * A list of error messages for successful uploads\n   */\n  i18nUploadSuccessMessages?: string[];\n\n  /**\n   * Obtains the localized text (may include HTML tags) that appears when the file upload was rejected. This\n   * will occur when a DnD of a file with the wrong extension is dropped. This message is presented\n   * as a timed toast notification.\n   */\n  onUploadRejected(fileName: string): string;\n\n  /**\n   * Callback for when one or more file uploads have been accepted. Caller should handler processing of the files.\n   */\n  onUploadAccepted(file: File[]): void;\n}\n\n/**\n * The state properties of the `DndFileChooser`.\n */\nexport interface IDndFileChooserState {\n  /**\n   * The files that were uploaded successfully. Defaults to an empty array.\n   */\n  files: File[];\n\n  /**\n   * The error notifications for rejected files. After a toast is displayed for a notification it is removed\n   * from the array.\n   */\n  notifications: INotification[];\n}\n\n/**\n * A component that can be used to upload files. Files can be uploaded by clicking in the drop zone or by\n * drag and dropping files into the drop zone.\n */\nexport class DndFileChooser extends React.Component<\n  IDndFileChooserProps,\n  IDndFileChooserState\n> {\n  // setup default prop values\n  public static defaultProps = {\n    allowMultiple: false,\n  };\n\n  public constructor(props: IDndFileChooserProps) {\n    super(props);\n\n    // set up initial state\n    this.state = {\n      files: [],\n      notifications: [],\n    };\n\n    this.handleAcceptedFiles = this.handleAcceptedFiles.bind(this);\n    this.handleRejectedFiles = this.handleRejectedFiles.bind(this);\n  }\n\n  /**\n   * Obtains an element that lists the names of the files that have been uploaded.\n   */\n  public getSelectedFileMessage(): JSX.Element {\n    // one file uploaded\n    if (this.state.files.length === 1) {\n      return <Container>{this.state.files[0].name}</Container>;\n    }\n\n    // multiple files uploaded\n    if (this.state.files.length > 1) {\n      return (\n        <ul>\n          {this.state.files.map((file, index) => (\n            <li key={index}>{file.name}</li>\n          ))}\n        </ul>\n      );\n    }\n\n    // no files uploaded\n    return <Container>{this.props.i18nNoFileSelectedMessage}</Container>;\n  }\n\n  /**\n   * Obtains an element that indicates the if the upload was successful.\n   */\n  public getUploadMessage(): JSX.Element {\n    if (this.props.i18nUploadSuccessMessage) {\n      return (\n        <span className=\"dnd-file-chooser__uploadMessage\">\n          <Icon type=\"pf\" name=\"ok\" />\n          &nbsp;{this.props.i18nUploadSuccessMessage}\n        </span>\n      );\n    }\n    if (this.props.i18nUploadFailedMessage) {\n      return (\n        <span className=\"dnd-file-chooser__uploadMessage\">\n          <Icon type=\"pf\" name=\"error-circle-o\" />\n          &nbsp;{this.props.i18nUploadFailedMessage}\n        </span>\n      );\n    }\n    if (\n      this.props.i18nUploadSuccessMessages &&\n      this.props.i18nUploadFailedMessages\n    ) {\n      return (\n        <ul>\n          {this.props.i18nUploadSuccessMessages!.map((message, idx) => (\n            <li\n              key={'success' + idx}\n              className=\"dnd-file-chooser__uploadMessage\"\n            >\n              <Icon type=\"pf\" name=\"ok\" />\n              &nbsp;{message}\n            </li>\n          ))}\n          {this.props.i18nUploadFailedMessages!.map((message, idx) => (\n            <li key={'fail' + idx} className=\"dnd-file-chooser__uploadMessage\">\n              <Icon type=\"pf\" name=\"error-circle-o\" />\n              &nbsp;{message}\n            </li>\n          ))}\n        </ul>\n      );\n    }\n    // no message\n    return <Container />;\n  }\n\n  /**\n   * Callback for when one or more files were uploaded successfully.\n   * @param acceptedFiles the files that have been uploaded\n   */\n  public handleAcceptedFiles(acceptedFiles: File[]) {\n    this.setState({ ...this.state, files: acceptedFiles });\n    this.props.onUploadAccepted(acceptedFiles); // notify callback\n  }\n\n  /**\n   * Callback for when one or more files were rejected.\n   * @param rejectedFiles the files that were rejected\n   */\n  public handleRejectedFiles(rejectedFiles: File[]) {\n    const notifications = rejectedFiles.map(file => ({\n      key: file.name,\n      message: this.props.onUploadRejected(file.name),\n      type: 'error' as INotificationType,\n    }));\n\n    // If single file dropped then all files will be cleared. If multiple allowed, and multiple dropped,\n    // and some are accepted and some are rejected, the accepted files will still be uploaded because the\n    // handleAcceptedFiles is called after this method.\n    this.setState({\n      ...this.state,\n      files: [],\n      notifications: [...this.state.notifications, ...notifications],\n    });\n  }\n\n  public render() {\n    return (\n      <Dropzone\n        accept={this.props.fileExtensions}\n        disabled={this.props.disableDropzone}\n        multiple={this.props.allowMultiple}\n        onDropAccepted={this.handleAcceptedFiles}\n        onDropRejected={this.handleRejectedFiles}\n      >\n        {({ getRootProps, getInputProps }) => (\n          <Container>\n            <Grid\n              disabled={this.props.disableDropzone}\n              fluid={true}\n              className=\"dnd-file-chooser\"\n              {...getRootProps({ refKey: 'dnd-file-chooser' })}\n            >\n              <Grid.Row>\n                <Grid.Col\n                  className=\"dnd-file-chooser__instructions\"\n                  dangerouslySetInnerHTML={{\n                    __html: this.props.i18nInstructions,\n                  }}\n                />\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col>\n                  <input {...getInputProps()} />\n                </Grid.Col>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col\n                  className=\"dnd-file-chooser__selectedFileLabel\"\n                  xs={3}\n                >\n                  {this.props.i18nSelectedFileLabel}\n                </Grid.Col>\n                <Grid.Col className=\"dnd-file-chooser__selectedFile\" xs={6}>\n                  {this.getSelectedFileMessage()}\n                </Grid.Col>\n                <Grid.Col xs={3}>{this.getUploadMessage()}</Grid.Col>\n              </Grid.Row>\n              {this.props.i18nHelpMessage ? (\n                <Grid.Row>\n                  <Grid.Col className=\"dnd-file-chooser__helpText\">\n                    {this.props.i18nHelpMessage}\n                  </Grid.Col>\n                </Grid.Row>\n              ) : null}\n            </Grid>\n          </Container>\n        )}\n      </Dropzone>\n    );\n  }\n}\n","import {\n  Nav,\n  NavList,\n  Page,\n  PageHeader,\n  PageSection,\n  PageSidebar,\n} from '@patternfly/react-core';\nimport * as React from 'react';\n\nexport interface ILayoutBase {\n  appTitle: string;\n  pictograph: any;\n  appNav: any;\n  verticalNav: any[];\n  logoHref: string;\n  showNavigation: boolean;\n  onNavigationCollapse(): void;\n  onNavigationExpand(): void;\n}\n\nexport interface ILayoutState {\n  isNavOpen: boolean;\n}\n\nexport class AppLayout extends React.Component<ILayoutBase, ILayoutState> {\n  public onNavToggle: () => void;\n  constructor(props: ILayoutBase) {\n    super(props);\n    this.state = {\n      isNavOpen: true,\n    };\n    this.onNavToggle = () => {\n      this.setState({\n        isNavOpen: !this.state.isNavOpen,\n      });\n    };\n  }\n\n  public componentDidMount() {\n    this.setState({\n      isNavOpen: this.props.showNavigation,\n    });\n  }\n\n  public render() {\n    const { isNavOpen } = this.state;\n\n    const Header = (\n      <PageHeader\n        logo={this.props.pictograph}\n        logoProps={{ href: '/' }}\n        toolbar={this.props.appNav}\n        showNavToggle={true}\n        isNavOpen={isNavOpen}\n        onNavToggle={this.onNavToggle}\n      />\n    );\n    const Sidebar = (\n      <PageSidebar\n        nav={\n          <Nav>\n            <NavList>{this.props.verticalNav}</NavList>\n          </Nav>\n        }\n        isNavOpen={isNavOpen}\n      />\n    );\n\n    return (\n      <Page header={Header} sidebar={Sidebar}>\n        <PageSection>{this.props.children}</PageSection>\n      </Page>\n    );\n  }\n}\n","import { Dropdown, DropdownToggle } from '@patternfly/react-core';\nimport * as React from 'react';\n\nexport interface IAppTopMenuProps {\n  username: string;\n  children: any;\n}\n\nexport interface IAppTopMenuState {\n  isOpen: boolean;\n}\n\n/**\n * A component to show the logged in user menu.\n */\nexport class AppTopMenu extends React.Component<\n  IAppTopMenuProps,\n  IAppTopMenuState\n> {\n  public state = {\n    isOpen: false,\n  };\n  public onToggle = (isOpen: boolean) => {\n    this.setState({\n      isOpen,\n    });\n  };\n  public onSelect = (event: React.SyntheticEvent<HTMLDivElement, Event>) => {\n    this.setState({\n      isOpen: !this.state.isOpen,\n    });\n  };\n  public render() {\n    const { children, username } = this.props;\n    return (\n      <Dropdown\n        isPlain={true}\n        onSelect={this.onSelect}\n        toggle={\n          <DropdownToggle onToggle={this.onToggle}>{username}</DropdownToggle>\n        }\n        isOpen={this.state.isOpen}\n        dropdownItems={React.Children.toArray(children)}\n      />\n    );\n  }\n}\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport classnames from 'classnames';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface IButtonLinkProps {\n  onClick?: (e: React.MouseEvent<any>) => void;\n  href?: H.LocationDescriptor;\n  className?: string;\n  disabled?: boolean;\n  as?:\n    | 'default'\n    | 'primary'\n    | 'success'\n    | 'info'\n    | 'warning'\n    | 'danger'\n    | 'link';\n  size?: 'lg' | 'sm' | 'xs';\n  [key: string]: any;\n}\n\nexport const ButtonLink: React.FunctionComponent<IButtonLinkProps> = ({\n  onClick,\n  href,\n  className,\n  disabled,\n  as = 'default',\n  size,\n  children,\n  ...props\n}) => {\n  className = classnames('btn', `btn-${as}`, className, {\n    'btn-lg': size === 'lg',\n    'btn-sm': size === 'sm',\n    'btn-xs': size === 'xs',\n  });\n  return href && !disabled ? (\n    <Link to={href} onClick={onClick} className={className} {...props}>\n      {children}\n    </Link>\n  ) : (\n    <button\n      onClick={onClick}\n      className={className}\n      disabled={disabled || (!onClick && !href)}\n    >\n      {children}\n    </button>\n  );\n};\n","import classnames from 'classnames';\nimport { Spinner } from 'patternfly-react';\nimport * as React from 'react';\n\nimport './Loader.css';\n\nexport interface ILoaderProps {\n  inline?: boolean;\n  inverse?: boolean;\n  loading?: boolean;\n  size?: 'lg' | 'md' | 'sm' | 'xs';\n}\n\nexport class Loader extends React.PureComponent<ILoaderProps> {\n  public static defaultProps = {\n    inline: false,\n    inverse: false,\n    loading: true,\n    size: 'lg',\n  };\n\n  public render() {\n    return (\n      <div\n        className={classnames('Loader', {\n          'is-block': !this.props.inline,\n          'is-inline': this.props.inline,\n        })}\n      >\n        <Spinner\n          loading={this.props.loading}\n          size={this.props.size}\n          inline={this.props.inline}\n          inverse={this.props.inverse}\n        />\n      </div>\n    );\n  }\n}\n","import * as H from 'history';\nimport * as React from 'react';\nimport { Route } from 'react-router';\nimport { Link } from 'react-router-dom';\n\ninterface INavLink {\n  activeClassName?: string;\n  activeStyle?: any;\n  className?: string;\n  exact?: boolean;\n  isActive?: (match: any, location: any) => boolean;\n  location?: any;\n  strict?: boolean;\n  style?: any;\n  to: H.LocationDescriptor;\n  label: any;\n  children?: any;\n}\n\nfunction joinClassnames(...classnames: Array<string | undefined>): string {\n  return classnames.filter(i => i).join(' ');\n}\n\nexport const PfNavLink = ({\n  activeClassName = 'active',\n  activeStyle,\n  className: classNameProp,\n  exact,\n  isActive: isActiveProp,\n  location,\n  strict,\n  style: styleProp,\n  to,\n  label,\n  children,\n  ...rest\n}: INavLink) => {\n  const path = typeof to === 'object' ? to.pathname : to;\n\n  // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n  const escapedPath = path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1');\n\n  const NavLinkChildren = ({\n    location: childLocation,\n    match,\n  }: {\n    location: any;\n    match: any;\n  }) => {\n    const isActive = !!(isActiveProp\n      ? isActiveProp(match, childLocation)\n      : match);\n\n    const className = isActive\n      ? joinClassnames(classNameProp, activeClassName)\n      : classNameProp;\n    const style = isActive ? { ...styleProp, ...activeStyle } : styleProp;\n\n    return (\n      <li className={className}>\n        <Link style={style} to={to} children={label} {...rest} />\n        {children}\n      </li>\n    );\n  };\n\n  return (\n    <Route\n      path={escapedPath}\n      exact={exact}\n      strict={strict}\n      location={location}\n      children={NavLinkChildren}\n    />\n  );\n};\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { Route } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nexport interface IPfVerticalNavItem {\n  className?: string;\n  exact?: boolean;\n  isActive?: (match: any, location: any) => boolean;\n  icon: string;\n  location?: any;\n  strict?: boolean;\n  to: string | any;\n  label: any;\n  children?: any;\n}\n\nfunction PfVerticalNavItem({\n  className,\n  exact,\n  isActive: isActiveProp,\n  icon,\n  location,\n  strict,\n  to,\n  label,\n  children,\n  ...rest\n}: IPfVerticalNavItem) {\n  const path = typeof to === 'object' ? to.pathname : to;\n\n  // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n  const escapedPath = path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1');\n\n  const NavLinkViewTemplate = ({\n    location: childLocation,\n    match,\n  }: {\n    location: any;\n    match: any;\n  }) => {\n    const isActive = !!(isActiveProp\n      ? isActiveProp(match, childLocation)\n      : match);\n\n    return (\n      <li className={'pf-c-nav__item'}>\n        <Link\n          to={to}\n          className={classNames('pf-c-nav__link', {\n            ['pf-m-current']: isActive,\n          })}\n          aria-current={isActive ? 'page' : undefined}\n          children={<>{label}</>}\n          {...rest}\n        />\n        {children}\n      </li>\n    );\n  };\n\n  return (\n    <Route\n      path={escapedPath}\n      exact={exact}\n      strict={strict}\n      location={location}\n      children={NavLinkViewTemplate}\n    />\n  );\n}\n\nPfVerticalNavItem.displayName = 'VerticalNav.Item';\n\nexport { PfVerticalNavItem };\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as H from 'history';\nimport * as React from 'react';\nimport { PfNavLink } from './PfNavLink';\n\nexport interface ITabBarItemProps {\n  label: string;\n  to: H.LocationDescriptor;\n  [key: string]: any;\n}\n\nexport const TabBarItem: React.FunctionComponent<ITabBarItemProps> = ({\n  label,\n  to,\n  ...props\n}) => <PfNavLink label={label} to={to} {...props} />;\n","import * as React from 'react';\n\ninterface IWizardStepsProps {\n  mainSteps: React.ReactNode;\n  altSteps: React.ReactNode;\n  /**\n   * Indicates if the user clicked on a step. Used to show\n   * sub-steps when browsing from a mobile device.\n   */\n  active: boolean;\n}\n\nexport class WizardSteps extends React.Component<IWizardStepsProps> {\n  public render() {\n    return (\n      <div className={'wizard-pf-steps'}>\n        <ul\n          className={`wizard-pf-steps-indicator wizard-pf-steps-alt-indicator ${\n            this.props.active ? 'active' : ''\n          }`}\n        >\n          {this.props.mainSteps}\n        </ul>\n        <ul\n          className={`wizard-pf-steps-alt ${this.props.active ? '' : 'hidden'}`}\n        >\n          {this.props.altSteps}\n        </ul>\n      </div>\n    );\n  }\n}\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport classnames from 'classnames';\nimport {\n  FormControl,\n  FormGroup,\n  HelpBlock,\n  Icon,\n  InlineEdit,\n  InputGroup,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { Omit } from 'react-router';\nimport { Loader } from '../Layout';\nimport './InlineTextEdit.css';\n\ninterface IReadWidget {\n  className?: string;\n  allowEditing: boolean;\n  value: string;\n  onEdit(): void;\n}\n\nconst ReadWidget: React.FunctionComponent<IReadWidget> = ({\n  className,\n  allowEditing,\n  value,\n  onEdit,\n}) => (\n  <div className={classnames('inline-text-readwidget', className)}>\n    {value}\n    {allowEditing ? (\n      <Icon\n        className=\"inline-text-editIcon\"\n        name=\"edit\"\n        onClick={onEdit}\n        type=\"pf\"\n      />\n    ) : null}\n  </div>\n);\n\ninterface IEditWidget extends React.InputHTMLAttributes<HTMLInputElement> {\n  className?: string;\n  value: string;\n  valid: boolean;\n  saving: boolean;\n  asTextarea: boolean;\n  errorMsg?: string;\n  onConfirm(): void;\n  onCancel(): void;\n}\n\nconst EditWidget: React.FunctionComponent<IEditWidget> = ({\n  valid,\n  value,\n  placeholder,\n  errorMsg,\n  saving,\n  asTextarea,\n  onChange,\n  onConfirm,\n  onCancel,\n}) => (\n  <div className={'inline-text-editwidget'}>\n    {asTextarea ? (\n      <>\n        <FormGroup\n          controlId=\"textarea\"\n          validationState={valid ? 'success' : 'error'}\n        >\n          <FormControl\n            componentClass=\"textarea\"\n            disabled={saving}\n            onChange={onChange}\n            placeholder={placeholder}\n            value={value}\n          />\n          {saving ? (\n            <span className=\"btn\">\n              <Loader inline={true} loading={saving} size={'sm'} />\n            </span>\n          ) : (\n            <InlineEdit.ConfirmButton\n              disabled={saving || !valid}\n              onClick={onConfirm}\n            />\n          )}\n          <InlineEdit.CancelButton disabled={saving} onClick={onCancel} />\n        </FormGroup>\n        {errorMsg && <HelpBlock>{errorMsg}</HelpBlock>}\n      </>\n    ) : (\n      <>\n        <FormGroup validationState={valid ? 'success' : 'error'}>\n          <InputGroup>\n            <FormControl\n              disabled={saving}\n              onChange={onChange}\n              placeholder={placeholder}\n              type=\"text\"\n              value={value}\n            />\n            <InputGroup.Button>\n              {saving ? (\n                <span className=\"btn\">\n                  <Loader inline={true} loading={saving} size={'sm'} />\n                </span>\n              ) : (\n                <InlineEdit.ConfirmButton\n                  disabled={saving || !valid}\n                  onClick={onConfirm}\n                />\n              )}\n            </InputGroup.Button>\n            <InputGroup.Button>\n              <InlineEdit.CancelButton disabled={saving} onClick={onCancel} />\n            </InputGroup.Button>\n          </InputGroup>\n          {errorMsg && <HelpBlock>{errorMsg}</HelpBlock>}\n        </FormGroup>\n      </>\n    )}\n  </div>\n);\n\nexport interface IInlineTextEditProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onChange'> {\n  className?: string;\n\n  /**\n   * The current value of the property being rendered.\n   */\n  value: string;\n\n  /**\n   * `true` if editing is allowed.\n   */\n  allowEditing: boolean;\n\n  /**\n   * A value to display if the current value is empty or undefined.\n   */\n  i18nPlaceholder?: string;\n\n  /**\n   * `true` if the value should be rendered as a text area.\n   */\n  isTextArea: boolean;\n\n  /**\n   * The callback invoked when the confirm button is clicked.\n   */\n  onChange: (newValue: string) => Promise<boolean>;\n\n  /**\n   * The callback invoked when the proposed value changes.\n   */\n  onValidate?: (newValue: string) => Promise<true | string>;\n}\n\nexport const InlineTextEdit: React.FunctionComponent<IInlineTextEditProps> = ({\n  className,\n  value,\n  allowEditing,\n  i18nPlaceholder,\n  isTextArea,\n  onChange,\n  onValidate,\n  ...attrs\n}) => {\n  const [currentValue, setCurrentValue] = React.useState(value);\n  const [editing, setEditing] = React.useState(false);\n  const [saving, setSaving] = React.useState(false);\n  const [{ valid, errorMsg }, setValidity] = React.useState({\n    errorMsg: '',\n    valid: true,\n  });\n\n  const validate = async (valueToValidate: string) => {\n    if (onValidate) {\n      const result = await onValidate(valueToValidate);\n      if (result === true) {\n        setValidity({\n          errorMsg: '',\n          valid: true,\n        });\n      } else {\n        setValidity({\n          errorMsg: result,\n          valid: false,\n        });\n      }\n    } else {\n      setValidity({\n        errorMsg: '',\n        valid: true,\n      });\n    }\n  };\n\n  const handleConfirm = async () => {\n    if (valid) {\n      setSaving(true);\n      const success = await onChange(currentValue);\n      if (success) {\n        setEditing(false);\n      }\n      setSaving(false);\n    }\n  };\n\n  const handleChange = (e: any) => {\n    setCurrentValue(e.target.value);\n    validate(e.target.value);\n  };\n\n  const onEdit = () => {\n    setEditing(true);\n    validate(currentValue);\n  };\n\n  const onCancel = () => {\n    setEditing(false);\n    setCurrentValue(value);\n  };\n\n  const renderValue = (v: string) => (\n    <ReadWidget\n      className={className}\n      value={v || i18nPlaceholder || 'Value...'}\n      allowEditing={allowEditing}\n      onEdit={onEdit}\n    />\n  );\n\n  const renderEdit = (v: string) => (\n    <EditWidget\n      {...attrs}\n      valid={valid}\n      saving={saving}\n      value={v}\n      errorMsg={errorMsg}\n      asTextarea={isTextArea}\n      onChange={handleChange}\n      onConfirm={handleConfirm}\n      onCancel={onCancel}\n    />\n  );\n\n  const isEditing = () => editing;\n\n  return (\n    <InlineEdit\n      className={className}\n      value={currentValue}\n      isEditing={isEditing}\n      renderValue={renderValue}\n      renderEdit={renderEdit}\n    />\n  );\n};\n","import { Filter, FormControl, Sort, Toolbar } from 'patternfly-react';\nimport * as React from 'react';\nimport './ListViewToolbar.css';\n\nexport interface IFilterValue {\n  id: string;\n  title: string;\n}\n\nexport interface IFilterType {\n  id: string;\n  filterType: 'select' | 'text' | 'number';\n  filterValues?: IFilterValue[];\n  placeholder: string;\n  title: string;\n}\n\nexport interface ISortType {\n  id: string;\n  isNumeric: boolean;\n  title: string;\n}\n\nexport interface IActiveFilter {\n  title: string;\n  value: string;\n}\n\nexport interface IListViewToolbarProps {\n  activeFilters: IActiveFilter[];\n  filterTypes: IFilterType[];\n  currentFilterType: IFilterType;\n  currentSortType: string;\n  currentValue: any;\n  isSortAscending: boolean;\n  resultsCount: number;\n  sortTypes: ISortType[];\n  i18nResultsCount: string;\n\n  onUpdateCurrentValue(event: Event): void;\n\n  onValueKeyPress(keyEvent: KeyboardEvent): void;\n\n  onFilterAdded(title: string, value: string): void;\n\n  onSelectFilterType(filterType: IFilterType): void;\n\n  onFilterValueSelected(filterValue: { id: string; title: string }): void;\n\n  onRemoveFilter(filter: IActiveFilter): void;\n\n  onClearFilters(event: React.MouseEvent<HTMLAnchorElement>): void;\n\n  onToggleCurrentSortDirection(): void;\n\n  onUpdateCurrentSortType(sortType: string): void;\n}\n\nexport class ListViewToolbar extends React.Component<IListViewToolbarProps> {\n  public render() {\n    return (\n      <Toolbar>\n        <Filter>\n          <Filter.TypeSelector\n            filterTypes={this.props.filterTypes}\n            currentFilterType={this.props.currentFilterType.title}\n            onFilterTypeSelected={this.props.onSelectFilterType}\n          />\n          {this.renderInput()}\n        </Filter>\n        <Sort>\n          <Sort.TypeSelector\n            sortTypes={this.props.sortTypes}\n            currentSortType={this.props.currentSortType}\n            onSortTypeSelected={this.props.onUpdateCurrentSortType}\n          />\n          <Sort.DirectionSelector\n            isNumeric={false}\n            isAscending={this.props.isSortAscending}\n            onClick={this.props.onToggleCurrentSortDirection}\n          />\n        </Sort>\n        <Toolbar.RightContent>{this.props.children}</Toolbar.RightContent>\n        <Toolbar.Results>\n          <h5>{this.props.i18nResultsCount}</h5>\n          {this.props.activeFilters && this.props.activeFilters.length > 0 && (\n            <>\n              <Filter.ActiveLabel>Active Filters:</Filter.ActiveLabel>\n              <Filter.List>\n                {this.props.activeFilters.map((item: IActiveFilter, index) => (\n                  <Filter.Item\n                    key={index}\n                    onRemove={this.props.onRemoveFilter}\n                    filterData={item}\n                  >\n                    {item.title}={item.value}\n                  </Filter.Item>\n                ))}\n              </Filter.List>\n              <a onClick={this.props.onClearFilters}>Clear All Filters</a>\n            </>\n          )}\n        </Toolbar.Results>\n      </Toolbar>\n    );\n  }\n\n  public renderInput = () => {\n    const { currentFilterType, currentValue } = this.props;\n    if (!currentFilterType) {\n      return null;\n    }\n    if (currentFilterType.filterType === 'select') {\n      return (\n        <Filter.ValueSelector\n          filterValues={currentFilterType.filterValues}\n          currentValue={currentValue}\n          onFilterValueSelected={this.props.onFilterValueSelected}\n        />\n      );\n    } else {\n      return (\n        <FormControl\n          type={currentFilterType.filterType}\n          value={currentValue}\n          placeholder={currentFilterType.placeholder}\n          onChange={this.props.onUpdateCurrentValue}\n          onKeyPress={this.props.onValueKeyPress}\n        />\n      );\n    }\n  };\n}\n","import { Col, Row, Switch } from 'patternfly-react';\nimport * as React from 'react';\nimport {\n  AutoSizer,\n  CellMeasurer,\n  CellMeasurerCache,\n  List,\n  ListRowRenderer,\n} from 'react-virtualized';\nimport './LogViewer.css';\n\nexport interface ILogViewerProps {\n  data: string[];\n  height?: number;\n  width?: null;\n}\n\nexport interface ILogViewerState {\n  count: number;\n  followScroll: boolean;\n  previousCount: number;\n}\n\nexport class LogViewer extends React.Component<\n  ILogViewerProps,\n  ILogViewerState\n> {\n  public static defaultProps = {\n    height: 300,\n  };\n\n  public static getDerivedStateFromProps(\n    { data }: ILogViewerProps,\n    state: ILogViewerState\n  ) {\n    return {\n      ...state,\n      count: data.length,\n      previousCount: state.followScroll ? state.count : state.previousCount,\n    };\n  }\n\n  public state = {\n    count: 0,\n    followScroll: true,\n    previousCount: 0,\n  };\n\n  public cellMeasurerCache: CellMeasurerCache;\n\n  public constructor(props: ILogViewerProps) {\n    super(props);\n    this.cellMeasurerCache = new CellMeasurerCache({\n      fixedWidth: true,\n      minHeight: 20,\n    });\n  }\n\n  public render() {\n    return (\n      <React.Fragment>\n        <Row className={'LogViewer'}>\n          <Col sm={12}>\n            <AutoSizer\n              disableHeight={!!this.props.height}\n              disableWidth={!!this.props.width}\n            >\n              {({ width, height }) => (\n                <List\n                  deferredMeasurementCache={this.cellMeasurerCache}\n                  height={this.props.height || height}\n                  rowCount={this.props.data.length}\n                  rowHeight={this.cellMeasurerCache.rowHeight}\n                  rowRenderer={this.renderRow}\n                  scrollToLine={this.state.count}\n                  scrollToIndex={\n                    this.state.followScroll ? this.state.count - 1 : -1\n                  }\n                  width={this.props.width || width}\n                />\n              )}\n            </AutoSizer>\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={12}>\n            <Switch\n              id={'toggle-follow'}\n              labelText={'Follow logs'}\n              onChange={this.toggleFollow}\n              value={this.state.followScroll}\n            />\n          </Col>\n        </Row>\n      </React.Fragment>\n    );\n  }\n\n  public renderRow: ListRowRenderer = ({ index, style, parent }) => (\n    <CellMeasurer\n      cache={this.cellMeasurerCache}\n      columnIndex={0}\n      key={index}\n      rowIndex={index}\n      parent={parent}\n    >\n      <div className={'LogViewerRow'} style={style}>\n        <span className=\"LogViewerRow_number\">{index + 1}</span>\n        <span className=\"LogViewerRow_content\">{this.props.data[index]}</span>\n      </div>\n    </CellMeasurer>\n  );\n\n  public toggleFollow = () => {\n    this.setState({\n      followScroll: !this.state.followScroll,\n    });\n  };\n}\n","import {\n  TimedToastNotification,\n  ToastNotificationList,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { Container } from '../Layout/Container';\n\nexport type INotificationType = 'success' | 'info' | 'warning' | 'error';\n\nexport interface INotification {\n  key: string;\n  message: string;\n  type: INotificationType;\n}\n\nexport interface INotificationsProps {\n  notifications: INotification[];\n  notificationTimerDelay: number;\n  removeNotificationAction(notification: INotification): void;\n}\n\nexport class Notifications extends React.Component<INotificationsProps> {\n  public render() {\n    return (\n      <ToastNotificationList className=\"app__notificationList\">\n        {this.props.notifications.map(notification => (\n          <TimedToastNotification\n            key={notification.key}\n            type={notification.type}\n            persistent={false}\n            onDismiss={this.props.removeNotificationAction.bind(\n              this,\n              notification\n            )}\n            timerdelay={this.props.notificationTimerDelay}\n          >\n            <Container\n              dangerouslySetInnerHTML={{\n                __html: notification.message,\n              }}\n            />\n          </TimedToastNotification>\n        ))}\n      </ToastNotificationList>\n    );\n  }\n}\n","import { Text, Title, TitleLevel } from '@patternfly/react-core';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { Container } from '../Layout';\n\nexport interface ISimplePageHeaderProps {\n  i18nTitle: string;\n  i18nDescription: string;\n  className?: string;\n}\n\nexport const SimplePageHeader: React.FunctionComponent<\n  ISimplePageHeaderProps\n> = ({\n  i18nTitle,\n  i18nDescription,\n  className,\n  ...rest\n}: ISimplePageHeaderProps) => {\n  return (\n    <Container className={classnames('', className)} {...rest}>\n      <Title size=\"3xl\" headingLevel={TitleLevel.h2}>\n        {i18nTitle}\n      </Title>\n      <Text>{i18nDescription}</Text>\n    </Container>\n  );\n};\n","import { Icon, ProgressBar } from 'patternfly-react';\nimport * as React from 'react';\n\nimport './ProgressWithLink.css';\n\nexport interface IProgressWithLinkProps {\n  value: string;\n  currentStep: number;\n  totalSteps: number;\n  logUrl?: string;\n  i18nLogUrlText: string;\n}\n\nexport class ProgressWithLink extends React.PureComponent<\n  IProgressWithLinkProps\n> {\n  public render() {\n    return (\n      <div className=\"progress-link\">\n        <div>\n          <i data-testid=\"progress-link-value\">\n            {this.props.value} ( {this.props.currentStep} /{' '}\n            {this.props.totalSteps} )\n          </i>\n          {this.props.logUrl && (\n            <span data-testid=\"progress-log-link\" className=\"pull-right\">\n              <a target=\"_blank\" href={this.props.logUrl}>\n                {this.props.i18nLogUrlText} <Icon name={'external-link'} />\n              </a>\n            </span>\n          )}\n        </div>\n        <ProgressBar\n          now={this.props.currentStep}\n          max={this.props.totalSteps}\n          style={{\n            height: 6,\n          }}\n        />\n      </div>\n    );\n  }\n}\n","import { DropdownItem } from '@patternfly/react-core';\nimport * as React from 'react';\n\nexport interface IPfDropdownItem {\n  children: any;\n}\nclass PfDropdownItem extends React.Component<IPfDropdownItem> {\n  public render() {\n    return <DropdownItem>{this.props.children}</DropdownItem>;\n  }\n}\n\nexport { PfDropdownItem };\n","import { Text, Title } from '@patternfly/react-core';\nimport * as H from 'history';\nimport { Card, DropdownKebab } from 'patternfly-react';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n} from '../Shared';\n\nimport './ConnectionCard.css';\n\nexport interface IConnectionCardMenuProps {\n  editHref: H.LocationDescriptor;\n  i18nCancelLabel: string;\n  i18nDeleteLabel: string;\n  i18nDeleteModalMessage: string;\n  i18nDeleteModalTitle: string;\n  i18nEditLabel: string;\n  i18nMenuTitle: string;\n  i18nViewLabel: string;\n  isDeleteEnabled: boolean;\n  onDelete(): void;\n}\n\nexport interface IConnectionProps {\n  description: string;\n  menuProps?: IConnectionCardMenuProps;\n  name: string;\n  href: H.LocationDescriptor;\n  icon: string;\n}\n\nexport interface IConnectionCardState {\n  showDeleteDialog: boolean;\n}\n\nexport class ConnectionCard extends React.PureComponent<\n  IConnectionProps,\n  IConnectionCardState\n> {\n  public constructor(props: IConnectionProps) {\n    super(props);\n\n    this.state = {\n      showDeleteDialog: false, // initial visibility of delete dialog\n    };\n\n    if (this.props.menuProps) {\n      this.doCancel = this.doCancel.bind(this);\n      this.doDelete = this.doDelete.bind(this);\n      this.showDeleteDialog = this.showDeleteDialog.bind(this);\n    }\n  }\n\n  public doCancel() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n  }\n\n  public doDelete() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n\n    if (this.props.menuProps) {\n      this.props.menuProps.onDelete();\n    }\n  }\n\n  public showDeleteDialog() {\n    this.setState({\n      showDeleteDialog: true,\n    });\n  }\n\n  public render() {\n    return (\n      <>\n        {this.props.menuProps && (\n          <ConfirmationDialog\n            buttonStyle={ConfirmationButtonStyle.DANGER}\n            i18nCancelButtonText={this.props.menuProps.i18nCancelLabel}\n            i18nConfirmButtonText={this.props.menuProps.i18nDeleteLabel}\n            i18nConfirmationMessage={\n              this.props.menuProps.i18nDeleteModalMessage\n            }\n            i18nTitle={this.props.menuProps.i18nDeleteModalTitle}\n            icon={ConfirmationIconType.DANGER}\n            showDialog={this.state.showDeleteDialog}\n            onCancel={this.doCancel}\n            onConfirm={this.doDelete}\n          />\n        )}\n        <Card matchHeight={true}>\n          {this.props.menuProps && (\n            <div className=\"pull-right\">\n              <DropdownKebab\n                id={`connection-${this.props.name}-menu`}\n                pullRight={true}\n                title={this.props.menuProps.i18nMenuTitle}\n              >\n                <li role={'presentation'} key={0}>\n                  <Link to={this.props.href} role={'menuitem'} tabIndex={1}>\n                    {this.props.menuProps.i18nViewLabel}\n                  </Link>\n                </li>\n                <li role={'presentation'} key={1}>\n                  <Link\n                    to={this.props.menuProps.editHref}\n                    role={'menuitem'}\n                    tabIndex={2}\n                  >\n                    {this.props.menuProps.i18nEditLabel}\n                  </Link>\n                </li>\n                <li\n                  className={\n                    !this.props.menuProps.isDeleteEnabled ? 'disabled' : ''\n                  }\n                  role={'presentation'}\n                  key={2}\n                >\n                  <a\n                    href={'javascript:void(0)'}\n                    onClick={this.showDeleteDialog}\n                    role={'menuitem'}\n                    tabIndex={3}\n                  >\n                    {this.props.menuProps.i18nDeleteLabel}\n                  </a>\n                </li>\n              </DropdownKebab>\n            </div>\n          )}\n          <Link to={this.props.href} className={'connection-card'}>\n            <Card.Body>\n              <div className={'connection-card__content'}>\n                <div className=\"connection-card__icon\">\n                  <img src={this.props.icon} alt={this.props.name} width={46} />\n                </div>\n                <Title\n                  size=\"lg\"\n                  className=\"connection-card__title h2\"\n                  data-testid=\"connection-card-title\"\n                >\n                  {this.props.name}\n                </Title>\n                <Text className=\"connection-card__description\">\n                  {this.props.description}\n                </Text>\n              </div>\n            </Card.Body>\n          </Link>\n        </Card>\n      </>\n    );\n  }\n}\n","import { Alert, Button, Row } from 'patternfly-react';\nimport * as React from 'react';\nimport { Container, Loader } from '../Layout';\nimport './ConnectionDetailsForm.css';\n\nexport interface IConnectionDetailsValidationResult {\n  message: string;\n  type: 'error' | 'success';\n}\n\nexport interface IConnectionDetailsFormProps {\n  /**\n   * The localized text for the cancel button.\n   */\n  i18nCancelLabel: string;\n\n  /**\n   * The localized text for the edit button.\n   */\n  i18nEditLabel: string;\n\n  /**\n   * The localized text for the save button.\n   */\n  i18nSaveLabel: string;\n\n  /**\n   * The localized text of the form title.\n   */\n  i18nTitle: string;\n\n  /**\n   * The localized text for the validate button.\n   */\n  i18nValidateLabel: string;\n\n  /**\n   * `true` if all form fields have valid values.\n   */\n  isValid: boolean;\n\n  /**\n   * `true` if the parent is doing some work and this form should disable user input.\n   */\n  isWorking: boolean;\n\n  /**\n   * Form level validationResults\n   */\n  validationResults: IConnectionDetailsValidationResult[];\n\n  /**\n   * The callback fired when submitting the form.\n   * @param e\n   */\n  handleSubmit: (e?: any) => void;\n\n  /**\n   * The callback for when the validate button is clicked.\n   */\n  onValidate: () => void;\n\n  /**\n   * `true` when the connection details are being edited.\n   */\n  isEditing: boolean;\n\n  /**\n   * The callback for editing has been canceled.\n   */\n  onCancelEditing: () => void;\n\n  /**\n   * The callback for start editing.\n   */\n  onStartEditing: () => void;\n}\n\nexport class ConnectionDetailsForm extends React.Component<\n  IConnectionDetailsFormProps\n> {\n  public static defaultProps = {\n    validationResults: [],\n  };\n\n  public render() {\n    return (\n      <Container>\n        <form\n          className=\"form-horizontal required-pf\"\n          role=\"form\"\n          onSubmit={this.props.handleSubmit}\n        >\n          <div className=\"row row-cards-pf\">\n            <div className=\"card-pf\">\n              {this.props.validationResults.map((e, idx) => (\n                <Alert key={idx} type={e.type}>\n                  {e.message}\n                </Alert>\n              ))}\n              <div className=\"card-pf-title\">{this.props.i18nTitle}</div>\n              <div className=\"card-pf-body connection-details-form__formFields\">\n                <Container>{this.props.children}</Container>\n                {this.props.isEditing ? (\n                  <Container>\n                    <Row>\n                      <Button\n                        bsStyle=\"default\"\n                        className=\"connection-details-form__editButton\"\n                        disabled={this.props.isWorking || !this.props.isValid}\n                        onClick={this.props.onValidate}\n                      >\n                        {this.props.isWorking ? (\n                          <Loader size={'sm'} inline={true} />\n                        ) : null}\n                        {this.props.i18nValidateLabel}\n                      </Button>\n                    </Row>\n                    <Row>\n                      <Button\n                        bsStyle=\"default\"\n                        className=\"connection-details-form__editButton\"\n                        disabled={this.props.isWorking}\n                        onClick={this.props.onCancelEditing}\n                      >\n                        {this.props.i18nCancelLabel}\n                      </Button>\n                      <Button\n                        bsStyle=\"primary\"\n                        className=\"connection-details-form__editButton\"\n                        disabled={this.props.isWorking || !this.props.isValid}\n                        onClick={this.props.handleSubmit}\n                      >\n                        {this.props.i18nSaveLabel}\n                      </Button>\n                    </Row>\n                  </Container>\n                ) : (\n                  <Button bsStyle=\"primary\" onClick={this.props.onStartEditing}>\n                    {this.props.i18nEditLabel}\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        </form>\n      </Container>\n    );\n  }\n}\n","import { Grid } from 'patternfly-react';\nimport * as React from 'react';\nimport { Container } from '../Layout';\nimport { InlineTextEdit } from '../Shared';\nimport './ConnectionDetailsHeader.css';\n\nexport interface IConnectionDetailsHeaderProps {\n  /**\n   * `true` if the name and description can be edited.\n   */\n  allowEditing: boolean;\n\n  /**\n   * The optional connection description.\n   */\n  connectionDescription?: string;\n\n  /**\n   * The optional connection icon.\n   */\n  connectionIcon?: string;\n\n  /**\n   * The name of the connection.\n   */\n  connectionName: string;\n\n  /**\n   * The localized text of the description label.\n   */\n  i18nDescriptionLabel: string;\n\n  /**\n   * The localized placeholder text of the connection description.\n   */\n  i18nDescriptionPlaceholder: string;\n\n  /**\n   * The localized placeholder text of the connection name.\n   */\n  i18nNamePlaceholder: string;\n\n  /**\n   * The localized text of the usage label.\n   */\n  i18nUsageLabel: string;\n\n  /**\n   * The localized message that provides the number of integrations that are using this connection.\n   */\n  i18nUsageMessage: string;\n\n  /**\n   * `true` when the name or description is being saved.\n   */\n  isWorking: boolean;\n\n  /**\n   * The callback for when the connection description should be saved.\n   * @param newDescription - the new description being saved\n   * @returns `true` if save was successful\n   */\n  onChangeDescription: (newDescription: string) => Promise<boolean>;\n\n  /**\n   * The callback for when the connection name should be saved.\n   * @param newName - the new name being saved\n   * @returns `true` if save was successful\n   */\n  onChangeName: (newName: string) => Promise<boolean>;\n}\n\n/**\n * Line 1: icon, name, edit icon (makes name editable when clicked)\n * Line 2: description label and value\n * Line 3: usage label and value\n */\nexport class ConnectionDetailsHeader extends React.Component<\n  IConnectionDetailsHeaderProps\n> {\n  public render() {\n    return (\n      <Grid fluid={true}>\n        <Grid.Row className={'connection-details-header__row'}>\n          {this.props.connectionIcon ? (\n            <Grid.Col xs={1}>\n              <Container className=\"blank-slate-pf-icon\">\n                <img\n                  className=\"connection-details-header__connectionIcon\"\n                  src={this.props.connectionIcon}\n                  alt={this.props.connectionName}\n                  width={46}\n                />\n              </Container>\n            </Grid.Col>\n          ) : null}\n          <Grid.Col xs={11}>\n            <InlineTextEdit\n              className=\"connection-details-header__connectionName\"\n              value={this.props.connectionName}\n              allowEditing={this.props.allowEditing && !this.props.isWorking}\n              placeholder={this.props.i18nNamePlaceholder}\n              isTextArea={false}\n              onChange={this.props.onChangeName}\n            />\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row className={'connection-details-header__row'}>\n          <Grid.Col xs={2} className=\"connection-details-header__propertyLabel\">\n            {this.props.i18nDescriptionLabel}\n          </Grid.Col>\n          <Grid.Col xs={10}>\n            <InlineTextEdit\n              value={this.props.connectionDescription || ''}\n              allowEditing={this.props.allowEditing && !this.props.isWorking}\n              i18nPlaceholder={this.props.i18nDescriptionPlaceholder}\n              isTextArea={true}\n              onChange={this.props.onChangeDescription}\n            />\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"connection-details-header__propertyLabel\">\n            {this.props.i18nUsageLabel}\n          </Grid.Col>\n          <Grid.Col\n            xs={10}\n            className=\"connection-details-header__propertyValue\"\n          >\n            {this.props.i18nUsageMessage}\n          </Grid.Col>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n","import { CardGrid } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class ConnectionsGrid extends React.Component {\n  public render() {\n    return (\n      <CardGrid fluid={true} matchHeight={true}>\n        <CardGrid.Row>{this.props.children}</CardGrid.Row>\n      </CardGrid>\n    );\n  }\n}\n","import { CardGrid } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class ConnectionsGridCell extends React.Component {\n  public render() {\n    return (\n      <CardGrid.Col xs={6} md={3}>\n        {this.props.children}\n      </CardGrid.Col>\n    );\n  }\n}\n","import * as H from 'history';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../Shared';\n\nexport interface IConnectionsListViewProps extends IListViewToolbarProps {\n  linkToConnectionCreate: H.LocationDescriptor;\n  i18nLinkCreateConnection: H.LocationDescriptor;\n}\n\nexport class ConnectionsListView extends React.Component<\n  IConnectionsListViewProps\n> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <ButtonLink href={this.props.linkToConnectionCreate} as={'primary'}>\n              {this.props.i18nLinkCreateConnection}\n            </ButtonLink>\n          </div>\n        </ListViewToolbar>\n        <Container>{this.props.children}</Container>\n      </>\n    );\n  }\n}\n","import { Alert } from 'patternfly-react';\nimport * as React from 'react';\nimport { Container } from '../Layout';\n\nexport interface IConnectorConfigurationFormValidationResult {\n  message: string;\n  type: 'error' | 'success';\n}\n\nexport interface IConnectorConfigurationFormProps {\n  /**\n   * The internationalized form title.\n   */\n  i18nFormTitle?: string;\n  /**\n   * Form level validationResults\n   */\n  validationResults?: IConnectorConfigurationFormValidationResult[];\n  /**\n   * The callback fired when submitting the form.\n   * @param e\n   */\n  handleSubmit: (e?: any) => void;\n}\n\n/**\n * A component to render a save form, to be used in the integration\n * editor. This does *not* build the form itself, form's field should be passed\n * as the `children` value.\n * @see [i18nTitle]{@link IConnectorConfigurationFormProps#i18nTitle}\n * @see [i18nSubtitle]{@link IConnectorConfigurationFormProps#i18nSubtitle}\n */\nexport class ConnectorConfigurationForm extends React.Component<\n  IConnectorConfigurationFormProps\n> {\n  public static defaultProps = {\n    validationResults: [],\n  };\n\n  public render() {\n    return (\n      <Container>\n        <form\n          className=\"form-horizontal required-pf\"\n          role=\"form\"\n          onSubmit={this.props.handleSubmit}\n        >\n          <div className=\"row row-cards-pf\">\n            <div className=\"card-pf\">\n              {this.props.i18nFormTitle && (\n                <div className=\"card-pf-title\">{this.props.i18nFormTitle}</div>\n              )}\n              <div className=\"card-pf-body\">\n                {this.props.validationResults!.map((e, idx) => (\n                  <Alert key={idx} type={e.type}>\n                    {e.message}\n                  </Alert>\n                ))}\n                <Container>{this.props.children}</Container>\n              </div>\n            </div>\n          </div>\n        </form>\n      </Container>\n    );\n  }\n}\n","export interface ICiCdListPageItem {\n  name: string;\n  i18nUsesText: string;\n}\n\nexport interface ITagIntegrationEntry {\n  name: string;\n  selected: boolean;\n}\n\nexport enum TagNameValidationError {\n  NoErrors = 'NoErrors',\n  NoName = 'NoName',\n  NameInUse = 'NameInUse',\n}\n","import { Text } from '@patternfly/react-core';\nimport { Card, CardBody } from 'patternfly-react';\nimport * as React from 'react';\nimport './ApiConnectorDetailCard.css';\n\nexport interface IApiConnectorDetailCardProps {\n  description?: string;\n  icon?: string;\n  name: string;\n}\n\nexport class ApiConnectorDetailCard extends React.Component<\n  IApiConnectorDetailCardProps\n> {\n  public render() {\n    return (\n      <Card className=\"api-connector-card\">\n        <CardBody>\n          <div className={'api-connector-card__content'}>\n            <div>\n              <img\n                className=\"api-connector-card__icon\"\n                src={this.props.icon}\n                alt={this.props.name}\n              />\n            </div>\n            <div\n              className=\"api-connector__title h2\"\n              data-testid=\"api-connector-card-title\"\n            >\n              {this.props.name}\n            </div>\n            <Text className=\"api-connector-card__description\">\n              {this.props.description}\n            </Text>\n          </div>\n        </CardBody>\n      </Card>\n    );\n  }\n}\n","import * as React from 'react';\n\nexport class ApiConnectorInfo extends React.Component {\n  public render() {\n    return <div>ApiConnectorInfo content goes here</div>;\n  }\n}\n","import * as React from 'react';\n\nexport class ApiConnectorReview extends React.Component {\n  public render() {\n    return <div>ApiConnectorReview content goes here</div>;\n  }\n}\n","import {\n  Card,\n  CardBody,\n  CardGrid,\n  CardHeading,\n  CardTitle,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ApiConnectorDetailCard } from './ApiConnectorDetailCard';\nimport { ApiConnectorInfo } from './ApiConnectorInfo';\nimport { ApiConnectorReview } from './ApiConnectorReview';\n\nexport interface IApiConnectorDetailProps {\n  description?: string;\n  icon?: string;\n  name: string;\n}\n\nexport class ApiConnectorDetail extends React.Component<\n  IApiConnectorDetailProps\n> {\n  public render() {\n    return (\n      <CardGrid fluid={true}>\n        <CardGrid.Row>\n          <CardGrid.Col xs={12} md={3}>\n            <ApiConnectorDetailCard\n              description={this.props.description}\n              icon={this.props.icon}\n              name={this.props.name}\n            />\n          </CardGrid.Col>\n          <CardGrid.Col xs={12} md={7}>\n            <Card>\n              <CardHeading>\n                <CardTitle>{this.props.name}</CardTitle>\n              </CardHeading>\n              <CardBody>\n                <ApiConnectorInfo />\n                <ApiConnectorReview />\n              </CardBody>\n            </Card>\n          </CardGrid.Col>\n        </CardGrid.Row>\n      </CardGrid>\n    );\n  }\n}\n","import {\n  Button,\n  ListViewInfoItem,\n  ListViewItem,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IApiConnectorListItemProps {\n  apiConnectorDescription?: string;\n  apiConnectorId: string;\n  apiConnectorName: string;\n  apiConnectorIcon?: string;\n  i18nDelete: string;\n  i18nDeleteTip?: string;\n  i18nDetails: string;\n  i18nDetailsTip?: string;\n  i18nUsedByMessage: string;\n  onDelete: (apiConnectorId: string) => void;\n  onDetails: (extensionId: string) => void;\n  usedBy: number;\n}\n\nexport class ApiConnectorListItem extends React.Component<\n  IApiConnectorListItemProps\n> {\n  public constructor(props: IApiConnectorListItemProps) {\n    super(props);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleDetails = this.handleDetails.bind(this);\n  }\n\n  public getDeleteTooltip() {\n    return (\n      <Tooltip id=\"deleteTip\">\n        {this.props.i18nDeleteTip\n          ? this.props.i18nDeleteTip\n          : this.props.i18nDelete}\n      </Tooltip>\n    );\n  }\n\n  public getDetailsTooltip() {\n    return (\n      <Tooltip id=\"detailsTip\">\n        {this.props.i18nDetailsTip\n          ? this.props.i18nDetailsTip\n          : this.props.i18nDetails}\n      </Tooltip>\n    );\n  }\n\n  public handleDelete() {\n    this.props.onDelete(this.props.apiConnectorId);\n  }\n\n  public handleDetails() {\n    this.props.onDetails(this.props.apiConnectorId);\n  }\n\n  public render() {\n    return (\n      <ListViewItem\n        actions={\n          <div className=\"form-group\">\n            <OverlayTrigger overlay={this.getDetailsTooltip()} placement=\"top\">\n              <Button bsStyle=\"default\" onClick={this.handleDetails}>\n                {this.props.i18nDetails}\n              </Button>\n            </OverlayTrigger>\n            <OverlayTrigger overlay={this.getDeleteTooltip()} placement=\"top\">\n              <Button\n                bsStyle=\"default\"\n                disabled={this.props.usedBy !== 0}\n                onClick={this.handleDelete}\n              >\n                {this.props.i18nDelete}\n              </Button>\n            </OverlayTrigger>\n          </div>\n        }\n        additionalInfo={[\n          <ListViewInfoItem key={1}>\n            {this.props.i18nUsedByMessage}\n          </ListViewInfoItem>,\n        ]}\n        description={\n          this.props.apiConnectorDescription\n            ? this.props.apiConnectorDescription\n            : ''\n        }\n        heading={this.props.apiConnectorName}\n        hideCloseIcon={true}\n        leftContent={\n          this.props.apiConnectorIcon ? (\n            <div className=\"blank-slate-pf-icon\">\n              <img\n                src={this.props.apiConnectorIcon}\n                alt={this.props.apiConnectorName}\n                width={46}\n              />\n            </div>\n          ) : null\n        }\n        stacked={true}\n      />\n    );\n  }\n}\n","import { Text, Title } from '@patternfly/react-core';\nimport {\n  EmptyState,\n  ListView,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../Shared';\n\nexport interface IApiConnectorListViewProps extends IListViewToolbarProps {\n  i18nDescription: string;\n  i18nEmptyStateInfo: string;\n  i18nEmptyStateTitle: string;\n  i18nLinkCreateApiConnector: string;\n  i18nLinkCreateApiConnectorTip?: string;\n  i18nName: string;\n  i18nTitle: string;\n  linkCreateApiConnector: string;\n}\n\nexport class ApiConnectorListView extends React.Component<\n  IApiConnectorListViewProps\n> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <OverlayTrigger\n              overlay={this.getCreateConnectorTooltip()}\n              placement=\"top\"\n            >\n              <ButtonLink\n                href={this.props.linkCreateApiConnector}\n                as={'primary'}\n              >\n                {this.props.i18nLinkCreateApiConnector}\n              </ButtonLink>\n            </OverlayTrigger>\n          </div>\n        </ListViewToolbar>\n        <Container>\n          {this.props.i18nTitle !== '' && (\n            <Title size=\"xl\">{this.props.i18nTitle}</Title>\n          )}\n          {this.props.i18nDescription !== '' && (\n            <Text\n              dangerouslySetInnerHTML={{ __html: this.props.i18nDescription }}\n            />\n          )}\n          {this.props.children ? (\n            <ListView>{this.props.children}</ListView>\n          ) : (\n            <EmptyState>\n              <EmptyState.Icon />\n              <EmptyState.Title>\n                {this.props.i18nEmptyStateTitle}\n              </EmptyState.Title>\n              <EmptyState.Info>{this.props.i18nEmptyStateInfo}</EmptyState.Info>\n              <EmptyState.Action>\n                <OverlayTrigger\n                  overlay={this.getCreateConnectorTooltip()}\n                  placement=\"top\"\n                >\n                  <ButtonLink\n                    href={this.props.linkCreateApiConnector}\n                    as={'primary'}\n                  >\n                    {this.props.i18nLinkCreateApiConnector}\n                  </ButtonLink>\n                </OverlayTrigger>\n              </EmptyState.Action>\n            </EmptyState>\n          )}\n        </Container>\n      </>\n    );\n  }\n\n  private getCreateConnectorTooltip() {\n    return (\n      <Tooltip id=\"createTip\">\n        {this.props.i18nLinkCreateApiConnectorTip\n          ? this.props.i18nLinkCreateApiConnectorTip\n          : this.props.i18nLinkCreateApiConnector}\n      </Tooltip>\n    );\n  }\n}\n","import { Title, TitleLevel } from '@patternfly/react-core';\nimport * as H from 'history';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeading,\n  CardTitle,\n  OverlayTrigger,\n  Row,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../Layout';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n} from '../Shared';\nimport './ExtensionDetail.css';\n\nexport interface IExtensionDetailProps {\n  /**\n   * The name of the extension.\n   */\n  extensionName: string;\n\n  /**\n   * The number of integrations that use this extension.\n   */\n  extensionUses: number;\n\n  /**\n   * The localized text of the cancel button used when deleting this extension.\n   */\n  i18nCancelText: string;\n\n  /**\n   * The localized text of the delete button.\n   */\n  i18nDelete: string;\n\n  /**\n   * The localized delete confirmation message.\n   */\n  i18nDeleteModalMessage: string;\n\n  /**\n   * The localized title of the delete dialog.\n   */\n  i18nDeleteModalTitle: string;\n\n  /**\n   * The localized tooltip of the delete button.\n   */\n  i18nDeleteTip?: string;\n\n  /**\n   * The localized message that displays the extension ID.\n   */\n  i18nIdMessage: string;\n\n  /**\n   * The localized text for the overview section title.\n   */\n  i18nOverviewSectionTitle: string;\n\n  /**\n   * The localized text of the supports section title.\n   */\n  i18nSupportsSectionTitle: string;\n\n  /**\n   * The localized text of the update button.\n   */\n  i18nUpdate: string;\n\n  /**\n   * The localized tooltip of the update button.\n   */\n  i18nUpdateTip?: string;\n\n  /**\n   * The localized text of the usage section title.\n   */\n  i18nUsageSectionTitle: string;\n\n  /**\n   * The JSX element that displayes the integrations used by this extension.\n   */\n  integrationsSection: JSX.Element;\n\n  /**\n   * An href to use when the extension is being updated.\n   */\n  linkUpdateExtension: H.LocationDescriptor;\n\n  /**\n   * The callback for when the delete button is clicked.\n   */\n  onDelete: () => void;\n\n  /**\n   * The JSX element that displays the overview section.\n   */\n  overviewSection: JSX.Element;\n\n  /**\n   * The JSX element that displays the supports section.\n   */\n  supportsSection: JSX.Element;\n}\n\nexport interface IExtensionDetailState {\n  showDeleteDialog: boolean;\n}\n\nexport class ExtensionDetail extends React.Component<\n  IExtensionDetailProps,\n  IExtensionDetailState\n> {\n  public constructor(props: IExtensionDetailProps) {\n    super(props);\n\n    this.state = {\n      showDeleteDialog: false, // initial visibility of delete dialog\n    };\n\n    this.doCancel = this.doCancel.bind(this);\n    this.doDelete = this.doDelete.bind(this);\n    this.showDeleteDialog = this.showDeleteDialog.bind(this);\n  }\n\n  public doCancel() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n  }\n\n  public doDelete() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n\n    // TODO: disable components while delete is processing\n    this.props.onDelete();\n  }\n\n  public getDeleteTooltip() {\n    return (\n      <Tooltip id=\"deleteTip\">\n        {this.props.i18nDeleteTip\n          ? this.props.i18nDeleteTip\n          : this.props.i18nDelete}\n      </Tooltip>\n    );\n  }\n\n  public getUpdateTooltip() {\n    return (\n      <Tooltip id=\"updateTip\">\n        {this.props.i18nUpdateTip\n          ? this.props.i18nUpdateTip\n          : this.props.i18nUpdate}\n      </Tooltip>\n    );\n  }\n\n  public showDeleteDialog() {\n    this.setState({\n      showDeleteDialog: true,\n    });\n  }\n\n  public render() {\n    return (\n      <>\n        <ConfirmationDialog\n          buttonStyle={ConfirmationButtonStyle.DANGER}\n          i18nCancelButtonText={this.props.i18nCancelText}\n          i18nConfirmButtonText={this.props.i18nDelete}\n          i18nConfirmationMessage={this.props.i18nDeleteModalMessage}\n          i18nTitle={this.props.i18nDeleteModalTitle}\n          icon={ConfirmationIconType.DANGER}\n          showDialog={this.state.showDeleteDialog}\n          onCancel={this.doCancel}\n          onConfirm={this.doDelete}\n        />\n        <Card matchHeight={true}>\n          <CardHeading>\n            <CardTitle>\n              <Row>\n                <Title\n                  size=\"xl\"\n                  className={'col-sm-8 extension-detail__extensionTitle'}\n                >\n                  {this.props.extensionName}\n                  <span className={'extension-detail__extensionId'}>\n                    {this.props.i18nIdMessage}\n                  </span>\n                </Title>\n                <div className=\"col-sm-4 text-right extension-detail__titleButtons\">\n                  <OverlayTrigger\n                    overlay={this.getUpdateTooltip()}\n                    placement=\"top\"\n                  >\n                    <ButtonLink\n                      href={this.props.linkUpdateExtension}\n                      as={'primary'}\n                    >\n                      {this.props.i18nUpdate}\n                    </ButtonLink>\n                  </OverlayTrigger>\n                  <OverlayTrigger\n                    overlay={this.getDeleteTooltip()}\n                    placement=\"top\"\n                  >\n                    <Button\n                      bsStyle=\"default\"\n                      disabled={this.props.extensionUses !== 0}\n                      onClick={this.showDeleteDialog}\n                    >\n                      {this.props.i18nDelete}\n                    </Button>\n                  </OverlayTrigger>\n                </div>\n              </Row>\n            </CardTitle>\n          </CardHeading>\n          <CardBody>\n            <Title\n              size=\"md\"\n              headingLevel={TitleLevel.h3}\n              className=\"extension-detail__sectionHeading\"\n            >\n              {this.props.i18nOverviewSectionTitle}\n            </Title>\n            {this.props.overviewSection}\n            <Title\n              size=\"md\"\n              headingLevel={TitleLevel.h3}\n              className=\"extension-detail__sectionHeading\"\n            >\n              {this.props.i18nSupportsSectionTitle}\n            </Title>\n            {this.props.supportsSection}\n            <Title\n              size=\"md\"\n              headingLevel={TitleLevel.h3}\n              className=\"extension-detail__sectionHeading\"\n            >\n              {this.props.i18nUsageSectionTitle}\n            </Title>\n            {this.props.integrationsSection}\n          </CardBody>\n        </Card>\n      </>\n    );\n  }\n}\n","import { Text } from '@patternfly/react-core';\nimport { Alert, Card } from 'patternfly-react';\nimport * as React from 'react';\nimport { DndFileChooser } from '../Shared/DndFileChooser';\n\nexport interface IExtensionImportCardProps {\n  /**\n   * `true` if the dropzone should be disabled.\n   */\n  dndDisabled: boolean;\n\n  /**\n   * A localized alert message when a jar file cannot be processed as an extension.\n   */\n  i18nAlertMessage?: string;\n\n  /**\n   * The localized text that appears below the selected file information at the bottom of the drop area. This\n   * message should identify the accepted file extension.\n   */\n  i18nDndHelpMessage: string;\n\n  /**\n   * The localized text (may include HTML tags) that appears above the selected file information at the\n   * top of the drop area. This message should describe how the DnD works.\n   */\n  i18nDndInstructions: string;\n\n  /**\n   * The localized text that appears when no file has been selected.\n   */\n  i18nDndNoFileSelectedMessage: string;\n\n  /**\n   * The localized text for the label that appears before the selected file information.\n   */\n  i18nDndSelectedFileLabel: string;\n\n  /**\n   * A general, localized message for when a file upload failed. This message will be shown\n   * along with an error icon and appears next to the selected file message. If this property\n   * is set then `i18nDndUploadSuccessMessage` should not be set.\n   */\n  i18nDndUploadFailedMessage?: string;\n\n  /**\n   * A general, localized message for when a file upload was successful. This message will be shown\n   * along with an OK icon and appear next to the selected file message. If this property\n   * is set then `i18nDndUploadFailedMessage` should not be set.\n   */\n  i18nDndUploadSuccessMessage?: string;\n\n  /**\n   * The localized instructions text that appears above the DnD component.\n   */\n  i18nImportInstructions: string;\n\n  /**\n   * The localized title text that appears above the DnD component.\n   */\n  i18nTitle: string;\n\n  /**\n   * Callback for when one or more file uploads have been accepted. Caller should handler processing of the files.\n   */\n  onDndUploadAccepted(files: File[]): void;\n\n  /**\n   * The localized text (may include HTML tags) that appears when the file upload fails.\n   */\n  onDndUploadRejected(fileName: string): string;\n}\n\nexport class ExtensionImportCard extends React.Component<\n  IExtensionImportCardProps\n> {\n  public render() {\n    return (\n      <Card>\n        <Card.Heading>\n          <Card.Title>{this.props.i18nTitle}</Card.Title>\n        </Card.Heading>\n        <Card.Body>\n          <Text>{this.props.i18nImportInstructions}</Text>\n          {this.props.i18nAlertMessage ? (\n            <Alert type={'error'}>\n              <span>{this.props.i18nAlertMessage}</span>\n            </Alert>\n          ) : null}\n          <DndFileChooser\n            disableDropzone={this.props.dndDisabled}\n            fileExtensions={'.jar'}\n            i18nHelpMessage={this.props.i18nDndHelpMessage}\n            i18nInstructions={this.props.i18nDndInstructions}\n            i18nNoFileSelectedMessage={this.props.i18nDndNoFileSelectedMessage}\n            i18nSelectedFileLabel={this.props.i18nDndSelectedFileLabel}\n            i18nUploadFailedMessage={this.props.i18nDndUploadFailedMessage}\n            i18nUploadSuccessMessage={this.props.i18nDndUploadSuccessMessage}\n            onUploadAccepted={this.props.onDndUploadAccepted}\n            onUploadRejected={this.props.onDndUploadRejected}\n          />\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n","import * as H from 'history';\nimport { Button, Grid } from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../Layout';\nimport './ExtensionImportReview.css';\n\nexport interface IImportAction {\n  description: string;\n  name: string;\n}\n\nexport interface IExtensionImportReviewProps {\n  /**\n   * The extension actions.\n   */\n  actions?: IImportAction[];\n\n  /**\n   * The href that will be navigated to when the cancel button is clicked.\n   */\n  cancelLink: H.LocationDescriptor;\n\n  /**\n   * The optional description of the extension.\n   */\n  extensionDescription?: string;\n\n  /**\n   * The ID of the extension.\n   */\n  extensionId: string;\n\n  /**\n   * The name of the extension.\n   */\n  extensionName: string;\n\n  /**\n   * The unique, not for user consumption, identifier.\n   */\n  extensionUid: string;\n\n  /**\n   * The localized label for the list of actions.\n   */\n  i18nActionsLabel: string;\n\n  /**\n   * The localized text for the cancel button.\n   */\n  i18nCancel: string;\n\n  /**\n   * The localized 'Description' label.\n   */\n  i18nDescriptionLabel: string;\n\n  /**\n   * The localized text identifying the extension type.\n   */\n  i18nExtensionTypeMessage: string;\n\n  /**\n   * The localized 'ID' label.\n   */\n  i18nIdLabel: string;\n\n  /**\n   * The localized text for the import button.\n   */\n  i18nImport: string;\n\n  /**\n   * The localized 'Name' label.\n   */\n  i18nNameLabel: string;\n\n  /**\n   * The localized title.\n   */\n  i18nTitle: string;\n\n  /**\n   * The localized 'Type' label.\n   */\n  i18nTypeLabel: string;\n\n  /**\n   * Obtains a localized message with the action name and description.\n   * @param name the action name\n   * @param description the action description\n   */\n  i18nActionText(name: string, description: string): string;\n\n  /**\n   * Callback for when the import button is clicked.\n   * @param extensionUid the UID of the extension being imported/installed\n   */\n  onImport(extensionUid: string): void;\n}\n\n/**\n * A component that displays the extension import review information.\n */\nexport class ExtensionImportReview extends React.Component<\n  IExtensionImportReviewProps\n> {\n  public constructor(props: IExtensionImportReviewProps) {\n    super(props);\n    this.handleImport = this.handleImport.bind(this);\n  }\n\n  public getActions(): JSX.Element {\n    if (!this.props.actions) {\n      return <Grid.Col />;\n    }\n\n    return (\n      <Container>\n        {this.props.actions\n          ? this.props.actions.map((action, index) =>\n              index === 0 ? (\n                <Grid.Col\n                  key={0}\n                  dangerouslySetInnerHTML={{\n                    __html: this.props.i18nActionText(\n                      action.name,\n                      action.description\n                    ),\n                  }}\n                />\n              ) : (\n                <Grid.Row key={index}>\n                  <Grid.Col key={0} xs={2} />\n                  <Grid.Col\n                    key={1}\n                    dangerouslySetInnerHTML={{\n                      __html: this.props.i18nActionText(\n                        action.name,\n                        action.description\n                      ),\n                    }}\n                  />\n                </Grid.Row>\n              )\n            )\n          : null}\n      </Container>\n    );\n  }\n\n  public handleImport() {\n    return this.props.onImport(this.props.extensionUid);\n  }\n\n  public render() {\n    return (\n      <Grid className=\"extension-import-review__container\">\n        <Grid.Row className=\"extension-import-review__title\">\n          {this.props.i18nTitle}\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-import-review__propertyLabel\">\n            {this.props.i18nIdLabel}\n          </Grid.Col>\n          <Grid.Col className=\"extension-import-review__propertyValue\">\n            {this.props.extensionId}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-import-review__propertyLabel\">\n            {this.props.i18nNameLabel}\n          </Grid.Col>\n          <Grid.Col className=\"extension-import-review__propertyValue\">\n            {this.props.extensionName}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-import-review__propertyLabel\">\n            {this.props.i18nDescriptionLabel}\n          </Grid.Col>\n          <Grid.Col className=\"extension-import-review__propertyValue\">\n            {this.props.extensionDescription\n              ? this.props.extensionDescription\n              : null}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-import-review__propertyLabel\">\n            {this.props.i18nTypeLabel}\n          </Grid.Col>\n          <Grid.Col className=\"extension-import-review__propertyValue\">\n            {this.props.i18nExtensionTypeMessage}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-import-review__propertyLabel\">\n            {this.props.i18nActionsLabel}\n          </Grid.Col>\n          {this.getActions()}\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xsOffset={2}>\n            <Grid.Row>\n              <Grid.Col>\n                <Container className=\"extension-import-review__buttonBar\">\n                  <Button bsStyle=\"primary\" onClick={this.handleImport}>\n                    {this.props.i18nImport}\n                  </Button>\n                  <ButtonLink\n                    className=\"extension-import-review__cancelButton\"\n                    href={this.props.cancelLink}\n                    as={'default'}\n                  >\n                    {this.props.i18nCancel}\n                  </ButtonLink>\n                </Container>\n              </Grid.Col>\n            </Grid.Row>\n          </Grid.Col>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n","import { Text } from '@patternfly/react-core';\nimport { Row, Table } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IExtensionIntegration {\n  id: string; // used to create link to integration details page\n  name: string;\n  description: string;\n}\n\nexport interface IExtensionIntegrationsTableProps {\n  i18nDescription: string;\n  i18nName: string;\n  i18nUsageMessage: string;\n  onSelectIntegration: (integrationId: string) => void;\n  data: IExtensionIntegration[];\n}\n\nexport class ExtensionIntegrationsTable extends React.Component<\n  IExtensionIntegrationsTableProps\n> {\n  public getColumns() {\n    const headerFormat = (value: string) => (\n      <Table.Heading>{value}</Table.Heading>\n    );\n\n    const clickableValueFormat = (\n      value: string,\n      { rowData }: { rowData: any }\n    ) => {\n      // rowData is an Integration type so 'name' property is what makes the integration unique\n      const onClick = () => this.onIntegrationSelected(rowData.id);\n      return (\n        <Table.Cell>\n          <a href=\"javascript:void(0)\" onClick={onClick}>\n            {value}\n          </a>\n        </Table.Cell>\n      );\n    };\n\n    // Creates 2 columns:\n    // 1. first column is integration name\n    // 2. second column is optional integration description.\n    return [\n      {\n        cell: {\n          formatters: [clickableValueFormat],\n        },\n        header: {\n          formatters: [headerFormat],\n          label: this.props.i18nName,\n        },\n        property: 'name', // must match the name of the IntegrationOverview.name property\n      },\n      {\n        cell: {\n          formatters: [(value: string) => <Table.Cell>{value}</Table.Cell>],\n        },\n        header: {\n          formatters: [headerFormat],\n          label: this.props.i18nDescription,\n        },\n        property: 'description', // must match the name of the IntegrationOverview.description property\n      },\n    ];\n  }\n\n  public onIntegrationSelected(integrationId: string) {\n    this.props.onSelectIntegration(integrationId);\n  }\n\n  public render() {\n    return (\n      <div className=\"extension-group\">\n        <Row>\n          <div className=\"col-xs-offset-1 col-xs-11\">\n            <Text>{this.props.i18nUsageMessage}</Text>\n            {this.props.data.length !== 0 ? (\n              <Table.PfProvider\n                striped={true}\n                bordered={true}\n                hover={true}\n                columns={this.getColumns()}\n              >\n                <Table.Header />\n                <Table.Body rows={this.props.data} rowKey=\"name\" />\n              </Table.PfProvider>\n            ) : null}\n          </div>\n        </Row>\n      </div>\n    );\n  }\n}\n","import * as H from 'history';\nimport {\n  Button,\n  ListViewInfoItem,\n  ListViewItem,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../Layout';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n} from '../Shared';\n\nexport interface IExtensionListItemProps {\n  detailsPageLink: H.LocationDescriptor;\n  extensionDescription?: string;\n  extensionIcon?: string;\n  extensionId: string;\n  extensionName: string;\n  i18nCancelText: string;\n  i18nDelete: string;\n  i18nDeleteModalMessage: string;\n  i18nDeleteModalTitle: string;\n  i18nDeleteTip?: string;\n  i18nDetails: string;\n  i18nDetailsTip?: string;\n  i18nExtensionType: string;\n  i18nUpdate: string;\n  i18nUpdateTip?: string;\n  i18nUsedByMessage: string;\n\n  /**\n   * An href to use when the extension is being updated.\n   */\n  linkUpdateExtension: H.LocationDescriptor;\n\n  onDelete: (extensionId: string) => void;\n  usedBy: number;\n}\n\nexport interface IExtensionListItemState {\n  showDeleteDialog: boolean;\n}\n\nexport class ExtensionListItem extends React.Component<\n  IExtensionListItemProps,\n  IExtensionListItemState\n> {\n  public constructor(props: IExtensionListItemProps) {\n    super(props);\n\n    this.state = {\n      showDeleteDialog: false, // initial visibility of delete dialog\n    };\n\n    this.doCancel = this.doCancel.bind(this);\n    this.doDelete = this.doDelete.bind(this);\n    this.showDeleteDialog = this.showDeleteDialog.bind(this);\n  }\n\n  public doCancel() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n  }\n\n  public doDelete() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n\n    // TODO: disable components while delete is processing\n    this.props.onDelete(this.props.extensionId);\n  }\n\n  public getDeleteTooltip() {\n    return (\n      <Tooltip id=\"deleteTip\">\n        {this.props.i18nDeleteTip\n          ? this.props.i18nDeleteTip\n          : this.props.i18nDelete}\n      </Tooltip>\n    );\n  }\n\n  public getDetailsTooltip() {\n    return (\n      <Tooltip id=\"detailsTip\">\n        {this.props.i18nDetailsTip\n          ? this.props.i18nDetailsTip\n          : this.props.i18nDetails}\n      </Tooltip>\n    );\n  }\n\n  public getUpdateTooltip() {\n    return (\n      <Tooltip id=\"updateTip\">\n        {this.props.i18nUpdateTip\n          ? this.props.i18nUpdateTip\n          : this.props.i18nUpdate}\n      </Tooltip>\n    );\n  }\n\n  public showDeleteDialog() {\n    this.setState({\n      showDeleteDialog: true,\n    });\n  }\n\n  public render() {\n    return (\n      <>\n        <ConfirmationDialog\n          // extensionId={this.props.extensionId}\n          buttonStyle={ConfirmationButtonStyle.DANGER}\n          i18nCancelButtonText={this.props.i18nCancelText}\n          i18nConfirmButtonText={this.props.i18nDelete}\n          i18nConfirmationMessage={this.props.i18nDeleteModalMessage}\n          i18nTitle={this.props.i18nDeleteModalTitle}\n          icon={ConfirmationIconType.DANGER}\n          showDialog={this.state.showDeleteDialog}\n          onCancel={this.doCancel}\n          onConfirm={this.doDelete}\n        />\n        <ListViewItem\n          actions={\n            <div className=\"form-group\">\n              <OverlayTrigger\n                overlay={this.getDetailsTooltip()}\n                placement=\"top\"\n              >\n                <ButtonLink href={this.props.detailsPageLink} as={'default'}>\n                  {this.props.i18nDetails}\n                </ButtonLink>\n              </OverlayTrigger>\n              <OverlayTrigger overlay={this.getUpdateTooltip()} placement=\"top\">\n                <ButtonLink\n                  href={this.props.linkUpdateExtension}\n                  as={'default'}\n                >\n                  {this.props.i18nUpdate}\n                </ButtonLink>\n              </OverlayTrigger>\n              <OverlayTrigger overlay={this.getDeleteTooltip()} placement=\"top\">\n                <Button\n                  bsStyle=\"default\"\n                  disabled={this.props.usedBy !== 0}\n                  onClick={this.showDeleteDialog}\n                >\n                  {this.props.i18nDelete}\n                </Button>\n              </OverlayTrigger>\n            </div>\n          }\n          additionalInfo={[\n            <ListViewInfoItem key={1}>\n              {this.props.i18nExtensionType}\n            </ListViewInfoItem>,\n            <ListViewInfoItem key={2}>\n              {this.props.i18nUsedByMessage}\n            </ListViewInfoItem>,\n          ]}\n          description={\n            this.props.extensionDescription\n              ? this.props.extensionDescription\n              : ''\n          }\n          heading={this.props.extensionName}\n          hideCloseIcon={true}\n          leftContent={\n            this.props.extensionIcon ? (\n              <div className=\"blank-slate-pf-icon\">\n                <img\n                  src={this.props.extensionIcon}\n                  alt={this.props.extensionName}\n                  width={46}\n                />\n              </div>\n            ) : null\n          }\n          stacked={true}\n        />\n      </>\n    );\n  }\n}\n","import { Text, Title } from '@patternfly/react-core';\nimport * as H from 'history';\nimport {\n  EmptyState,\n  ListView,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../Shared';\n\nexport interface IExtensionListViewProps extends IListViewToolbarProps {\n  i18nDescription: string;\n  i18nEmptyStateInfo: string;\n  i18nEmptyStateTitle: string;\n  i18nLinkImportExtension: H.LocationDescriptor;\n  i18nLinkImportExtensionTip?: H.LocationDescriptor;\n  i18nName: string;\n  i18nNameFilterPlaceholder: string;\n  i18nTitle: string;\n  linkImportExtension: H.LocationDescriptor;\n}\n\nexport class ExtensionListView extends React.Component<\n  IExtensionListViewProps\n> {\n  public getImportTooltip() {\n    return (\n      <Tooltip id=\"importTip\">\n        {this.props.i18nLinkImportExtensionTip\n          ? this.props.i18nLinkImportExtensionTip\n          : this.props.i18nLinkImportExtension}\n      </Tooltip>\n    );\n  }\n\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <OverlayTrigger overlay={this.getImportTooltip()} placement=\"top\">\n              <ButtonLink href={this.props.linkImportExtension} as={'primary'}>\n                {this.props.i18nLinkImportExtension}\n              </ButtonLink>\n            </OverlayTrigger>\n          </div>\n        </ListViewToolbar>\n        <Container>\n          {this.props.i18nTitle !== '' && (\n            <Title size=\"lg\">{this.props.i18nTitle}</Title>\n          )}\n          {this.props.i18nDescription !== '' && (\n            <Text\n              dangerouslySetInnerHTML={{ __html: this.props.i18nDescription }}\n            />\n          )}\n          {this.props.children ? (\n            <ListView>{this.props.children}</ListView>\n          ) : (\n            <EmptyState>\n              <EmptyState.Icon />\n              <EmptyState.Title>\n                {this.props.i18nEmptyStateTitle}\n              </EmptyState.Title>\n              <EmptyState.Info>{this.props.i18nEmptyStateInfo}</EmptyState.Info>\n              <EmptyState.Action>\n                <OverlayTrigger\n                  overlay={this.getImportTooltip()}\n                  placement=\"top\"\n                >\n                  <ButtonLink\n                    href={this.props.linkImportExtension}\n                    as={'primary'}\n                  >\n                    {this.props.i18nLinkImportExtension}\n                  </ButtonLink>\n                </OverlayTrigger>\n              </EmptyState.Action>\n            </EmptyState>\n          )}\n        </Container>\n      </>\n    );\n  }\n}\n","import { Grid } from 'patternfly-react';\nimport * as React from 'react';\nimport './ExtensionOverview.css';\n\nexport interface IExtensionOverviewProps {\n  /**\n   * The optional description of the extension.\n   */\n  extensionDescription?: string;\n\n  /**\n   * The name of the extension.\n   */\n  extensionName: string;\n\n  /**\n   * The localized 'Description' label.\n   */\n  i18nDescription: string;\n\n  /**\n   * The localized 'Last Update' label.\n   */\n  i18nLastUpdate: string;\n\n  /**\n   * The localized last update date.\n   */\n  i18nLastUpdateDate?: string;\n\n  /**\n   * The localized 'Name' label.\n   */\n  i18nName: string;\n\n  /**\n   * The localized 'Type' label.\n   */\n  i18nType: string;\n\n  /**\n   * The localized type message.\n   */\n  i18nTypeMessage: string;\n}\n\n/**\n * A component that displays the overview section of the extension details page.\n */\nexport class ExtensionOverview extends React.Component<\n  IExtensionOverviewProps\n> {\n  public render() {\n    return (\n      <Grid>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-overview__propertyLabel\">\n            {this.props.i18nName}\n          </Grid.Col>\n          <Grid.Col className=\"extension-overview__propertyValue\">\n            {this.props.extensionName}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-overview__propertyLabel\">\n            {this.props.i18nDescription}\n          </Grid.Col>\n          <Grid.Col className=\"extension-overview__propertyValue\">\n            {this.props.extensionDescription\n              ? this.props.extensionDescription\n              : null}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-overview__propertyLabel\">\n            {this.props.i18nType}\n          </Grid.Col>\n          <Grid.Col className=\"extension-overview__propertyValue\">\n            {this.props.i18nTypeMessage}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-overview__propertyLabel\">\n            {this.props.i18nLastUpdate}\n          </Grid.Col>\n          <Grid.Col className=\"extension-overview__propertyValue\">\n            {this.props.i18nLastUpdateDate\n              ? this.props.i18nLastUpdateDate\n              : null}\n          </Grid.Col>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n","import { Row } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IAction {\n  description: string;\n  name: string;\n}\n\nexport interface IExtensionSupportsProps {\n  extensionActions: IAction[];\n}\n\n/**\n * A component that displays the support section of the extension details page.\n */\nexport class ExtensionSupports extends React.Component<\n  IExtensionSupportsProps\n> {\n  public render() {\n    return (\n      <div className=\"extension-group\">\n        {this.props.extensionActions.length !== 0 ? (\n          <Row>\n            <div className=\"col-xs-offset-1 col-xs-11\">\n              {this.props.extensionActions.map(\n                (action: IAction, index: number) => (\n                  <div key={index}>\n                    <strong>{action.name}</strong> - {action.description}\n                  </div>\n                )\n              )}\n            </div>\n          </Row>\n        ) : null}\n      </div>\n    );\n  }\n}\n","import { Card } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IConnectionsMetricProps {\n  i18nTitle: string;\n}\n\nexport class ConnectionsMetric extends React.PureComponent<\n  IConnectionsMetricProps\n> {\n  public render() {\n    return (\n      <Card accented={true} aggregated={true} matchHeight={true}>\n        <Card.Title>{this.props.i18nTitle}</Card.Title>\n      </Card>\n    );\n  }\n}\n","import { Title } from '@patternfly/react-core';\nimport * as H from 'history';\nimport { CardGrid, Grid } from 'patternfly-react';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ButtonLink, Container } from '../Layout';\nimport './Dashboard.css';\n\nexport interface IIntegrationsPageProps {\n  linkToIntegrations: H.LocationDescriptor;\n  linkToIntegrationCreation: H.LocationDescriptor;\n  linkToConnections: H.LocationDescriptor;\n  linkToConnectionCreation: H.LocationDescriptor;\n  integrationsOverview: JSX.Element;\n  connectionsOverview: JSX.Element;\n  messagesOverview: JSX.Element;\n  uptimeOverview: JSX.Element;\n  topIntegrations: JSX.Element;\n  integrationBoard: JSX.Element;\n  integrationUpdates: JSX.Element;\n  connections: JSX.Element;\n  i18nConnections: string;\n  i18nLinkCreateConnection: string;\n  i18nLinkCreateIntegration: string;\n  i18nLinkToConnections: string;\n  i18nLinkToIntegrations: string;\n  i18nTitle: string;\n}\n\nexport class Dashboard extends React.PureComponent<IIntegrationsPageProps> {\n  public render() {\n    return (\n      <Container>\n        <Grid fluid={true}>\n          <Grid.Row>\n            <Grid.Col sm={12}>\n              <div className={'Dashboard-header'}>\n                <Title size=\"lg\" className={'Dashboard-header__title'}>\n                  {this.props.i18nTitle}\n                </Title>\n                <div className=\"Dashboard-header__actions\">\n                  <ButtonLink href={this.props.linkToIntegrations}>\n                    {this.props.i18nLinkToIntegrations}\n                  </ButtonLink>\n                  <ButtonLink\n                    href={this.props.linkToIntegrationCreation}\n                    as={'primary'}\n                  >\n                    {this.props.i18nLinkCreateIntegration}\n                  </ButtonLink>\n                </div>\n              </div>\n            </Grid.Col>\n          </Grid.Row>\n        </Grid>\n        <CardGrid fluid={true} matchHeight={true}>\n          <CardGrid.Row>\n            <CardGrid.Col sm={6} md={3}>\n              {this.props.integrationsOverview}\n            </CardGrid.Col>\n            <CardGrid.Col sm={6} md={3}>\n              {this.props.connectionsOverview}\n            </CardGrid.Col>\n            <CardGrid.Col sm={6} md={3}>\n              {this.props.messagesOverview}\n            </CardGrid.Col>\n            <CardGrid.Col sm={6} md={3}>\n              {this.props.uptimeOverview}\n            </CardGrid.Col>\n          </CardGrid.Row>\n        </CardGrid>\n        <Grid fluid={true}>\n          <Grid.Row>\n            <Grid.Col sm={12}>{this.props.topIntegrations}</Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col sm={12} md={6}>\n              {this.props.integrationBoard}\n            </Grid.Col>\n            <Grid.Col sm={12} md={6}>\n              {this.props.integrationUpdates}\n            </Grid.Col>\n          </Grid.Row>\n        </Grid>\n        <Grid fluid={true} style={{ marginTop: '20px' }}>\n          <Grid.Row>\n            <Grid.Col sm={12}>\n              <div className={'Dashboard-header'}>\n                <Title size=\"lg\" className={'Dashboard-header__title'}>\n                  {this.props.i18nConnections}\n                </Title>\n                <div className=\"Dashboard-header__actions\">\n                  <Link to={this.props.linkToConnections}>\n                    {this.props.i18nLinkToConnections}\n                  </Link>\n                  <ButtonLink\n                    href={this.props.linkToConnectionCreation}\n                    as={'primary'}\n                  >\n                    {this.props.i18nLinkCreateConnection}\n                  </ButtonLink>\n                </div>\n              </div>\n            </Grid.Col>\n          </Grid.Row>\n        </Grid>\n        <CardGrid fluid={true} matchHeight={true}>\n          <CardGrid.Row>{this.props.connections}</CardGrid.Row>\n        </CardGrid>\n      </Container>\n    );\n  }\n}\n","import { Card, DonutChart, patternfly } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationBoardProps {\n  pendingIntegrations: number;\n  runningIntegrations: number;\n  stoppedIntegrations: number;\n  i18nIntegrationStatePending: string;\n  i18nIntegrationStateRunning: string;\n  i18nIntegrationStateStopped: string;\n  i18nIntegrations: string;\n  i18nTitle: string;\n  i18nTotal: string;\n}\n\nexport class IntegrationBoard extends React.PureComponent<\n  IIntegrationBoardProps\n> {\n  public render() {\n    const data = {\n      colors: {\n        Pending: patternfly.pfPaletteColors.black200,\n        Published: patternfly.pfPaletteColors.blue400,\n        Stopped: patternfly.pfPaletteColors.black300,\n      },\n      columns: [\n        [\n          this.props.i18nIntegrationStateRunning,\n          this.props.runningIntegrations,\n        ],\n        [\n          this.props.i18nIntegrationStateStopped,\n          this.props.stoppedIntegrations,\n        ],\n        [\n          this.props.i18nIntegrationStatePending,\n          this.props.pendingIntegrations,\n        ],\n      ],\n      type: 'donut',\n    };\n\n    return (\n      <Card>\n        <Card.Heading>\n          <Card.Title>{this.props.i18nTitle}</Card.Title>\n        </Card.Heading>\n        <Card.Body>\n          <DonutChart\n            id=\"integration-board\"\n            size={{ height: 120 }}\n            data={data}\n            tooltip={{\n              contents: patternfly.pfDonutTooltipContents,\n              show: true,\n            }}\n            title={{\n              secondary: this.props.i18nIntegrations,\n              type: this.props.i18nTotal,\n            }}\n            legend={{ show: true, position: 'right' }}\n          />\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n","import { Card } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IRecentUpdatesProps {\n  i18nTitle: string;\n}\n\nexport class RecentUpdatesCard extends React.Component<IRecentUpdatesProps> {\n  public render() {\n    return (\n      <Card accented={false}>\n        <Card.Heading>\n          <Card.Title>{this.props.i18nTitle}</Card.Title>\n        </Card.Heading>\n        <Card.Body>{this.props.children}</Card.Body>\n      </Card>\n    );\n  }\n}\n","import { Button } from 'patternfly-react';\nimport * as React from 'react';\nimport { Dialog } from '../../Shared';\nimport { TagNameValidationError } from './CiCdUIModels';\n\nexport interface ICiCdEditDialogProps {\n  i18nTitle: string;\n  i18nDescription: string;\n  tagName: string;\n  i18nInputLabel: string;\n  i18nSaveButtonText: string;\n  i18nCancelButtonText: string;\n  i18nNoNameError: string;\n  i18nNameInUseError: string;\n  validationError: TagNameValidationError;\n  onHide: () => void;\n  onValidate: (name: string) => void;\n  onSave: (newName: string) => void;\n}\n\nexport interface ICiCdEditDialogState {\n  tagName: string;\n}\n\nexport class CiCdEditDialog extends React.Component<\n  ICiCdEditDialogProps,\n  ICiCdEditDialogState\n> {\n  constructor(props: ICiCdEditDialogProps) {\n    super(props);\n    this.state = {\n      tagName: this.props.tagName,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  public handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const name = event.target.value.trim();\n    this.setState({ tagName: name }, () => this.props.onValidate(name));\n  }\n  public handleClick() {\n    this.props.onSave(this.state.tagName);\n  }\n  public render() {\n    return (\n      <Dialog\n        body={\n          <form className=\"form-horizontal\">\n            <p>{this.props.i18nDescription}</p>\n            <div\n              className={\n                this.props.validationError === TagNameValidationError.NoErrors\n                  ? 'form-group'\n                  : 'form-group has-error'\n              }\n            >\n              <label className=\"col-sm-3 control-label\" htmlFor=\"tagNameInput\">\n                {this.props.i18nInputLabel}\n              </label>\n              <div className=\"col-sm-9\">\n                <input\n                  id=\"tagNameInput\"\n                  className=\"form-control\"\n                  type=\"text\"\n                  defaultValue={this.props.tagName}\n                  onChange={this.handleChange}\n                />\n                {this.props.validationError ===\n                  TagNameValidationError.NoErrors && (\n                  <span className=\"help-block\">\n                    &nbsp;{/* todo: pad out the area */}\n                  </span>\n                )}\n                {this.props.validationError ===\n                  TagNameValidationError.NoName && (\n                  <span className=\"help-block\">\n                    {this.props.i18nNoNameError}\n                  </span>\n                )}\n                {this.props.validationError ===\n                  TagNameValidationError.NameInUse && (\n                  <span className=\"help-block\">\n                    {this.props.i18nNameInUseError}\n                  </span>\n                )}\n              </div>\n            </div>\n          </form>\n        }\n        footer={\n          <>\n            <Button onClick={this.props.onHide}>\n              {this.props.i18nCancelButtonText}\n            </Button>\n            <Button\n              bsStyle={'primary'}\n              onClick={this.handleClick}\n              disabled={\n                this.state.tagName === '' ||\n                this.props.validationError !== TagNameValidationError.NoErrors\n              }\n            >\n              {this.props.i18nSaveButtonText}\n            </Button>\n          </>\n        }\n        onHide={this.props.onHide}\n        title={this.props.i18nTitle}\n      />\n    );\n  }\n}\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface ICiCdListProps {\n  children: any;\n}\n\nexport class CiCdList extends React.Component<ICiCdListProps> {\n  public render() {\n    return <ListView>{this.props.children}</ListView>;\n  }\n}\n","import { Button, EmptyState } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface ICiCdListEmptyState {\n  onAddNew: () => void;\n  i18nTitle: string;\n  i18nInfo: string;\n  i18nAddNewButtonText: string;\n}\n\nexport class CiCdListEmptyState extends React.Component<ICiCdListEmptyState> {\n  public render() {\n    return (\n      <EmptyState>\n        <EmptyState.Icon />\n        <EmptyState.Title>{this.props.i18nTitle}</EmptyState.Title>\n        <EmptyState.Info>{this.props.i18nInfo}</EmptyState.Info>\n        <EmptyState.Action>\n          <Button\n            bsStyle=\"primary\"\n            bsSize=\"large\"\n            onClick={this.props.onAddNew}\n          >\n            {this.props.i18nAddNewButtonText}\n          </Button>\n        </EmptyState.Action>\n      </EmptyState>\n    );\n  }\n}\n","import { Button } from 'patternfly-react';\nimport { ListViewItem } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface ICiCdListItemProps {\n  onEditClicked: (name: string) => void;\n  onRemoveClicked: (name: string) => void;\n  i18nEditButtonText: string;\n  i18nRemoveButtonText: string;\n  /**\n   * Text string for the number of integrations using this tag\n   */\n  i18nUsesText: string;\n  /**\n   * Environment name\n   */\n  name: string;\n}\n\nexport class CiCdListItem extends React.Component<ICiCdListItemProps> {\n  constructor(props: ICiCdListItemProps) {\n    super(props);\n    this.handleEditClicked = this.handleEditClicked.bind(this);\n    this.handleRemoveClicked = this.handleRemoveClicked.bind(this);\n  }\n  public handleEditClicked() {\n    this.props.onEditClicked(this.props.name);\n  }\n  public handleRemoveClicked() {\n    this.props.onRemoveClicked(this.props.name);\n  }\n  public render() {\n    return (\n      <ListViewItem\n        heading={this.props.name}\n        description={this.props.i18nUsesText}\n        additionalInfo={[]}\n        actions={\n          <div>\n            <Button onClick={this.handleEditClicked}>\n              {this.props.i18nEditButtonText}\n            </Button>\n            <Button onClick={this.handleRemoveClicked}>\n              {this.props.i18nRemoveButtonText}\n            </Button>\n          </div>\n        }\n      />\n    );\n  }\n}\n","import { Button } from 'patternfly-react';\nimport * as React from 'react';\nimport { Container } from '../../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../../Shared';\n\nexport interface ICiCdListViewProps extends IListViewToolbarProps {\n  i18nAddNewButtonText: string;\n  onAddNew: () => void;\n}\n\nexport class CiCdListView extends React.Component<ICiCdListViewProps> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            {this.props.resultsCount !== 0 && (\n              <Button className=\"btn btn-primary\" onClick={this.props.onAddNew}>\n                {this.props.i18nAddNewButtonText}\n              </Button>\n            )}\n          </div>\n        </ListViewToolbar>\n        <Container>{this.props.children}</Container>\n      </>\n    );\n  }\n}\n","import * as React from 'react';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n  IListViewToolbarProps,\n  SimplePageHeader,\n} from '../../Shared';\nimport { CiCdEditDialog } from './CiCdEditDialog';\nimport { CiCdListView } from './CiCdListView';\nimport { TagNameValidationError } from './CiCdUIModels';\n\nexport interface ICiCdManagePageUIChildrenProps {\n  openAddDialog: () => void;\n  openEditDialog: (name: string) => void;\n  openRemoveDialog: (name: string) => void;\n}\n\nexport interface ICiCdManagePageUIProps extends IListViewToolbarProps {\n  i18nAddTagDialogTitle: string;\n  i18nAddTagDialogDescription: string;\n  i18nEditTagDialogTitle: string;\n  i18nEditTagDialogDescription: string;\n  i18nAddNewButtonText: string;\n  i18nTagInputLabel: string;\n  i18nSaveButtonText: string;\n  i18nCancelButtonText: string;\n  i18nConfirmCancelButtonText: string;\n  i18nConfirmRemoveButtonText: string;\n  i18nRemoveConfirmationMessage: (name: string) => string;\n  i18nRemoveConfirmationTitle: string;\n  i18nRemoveConfirmationDetailMessage: string;\n  i18nPageTitle: string;\n  i18nPageDescription: string;\n  i18nNoNameError: string;\n  i18nNameInUseError: string;\n  nameValidationError: TagNameValidationError;\n  onValidateItem: (name: string) => void;\n  onEditItem: (oldName: string, newName: string) => void;\n  onAddItem: (name: string) => void;\n  onRemoveItem: (name: string) => void;\n  children: (props: ICiCdManagePageUIChildrenProps) => any;\n}\n\nexport interface ICiCdManagePageUIState {\n  showAddDialog: boolean;\n  showEditDialog: boolean;\n  showRemoveDialog: boolean;\n  currentItemName?: string;\n}\n\nexport class CiCdManagePageUI extends React.Component<\n  ICiCdManagePageUIProps,\n  ICiCdManagePageUIState\n> {\n  public constructor(props: ICiCdManagePageUIProps) {\n    super(props);\n    this.state = {\n      showAddDialog: false,\n      showEditDialog: false,\n      showRemoveDialog: false,\n    };\n    this.openAddDialog = this.openAddDialog.bind(this);\n    this.closeAddDialog = this.closeAddDialog.bind(this);\n    this.openEditDialog = this.openEditDialog.bind(this);\n    this.closeEditDialog = this.closeEditDialog.bind(this);\n    this.openRemoveDialog = this.openRemoveDialog.bind(this);\n    this.closeRemoveDialog = this.closeRemoveDialog.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.handleRemoveConfirm = this.handleRemoveConfirm.bind(this);\n  }\n  public handleSave(name: string) {\n    if (this.state.showEditDialog) {\n      this.closeEditDialog();\n      this.props.onEditItem(this.state.currentItemName!, name);\n    }\n    if (this.state.showAddDialog) {\n      this.closeAddDialog();\n      this.props.onAddItem(name);\n    }\n    if (this.state.showRemoveDialog) {\n      this.closeRemoveDialog();\n      this.props.onRemoveItem(name);\n    }\n  }\n  public handleRemoveConfirm() {\n    this.handleSave(this.state.currentItemName!);\n  }\n  public openRemoveDialog(name: string) {\n    this.setState({ currentItemName: name, showRemoveDialog: true });\n  }\n  public closeRemoveDialog() {\n    this.setState({ showRemoveDialog: false });\n  }\n  public openAddDialog() {\n    this.setState({ showAddDialog: true });\n  }\n  public closeAddDialog() {\n    this.setState({ showAddDialog: false });\n  }\n  public openEditDialog(name: string) {\n    this.setState({ currentItemName: name, showEditDialog: true });\n  }\n  public closeEditDialog() {\n    this.setState({ showEditDialog: false });\n  }\n  public render() {\n    return (\n      <>\n        <SimplePageHeader\n          className=\"pf-u-my-md\"\n          i18nTitle={this.props.i18nPageTitle}\n          i18nDescription={this.props.i18nPageDescription}\n        />\n        {this.state.showAddDialog && (\n          <CiCdEditDialog\n            i18nTitle={this.props.i18nAddTagDialogTitle}\n            i18nDescription={this.props.i18nAddTagDialogDescription}\n            tagName={''}\n            i18nInputLabel={this.props.i18nTagInputLabel}\n            i18nSaveButtonText={this.props.i18nSaveButtonText}\n            i18nCancelButtonText={this.props.i18nCancelButtonText}\n            i18nNoNameError={this.props.i18nNoNameError}\n            i18nNameInUseError={this.props.i18nNameInUseError}\n            validationError={this.props.nameValidationError}\n            onHide={this.closeAddDialog}\n            onSave={this.handleSave}\n            onValidate={this.props.onValidateItem}\n          />\n        )}\n        {this.state.showEditDialog && (\n          <CiCdEditDialog\n            i18nTitle={this.props.i18nEditTagDialogTitle}\n            i18nDescription={this.props.i18nEditTagDialogDescription}\n            tagName={this.state.currentItemName!}\n            i18nInputLabel={this.props.i18nTagInputLabel}\n            i18nSaveButtonText={this.props.i18nSaveButtonText}\n            i18nCancelButtonText={this.props.i18nCancelButtonText}\n            i18nNoNameError={this.props.i18nNoNameError}\n            i18nNameInUseError={this.props.i18nNameInUseError}\n            validationError={this.props.nameValidationError}\n            onHide={this.closeEditDialog}\n            onSave={this.handleSave}\n            onValidate={this.props.onValidateItem}\n          />\n        )}\n        {this.state.showRemoveDialog && (\n          <ConfirmationDialog\n            buttonStyle={ConfirmationButtonStyle.NORMAL}\n            icon={ConfirmationIconType.DANGER}\n            i18nCancelButtonText={this.props.i18nConfirmCancelButtonText}\n            i18nConfirmButtonText={this.props.i18nConfirmRemoveButtonText}\n            i18nConfirmationMessage={this.props.i18nRemoveConfirmationMessage(\n              this.state.currentItemName!\n            )}\n            i18nTitle={this.props.i18nRemoveConfirmationTitle}\n            i18nDetailsMessage={this.props.i18nRemoveConfirmationDetailMessage}\n            showDialog={this.state.showRemoveDialog}\n            onCancel={this.closeRemoveDialog}\n            onConfirm={this.handleRemoveConfirm}\n          />\n        )}\n        <CiCdListView\n          activeFilters={this.props.activeFilters}\n          currentFilterType={this.props.currentFilterType}\n          currentSortType={this.props.currentSortType}\n          currentValue={this.props.currentValue}\n          filterTypes={this.props.filterTypes}\n          isSortAscending={this.props.isSortAscending}\n          resultsCount={this.props.resultsCount}\n          sortTypes={this.props.sortTypes}\n          onUpdateCurrentValue={this.props.onUpdateCurrentValue}\n          onValueKeyPress={this.props.onValueKeyPress}\n          onFilterAdded={this.props.onFilterAdded}\n          onSelectFilterType={this.props.onSelectFilterType}\n          onFilterValueSelected={this.props.onFilterValueSelected}\n          onRemoveFilter={this.props.onRemoveFilter}\n          onClearFilters={this.props.onClearFilters}\n          onToggleCurrentSortDirection={this.props.onToggleCurrentSortDirection}\n          onUpdateCurrentSortType={this.props.onUpdateCurrentSortType}\n          i18nResultsCount={this.props.i18nResultsCount}\n          i18nAddNewButtonText={this.props.i18nAddNewButtonText}\n          onAddNew={this.openAddDialog}\n        >\n          {this.props.children({\n            openAddDialog: this.openAddDialog,\n            openEditDialog: this.openEditDialog,\n            openRemoveDialog: this.openRemoveDialog,\n          })}\n        </CiCdListView>\n      </>\n    );\n  }\n}\n","import * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nfunction getRandom(min: number, max: number) {\n  return Math.random() * (max - min) + min;\n}\n\nconst ItemSkeleton = () => (\n  <ContentLoader\n    height={68}\n    width={500}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={{\n      height: 68,\n      width: '100%',\n    }}\n  >\n    <rect\n      x=\"15\"\n      y=\"20\"\n      rx=\"5\"\n      ry=\"5\"\n      width={400 * getRandom(0.6, 1)}\n      height=\"18\"\n    />\n  </ContentLoader>\n);\n\nexport class CiCdListSkeleton extends React.PureComponent {\n  public render() {\n    return (\n      <>\n        <div\n          className={'list-group-item'}\n          data-testid=\"environments-list-skeleton\"\n        >\n          <div>\n            <ItemSkeleton />\n          </div>\n        </div>\n        <div\n          className={'list-group-item'}\n          data-testid=\"environments-list-skeleton\"\n        >\n          <div>\n            <ItemSkeleton />\n          </div>\n        </div>\n        <div\n          className={'list-group-item'}\n          data-testid=\"environments-list-skeleton\"\n        >\n          <div>\n            <ItemSkeleton />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import { Button } from 'patternfly-react';\nimport * as React from 'react';\nimport { Dialog } from '../../Shared';\nimport { ITagIntegrationEntry } from './CiCdUIModels';\n\nexport interface ITagIntegrationDialogChildrenProps {\n  handleChange: (\n    items: ITagIntegrationEntry[],\n    initialItems: ITagIntegrationEntry[]\n  ) => void;\n}\n\nexport interface ITagIntegrationDialogProps {\n  i18nTitle: string;\n  i18nCancelButtonText: string;\n  i18nSaveButtonText: string;\n  onHide: () => void;\n  onSave: (items: ITagIntegrationEntry[]) => void;\n  children: (props: ITagIntegrationDialogChildrenProps) => any;\n}\nexport interface ITagIntegrationDialogState {\n  disableSave: boolean;\n}\n\nexport class TagIntegrationDialog extends React.Component<\n  ITagIntegrationDialogProps,\n  ITagIntegrationDialogState\n> {\n  private itemsDraft: ITagIntegrationEntry[] | undefined;\n  constructor(props: ITagIntegrationDialogProps) {\n    super(props);\n    this.state = {\n      disableSave: true,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  public handleChange(\n    items: ITagIntegrationEntry[],\n    initialItems: ITagIntegrationEntry[]\n  ) {\n    const disableSave = initialItems\n      .map(\n        (item, index) =>\n          item.name === items[index].name &&\n          item.selected === items[index].selected\n      )\n      .reduce((acc, current) => acc && current, true);\n    this.itemsDraft = items;\n    this.setState({ disableSave });\n  }\n  public handleClick() {\n    this.props.onSave(this.itemsDraft!);\n  }\n  public render() {\n    return (\n      <Dialog\n        body={this.props.children({\n          handleChange: this.handleChange,\n        })}\n        footer={\n          <>\n            <Button onClick={this.props.onHide}>\n              {this.props.i18nCancelButtonText}\n            </Button>\n            <Button\n              bsStyle={'primary'}\n              onClick={this.handleClick}\n              disabled={this.state.disableSave}\n            >\n              {this.props.i18nSaveButtonText}\n            </Button>\n          </>\n        }\n        title={this.props.i18nTitle}\n        onHide={this.props.onHide}\n      />\n    );\n  }\n}\n","import { ListViewItem } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface ITagIntegrationListItemProps {\n  selected: boolean;\n  name: string;\n  onChange: (name: string, selected: boolean) => void;\n}\n\nexport class TagIntegrationListItem extends React.Component<\n  ITagIntegrationListItemProps\n> {\n  constructor(props: ITagIntegrationListItemProps) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  public handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.props.onChange(this.props.name, event.target.checked);\n  }\n  public render() {\n    return (\n      <ListViewItem\n        checkboxInput={\n          <input\n            type=\"checkbox\"\n            defaultChecked={this.props.selected}\n            onChange={this.handleChange}\n          />\n        }\n        heading={this.props.name}\n        description={''}\n        additionalInfo={[]}\n      />\n    );\n  }\n}\n","import * as H from 'history';\nimport { EmptyState } from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../../Layout';\n\nexport interface ITagIntegrationDialogEmptyStateProps {\n  href: H.LocationDescriptor;\n  i18nTitle: string;\n  i18nInfo: string;\n  i18nGoToManageCiCdButtonText: string;\n}\n\nexport class TagIntegrationDialogEmptyState extends React.Component<\n  ITagIntegrationDialogEmptyStateProps\n> {\n  public render() {\n    return (\n      <EmptyState\n        style={\n          {\n            background: 'inherit',\n            border: 'none',\n          } /* todo component specific override */\n        }\n      >\n        <EmptyState.Icon />\n        <EmptyState.Title>{this.props.i18nTitle}</EmptyState.Title>\n        <EmptyState.Info>{this.props.i18nInfo}</EmptyState.Info>\n        <EmptyState.Action>\n          <ButtonLink as=\"primary\" size=\"lg\" href={this.props.href}>\n            {this.props.i18nGoToManageCiCdButtonText}\n          </ButtonLink>\n        </EmptyState.Action>\n      </EmptyState>\n    );\n  }\n}\n","import * as H from 'history';\nimport * as React from 'react';\nimport { CiCdList } from './CiCdList';\nimport { ITagIntegrationEntry } from './CiCdUIModels';\nimport { TagIntegrationDialogEmptyState } from './TagIntegrationDialogEmptyState';\nimport { TagIntegrationListItem } from './TagIntegrationListItem';\n\nexport interface ITagIntegrationDialogBodyProps {\n  manageCiCdHref: H.LocationDescriptor;\n  initialItems: ITagIntegrationEntry[];\n  onChange: (\n    items: ITagIntegrationEntry[],\n    initialItems: ITagIntegrationEntry[]\n  ) => void;\n  i18nEmptyStateTitle: string;\n  i18nEmptyStateInfo: string;\n  i18nEmptyStateButtonText: string;\n}\n\nexport interface ITagIntegrationDialogBodyState {\n  items: ITagIntegrationEntry[];\n}\n\nexport class TagIntegrationDialogBody extends React.Component<\n  ITagIntegrationDialogBodyProps,\n  ITagIntegrationDialogBodyState\n> {\n  constructor(props: ITagIntegrationDialogBodyProps) {\n    super(props);\n    this.state = {\n      items: this.props.initialItems,\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  public handleChange(name: string, selected: boolean) {\n    const items = this.props.initialItems.map(item =>\n      item.name === name ? { name, selected } : item\n    );\n    this.props.onChange(items, this.props.initialItems);\n  }\n  public render() {\n    return (\n      <>\n        {this.state.items.length > 0 && (\n          <>\n            <CiCdList>\n              {this.state.items.map((item, index) => (\n                <TagIntegrationListItem\n                  key={index}\n                  name={item.name}\n                  selected={item.selected}\n                  onChange={this.handleChange}\n                />\n              ))}\n            </CiCdList>\n          </>\n        )}\n        {this.state.items.length === 0 && (\n          <TagIntegrationDialogEmptyState\n            href={this.props.manageCiCdHref}\n            i18nTitle={this.props.i18nEmptyStateTitle}\n            i18nInfo={this.props.i18nEmptyStateInfo}\n            i18nGoToManageCiCdButtonText={this.props.i18nEmptyStateButtonText}\n          />\n        )}\n      </>\n    );\n  }\n}\n","import * as React from 'react';\nimport { DndFileChooser, SimplePageHeader } from '../../Shared';\n\nexport interface IImportPageUIProps {\n  i18nPageTitle: string;\n  i18nPageDescription: string;\n  i18nNoFileSelectedMessage: string;\n  i18nSelectedFileLabel: string;\n  i18nInstructions: string;\n  i18nUploadFailedMessages?: string[];\n  i18nUploadSuccessMessages?: string[];\n  i18nHelpMessage: string;\n  onUploadRejected(fileName: string): string;\n  onUploadAccepted(file: File[]): void;\n}\n\nexport class ImportPageUI extends React.Component<IImportPageUIProps> {\n  public render() {\n    return (\n      <>\n        <SimplePageHeader\n          i18nTitle={this.props.i18nPageTitle}\n          i18nDescription={this.props.i18nPageDescription}\n        />\n        <DndFileChooser\n          allowMultiple={true}\n          fileExtensions={'.zip'}\n          onUploadRejected={this.props.onUploadRejected}\n          disableDropzone={false}\n          onUploadAccepted={this.props.onUploadAccepted}\n          i18nNoFileSelectedMessage={this.props.i18nNoFileSelectedMessage}\n          i18nSelectedFileLabel={this.props.i18nSelectedFileLabel}\n          i18nInstructions={this.props.i18nInstructions}\n          i18nUploadFailedMessages={this.props.i18nUploadFailedMessages}\n          i18nUploadSuccessMessages={this.props.i18nUploadSuccessMessages}\n          i18nHelpMessage={this.props.i18nHelpMessage}\n        />\n      </>\n    );\n  }\n}\n","import * as H from 'history';\nimport { DropdownKebab } from 'patternfly-react';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ButtonLink } from '../Layout';\n\nexport interface IIntegrationAction {\n  href?: H.LocationDescriptor;\n  onClick?: (e: React.MouseEvent<any>) => any;\n  label: string | JSX.Element;\n}\n\nexport interface IIntegrationActionsProps {\n  integrationId: string;\n  actions: IIntegrationAction[];\n  detailsHref?: H.LocationDescriptor;\n}\n\nexport class IntegrationActions extends React.Component<\n  IIntegrationActionsProps\n> {\n  public render() {\n    return (\n      <>\n        <ButtonLink href={this.props.detailsHref} as={'primary'}>\n          View\n        </ButtonLink>\n        <DropdownKebab\n          id={`integration-${this.props.integrationId}-action-menu`}\n          pullRight={true}\n        >\n          {this.props.actions.map((a, idx) => (\n            <li role={'presentation'} key={idx}>\n              {a.href ? (\n                <Link\n                  to={a.href}\n                  onClick={a.onClick}\n                  role={'menuitem'}\n                  tabIndex={idx + 1}\n                >\n                  {a.label}\n                </Link>\n              ) : (\n                <a\n                  href={'javascript:void(0)'}\n                  onClick={a.onClick}\n                  role={'menuitem'}\n                  tabIndex={idx + 1}\n                >\n                  {a.label}\n                </a>\n              )}\n            </li>\n          ))}\n        </DropdownKebab>\n      </>\n    );\n  }\n}\n","import { Button, ListView } from 'patternfly-react';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Container } from '../Layout';\n\nexport interface IIntegrationDetailActivityProps {\n  i18nBtnRefresh: string;\n  i18nLastRefresh: string;\n  i18nViewLogOpenShift: string;\n  linkToOpenShiftLog: string;\n}\n\nexport class IntegrationDetailActivity extends React.Component<\n  IIntegrationDetailActivityProps\n> {\n  public render() {\n    return (\n      <>\n        <Container>\n          <div className=\"pull-right\">\n            <Link to={this.props.linkToOpenShiftLog}>\n              {this.props.i18nViewLogOpenShift}\n            </Link>\n            {'  |  '}\n            {this.props.i18nLastRefresh}\n            {'  '}\n            <Button>{this.props.i18nBtnRefresh}</Button>\n          </div>\n        </Container>\n        {this.props.children ? (\n          <ListView>{this.props.children}</ListView>\n        ) : null}\n      </>\n    );\n  }\n}\n","import { Col, Icon, ListView, Row, Table } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationDetailActivityItemProps {\n  date: string;\n  errorCount: number;\n  i18nErrorsFound: string;\n  i18nHeaderStep?: string;\n  i18nHeaderTime?: string;\n  i18nHeaderDuration?: string;\n  i18nHeaderDurationUnit?: string;\n  i18nHeaderStatus?: string;\n  i18nHeaderOutput?: string;\n  i18nNoErrors: string;\n  i18nNoOutput?: string;\n  i18nNoSteps: string;\n  i18nVersion: string;\n  steps: JSX.Element[];\n  time: string;\n  version?: number;\n}\n\nexport class IntegrationDetailActivityItem extends React.Component<\n  IIntegrationDetailActivityItemProps\n> {\n  public render() {\n    const headerFormat = (value: string) => (\n      <Table.Heading>{value}</Table.Heading>\n    );\n\n    const cellFormat = (value: string) => <Table.Cell>{value}</Table.Cell>;\n\n    return (\n      <ListView.Item\n        key={1}\n        actions={\n          <>\n            {this.props.errorCount > 0 ? (\n              <span>\n                <Icon type=\"pf\" name=\"error-circle-o\" />\n                {'  '}\n                {this.props.i18nErrorsFound}\n              </span>\n            ) : (\n              <span>\n                <Icon type=\"pf\" name=\"ok\" />\n                {'  '}\n                {this.props.i18nNoErrors}\n              </span>\n            )}\n          </>\n        }\n        heading={this.props.date}\n        description={this.props.time}\n        additionalInfo={[\n          <React.Fragment key={'not-really-needed'}>\n            {this.props.i18nVersion}\n            {'  '}\n            {this.props.version}\n          </React.Fragment>,\n        ]}\n      >\n        <Row>\n          {this.props.steps ? (\n            <Col sm={11}>\n              <Table.PfProvider\n                striped={true}\n                bordered={true}\n                hover={true}\n                columns={[\n                  {\n                    cell: {\n                      formatters: [cellFormat],\n                      property: 'step',\n                    },\n                    header: {\n                      formatters: [headerFormat],\n                      label: 'Step',\n                    },\n                  },\n                  {\n                    cell: {\n                      formatters: [cellFormat],\n                      property: 'time',\n                    },\n                    header: {\n                      formatters: [headerFormat],\n                      label: 'Time',\n                    },\n                  },\n                  {\n                    cell: {\n                      formatters: [cellFormat],\n                      property: 'duration',\n                    },\n                    header: {\n                      formatters: [headerFormat],\n                      label: 'Duration',\n                    },\n                  },\n                  {\n                    cell: {\n                      formatters: [cellFormat],\n                      property: 'status',\n                    },\n                    header: {\n                      formatters: [headerFormat],\n                      label: 'Status',\n                    },\n                  },\n                  {\n                    cell: {\n                      formatters: [cellFormat],\n                      property: 'output',\n                    },\n                    header: {\n                      formatters: [headerFormat],\n                      label: 'Output',\n                    },\n                  },\n                ]}\n              >\n                <Table.Header />\n                {this.props.steps}\n              </Table.PfProvider>\n            </Col>\n          ) : (\n            <Col sm={11}>\n              <span>{this.props.i18nNoSteps}</span>\n            </Col>\n          )}\n        </Row>\n      </ListView.Item>\n    );\n  }\n}\n","import { Table } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationDetailActivityItemStepsProps {\n  name?: string;\n  time?: string;\n  duration?: number;\n  status?: string;\n  output?: string;\n}\n\nexport class IntegrationDetailActivityItemSteps extends React.Component<\n  IIntegrationDetailActivityItemStepsProps\n> {\n  public render() {\n    return (\n      <>\n        <Table.Body\n          rows={[\n            {\n              duration: this.props.duration,\n              output: this.props.output,\n              status: this.props.status,\n              step: this.props.name,\n              time: this.props.time,\n            },\n          ]}\n          rowKey={this.props.name}\n        />\n      </>\n    );\n  }\n}\n","import { Text } from '@patternfly/react-core';\nimport { Icon } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationDetailDescriptionProps {\n  description?: string;\n  i18nNoDescription?: string;\n}\n\nexport class IntegrationDetailDescription extends React.PureComponent<\n  IIntegrationDetailDescriptionProps\n> {\n  public render() {\n    return (\n      <div>\n        <Text>\n          {this.props.description\n            ? this.props.description\n            : this.props.i18nNoDescription}\n          &nbsp;\n          <Icon name={'pencil'} />\n        </Text>\n      </div>\n    );\n  }\n}\n","import { Title } from '@patternfly/react-core';\nimport { Icon } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationDetailEditableNameProps {\n  name?: string;\n}\n\nexport class IntegrationDetailEditableName extends React.PureComponent<\n  IIntegrationDetailEditableNameProps\n> {\n  public render() {\n    return (\n      <>\n        {this.props.name ? (\n          <>\n            <Title size=\"lg\">{this.props.name}&nbsp;</Title>\n            <Icon name={'pencil'} />\n          </>\n        ) : null}\n      </>\n    );\n  }\n}\n","import { Grid, ListView, ListViewItem } from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../Layout';\nimport { IIntegrationAction } from './IntegrationActions';\nimport './IntegrationDetailHistoryListView.css';\n\nexport interface IIntegrationDetailHistoryListViewProps {\n  actions?: IIntegrationAction[];\n  hasHistory: boolean;\n  isDraft: boolean;\n  i18nTextDraft?: string;\n  i18nTextHistory?: string;\n}\n\nexport class IntegrationDetailHistoryListView extends React.Component<\n  IIntegrationDetailHistoryListViewProps\n> {\n  public render() {\n    return (\n      <Grid\n        fluid={true}\n        key={1}\n        className=\"integration-detail-history-list-view\"\n      >\n        {this.props.isDraft ? (\n          <Grid.Row className=\"show-grid\">\n            <Grid.Col\n              xs={2}\n              md={2}\n              className=\"integration-detail-history-list-view__description\"\n            >\n              {this.props.i18nTextDraft}:\n            </Grid.Col>\n            <Grid.Col xs={10} md={10}>\n              <ListViewItem\n                key={1}\n                heading={this.props.i18nTextDraft}\n                actions={\n                  this.props.actions\n                    ? this.props.actions.map((a, idx) => (\n                        <ButtonLink key={idx} to={a.href} onClick={a.onClick}>\n                          {a.label}\n                        </ButtonLink>\n                      ))\n                    : null\n                }\n                stacked={false}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        ) : null}\n\n        {this.props.children && this.props.hasHistory ? (\n          <Grid.Row className=\"show-grid\">\n            <Grid.Col\n              xs={2}\n              md={2}\n              className=\"integration-detail-history-list-view__description\"\n            >\n              {<span>{this.props.i18nTextHistory}:</span>}\n            </Grid.Col>\n            <Grid.Col xs={10} md={10}>\n              {this.props.children ? (\n                <ListView>{this.props.children}</ListView>\n              ) : null}\n            </Grid.Col>\n          </Grid.Row>\n        ) : null}\n      </Grid>\n    );\n  }\n}\n","import { ListView, ListViewInfoItem, ListViewItem } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationDetailHistoryListViewItemProps {\n  /**\n   * If the integration is a draft, it renders a set of actionable buttons,\n   * labeled 'Edit' and 'Publish'\n   * If the integration is not a draft, it renders a dropdown actions menu\n   * based on the IntegrationActions component\n   */\n  actions: any;\n  /**\n   * The current state of the integration.\n   */\n  currentState: string;\n  /**\n   * The last date the integration was updated.\n   */\n  updatedAt?: number;\n  /**\n   * The version of the integration deployment.\n   */\n  version?: number;\n  /**\n   * The localized text for displaying the last published date.\n   */\n  i18nTextLastPublished?: string;\n  /**\n   * The localized text used to display the version of the integration.\n   */\n  i18nTextVersion?: string;\n}\n\nexport class IntegrationDetailHistoryListViewItem extends React.Component<\n  IIntegrationDetailHistoryListViewItemProps\n> {\n  public render() {\n    function getIntegrationState(currentState: string) {\n      const states = {\n        Error: () => {\n          return (\n            <ListView.Icon\n              type=\"pf\"\n              size={'sm'}\n              className=\"pficon pficon-error-circle-o\"\n            />\n          );\n        },\n        Pending: null,\n        Published: () => {\n          return (\n            <ListView.Icon\n              type=\"pf\"\n              name=\"ok\"\n              size={'sm'}\n              className=\"list-view-pf-icon-success\"\n            />\n          );\n        },\n        Unpublished: null,\n      };\n\n      return states[currentState] || null;\n    }\n\n    return (\n      <ListViewItem\n        actions={this.props.actions}\n        heading={\n          <span>\n            {<span>{this.props.i18nTextVersion}:</span>} {this.props.version}\n          </span>\n        }\n        additionalInfo={[\n          <ListViewInfoItem key={1}>\n            {this.props.i18nTextLastPublished}\n            {this.props.updatedAt}\n          </ListViewInfoItem>,\n        ]}\n        leftContent={getIntegrationState(this.props.currentState!)}\n        stacked={false}\n      />\n    );\n  }\n}\n","import * as React from 'react';\n\nimport { IntegrationDetailEditableName } from './IntegrationDetailEditableName';\n\nimport './IntegrationDetailInfo.css';\n\nexport interface IIntegrationDetailInfoProps {\n  name?: string;\n  version?: number;\n}\n\nexport class IntegrationDetailInfo extends React.PureComponent<\n  IIntegrationDetailInfoProps\n> {\n  public render() {\n    return (\n      <div className=\"integration-detail-info\">\n        <IntegrationDetailEditableName name={this.props.name} />\n        {this.props.version ? (\n          <>\n            <span className=\"pficon pficon-ok\" />\n            &nbsp;Published version {this.props.version}\n          </>\n        ) : (\n          'Stopped'\n        )}\n      </div>\n    );\n  }\n}\n","import {\n  AggregateStatusCount,\n  AggregateStatusNotification,\n  AggregateStatusNotifications,\n  Card,\n  CardBody,\n  CardGrid,\n  CardTitle,\n  Col,\n  Icon,\n  Row,\n} from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationDetailMetricsProps {\n  errorMessagesCount?: number;\n  okMessagesCount?: number;\n  totalMessages?: number;\n  uptimeStart: number;\n}\n\nexport class IntegrationDetailMetrics extends React.Component<\n  IIntegrationDetailMetricsProps\n> {\n  public render() {\n    const startAsDate = new Date(this.props.uptimeStart);\n    const startAsHuman = startAsDate.toLocaleString();\n\n    return (\n      <CardGrid>\n        <Row style={{ marginBottom: '20px', marginTop: '20px' }}>\n          <Col xs={6} sm={3} md={3}>\n            <Card accented={true} aggregated={true} matchHeight={true}>\n              <CardTitle>\n                <Icon type=\"pf\" name=\"error-circle-o\" />\n                {this.props.errorMessagesCount}\n              </CardTitle>\n              <CardBody>Total Errors</CardBody>\n            </Card>\n          </Col>\n          <Col xs={6} sm={3} md={3}>\n            <Card accented={true} aggregated={true} matchHeight={true}>\n              <CardTitle>\n                <Icon name=\"shield\" />\n                Last Processed\n              </CardTitle>\n              <CardBody>\n                <h2>n/a</h2>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col xs={6} sm={3} md={3}>\n            <Card accented={true} aggregated={true} matchHeight={true}>\n              <CardTitle>\n                <AggregateStatusCount>\n                  {this.props.totalMessages}&nbsp;\n                </AggregateStatusCount>\n                Total Messages\n              </CardTitle>\n              <CardBody>\n                <AggregateStatusNotifications>\n                  <AggregateStatusNotification>\n                    <Icon type=\"pf\" name=\"ok\" />\n                    {this.props.okMessagesCount}&nbsp;\n                  </AggregateStatusNotification>\n                  <AggregateStatusNotification>\n                    <Icon type=\"pf\" name=\"error-circle-o\" />\n                    {this.props.errorMessagesCount}\n                  </AggregateStatusNotification>\n                </AggregateStatusNotifications>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col xs={6} sm={3} md={3}>\n            <Card accented={true} aggregated={true} matchHeight={true}>\n              <Card.Title className={'text-left'}>\n                <small className={'pull-right'}>Since {startAsHuman}</small>\n                <div>Uptime</div>\n              </Card.Title>\n              <Card.Body>\n                <></>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </CardGrid>\n    );\n  }\n}\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationEditorActionsListItemProps {\n  integrationName: string;\n  integrationDescription: string;\n  actions: any;\n}\n\nexport class IntegrationEditorActionsListItem extends React.Component<\n  IIntegrationEditorActionsListItemProps\n> {\n  public render() {\n    return (\n      <ListView.Item\n        actions={this.props.actions}\n        heading={this.props.integrationName}\n        description={this.props.integrationDescription}\n        stacked={true}\n      />\n    );\n  }\n}\n","import { Text, Title } from '@patternfly/react-core';\nimport { ListView } from 'patternfly-react';\nimport * as React from 'react';\nimport { Container } from '../Layout';\n\nexport interface IIntegrationEditorChooseActionProps {\n  /**\n   * The internationalized title.\n   */\n  i18nTitle: string;\n  /**\n   * The internationalized subtitle.\n   */\n  i18nSubtitle: string;\n}\n\n/**\n * A component to render a list of actions, to be used in the integration\n * editor.\n * @see [i18nTitle]{@link IIntegrationEditorChooseActionProps#i18nTitle}\n * @see [i18nSubtitle]{@link IIntegrationEditorChooseActionProps#i18nSubtitle}\n */\nexport class IntegrationEditorChooseAction extends React.Component<\n  IIntegrationEditorChooseActionProps\n> {\n  public render() {\n    return (\n      <>\n        <Container className=\"pf-u-my-md\">\n          <Title size=\"xl\">{this.props.i18nTitle} - Choose Action</Title>\n          <Text>{this.props.i18nSubtitle}</Text>\n        </Container>\n        <Container>\n          <ListView>{this.props.children}</ListView>\n        </Container>\n      </>\n    );\n  }\n}\n","import { Text, Title } from '@patternfly/react-core';\nimport { ListView } from 'patternfly-react';\nimport * as React from 'react';\nimport { Container } from '../Layout';\n\nexport interface IIntegrationEditorChooseConnection {\n  /**\n   * The main title of the content, shown before the connections.\n   */\n  i18nTitle: string;\n  /**\n   * The description of the content, shown before the connections.\n   */\n  i18nSubtitle: string;\n}\n\n/**\n * A component to render a list of connections, to be used in the integration\n * editor.\n *\n * @see [i18nTitle]{@link IIntegrationEditorChooseConnection#i18nTitle}\n * @see [i18nSubtitle]{@link IIntegrationEditorChooseConnection#i18nSubtitle}\n */\nexport class IntegrationEditorChooseConnection extends React.Component<\n  IIntegrationEditorChooseConnection\n> {\n  public render() {\n    return (\n      <>\n        <Container className=\"pf-u-my-md\">\n          <Title size=\"xl\">{this.props.i18nTitle}</Title>\n          <Text>{this.props.i18nSubtitle}</Text>\n        </Container>\n        <Container>\n          <ListView>{this.props.children}</ListView>\n        </Container>\n      </>\n    );\n  }\n}\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationEditorConnectionsListItemProps {\n  integrationName: string;\n  integrationDescription: string;\n  icon: any;\n  actions: any;\n}\n\nexport class IntegrationEditorConnectionsListItem extends React.Component<\n  IIntegrationEditorConnectionsListItemProps\n> {\n  public render() {\n    return (\n      <ListView.Item\n        actions={this.props.actions}\n        heading={this.props.integrationName}\n        description={this.props.integrationDescription}\n        leftContent={this.props.icon}\n        stacked={true}\n      />\n    );\n  }\n}\n","import { Text, Title } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Container } from '../Layout';\n\nexport interface IIntegrationEditorFormProps {\n  /**\n   * The internationalized title.\n   */\n  i18nTitle: string;\n  /**\n   * The internationalized subtitle.\n   */\n  i18nSubtitle: string;\n  /**\n   * The internationalized form title.\n   */\n  i18nFormTitle?: string;\n  /**\n   * The callback fired when submitting the form.\n   * @param e\n   */\n  handleSubmit: (e?: any) => void;\n}\n\n/**\n * A component to render a save form, to be used in the integration\n * editor. This does *not* build the form itself, form's field should be passed\n * as the `children` value.\n * @see [i18nTitle]{@link IIntegrationEditorFormProps#i18nTitle}\n * @see [i18nSubtitle]{@link IIntegrationEditorFormProps#i18nSubtitle}\n */\nexport class IntegrationEditorForm extends React.Component<\n  IIntegrationEditorFormProps\n> {\n  public render() {\n    return (\n      <>\n        <Container className=\"pf-u-my-md\">\n          <Title size=\"lg\">{this.props.i18nTitle} - Choose Action</Title>\n          <Text>{this.props.i18nSubtitle}</Text>\n        </Container>\n        <Container>\n          <form\n            className=\"form-horizontal required-pf\"\n            role=\"form\"\n            onSubmit={this.props.handleSubmit}\n          >\n            <div className=\"row row-cards-pf\">\n              <div className=\"card-pf\">\n                {this.props.i18nFormTitle && (\n                  <div className=\"card-pf-title\">\n                    {this.props.i18nFormTitle}\n                  </div>\n                )}\n                <div className=\"card-pf-body\">\n                  <Container>{this.props.children}</Container>\n                </div>\n              </div>\n            </div>\n          </form>\n        </Container>\n      </>\n    );\n  }\n}\n","import { Text, Title } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Container } from '../Layout';\n\nexport interface IIntegrationEditorNothingToConfigureProps {\n  /**\n   * The internationalized title.\n   */\n  i18nTitle: string;\n  /**\n   * The internationalized subtitle.\n   */\n  i18nSubtitle: string;\n  /**\n   * The internationalized alert to display.\n   */\n  i18nAlert: string;\n}\n\n/**\n * A component to render an alert for unconfigurable actions.\n * @see [i18nTitle]{@link IIntegrationEditorNothingToConfigureProps#i18nTitle}\n * @see [i18nSubtitle]{@link IIntegrationEditorNothingToConfigureProps#i18nSubtitle}\n * @see [i18nAlert]{@link IIntegrationEditorNothingToConfigureProps#i18nAlert}\n */\nexport class IntegrationEditorNothingToConfigure extends React.Component<\n  IIntegrationEditorNothingToConfigureProps\n> {\n  public render() {\n    return (\n      <Container>\n        <Title size=\"lg\">{this.props.i18nTitle} - Choose Action</Title>\n        <Text>{this.props.i18nSubtitle}</Text>\n        <Container>\n          <div className=\"row row-cards-pf\">\n            <div className=\"card-pf\">\n              <div className=\"card-pf-body\">\n                <Container>\n                  <Text className=\"alert alert-info\">\n                    <span className=\"pficon pficon-info\" />\n                    {this.props.i18nAlert}\n                  </Text>\n                </Container>\n              </div>\n            </div>\n          </div>\n        </Container>\n      </Container>\n    );\n  }\n}\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class IntegrationEditorStepsList extends React.Component<{}> {\n  public render() {\n    return (\n      <ListView style={{ background: 'transparent' }}>\n        {this.props.children}\n      </ListView>\n    );\n  }\n}\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationEditorStepsListItemProps {\n  stepName: string;\n  stepDescription: string;\n  actions: any;\n  icon: any;\n}\n\nexport class IntegrationEditorStepsListItem extends React.Component<\n  IIntegrationEditorStepsListItemProps\n> {\n  public render() {\n    return (\n      <ListView.Item\n        actions={this.props.actions}\n        heading={this.props.stepName}\n        description={this.props.stepDescription}\n        leftContent={this.props.icon}\n        stacked={true}\n        hideCloseIcon={true}\n      />\n    );\n  }\n}\n","import * as H from 'history';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport './IntegrationFlowAddStep.css';\n\nexport interface IIntegrationFlowAddStepProps {\n  showDetails: boolean;\n  addStepHref?: H.LocationDescriptor;\n  i18nAddStep?: string;\n}\n\nexport interface IIntegrationFlowAddStepState {\n  showTooltip: boolean;\n}\n\nexport class IntegrationFlowAddStep extends React.Component<\n  IIntegrationFlowAddStepProps,\n  IIntegrationFlowAddStepState\n> {\n  public static defaultProps = {\n    active: false,\n  };\n\n  public state = {\n    showTooltip: false,\n  };\n\n  public containerRef = React.createRef<HTMLDivElement>();\n\n  constructor(props: IIntegrationFlowAddStepProps) {\n    super(props);\n    this.showTooltip = this.showTooltip.bind(this);\n    this.hideTooltip = this.hideTooltip.bind(this);\n    this.toggleTooltip = this.toggleTooltip.bind(this);\n  }\n\n  public showTooltip() {\n    this.setState({\n      showTooltip: true,\n    });\n  }\n\n  public hideTooltip() {\n    this.setState({\n      showTooltip: false,\n    });\n  }\n\n  public toggleTooltip() {\n    this.setState({\n      showTooltip: !this.state.showTooltip,\n    });\n  }\n\n  public render() {\n    return (\n      <div\n        className={'integration-flow-add-step'}\n        onMouseEnter={this.showTooltip}\n        onMouseLeave={this.hideTooltip}\n        onTouchStart={this.toggleTooltip}\n      >\n        {this.props.addStepHref && (\n          <div\n            className={'integration-flow-add-step__iconWrapper'}\n            ref={this.containerRef}\n          >\n            <Link to={this.props.addStepHref}>\n              <div className={'integration-flow-add-step__icon'}>\n                <i\n                  className=\"fa fa-plus-square\"\n                  title={this.props.i18nAddStep}\n                />\n              </div>\n            </Link>\n          </div>\n        )}\n        {this.props.showDetails && this.props.children}\n      </div>\n    );\n  }\n}\n","import classnames from 'classnames';\nimport { OverlayTrigger, Tooltip } from 'patternfly-react';\nimport * as React from 'react';\nimport './IntegrationFlowStep.css';\n\nexport interface IIntegrationFlowStepProps {\n  /**\n   * The icon to show. Can be anything but must fit a circle of 55px of diameter.\n   */\n  icon: any;\n  /**\n   * Set to true to render the extended details for the step. Usually set to match\n   * the expanded state of the parent container.\n   */\n  showDetails: boolean;\n  /**\n   * The text to show on the tooltip that opens when hovering with the mouse on\n   * the icon.\n   */\n  i18nTooltip: string;\n  /**\n   * Set to true to set this step as active. This will highlight the icon circle.\n   */\n  active?: boolean;\n}\n\nexport class IntegrationFlowStep extends React.Component<\n  IIntegrationFlowStepProps\n> {\n  public static defaultProps = {\n    active: false,\n  };\n\n  public render() {\n    const tooltip = (\n      <Tooltip id={'integration-flow-step'}>{this.props.i18nTooltip}</Tooltip>\n    );\n    const icon = (\n      <div className={'integration-flow-step__icon'}>{this.props.icon}</div>\n    );\n    return (\n      <div\n        className={classnames('integration-flow-step', {\n          'is-active': this.props.active,\n          'is-expanded': this.props.showDetails,\n        })}\n      >\n        {this.props.showDetails ? (\n          <>\n            <div className={'integration-flow-step__iconWrapper'}>{icon}</div>\n            {this.props.children}\n          </>\n        ) : (\n          <div className={'integration-flow-step__iconWrapper'}>\n            <OverlayTrigger\n              overlay={tooltip}\n              placement=\"right\"\n              trigger={['hover', 'focus']}\n              rootClose={false}\n            >\n              {icon}\n            </OverlayTrigger>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import classnames from 'classnames';\nimport * as React from 'react';\nimport './IntegrationFlowStepDetails.css';\n\nconst Title: React.FunctionComponent = ({ children }) => (\n  <div className={'integration-flow-step-details__title'}>{children}</div>\n);\n\nconst GenericDescription: React.FunctionComponent = ({ children }) => (\n  <div className={'integration-flow-step-details__body'}>{children}</div>\n);\n\ninterface IStepOverviewProps {\n  nameI18nLabel: string;\n  name: string;\n  actionI18nLabel: string;\n  action: string;\n  dataTypeI18nLabel: string;\n  dataType: string;\n}\n\nconst StepOverview: React.FunctionComponent<IStepOverviewProps> = ({\n  nameI18nLabel,\n  name,\n  actionI18nLabel,\n  action,\n  dataTypeI18nLabel,\n  dataType,\n}) => (\n  <div className={'integration-flow-step-details__body'}>\n    <dl className={'integration-flow-step-details__overview'}>\n      <dt>{nameI18nLabel}</dt>\n      <dd>{name}</dd>\n    </dl>\n    <dl className={'integration-flow-step-details__overview'}>\n      <dt>{actionI18nLabel}</dt>\n      <dd>{action}</dd>\n    </dl>\n    <dl className={'integration-flow-step-details__overview'}>\n      <dt>{dataTypeI18nLabel}</dt>\n      <dd>{dataType}</dd>\n    </dl>\n  </div>\n);\n\nexport interface IntegrationFlowStepDetailsChildrenProps {\n  Title: React.FunctionComponent;\n  GenericDescription: React.FunctionComponent;\n  StepOverview: React.FunctionComponent<IStepOverviewProps>;\n}\n\nexport interface IntegrationFlowStepDetailsProps {\n  active?: boolean;\n  children(props: IntegrationFlowStepDetailsChildrenProps): any;\n}\n\n/**\n * A render prop component that provides the right components than can be used\n * inside a step element of the integration editor sidebar.\n */\nexport class IntegrationFlowStepDetails extends React.Component<\n  IntegrationFlowStepDetailsProps\n> {\n  public static defaultProps = {\n    active: false,\n  };\n\n  public render() {\n    return (\n      <div\n        className={classnames('integration-flow-step-details', {\n          'is-active': this.props.active,\n        })}\n      >\n        {this.props.children({\n          GenericDescription,\n          StepOverview,\n          Title,\n        })}\n      </div>\n    );\n  }\n}\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport {\n  IIntegrationFlowStepProps,\n  IntegrationFlowStep,\n} from './IntegrationFlowStep';\nimport { IntegrationFlowStepDetails } from './IntegrationFlowStepDetails';\n\nexport interface IIntegrationFlowStepGenericProps\n  extends IIntegrationFlowStepProps {\n  /**\n   * The title of the extended information table.\n   */\n  i18nTitle: string;\n  /**\n   * The content of the extended information table.\n   */\n  description: string;\n}\n\n/**\n * A component to show an unconfigured (or being configured) step in the\n * sidebar of the integration editor.\n *\n * @see [icon]{@link IIntegrationFlowStepProps#icon}\n * @see [active]{@link IIntegrationFlowStepProps#active}\n * @see [i18nTitle]{@link IIntegrationFlowStepGenericProps#i18nTitle}\n * @see [i18nTooltip]{@link IIntegrationFlowStepProps#i18nTooltip}\n * @see [showDetails]{@link IIntegrationFlowStepProps#showDetails}\n * @see [description]{@link IIntegrationFlowStepGenericProps#description}\n * @see [href]{@link IIntegrationFlowStepProps#href}\n */\nexport const IntegrationFlowStepGeneric: React.FunctionComponent<\n  IIntegrationFlowStepGenericProps\n> = ({\n  icon,\n  active = false,\n  i18nTitle,\n  i18nTooltip,\n  showDetails,\n  description,\n}) => (\n  <IntegrationFlowStep\n    icon={icon}\n    active={active}\n    i18nTooltip={i18nTooltip}\n    showDetails={showDetails}\n  >\n    <IntegrationFlowStepDetails active={active}>\n      {({ Title, GenericDescription }) => (\n        <>\n          <Title>{i18nTitle}</Title>\n          <GenericDescription>{description}</GenericDescription>\n        </>\n      )}\n    </IntegrationFlowStepDetails>\n  </IntegrationFlowStep>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport './IntegrationIcon.css';\n\nexport interface IIntegrationIconProps {\n  startConnectionIcon: string;\n  finishConnectionIcon: string;\n}\nexport const IntegrationIcon: React.FunctionComponent<\n  IIntegrationIconProps\n> = ({ startConnectionIcon, finishConnectionIcon }) => (\n  <div className={'integration-icon'}>\n    <img src={startConnectionIcon} className={'integration-icon__icon'} />\n    <i className=\"fa fa-angle-right integration-icon__divider\" />\n    <img src={finishConnectionIcon} className={'integration-icon__icon'} />\n  </div>\n);\n","import { Label } from 'patternfly-react';\nimport * as React from 'react';\nimport {\n  ERROR,\n  IntegrationState,\n  PENDING,\n  PUBLISHED,\n  UNPUBLISHED,\n} from './models';\n\nexport interface IIntegrationStatusProps {\n  currentState?: IntegrationState;\n  i18nPublished: string;\n  i18nUnpublished: string;\n  i18nError: string;\n}\n\nexport class IntegrationStatus extends React.Component<\n  IIntegrationStatusProps\n> {\n  public render() {\n    const labelType =\n      this.props.currentState === ERROR\n        ? 'danger'\n        : this.props.currentState === PUBLISHED ||\n          this.props.currentState === PENDING\n        ? 'primary'\n        : 'default';\n    let label = PENDING; // it's a parachute\n    switch (this.props.currentState) {\n      case PUBLISHED:\n        label = this.props.i18nPublished;\n        break;\n      case UNPUBLISHED:\n        label = this.props.i18nUnpublished;\n        break;\n      case ERROR:\n        label = this.props.i18nError;\n        break;\n    }\n    return <Label type={labelType}>{label}</Label>;\n  }\n}\n","// Integration states\nexport const PUBLISHED = 'Published';\nexport const UNPUBLISHED = 'Unpublished';\nexport const PENDING = 'Pending';\nexport const ERROR = 'Error';\n\nexport type IntegrationState =\n  | 'Published'\n  | 'Unpublished'\n  | 'Pending'\n  | 'Error';\n\n// Detailed state log link types\nexport const LOGS = 'LOGS';\nexport const EVENTS = 'EVENTS';\n\nexport type LinkType = 'LOGS' | 'EVENTS';\n\nexport interface IIntegrationDetailHistoryItem {\n  updatedAt: string;\n  version: number;\n}\n\nexport interface IIntegrationDetailHistory {\n  draft: boolean;\n  items: IIntegrationDetailHistoryItem[];\n}\n","import { Spinner } from 'patternfly-react';\nimport * as React from 'react';\nimport { ProgressWithLink } from '../Shared/ProgressWithLink';\nimport { IntegrationState, PUBLISHED, UNPUBLISHED } from './models';\n\nimport './IntegrationStatusDetail.css';\n\nexport interface IIntegrationStatusDetailProps {\n  targetState: IntegrationState;\n  value?: string;\n  currentStep?: number;\n  totalSteps?: number;\n  logUrl?: string;\n  i18nProgressPending: string;\n  i18nProgressStarting: string;\n  i18nProgressStopping: string;\n  i18nLogUrlText: string;\n}\n\nexport class IntegrationStatusDetail extends React.Component<\n  IIntegrationStatusDetailProps\n> {\n  public render() {\n    let fallbackText = this.props.i18nProgressPending;\n    switch (this.props.targetState) {\n      case PUBLISHED:\n        fallbackText = this.props.i18nProgressStarting;\n        break;\n      case UNPUBLISHED:\n        fallbackText = this.props.i18nProgressStopping;\n        break;\n    }\n    return (\n      <div\n        data-testid=\"integration-status-detail\"\n        className={'integration-status-detail'}\n      >\n        {this.props.value && this.props.currentStep && this.props.totalSteps ? (\n          <ProgressWithLink\n            currentStep={this.props.currentStep}\n            totalSteps={this.props.totalSteps}\n            value={this.props.value}\n            logUrl={this.props.logUrl}\n            i18nLogUrlText={this.props.i18nLogUrlText}\n          />\n        ) : (\n          <>\n            <Spinner loading={true} inline={true} />\n            {fallbackText}\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","import { Grid, Icon } from 'patternfly-react';\nimport * as React from 'react';\n\nimport './IntegrationStepsHorizontalItem.css';\n\nexport interface IIntegrationStepsHorizontalItemProps {\n  /**\n   * The name of the connector used for the step.\n   */\n  name?: string;\n  /**\n   * The icon of the step.\n   */\n  icon?: string;\n  /**\n   * The boolean value that determines if the step\n   * is the first in the steps array.\n   */\n  isFirst?: boolean;\n}\n\nexport class IntegrationStepsHorizontalItem extends React.Component<\n  IIntegrationStepsHorizontalItemProps\n> {\n  public render() {\n    return (\n      <div className=\"integration-steps-horizontal-item\">\n        {this.props.isFirst === false ? (\n          <Grid.Col\n            sm={1}\n            md={1}\n            className=\"integration-steps-horizontal-item__arrow\"\n          >\n            <Icon name={'angle-right'} className=\"step-arrow\" />\n          </Grid.Col>\n        ) : null}\n        <Grid.Col\n          sm={1}\n          md={1}\n          className=\"integration-steps-horizontal-item__icon\"\n        >\n          <img src={this.props.icon} className=\"step-icon\" />\n          <p>{this.props.name}</p>\n        </Grid.Col>\n      </div>\n    );\n  }\n}\n","import { Grid } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class IntegrationStepsHorizontalView extends React.Component {\n  public render() {\n    return (\n      <Grid fluid={true} xs={2}>\n        <Grid.Row className=\"show-grid\">{this.props.children}</Grid.Row>\n      </Grid>\n    );\n  }\n}\n","import classnames from 'classnames';\nimport * as React from 'react';\nimport { ButtonLink } from '../Layout';\nimport './IntegrationVerticalFlow.css';\n\nexport interface IIntegrationVerticalFlowProps {\n  /**\n   * A render prop that receives the expanded state of the container.\n   * @see [props.expanded]{@link IIntegrationVerticalFlowState#expanded}\n   */\n  children(props: IIntegrationVerticalFlowState): any;\n}\n\nexport interface IIntegrationVerticalFlowState {\n  /**\n   * The container expanded state.\n   */\n  expanded: boolean;\n}\n\n/**\n * A component to render an expandable container meant to be used to show an\n * integration's steps.\n * @see [children]{@link IIntegrationVerticalFlowProps#children}\n */\nexport class IntegrationVerticalFlow extends React.Component<\n  IIntegrationVerticalFlowProps,\n  IIntegrationVerticalFlowState\n> {\n  public static defaultProps = {\n    disabled: false,\n  };\n\n  public state = {\n    expanded: localStorage.getItem('iec-vertical-flow-expanded') === 'y',\n  };\n\n  constructor(props: IIntegrationVerticalFlowProps) {\n    super(props);\n    this.toggleExpanded = this.toggleExpanded.bind(this);\n  }\n\n  public toggleExpanded(): void {\n    const expanded = !this.state.expanded;\n    localStorage.setItem('iec-vertical-flow-expanded', expanded ? 'y' : 'n');\n    this.setState({\n      expanded,\n    });\n  }\n\n  public render() {\n    return (\n      <div\n        className={classnames('integration-vertical-flow', {\n          'is-expanded': this.state.expanded,\n        })}\n      >\n        <div className=\"integration-vertical-flow__body\">\n          {this.props.children(this.state)}\n        </div>\n        <div className=\"integration-vertical-flow__expand\">\n          <ButtonLink onClick={this.toggleExpanded} />\n        </div>\n      </div>\n    );\n  }\n}\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class IntegrationsList extends React.Component<{}> {\n  public render() {\n    return <ListView>{this.props.children}</ListView>;\n  }\n}\n","import { Icon, ListView } from 'patternfly-react';\nimport * as React from 'react';\nimport { IntegrationIcon } from './IntegrationIcon';\nimport { IntegrationStatus } from './IntegrationStatus';\nimport { IntegrationStatusDetail } from './IntegrationStatusDetail';\nimport { IntegrationState } from './models';\n\nexport interface IIntegrationsListItemProps {\n  integrationName: string;\n  currentState: IntegrationState;\n  targetState: IntegrationState;\n  isConfigurationRequired: boolean;\n  monitoringValue?: string;\n  monitoringCurrentStep?: number;\n  monitoringTotalSteps?: number;\n  monitoringLogUrl?: string;\n  startConnectionIcon: string;\n  finishConnectionIcon: string;\n  actions: any;\n  i18nConfigurationRequired: string;\n  i18nError: string;\n  i18nPublished: string;\n  i18nProgressPending: string;\n  i18nProgressStarting: string;\n  i18nProgressStopping: string;\n  i18nUnpublished: string;\n  i18nLogUrlText: string;\n}\n\nexport class IntegrationsListItem extends React.Component<\n  IIntegrationsListItemProps\n> {\n  public render() {\n    return (\n      <ListView.Item\n        actions={this.props.actions}\n        heading={this.props.integrationName}\n        description={\n          this.props.isConfigurationRequired ? (\n            <>\n              <Icon type={'pf'} name={'warning-triangle-o'} />\n              {this.props.i18nConfigurationRequired}\n            </>\n          ) : (\n            ''\n          )\n        }\n        additionalInfo={[\n          <ListView.InfoItem key={1}>\n            {this.props.currentState === 'Pending' ? (\n              <IntegrationStatusDetail\n                targetState={this.props.targetState}\n                value={this.props.monitoringValue}\n                currentStep={this.props.monitoringCurrentStep}\n                totalSteps={this.props.monitoringTotalSteps}\n                logUrl={this.props.monitoringLogUrl}\n                i18nProgressPending={this.props.i18nProgressPending}\n                i18nProgressStarting={this.props.i18nProgressStarting}\n                i18nProgressStopping={this.props.i18nProgressStopping}\n                i18nLogUrlText={this.props.i18nLogUrlText}\n              />\n            ) : (\n              <IntegrationStatus\n                currentState={this.props.currentState}\n                i18nPublished={this.props.i18nPublished}\n                i18nUnpublished={this.props.i18nUnpublished}\n                i18nError={this.props.i18nError}\n              />\n            )}\n          </ListView.InfoItem>,\n        ]}\n        leftContent={\n          <IntegrationIcon\n            startConnectionIcon={this.props.startConnectionIcon}\n            finishConnectionIcon={this.props.finishConnectionIcon}\n          />\n        }\n        stacked={true}\n      />\n    );\n  }\n}\n","import * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nfunction getRandom(min: number, max: number) {\n  return Math.random() * (max - min) + min;\n}\n\nconst ItemSkeleton = () => (\n  <ContentLoader\n    height={80}\n    width={500}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={{\n      height: 80,\n      width: '100%',\n    }}\n  >\n    <circle cx=\"35\" cy=\"40\" r=\"35\" />\n    <circle cx=\"115\" cy=\"40\" r=\"35\" />\n    <rect\n      x=\"185\"\n      y=\"20\"\n      rx=\"5\"\n      ry=\"5\"\n      width={400 * getRandom(0.6, 1)}\n      height=\"18\"\n    />\n    <rect\n      x=\"185\"\n      y=\"55\"\n      rx=\"5\"\n      ry=\"5\"\n      width={200 * getRandom(0.6, 1)}\n      height=\"15\"\n    />\n  </ContentLoader>\n);\n\nexport class IntegrationsListSkeleton extends React.PureComponent {\n  public render() {\n    return (\n      <>\n        <div\n          className={'list-group-item'}\n          data-testid=\"integration-list-skeleton\"\n        >\n          <div>\n            <ItemSkeleton />\n          </div>\n        </div>\n        <div\n          className={'list-group-item'}\n          data-testid=\"integration-list-skeleton\"\n        >\n          <div>\n            <ItemSkeleton />\n          </div>\n        </div>\n        <div\n          className={'list-group-item'}\n          data-testid=\"integration-list-skeleton\"\n        >\n          <div>\n            <ItemSkeleton />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import { Text } from '@patternfly/react-core';\nimport { Card, Label } from 'patternfly-react';\nimport * as React from 'react';\n\nimport './DvConnectionCard.css';\n\nexport enum ConnectionStatus {\n  ACTIVE = 'ACTIVE',\n  INACTIVE = 'INACTIVE',\n}\n\nexport interface IDvConnectionCardProps {\n  name: string;\n  description: string;\n  dvStatus: string;\n  icon: string;\n  selected: boolean;\n  onSelectionChanged: (connName: string, isSelected: boolean) => void;\n}\nexport interface IDvConnectionCardState {\n  isSelected: boolean;\n}\n\nexport class DvConnectionCard extends React.PureComponent<\n  IDvConnectionCardProps,\n  IDvConnectionCardState\n> {\n  public constructor(props: IDvConnectionCardProps) {\n    super(props);\n    this.state = {\n      isSelected: props.selected, // initial item selection\n    };\n    this.toggleSelected = this.toggleSelected.bind(this);\n  }\n\n  public toggleSelected = (connName: string) => (event: any) => {\n    // User can only select active connections\n    if (this.props.dvStatus === ConnectionStatus.ACTIVE) {\n      this.setState({\n        isSelected: !this.state.isSelected,\n      });\n      this.props.onSelectionChanged(connName, !this.state.isSelected);\n    }\n  };\n\n  public render() {\n    return (\n      <div\n        className={'dv-connection-card'}\n        onClick={this.toggleSelected(this.props.name)}\n      >\n        <Card matchHeight={true} accented={this.state.isSelected}>\n          <Card.Body>\n            <div className=\"dv-connection-card__status\">\n              <Label\n                type={\n                  this.props.dvStatus === ConnectionStatus.ACTIVE\n                    ? 'success'\n                    : 'danger'\n                }\n              >\n                {this.props.dvStatus}\n              </Label>\n            </div>\n            <div className={'dv-connection-card__content'}>\n              <div className=\"dv-connection-card__icon\">\n                <img src={this.props.icon} alt={this.props.name} width={46} />\n              </div>\n              <div\n                className=\"dv-connection-card__title h2\"\n                data-testid=\"dv-connection-card-title\"\n              >\n                {this.props.name}\n              </div>\n              <Text className=\"dv-connection-card__description\">\n                {this.props.description}\n              </Text>\n            </div>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n}\n","import * as H from 'history';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../Shared';\n\nexport interface IIntegrationsListViewProps extends IListViewToolbarProps {\n  linkToManageCiCd: H.LocationDescriptor;\n  linkToIntegrationImport: H.LocationDescriptor;\n  linkToIntegrationCreation: H.LocationDescriptor;\n  i18nManageCiCd: string;\n  i18nImport: string;\n  i18nLinkCreateConnection: string;\n}\n\nexport class IntegrationsListView extends React.Component<\n  IIntegrationsListViewProps\n> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <ButtonLink href={this.props.linkToManageCiCd}>\n              {this.props.i18nManageCiCd}\n            </ButtonLink>\n            <ButtonLink href={this.props.linkToIntegrationImport}>\n              {this.props.i18nImport}\n            </ButtonLink>\n            <ButtonLink\n              href={this.props.linkToIntegrationCreation}\n              as={'primary'}\n            >\n              {this.props.i18nLinkCreateConnection}\n            </ButtonLink>\n          </div>\n        </ListViewToolbar>\n        <Container>{this.props.children}</Container>\n      </>\n    );\n  }\n}\n","import { Card, MenuItem } from 'patternfly-react';\nimport * as React from 'react';\n\nimport './TopIntegrations.css';\n\nexport interface ITopIntegrationsProps {\n  i18nLast30Days: string;\n  i18nLast60Days: string;\n  i18nLast90Days: string;\n  i18nTitle: string;\n}\n\nexport class TopIntegrationsCard extends React.Component<\n  ITopIntegrationsProps\n> {\n  public render() {\n    return (\n      <Card accented={false} className={'TopIntegrationsCard'}>\n        <Card.Heading>\n          <Card.DropdownButton\n            id=\"cardDropdownButton1\"\n            title={this.props.i18nLast30Days}\n          >\n            <MenuItem eventKey=\"1\" active={true}>\n              {this.props.i18nLast30Days}\n            </MenuItem>\n            <MenuItem eventKey=\"2\">{this.props.i18nLast60Days}</MenuItem>\n            <MenuItem eventKey=\"3\">{this.props.i18nLast90Days}</MenuItem>\n          </Card.DropdownButton>\n          <Card.Title>{this.props.i18nTitle}</Card.Title>\n        </Card.Heading>\n        <Card.Body>{this.props.children}</Card.Body>\n      </Card>\n    );\n  }\n}\n","import { Card } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IUptimeMetricProps {\n  start: number;\n  i18nTitle: string;\n}\n\nexport class UptimeMetric extends React.PureComponent<IUptimeMetricProps> {\n  public render() {\n    const startAsDate = new Date(this.props.start);\n    const startAsHuman = startAsDate.toLocaleString();\n    return (\n      <Card accented={true} aggregated={true} matchHeight={true}>\n        <Card.Title className={'text-left'}>\n          <small className={'pull-right'}>since {startAsHuman}</small>\n          <div>{this.props.i18nTitle}</div>\n        </Card.Title>\n        <Card.Body>TODO</Card.Body>\n      </Card>\n    );\n  }\n}\n","import {\n  Button,\n  DropdownKebab,\n  ListViewIcon,\n  ListViewItem,\n  MenuItem,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n} from '../../../Shared';\n\nexport interface IViewListItemProps {\n  viewDescription: string;\n  viewIcon?: string;\n  viewName: string;\n  i18nCancelText: string;\n  i18nDelete: string;\n  i18nDeleteTip?: string;\n  i18nDeleteModalMessage: string;\n  i18nDeleteModalTitle: string;\n  i18nEdit: string;\n  i18nEditTip?: string;\n  onDelete: (viewName: string) => void;\n  onEdit: (viewName: string) => void;\n}\n\nexport interface IViewListItemState {\n  showDeleteDialog: boolean;\n}\n\nexport class ViewListItem extends React.Component<\n  IViewListItemProps,\n  IViewListItemState\n> {\n  public constructor(props: IViewListItemProps) {\n    super(props);\n    this.state = {\n      showDeleteDialog: false, // initial visibility of delete dialog\n    };\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.showDeleteDialog = this.showDeleteDialog.bind(this);\n  }\n\n  public render() {\n    return (\n      <>\n        <ConfirmationDialog\n          buttonStyle={ConfirmationButtonStyle.DANGER}\n          i18nCancelButtonText={this.props.i18nCancelText}\n          i18nConfirmButtonText={this.props.i18nDelete}\n          i18nConfirmationMessage={this.props.i18nDeleteModalMessage}\n          i18nTitle={this.props.i18nDeleteModalTitle}\n          icon={ConfirmationIconType.DANGER}\n          showDialog={this.state.showDeleteDialog}\n          onCancel={this.handleCancel}\n          onConfirm={this.handleDelete}\n        />\n        <ListViewItem\n          actions={\n            <div className=\"form-group\">\n              <OverlayTrigger overlay={this.getEditTooltip()} placement=\"top\">\n                <Button bsStyle=\"default\" onClick={this.handleEdit}>\n                  {this.props.i18nEdit}\n                </Button>\n              </OverlayTrigger>\n              <DropdownKebab\n                id={`view-${this.props.viewName}-action-menu`}\n                pullRight={true}\n              >\n                <OverlayTrigger\n                  overlay={this.getDeleteTooltip()}\n                  placement=\"left\"\n                >\n                  <MenuItem onClick={this.showDeleteDialog}>\n                    {this.props.i18nDelete}\n                  </MenuItem>\n                </OverlayTrigger>\n              </DropdownKebab>\n            </div>\n          }\n          heading={this.props.viewName}\n          description={\n            this.props.viewDescription ? this.props.viewDescription : ''\n          }\n          hideCloseIcon={true}\n          leftContent={\n            this.props.viewIcon ? (\n              <div className=\"blank-slate-pf-icon\">\n                <img\n                  src={this.props.viewIcon}\n                  alt={this.props.viewName}\n                  width={46}\n                />\n              </div>\n            ) : (\n              <ListViewIcon name={'cube'} />\n            )\n          }\n          stacked={false}\n        />\n      </>\n    );\n  }\n\n  private getDeleteTooltip() {\n    return (\n      <Tooltip id=\"deleteTip\">\n        {this.props.i18nDeleteTip\n          ? this.props.i18nDeleteTip\n          : this.props.i18nDelete}\n      </Tooltip>\n    );\n  }\n\n  private getEditTooltip() {\n    return (\n      <Tooltip id=\"editTip\">\n        {this.props.i18nEditTip ? this.props.i18nEditTip : this.props.i18nEdit}\n      </Tooltip>\n    );\n  }\n\n  private handleCancel() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n  }\n\n  private handleEdit = () => {\n    if (this.props.viewName) {\n      this.props.onEdit(this.props.viewName);\n    }\n  };\n\n  private showDeleteDialog() {\n    this.setState({\n      showDeleteDialog: true,\n    });\n  }\n\n  private handleDelete() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n\n    // TODO: disable components while delete is processing\n    if (this.props.viewName) {\n      this.props.onDelete(this.props.viewName);\n    }\n  }\n}\n","import * as H from 'history';\nimport {\n  EmptyState,\n  ListView,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../../../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../../../Shared';\nimport './ViewList.css';\n\nexport interface IViewsListProps extends IListViewToolbarProps {\n  hasListData: boolean;\n  i18nEmptyStateInfo: string;\n  i18nEmptyStateTitle: string;\n  i18nImportViews: string;\n  i18nImportViewsTip: string;\n  linkCreateViewHRef: H.LocationDescriptor;\n  linkImportViewsHRef: H.LocationDescriptor;\n  i18nCreateViewTip?: string;\n  i18nCreateView: string;\n  i18nDescription: string;\n  i18nName: string;\n  i18nNameFilterPlaceholder: string;\n  onImportView: (name: string) => void;\n}\n\nexport class ViewList extends React.Component<IViewsListProps> {\n  public constructor(props: IViewsListProps) {\n    super(props);\n  }\n\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <OverlayTrigger\n              overlay={this.getImportViewsTooltip()}\n              placement=\"top\"\n            >\n              <ButtonLink href={this.props.linkImportViewsHRef} as={'default'}>\n                {this.props.i18nImportViews}\n              </ButtonLink>\n            </OverlayTrigger>\n            <OverlayTrigger\n              overlay={this.getCreateViewTooltip()}\n              placement=\"top\"\n            >\n              <ButtonLink href={this.props.linkCreateViewHRef} as={'primary'}>\n                {this.props.i18nCreateView}\n              </ButtonLink>\n            </OverlayTrigger>\n          </div>\n        </ListViewToolbar>\n        {this.props.hasListData ? (\n          <ListView>{this.props.children}</ListView>\n        ) : (\n          <EmptyState>\n            <EmptyState.Icon />\n            <EmptyState.Title>\n              {this.props.i18nEmptyStateTitle}\n            </EmptyState.Title>\n            <EmptyState.Info>{this.props.i18nEmptyStateInfo}</EmptyState.Info>\n            <EmptyState.Action>\n              <OverlayTrigger\n                overlay={this.getImportViewsTooltip()}\n                placement=\"top\"\n              >\n                <ButtonLink\n                  href={this.props.linkImportViewsHRef}\n                  as={'default'}\n                  className={'view-list-empty-state-import'}\n                >\n                  {this.props.i18nImportViews}\n                </ButtonLink>\n              </OverlayTrigger>\n              <OverlayTrigger\n                overlay={this.getCreateViewTooltip()}\n                placement=\"top\"\n              >\n                <ButtonLink href={this.props.linkCreateViewHRef} as={'primary'}>\n                  {this.props.i18nCreateView}\n                </ButtonLink>\n              </OverlayTrigger>\n            </EmptyState.Action>\n          </EmptyState>\n        )}\n      </>\n    );\n  }\n\n  private getCreateViewTooltip() {\n    return (\n      <Tooltip id=\"createTip\">\n        {this.props.i18nCreateViewTip\n          ? this.props.i18nCreateViewTip\n          : this.props.i18nCreateView}\n      </Tooltip>\n    );\n  }\n\n  private getImportViewsTooltip() {\n    return (\n      <Tooltip id=\"importViewsTip\">\n        {this.props.i18nImportViewsTip\n          ? this.props.i18nImportViewsTip\n          : this.props.i18nImportViews}\n      </Tooltip>\n    );\n  }\n}\n","import { CardGrid } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class DvConnectionsGrid extends React.Component {\n  public render() {\n    return (\n      <CardGrid fluid={true} matchHeight={true}>\n        <CardGrid.Row>{this.props.children}</CardGrid.Row>\n      </CardGrid>\n    );\n  }\n}\n","import { CardGrid } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class DvConnectionsGridCell extends React.Component {\n  public render() {\n    return (\n      <CardGrid.Col xs={6} md={3}>\n        {this.props.children}\n      </CardGrid.Col>\n    );\n  }\n}\n","import * as H from 'history';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../../Shared';\n\nexport interface IDvConnectionsListViewProps extends IListViewToolbarProps {\n  linkToConnectionCreate: H.LocationDescriptor;\n  i18nLinkCreateConnection: string;\n}\n\nexport class DvConnectionsListView extends React.Component<\n  IDvConnectionsListViewProps\n> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <ButtonLink href={this.props.linkToConnectionCreate} as={'primary'}>\n              {this.props.i18nLinkCreateConnection}\n            </ButtonLink>\n          </div>\n        </ListViewToolbar>\n        <Container>{this.props.children}</Container>\n      </>\n    );\n  }\n}\n","import { Label, ListViewInfoItem, ListViewItem } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IViewInfoListItemProps {\n  name: string;\n  description?: string;\n  connectionName: string;\n  nodePath: string[];\n  selected: boolean;\n  i18nUpdate: string;\n  isUpdateView: boolean;\n  onSelectionChanged: (name: string, selected: boolean) => void;\n}\n\nexport interface IViewInfoListItemState {\n  itemSelected: boolean;\n}\n\nexport class ViewInfoListItem extends React.Component<\n  IViewInfoListItemProps,\n  IViewInfoListItemState\n> {\n  public constructor(props: IViewInfoListItemProps) {\n    super(props);\n    this.state = {\n      itemSelected: props.selected, // initial item selection\n    };\n    this.handleCheckboxToggle = this.handleCheckboxToggle.bind(this);\n  }\n\n  public temp() {\n    const tDescription = this.props.description;\n    const tConnectionName = this.props.connectionName;\n    return tDescription + tConnectionName;\n  }\n\n  public getNodePathStr() {\n    let path = '';\n    for (const segment of this.props.nodePath) {\n      path += '/' + segment;\n    }\n    return path;\n  }\n\n  public handleCheckboxToggle = (viewName: string) => (event: any) => {\n    this.setState({\n      itemSelected: !this.state.itemSelected,\n    });\n    this.props.onSelectionChanged(viewName, !this.state.itemSelected);\n  };\n\n  public render() {\n    return (\n      <ListViewItem\n        heading={this.props.name}\n        description={this.getNodePathStr()}\n        checkboxInput={\n          <input\n            type=\"checkbox\"\n            value=\"\"\n            defaultChecked={this.props.selected}\n            onChange={this.handleCheckboxToggle(this.props.name)}\n          />\n        }\n        additionalInfo={[\n          <ListViewInfoItem key={1}>\n            {this.props.isUpdateView === true ? (\n              <Label type=\"warning\">{this.props.i18nUpdate}</Label>\n            ) : (\n              ''\n            )}\n          </ListViewInfoItem>,\n        ]}\n        hideCloseIcon={true}\n        stacked={false}\n      />\n    );\n  }\n}\n","import { EmptyState, ListView } from 'patternfly-react';\nimport * as React from 'react';\nimport { IListViewToolbarProps, ListViewToolbar } from '../../../Shared';\n\nexport interface IViewInfoListProps extends IListViewToolbarProps {\n  i18nEmptyStateInfo: string;\n  i18nEmptyStateTitle: string;\n  i18nName: string;\n  i18nNameFilterPlaceholder: string;\n}\n\nexport class ViewInfoList extends React.Component<IViewInfoListProps> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div />\n        </ListViewToolbar>\n        {this.props.children ? (\n          <ListView>{this.props.children}</ListView>\n        ) : (\n          <EmptyState>\n            <EmptyState.Icon />\n            <EmptyState.Title>\n              {this.props.i18nEmptyStateTitle}\n            </EmptyState.Title>\n            <EmptyState.Info>{this.props.i18nEmptyStateInfo}</EmptyState.Info>\n          </EmptyState>\n        )}\n      </>\n    );\n  }\n}\n","import * as H from 'history';\nimport {\n  //  Button,\n  DropdownKebab,\n  ListView,\n  ListViewIcon,\n  ListViewItem,\n  MenuItem,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport {\n  VirtualizationPublishStatus,\n  VirtualizationPublishStatusDetail,\n} from '../';\nimport { ButtonLink } from '../../Layout';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n} from '../../Shared';\nimport {\n  BUILDING,\n  CONFIGURING,\n  DEPLOYING,\n  RUNNING,\n  SUBMITTED,\n  VirtualizationPublishState,\n} from './models';\n\nexport interface IVirtualizationListItemProps {\n  currentPublishedState: VirtualizationPublishState;\n  detailsPageLink: H.LocationDescriptor;\n  i18nCancelText: string;\n  i18nDelete: string;\n  i18nDeleteModalMessage: string;\n  i18nDeleteModalTitle: string;\n  i18nDraft: string;\n  i18nError: string;\n  i18nEdit: string;\n  i18nEditTip?: string;\n  i18nExport: string;\n  i18nPublish: string;\n  i18nPublished: string;\n  i18nPublishLogUrlText: string;\n  i18nPublishInProgress: string;\n  i18nUnpublish: string;\n  i18nUnpublishModalMessage: string;\n  i18nUnpublishModalTitle: string;\n  icon?: string;\n  onDelete: (virtualizationName: string) => void;\n  onExport: (virtualizationName: string) => void;\n  onPublish: (virtualizationName: string) => void;\n  onUnpublish: (virtualizationName: string) => void;\n  publishingCurrentStep?: number;\n  publishingLogUrl?: string;\n  publishingTotalSteps?: number;\n  publishingStepText?: string;\n  serviceVdbName: string;\n  virtualizationName: string;\n  virtualizationDescription: string;\n}\n\nexport interface IVirtualizationListItemState {\n  showConfirmationDialog: boolean;\n}\n\nexport class VirtualizationListItem extends React.Component<\n  IVirtualizationListItemProps,\n  IVirtualizationListItemState\n> {\n  public constructor(props: IVirtualizationListItemProps) {\n    super(props);\n    this.state = {\n      showConfirmationDialog: false, // initial visibility of confirmation dialog\n    };\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleExport = this.handleExport.bind(this);\n    this.handleUnpublish = this.handleUnpublish.bind(this);\n    this.handlePublish = this.handlePublish.bind(this);\n    this.showConfirmationDialog = this.showConfirmationDialog.bind(this);\n  }\n\n  public getEditTooltip() {\n    return (\n      <Tooltip id=\"detailsTip\">\n        {this.props.i18nEditTip ? this.props.i18nEditTip : this.props.i18nEdit}\n      </Tooltip>\n    );\n  }\n\n  public handleCancel() {\n    this.setState({\n      showConfirmationDialog: false, // hide dialog\n    });\n  }\n\n  public handleDelete() {\n    this.setState({\n      showConfirmationDialog: false, // hide dialog\n    });\n\n    // TODO: disable components while delete is processing\n    if (this.props.virtualizationName) {\n      this.props.onDelete(this.props.virtualizationName);\n    }\n  }\n\n  public handleExport() {\n    if (this.props.virtualizationName) {\n      this.props.onExport(this.props.virtualizationName);\n    }\n  }\n\n  public handlePublish() {\n    if (this.props.virtualizationName) {\n      this.props.onPublish(this.props.virtualizationName);\n    }\n  }\n\n  public handleUnpublish() {\n    this.setState({\n      showConfirmationDialog: false, // hide dialog\n    });\n\n    if (this.props.serviceVdbName) {\n      this.props.onUnpublish(this.props.serviceVdbName);\n    }\n  }\n\n  public showConfirmationDialog() {\n    this.setState({\n      showConfirmationDialog: true,\n    });\n  }\n\n  public handleAcceptConfirmation() {\n    const isPublished =\n      this.props.currentPublishedState === RUNNING ? true : false;\n    if (isPublished) {\n      this.handleUnpublish();\n    } else {\n      this.handleDelete();\n    }\n  }\n\n  public render() {\n    // Determine published state\n    const isPublished =\n      this.props.currentPublishedState === RUNNING ? true : false;\n    const publishInProgress =\n      this.props.currentPublishedState === BUILDING ||\n      this.props.currentPublishedState === CONFIGURING ||\n      this.props.currentPublishedState === DEPLOYING ||\n      this.props.currentPublishedState === SUBMITTED\n        ? true\n        : false;\n\n    return (\n      <>\n        <ConfirmationDialog\n          buttonStyle={\n            isPublished\n              ? ConfirmationButtonStyle.WARNING\n              : ConfirmationButtonStyle.DANGER\n          }\n          i18nCancelButtonText={this.props.i18nCancelText}\n          i18nConfirmButtonText={\n            isPublished ? this.props.i18nUnpublish : this.props.i18nDelete\n          }\n          i18nConfirmationMessage={\n            isPublished\n              ? this.props.i18nUnpublishModalMessage\n              : this.props.i18nDeleteModalMessage\n          }\n          i18nTitle={\n            isPublished\n              ? this.props.i18nUnpublishModalTitle\n              : this.props.i18nDeleteModalTitle\n          }\n          icon={\n            isPublished\n              ? ConfirmationIconType.WARNING\n              : ConfirmationIconType.DANGER\n          }\n          showDialog={this.state.showConfirmationDialog}\n          onCancel={this.handleCancel}\n          onConfirm={this.handleDelete}\n        />\n        <ListViewItem\n          actions={\n            <div className=\"form-group\">\n              {publishInProgress ? (\n                <VirtualizationPublishStatusDetail\n                  logUrl={this.props.publishingLogUrl}\n                  stepText={this.props.publishingStepText}\n                  currentStep={this.props.publishingCurrentStep}\n                  totalSteps={this.props.publishingTotalSteps}\n                  i18nPublishInProgress={this.props.i18nPublishInProgress}\n                  i18nLogUrlText={this.props.i18nPublishLogUrlText}\n                />\n              ) : (\n                <VirtualizationPublishStatus\n                  currentState={this.props.currentPublishedState}\n                  i18nPublished={this.props.i18nPublished}\n                  i18nUnpublished={this.props.i18nDraft}\n                  i18nError={this.props.i18nError}\n                />\n              )}\n              <OverlayTrigger overlay={this.getEditTooltip()} placement=\"top\">\n                <ButtonLink href={this.props.detailsPageLink} as={'primary'}>\n                  {this.props.i18nEdit}\n                </ButtonLink>\n              </OverlayTrigger>\n              <DropdownKebab\n                id={`virtualization-${\n                  this.props.virtualizationName\n                }-action-menu`}\n                pullRight={true}\n              >\n                <MenuItem onClick={this.showConfirmationDialog}>\n                  {this.props.i18nDelete}\n                </MenuItem>\n                <MenuItem onClick={this.handleExport}>\n                  {this.props.i18nExport}\n                </MenuItem>\n                <MenuItem\n                  onClick={\n                    isPublished || publishInProgress\n                      ? this.handleUnpublish\n                      : this.handlePublish\n                  }\n                >\n                  {isPublished || publishInProgress\n                    ? this.props.i18nUnpublish\n                    : this.props.i18nPublish}\n                </MenuItem>\n              </DropdownKebab>\n            </div>\n          }\n          heading={this.props.virtualizationName}\n          description={\n            this.props.virtualizationDescription\n              ? this.props.virtualizationDescription\n              : ''\n          }\n          hideCloseIcon={true}\n          leftContent={\n            this.props.icon ? (\n              <div className=\"blank-slate-pf-icon\">\n                <img\n                  src={this.props.icon}\n                  alt={this.props.virtualizationName}\n                  width={46}\n                />\n              </div>\n            ) : (\n              <ListViewIcon name={'database'} />\n            )\n          }\n          stacked={true}\n        >\n          {this.props.children ? (\n            <ListView>{this.props.children}</ListView>\n          ) : null}\n        </ListViewItem>\n      </>\n    );\n  }\n}\n","export const NOTFOUND = 'NOTFOUND';\nexport const SUBMITTED = 'SUBMITTED';\nexport const CONFIGURING = 'CONFIGURING';\nexport const BUILDING = 'BUILDING';\nexport const DEPLOYING = 'DEPLOYING';\nexport const RUNNING = 'RUNNING';\nexport const FAILED = 'FAILED';\nexport const CANCELLED = 'CANCELLED';\n\nexport type VirtualizationPublishState =\n  | 'NOTFOUND'\n  | 'SUBMITTED'\n  | 'CONFIGURING'\n  | 'BUILDING'\n  | 'DEPLOYING'\n  | 'RUNNING'\n  | 'FAILED'\n  | 'CANCELLED';\n\n// Detailed state log link types\nexport const LOGS = 'LOGS';\nexport const EVENTS = 'EVENTS';\n\nexport type LinkType = 'LOGS' | 'EVENTS';\n","import * as H from 'history';\nimport {\n  Button,\n  EmptyState,\n  ListView,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../../Layout';\nimport {\n  IListViewToolbarProps,\n  ListViewToolbar,\n  SimplePageHeader,\n} from '../../Shared';\n\nexport interface IVirtualizationListProps extends IListViewToolbarProps {\n  hasListData: boolean;\n  i18nCreateDataVirtualization: string;\n  i18nCreateDataVirtualizationTip?: string;\n  i18nDescription: string;\n  i18nEmptyStateInfo: string;\n  i18nEmptyStateTitle: string;\n  i18nImport: string;\n  i18nImportTip: string;\n  i18nLinkCreateVirtualization: string;\n  i18nLinkCreateVirtualizationTip?: string;\n  i18nName: string;\n  i18nNameFilterPlaceholder: string;\n  i18nTitle: string;\n  linkCreateHRef: H.LocationDescriptor;\n  onImport: (name: string) => void;\n}\n\nexport class VirtualizationList extends React.Component<\n  IVirtualizationListProps\n> {\n  public constructor(props: IVirtualizationListProps) {\n    super(props);\n    this.handleImport = this.handleImport.bind(this);\n  }\n\n  public getCreateVirtualizationTooltip() {\n    return (\n      <Tooltip id=\"createTip\">\n        {this.props.i18nLinkCreateVirtualizationTip\n          ? this.props.i18nLinkCreateVirtualizationTip\n          : this.props.i18nLinkCreateVirtualization}\n      </Tooltip>\n    );\n  }\n\n  public getImportVirtualizationTooltip() {\n    return (\n      <Tooltip id=\"importTip\">\n        {this.props.i18nImportTip\n          ? this.props.i18nImportTip\n          : this.props.i18nImport}\n      </Tooltip>\n    );\n  }\n\n  public handleImport() {\n    this.props.onImport('');\n  }\n\n  public render() {\n    return (\n      <>\n        <SimplePageHeader\n          className=\"container-fluid pf-u-my-md\"\n          i18nTitle={this.props.i18nTitle}\n          i18nDescription={this.props.i18nDescription}\n        />\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <OverlayTrigger\n              overlay={this.getImportVirtualizationTooltip()}\n              placement=\"top\"\n            >\n              <Button\n                bsStyle=\"default\"\n                to={this.props.i18nImport}\n                onClick={this.handleImport}\n              >\n                {this.props.i18nImport}\n              </Button>\n            </OverlayTrigger>\n            <OverlayTrigger\n              overlay={this.getCreateVirtualizationTooltip()}\n              placement=\"top\"\n            >\n              <ButtonLink href={this.props.linkCreateHRef} as={'primary'}>\n                {this.props.i18nLinkCreateVirtualization}\n              </ButtonLink>\n            </OverlayTrigger>\n          </div>\n        </ListViewToolbar>\n        {this.props.hasListData ? (\n          <ListView>{this.props.children}</ListView>\n        ) : (\n          <EmptyState>\n            <EmptyState.Icon />\n            <EmptyState.Title>\n              {this.props.i18nEmptyStateTitle}\n            </EmptyState.Title>\n            <EmptyState.Info>{this.props.i18nEmptyStateInfo}</EmptyState.Info>\n            <EmptyState.Action>\n              <OverlayTrigger\n                overlay={this.getCreateVirtualizationTooltip()}\n                placement=\"top\"\n              >\n                <ButtonLink href={this.props.linkCreateHRef} as={'primary'}>\n                  {this.props.i18nLinkCreateVirtualization}\n                </ButtonLink>\n              </OverlayTrigger>\n            </EmptyState.Action>\n          </EmptyState>\n        )}\n      </>\n    );\n  }\n}\n","import { Label } from 'patternfly-react';\nimport * as React from 'react';\nimport {\n  BUILDING,\n  CANCELLED,\n  CONFIGURING,\n  DEPLOYING,\n  FAILED,\n  NOTFOUND,\n  RUNNING,\n  SUBMITTED,\n  VirtualizationPublishState,\n} from './models';\nimport './VirtualizationPublishStatus.css';\n\nexport interface IVirtualizationPublishStatusProps {\n  currentState?: VirtualizationPublishState;\n  i18nPublished: string;\n  i18nUnpublished: string;\n  i18nError: string;\n}\n\nexport class VirtualizationPublishStatus extends React.Component<\n  IVirtualizationPublishStatusProps\n> {\n  public render() {\n    const labelType =\n      this.props.currentState === FAILED\n        ? 'danger'\n        : this.props.currentState === RUNNING\n        ? 'primary'\n        : 'default';\n    let label = NOTFOUND; // default to not found\n    switch (this.props.currentState) {\n      case RUNNING:\n        label = this.props.i18nPublished;\n        break;\n      case CANCELLED:\n      case NOTFOUND:\n        label = this.props.i18nUnpublished;\n        break;\n      case FAILED:\n        label = this.props.i18nError;\n        break;\n      case SUBMITTED:\n      case CONFIGURING:\n      case BUILDING:\n        label = DEPLOYING;\n        break;\n    }\n    return (\n      <Label className={'virtualization-publish-status-label'} type={labelType}>\n        {label}\n      </Label>\n    );\n  }\n}\n","import { Spinner } from 'patternfly-react';\nimport * as React from 'react';\nimport { ProgressWithLink } from '../../Shared';\n\nimport './VirtualizationPublishStatusDetail.css';\n\nexport interface IVirtualizationPublishStatusDetailProps {\n  currentStep?: number;\n  totalSteps?: number;\n  stepText?: string;\n  logUrl?: string;\n  i18nPublishInProgress: string;\n  i18nLogUrlText: string;\n}\n\nexport class VirtualizationPublishStatusDetail extends React.Component<\n  IVirtualizationPublishStatusDetailProps\n> {\n  public render() {\n    return (\n      <div\n        data-testid=\"virtualization-publish-status-detail\"\n        className={'virtualization-publish-status-detail'}\n      >\n        {this.props.stepText &&\n        this.props.currentStep &&\n        this.props.totalSteps ? (\n          <ProgressWithLink\n            currentStep={this.props.currentStep}\n            totalSteps={this.props.totalSteps}\n            value={this.props.stepText}\n            logUrl={this.props.logUrl}\n            i18nLogUrlText={this.props.i18nLogUrlText}\n          />\n        ) : (\n          <>\n            <Spinner loading={true} inline={true} />\n            {this.props.i18nPublishInProgress}\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport classnames from 'classnames';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { ButtonLink, Loader } from '../Layout';\n\n/**\n * @param header - a PatternFly Wizard Steps component.\n * @param sidebar - the sidebar container takes the size of its content. If no\n * sidebar is defined, a layout with just the header, the footer and the body\n * will be shown.\n * @param content - the main content of the wizard. In case of overflow, only\n * the body will scroll.\n * @param onCancel - if passed, the Cancel button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onBack - if passed, the Back button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onNext - if passed, the Next button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param cancelHref - if passed, the Cancel button will be render as a `Link`\n * using this as its `to` parameter.\n * @param backHref - if passed, the Back button will be render as a `Link`\n * using this as its `to` parameter.\n * @param nextHref - if passed, the Next button will be render as a `Link`\n * using this as its `to` parameter.\n * @param isNextLoading - if set to true, a `Loading` component will be shown\n * inside the Next button before its label. The button will also be disabled.\n * @param isNextDisabled - if set to true, the Next button will be disabled.\n * @param isLastStep - if set to true, it changes the Next button label to\n * 'Done'.\n * @param extraButtons - buttons to add between the cancel and the back/next\n */\nexport interface IConnectionCreatorProps {\n  header: React.ReactNode;\n  content: React.ReactNode;\n  onCancel?: (e: React.MouseEvent<any>) => void;\n  onBack?: (e: React.MouseEvent<any>) => void;\n  onNext?: (e: React.MouseEvent<any>) => void;\n  cancelHref?: H.LocationDescriptor;\n  backHref?: H.LocationDescriptor;\n  nextHref?: H.LocationDescriptor;\n  isNextDisabled?: boolean;\n  isNextLoading?: boolean;\n  isLastStep?: boolean;\n  extraButtons?: React.ReactNode;\n}\n\n/**\n * Provides the layout for the integration editor. It uses the PatternFly Wizard\n * component under the hood.\n * The footer is pre-defined and follows the PF Wizard pattern, with\n * Cancel/Previous/Next buttons.\n *\n * @todo in the CSS we use hardcoded values for the heights of various\n * elements of the page to be able to size the element to take all the available\n * height and show the right scrollbars.\n * We should really find a smarter way to handle this.\n */\nexport const ConnectionCreatorLayout: React.FunctionComponent<\n  IConnectionCreatorProps\n> = ({\n  header,\n  content,\n  onCancel,\n  onBack,\n  onNext,\n  cancelHref,\n  backHref,\n  nextHref,\n  isNextLoading,\n  isNextDisabled,\n  isLastStep = false,\n  extraButtons,\n}: IConnectionCreatorProps) => {\n  return (\n    <div\n      className={classnames(\n        'wizard-pf-body integration-editor-layout syn-scrollable',\n        {\n          'has-footer': true,\n        }\n      )}\n    >\n      {header}\n      <div className=\"wizard-pf-row integration-editor-layout__body syn-scrollable--body\">\n        <div\n          className={\n            'wizard-pf-main cards-pf integration-editor-layout__contentWrapper'\n          }\n        >\n          <div className=\"integration-editor-layout__content\">{content}</div>\n        </div>\n      </div>\n      <div className=\"wizard-pf-footer integration-editor-layout__footer\">\n        <ButtonLink\n          onClick={onBack}\n          href={backHref}\n          className={'wizard-pf-back'}\n        >\n          <i className=\"fa fa-angle-left\" /> Back\n        </ButtonLink>\n        {extraButtons && (\n          <div className={'wizard-pf-extrabuttons'}>{extraButtons}</div>\n        )}\n        <ButtonLink\n          onClick={onNext}\n          href={nextHref}\n          as={'primary'}\n          className={'wizard-pf-next'}\n          disabled={isNextLoading || isNextDisabled}\n        >\n          {isNextLoading ? <Loader size={'xs'} inline={true} /> : null}\n          {isLastStep ? (\n            'Done'\n          ) : (\n            <>\n              Next <i className=\"fa fa-angle-right\" />\n            </>\n          )}\n        </ButtonLink>\n        <ButtonLink\n          onClick={onCancel}\n          href={cancelHref}\n          className={'wizard-pf-cancel'}\n        >\n          Cancel\n        </ButtonLink>\n      </div>\n    </div>\n  );\n};\n","import { Card, EmptyState } from 'patternfly-react';\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport const ConnectionSkeleton = (props: any) => (\n  <Card matchHeight={true}>\n    <Card.Body>\n      <EmptyState>\n        <ContentLoader\n          height={300}\n          width={200}\n          speed={2}\n          primaryColor=\"#f3f3f3\"\n          secondaryColor=\"#ecebeb\"\n          {...props}\n        >\n          <circle cx=\"100\" cy=\"50\" r=\"40\" />\n          <rect x=\"5\" y=\"125\" rx=\"5\" ry=\"5\" width=\"190\" height=\"30\" />\n          <rect x=\"25\" y=\"180\" rx=\"5\" ry=\"5\" width=\"150\" height=\"15\" />\n          <rect x=\"40\" y=\"205\" rx=\"5\" ry=\"5\" width=\"120\" height=\"15\" />\n        </ContentLoader>\n      </EmptyState>\n    </Card.Body>\n  </Card>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport interface IApiConnectorListSkeletonProps {\n  width: number;\n  style?: any;\n}\n\nexport const ApiConnectorListSkeleton: React.FunctionComponent<\n  IApiConnectorListSkeletonProps\n> = ({ width, style }) => (\n  <ContentLoader\n    height={356}\n    width={width}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={style}\n  >\n    <circle cx=\"30\" cy=\"40\" r=\"16\" />\n    <circle cx=\"70\" cy=\"40\" r=\"16\" />\n    <rect x=\"105\" y=\"35\" rx=\"5\" ry=\"5\" width=\"200\" height=\"15\" />\n    <rect x={width - 100} y=\"35\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"110\" r=\"16\" />\n    <circle cx=\"70\" cy=\"110\" r=\"16\" />\n    <rect x=\"105\" y=\"105\" rx=\"5\" ry=\"5\" width=\"180\" height=\"15\" />\n    <rect x={width - 100} y=\"105\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"180\" r=\"16\" />\n    <circle cx=\"70\" cy=\"180\" r=\"16\" />\n    <rect x=\"105\" y=\"175\" rx=\"5\" ry=\"5\" width=\"195\" height=\"15\" />\n    <rect x={width - 100} y=\"175\" rx=\"5\" ry=\"5\" width=\"85\" height=\"15\" />\n  </ContentLoader>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport interface ICustomizationsExtensionListSkeletonProps {\n  width: number;\n  style?: any;\n}\n\nexport const ExtensionListSkeleton: React.FunctionComponent<\n  ICustomizationsExtensionListSkeletonProps\n> = ({ width, style }) => (\n  <ContentLoader\n    height={356}\n    width={width}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={style}\n  >\n    <circle cx=\"30\" cy=\"40\" r=\"16\" />\n    <circle cx=\"70\" cy=\"40\" r=\"16\" />\n    <rect x=\"105\" y=\"35\" rx=\"5\" ry=\"5\" width=\"200\" height=\"15\" />\n    <rect x={width - 100} y=\"35\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"110\" r=\"16\" />\n    <circle cx=\"70\" cy=\"110\" r=\"16\" />\n    <rect x=\"105\" y=\"105\" rx=\"5\" ry=\"5\" width=\"180\" height=\"15\" />\n    <rect x={width - 100} y=\"105\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"180\" r=\"16\" />\n    <circle cx=\"70\" cy=\"180\" r=\"16\" />\n    <rect x=\"105\" y=\"175\" rx=\"5\" ry=\"5\" width=\"195\" height=\"15\" />\n    <rect x={width - 100} y=\"175\" rx=\"5\" ry=\"5\" width=\"85\" height=\"15\" />\n  </ContentLoader>\n);\n","import { Grid } from 'patternfly-react';\nimport * as React from 'react';\nimport { IntegrationStatus } from '../Integration';\nimport { IntegrationState } from '../Integration/models';\n\nexport interface IRecentUpdatesItem {\n  integrationName: string;\n  integrationCurrentState: IntegrationState;\n  integrationDate: number;\n  i18nError: string;\n  i18nPublished: string;\n  i18nUnpublished: string;\n}\n\nexport const RecentUpdatesItem: React.FunctionComponent<IRecentUpdatesItem> = ({\n  integrationName,\n  integrationCurrentState,\n  integrationDate,\n  i18nError,\n  i18nPublished,\n  i18nUnpublished,\n}) => (\n  <Grid.Row>\n    <Grid.Col sm={5}>{integrationName}</Grid.Col>\n    <Grid.Col sm={3}>\n      <IntegrationStatus\n        currentState={integrationCurrentState}\n        i18nError={i18nError}\n        i18nPublished={i18nPublished}\n        i18nUnpublished={i18nUnpublished}\n      />\n    </Grid.Col>\n    <Grid.Col sm={4}>{new Date(integrationDate).toLocaleString()}</Grid.Col>\n  </Grid.Row>\n);\n","import * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport const RecentUpdatesSkeleton = (props: any) => (\n  <ContentLoader\n    height={150}\n    width={350}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    {...props}\n  >\n    <rect x=\"20\" y=\"5\" rx=\"5\" ry=\"5\" width=\"100\" height=\"10\" />\n    <rect x=\"150\" y=\"5\" rx=\"5\" ry=\"5\" width=\"30\" height=\"10\" />\n    <rect x=\"250\" y=\"5\" rx=\"5\" ry=\"5\" width=\"40\" height=\"10\" />\n\n    <rect x=\"20\" y=\"35\" rx=\"5\" ry=\"5\" width=\"80\" height=\"10\" />\n    <rect x=\"150\" y=\"35\" rx=\"5\" ry=\"5\" width=\"30\" height=\"10\" />\n    <rect x=\"250\" y=\"35\" rx=\"5\" ry=\"5\" width=\"40\" height=\"10\" />\n\n    <rect x=\"20\" y=\"65\" rx=\"5\" ry=\"5\" width=\"95\" height=\"10\" />\n    <rect x=\"150\" y=\"65\" rx=\"5\" ry=\"5\" width=\"30\" height=\"10\" />\n    <rect x=\"250\" y=\"65\" rx=\"5\" ry=\"5\" width=\"40\" height=\"10\" />\n\n    <rect x=\"20\" y=\"95\" rx=\"5\" ry=\"5\" width=\"125\" height=\"10\" />\n    <rect x=\"150\" y=\"95\" rx=\"5\" ry=\"5\" width=\"30\" height=\"10\" />\n    <rect x=\"250\" y=\"95\" rx=\"5\" ry=\"5\" width=\"40\" height=\"10\" />\n\n    <rect x=\"20\" y=\"125\" rx=\"5\" ry=\"5\" width=\"65\" height=\"10\" />\n    <rect x=\"150\" y=\"125\" rx=\"5\" ry=\"5\" width=\"30\" height=\"10\" />\n    <rect x=\"250\" y=\"125\" rx=\"5\" ry=\"5\" width=\"40\" height=\"10\" />\n  </ContentLoader>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport interface IViewListSkeletonProps {\n  width: number;\n  style?: any;\n}\n\nexport const ViewListSkeleton: React.FunctionComponent<\n  IViewListSkeletonProps\n> = ({ width, style }) => (\n  <ContentLoader\n    height={356}\n    width={width}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={style}\n  >\n    <circle cx=\"30\" cy=\"40\" r=\"16\" />\n    <circle cx=\"70\" cy=\"40\" r=\"16\" />\n    <rect x=\"105\" y=\"35\" rx=\"5\" ry=\"5\" width=\"200\" height=\"15\" />\n    <rect x={width - 100} y=\"35\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"110\" r=\"16\" />\n    <circle cx=\"70\" cy=\"110\" r=\"16\" />\n    <rect x=\"105\" y=\"105\" rx=\"5\" ry=\"5\" width=\"180\" height=\"15\" />\n    <rect x={width - 100} y=\"105\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"180\" r=\"16\" />\n    <circle cx=\"70\" cy=\"180\" r=\"16\" />\n    <rect x=\"105\" y=\"175\" rx=\"5\" ry=\"5\" width=\"195\" height=\"15\" />\n    <rect x={width - 100} y=\"175\" rx=\"5\" ry=\"5\" width=\"85\" height=\"15\" />\n  </ContentLoader>\n);\n","import { Card, EmptyState } from 'patternfly-react';\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport const DvConnectionSkeleton = (props: any) => (\n  <Card matchHeight={true}>\n    <Card.Body>\n      <EmptyState>\n        <ContentLoader\n          height={300}\n          width={200}\n          speed={2}\n          primaryColor=\"#f3f3f3\"\n          secondaryColor=\"#ecebeb\"\n          {...props}\n        >\n          <circle cx=\"100\" cy=\"50\" r=\"40\" />\n          <rect x=\"5\" y=\"125\" rx=\"5\" ry=\"5\" width=\"190\" height=\"30\" />\n          <rect x=\"25\" y=\"180\" rx=\"5\" ry=\"5\" width=\"150\" height=\"15\" />\n          <rect x=\"40\" y=\"205\" rx=\"5\" ry=\"5\" width=\"120\" height=\"15\" />\n        </ContentLoader>\n      </EmptyState>\n    </Card.Body>\n  </Card>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport interface IViewInfoListSkeletonProps {\n  width: number;\n  style?: any;\n}\n\nexport const ViewInfoListSkeleton: React.FunctionComponent<\n  IViewInfoListSkeletonProps\n> = ({ width, style }) => (\n  <ContentLoader\n    height={356}\n    width={width}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={style}\n  >\n    <circle cx=\"30\" cy=\"40\" r=\"16\" />\n    <circle cx=\"70\" cy=\"40\" r=\"16\" />\n    <rect x=\"105\" y=\"35\" rx=\"5\" ry=\"5\" width=\"200\" height=\"15\" />\n    <rect x={width - 100} y=\"35\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"110\" r=\"16\" />\n    <circle cx=\"70\" cy=\"110\" r=\"16\" />\n    <rect x=\"105\" y=\"105\" rx=\"5\" ry=\"5\" width=\"180\" height=\"15\" />\n    <rect x={width - 100} y=\"105\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"180\" r=\"16\" />\n    <circle cx=\"70\" cy=\"180\" r=\"16\" />\n    <rect x=\"105\" y=\"175\" rx=\"5\" ry=\"5\" width=\"195\" height=\"15\" />\n    <rect x={width - 100} y=\"175\" rx=\"5\" ry=\"5\" width=\"85\" height=\"15\" />\n  </ContentLoader>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport classnames from 'classnames';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { ButtonLink, Loader } from '../../../Layout';\nimport './ViewsCreateLayout.css';\n\n/**\n * @param header - a PatternFly Wizard Steps component.\n * @param content - the main content of the wizard. In case of overflow, only\n * the body will scroll.\n * @param onCancel - if passed, the Cancel button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onBack - if passed, the Back button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onNext - if passed, the Next button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onCreateViews - Create views when complete.\n * @param cancelHref - if passed, the Cancel button will be render as a `Link`\n * using this as its `to` parameter.\n * @param backHref - if passed, the Back button will be render as a `Link`\n * using this as its `to` parameter.\n * @param nextHref - if passed, the Next button will be render as a `Link`\n * using this as its `to` parameter.\n * @param isNextLoading - if set to true, a `Loading` component will be shown\n * inside the Next button before its label. The button will also be disabled.\n * @param isNextDisabled - if set to true, the Next button will be disabled.\n * @param isLastStep - if set to true, it changes the Next button label to\n * 'Done'.\n */\nexport interface IViewsCreateLayoutProps {\n  header: JSX.Element;\n  content: JSX.Element;\n  onCancel?: (e: React.MouseEvent<any>) => void;\n  onBack?: (e: React.MouseEvent<any>) => void;\n  onNext?: (e: React.MouseEvent<any>) => void;\n  onCreateViews?: () => Promise<any>;\n  cancelHref?: H.LocationDescriptor;\n  backHref?: H.LocationDescriptor;\n  nextHref?: H.LocationDescriptor;\n  isNextDisabled?: boolean;\n  isNextLoading?: boolean;\n  isLastStep?: boolean;\n}\n\n/**\n * Provides the layout for the views create wizard. It uses the PatternFly Wizard\n * component under the hood.\n * The footer is pre-defined and follows the PF Wizard pattern, with\n * Cancel/Previous/Next buttons.\n *\n * @todo in the CSS we use hardcoded values for the heights of various\n * elements of the page to be able to size the element to take all the available\n * height and show the right scrollbars.\n * We should really find a smarter way to handle this.\n */\nexport const ViewsCreateLayout: React.FunctionComponent<\n  IViewsCreateLayoutProps\n> = ({\n  header,\n  content,\n  onCancel,\n  onBack,\n  onNext,\n  onCreateViews,\n  cancelHref,\n  backHref,\n  nextHref,\n  isNextLoading,\n  isNextDisabled,\n  isLastStep = false,\n}: IViewsCreateLayoutProps) => {\n  return (\n    <div\n      className={classnames('wizard-pf-body views-create-layout', {\n        'has-footer': true,\n      })}\n    >\n      {header}\n      <div className=\"wizard-pf-row views-create-layout__body\">\n        <div\n          className={\n            'wizard-pf-main cards-pf views-create-layout__contentWrapper'\n          }\n        >\n          <div className=\"views-create-layout__content\">{content}</div>\n        </div>\n      </div>\n      <div className=\"wizard-pf-footer views-create-layout__footer\">\n        <ButtonLink\n          onClick={onBack}\n          href={backHref}\n          className={'wizard-pf-back'}\n        >\n          <i className=\"fa fa-angle-left\" /> Back\n        </ButtonLink>\n        <ButtonLink\n          onClick={isLastStep ? onCreateViews : onNext}\n          href={nextHref}\n          as={'primary'}\n          className={'wizard-pf-next'}\n          disabled={isNextLoading || isNextDisabled}\n        >\n          {isNextLoading ? <Loader size={'xs'} inline={true} /> : null}\n          {isLastStep ? (\n            'Done'\n          ) : (\n            <>\n              Next <i className=\"fa fa-angle-right\" />\n            </>\n          )}\n        </ButtonLink>\n        <ButtonLink\n          onClick={onCancel}\n          href={cancelHref}\n          className={'wizard-pf-cancel'}\n        >\n          Cancel\n        </ButtonLink>\n      </div>\n    </div>\n  );\n};\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport interface IVirtualizationListSkeletonProps {\n  width: number;\n  style?: any;\n}\n\nexport const VirtualizationListSkeleton: React.FunctionComponent<\n  IVirtualizationListSkeletonProps\n> = ({ width, style }) => (\n  <ContentLoader\n    height={356}\n    width={width}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={style}\n  >\n    <circle cx=\"30\" cy=\"40\" r=\"16\" />\n    <circle cx=\"70\" cy=\"40\" r=\"16\" />\n    <rect x=\"105\" y=\"35\" rx=\"5\" ry=\"5\" width=\"200\" height=\"15\" />\n    <rect x={width - 100} y=\"35\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"110\" r=\"16\" />\n    <circle cx=\"70\" cy=\"110\" r=\"16\" />\n    <rect x=\"105\" y=\"105\" rx=\"5\" ry=\"5\" width=\"180\" height=\"15\" />\n    <rect x={width - 100} y=\"105\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"180\" r=\"16\" />\n    <circle cx=\"70\" cy=\"180\" r=\"16\" />\n    <rect x=\"105\" y=\"175\" rx=\"5\" ry=\"5\" width=\"195\" height=\"15\" />\n    <rect x={width - 100} y=\"175\" rx=\"5\" ry=\"5\" width=\"85\" height=\"15\" />\n  </ContentLoader>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\n\nexport interface IIntegrationActionSelectorCardProps {\n  content: JSX.Element;\n  title: string;\n}\n\nexport const IntegrationActionSelectorCard: React.FunctionComponent<\n  IIntegrationActionSelectorCardProps\n> = ({ content, title }) => (\n  <div className=\"card-pf\">\n    <div className=\"card-pf-title\">{title}</div>\n    <div className=\"card-pf-body\">{content}</div>\n  </div>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport classnames from 'classnames';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { ButtonLink, Loader } from '../Layout';\nimport './IntegrationEditorLayout.css';\n\n/**\n * @param header - a PatternFly Wizard Steps component.\n * @param sidebar - the sidebar container takes the size of its content. If no\n * sidebar is defined, a layout with just the header, the footer and the body\n * will be shown.\n * @param content - the main content of the wizard. In case of overflow, only\n * the body will scroll.\n * @param onCancel - if passed, the Cancel button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onBack - if passed, the Back button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onNext - if passed, the Next button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param cancelHref - if passed, the Cancel button will be render as a `Link`\n * using this as its `to` parameter.\n * @param backHref - if passed, the Back button will be render as a `Link`\n * using this as its `to` parameter.\n * @param nextHref - if passed, the Next button will be render as a `Link`\n * using this as its `to` parameter.\n * @param isNextLoading - if set to true, a `Loading` component will be shown\n * inside the Next button before its label. The button will also be disabled.\n * @param isNextDisabled - if set to true, the Next button will be disabled.\n * @param isLastStep - if set to true, it changes the Next button label to\n * 'Done'.\n */\nexport interface IIntegrationEditorLayoutProps {\n  header: React.ReactNode;\n  sidebar?: React.ReactNode;\n  content: React.ReactNode;\n  onCancel?: (e: React.MouseEvent<any>) => void;\n  onBack?: (e: React.MouseEvent<any>) => void;\n  onNext?: (e: React.MouseEvent<any>) => void;\n  cancelHref?: H.LocationDescriptor;\n  backHref?: H.LocationDescriptor;\n  nextHref?: H.LocationDescriptor;\n  isNextDisabled?: boolean;\n  isNextLoading?: boolean;\n  isLastStep?: boolean;\n}\n\n/**\n * Provides the layout for the integration editor. It uses the PatternFly Wizard\n * component under the hood.\n * The footer is pre-defined and follows the PF Wizard pattern, with\n * Cancel/Previous/Next buttons.\n *\n * @todo in the CSS we use hardcoded values for the heights of various\n * elements of the page to be able to size the element to take all the available\n * height and show the right scrollbars.\n * We should really find a smarter way to handle this.\n */\nexport const IntegrationEditorLayout: React.FunctionComponent<\n  IIntegrationEditorLayoutProps\n> = ({\n  header,\n  sidebar,\n  content,\n  onCancel,\n  onBack,\n  onNext,\n  cancelHref,\n  backHref,\n  nextHref,\n  isNextLoading,\n  isNextDisabled,\n  isLastStep = false,\n}: IIntegrationEditorLayoutProps) => {\n  return (\n    <div\n      className={classnames(\n        'wizard-pf-body integration-editor-layout syn-scrollable',\n        {\n          'has-footer': true,\n        }\n      )}\n    >\n      {header}\n      <div className=\"wizard-pf-row integration-editor-layout__body syn-scrollable--body\">\n        <div className=\"wizard-pf-sidebar\">{sidebar}</div>\n        <div\n          className={\n            'wizard-pf-main cards-pf integration-editor-layout__contentWrapper'\n          }\n        >\n          <div className=\"integration-editor-layout__content\">{content}</div>\n        </div>\n      </div>\n      <div className=\"wizard-pf-footer integration-editor-layout__footer\">\n        <ButtonLink\n          onClick={onBack}\n          href={backHref}\n          className={'wizard-pf-back'}\n        >\n          <i className=\"fa fa-angle-left\" /> Back\n        </ButtonLink>\n        <ButtonLink\n          onClick={onNext}\n          href={nextHref}\n          as={'primary'}\n          className={'wizard-pf-next'}\n          disabled={isNextLoading || isNextDisabled}\n        >\n          {isNextLoading ? <Loader size={'xs'} inline={true} /> : null}\n          {isLastStep ? (\n            'Done'\n          ) : (\n            <>\n              Next <i className=\"fa fa-angle-right\" />\n            </>\n          )}\n        </ButtonLink>\n        <ButtonLink\n          onClick={onCancel}\n          href={cancelHref}\n          className={'wizard-pf-cancel'}\n        >\n          Cancel\n        </ButtonLink>\n      </div>\n    </div>\n  );\n};\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport {\n  IIntegrationFlowStepProps,\n  IntegrationFlowStep,\n} from './IntegrationFlowStep';\nimport { IntegrationFlowStepDetails } from './IntegrationFlowStepDetails';\n\nexport interface IIntegrationFlowStepWithOverviewProps\n  extends IIntegrationFlowStepProps {\n  /**\n   * The title of the extended information table.\n   */\n  i18nTitle: string;\n  /**\n   * The name of the connection used for the step.\n   */\n  name: string;\n  /**\n   * The name of the action used for the step.\n   */\n  action: string;\n  /**\n   * The data-type set up for the step.\n   */\n  dataType: string;\n}\n\n/**\n * A component to show an already configured step in the sidebar of the\n * integration editor.\n *\n * @see [i18nTitle]{@link IIntegrationFlowStepWithOverviewProps#i18nTitle}\n * @see [i18nTooltip]{@link IIntegrationFlowStepProps#i18nTooltip}\n * @see [icon]{@link IIntegrationFlowStepProps#icon}\n * @see [active]{@link IIntegrationFlowStepProps#active}\n * @see [showDetails]{@link IIntegrationFlowStepProps#showDetails}\n * @see [name]{@link IIntegrationFlowStepWithOverviewProps#name}\n * @see [action]{@link IIntegrationFlowStepWithOverviewProps#action}\n * @see [dataType]{@link IIntegrationFlowStepWithOverviewProps#dataType}\n * @constructor\n */\nexport const IntegrationFlowStepWithOverview: React.FunctionComponent<\n  IIntegrationFlowStepWithOverviewProps\n> = ({\n  i18nTitle,\n  i18nTooltip,\n  icon,\n  active = false,\n  showDetails,\n  name,\n  action,\n  dataType,\n}) => (\n  <IntegrationFlowStep\n    icon={icon}\n    active={active}\n    i18nTooltip={i18nTooltip}\n    showDetails={showDetails}\n  >\n    <IntegrationFlowStepDetails active={active}>\n      {({ Title, StepOverview }) => (\n        <>\n          <Title>{i18nTitle}</Title>\n          <StepOverview\n            nameI18nLabel={'Name:'}\n            name={name}\n            actionI18nLabel={'Action:'}\n            action={action}\n            dataTypeI18nLabel={'Data Type:'}\n            dataType={dataType}\n          />\n        </>\n      )}\n    </IntegrationFlowStepDetails>\n  </IntegrationFlowStep>\n);\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../Layout';\n\nexport interface IIntegrationsListItemUnreadableProps {\n  integrationName: string;\n  i18nDescription: string;\n  rawObject: string;\n}\n\nexport const IntegrationsListItemUnreadable: React.FC<\n  IIntegrationsListItemUnreadableProps\n> = ({ integrationName, i18nDescription, rawObject }) => {\n  const onClick = () => window.alert(rawObject);\n  return (\n    <ListView.Item\n      heading={integrationName}\n      actions={<ButtonLink onClick={onClick}>Integration JSON</ButtonLink>}\n      description={i18nDescription}\n      stacked={true}\n    />\n  );\n};\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport { Breadcrumb as PfBreadcrumb } from 'patternfly-react';\nimport * as React from 'react';\n\n/**\n * A component to show breadcrumbs. All its children will be wrapped in a tag\n * that will automatically handle the active/inactive state by setting the\n * appropriate class to the wrapper.\n *\n * It's suggested to use only anchors or spans as children node.\n */\nexport const Breadcrumb: React.FunctionComponent = ({ children }) => (\n  <PfBreadcrumb\n    style={{\n      background: '#fff',\n      margin: 0,\n      paddingLeft: '15px',\n    }}\n  >\n    {React.Children.map(children, (c, idx) => (\n      <li\n        className={React.Children.count(children) - 1 === idx ? 'active' : ''}\n        key={idx}\n      >\n        {c}\n      </li>\n    ))}\n  </PfBreadcrumb>\n);\n","import { Nav } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface ITabBarProps {\n  [key: string]: any;\n}\n\nexport const TabBar: React.FunctionComponent<ITabBarProps> = ({\n  children,\n  ...props\n}) => (\n  <Nav bsClass=\"nav nav-tabs nav-tabs-pf\" {...props}>\n    {children}\n  </Nav>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\n\ninterface IWizardStepProps {\n  isActive: boolean;\n  isDisabled: boolean;\n  isAlt?: boolean;\n  onClick?: () => any;\n  step: number;\n  title: string;\n  subSteps?: string[];\n  activeSubstep?: number;\n}\n\nexport const WizardStep: React.FunctionComponent<IWizardStepProps> = ({\n  isActive,\n  isDisabled,\n  isAlt = false,\n  onClick,\n  step,\n  title,\n  subSteps = [],\n  activeSubstep = 0,\n}) => (\n  <li\n    className={`${isAlt ? 'wizard-pf-step-alt' : 'wizard-pf-step'} ${\n      isActive ? 'active' : ''\n    } ${isDisabled ? 'disabled' : ''}`}\n    onClick={onClick}\n  >\n    <a>\n      <span className={`wizard-pf-step${isAlt ? '-alt' : ''}-number`}>\n        {step}\n      </span>\n      <span className={`wizard-pf-step${isAlt ? '-alt' : ''}-title`}>\n        {title}\n      </span>\n      {!isAlt &&\n        subSteps.map((s, idx) => (\n          <span\n            className={`wizard-pf-step-title-substep ${\n              idx === activeSubstep ? 'active' : ''\n            }`}\n            key={idx}\n          >\n            {s}\n          </span>\n        ))}\n    </a>\n    {isAlt && isActive && (\n      <ul>\n        {subSteps.map((s, idx) => (\n          <li\n            className={`wizard-pf-step-alt-substep ${\n              idx === activeSubstep ? 'active' : 'disabled'\n            }`}\n            key={idx}\n          >\n            <a>{s}</a>\n          </li>\n        ))}\n      </ul>\n    )}\n  </li>\n);\n","import { Table } from 'patternfly-react';\nimport * as React from 'react';\n\n/**\n * This component wraps a generic table component and exposes a simple and\n * consistent methodology to customize basic presentation properties and provide\n * an interface of setting the row/column data within the table.\n */\n\nexport type IGenericTableFormatter = (value: any) => React.ReactNode;\n\nexport interface IGenericTableColumn {\n  cell: {\n    formatters: IGenericTableFormatter[];\n  };\n  header: {\n    formatters: IGenericTableFormatter[];\n    label: string;\n  };\n  property: string;\n}\n\nexport interface IGenericTableStyle {\n  striped?: boolean;\n  bordered?: boolean;\n  hover?: boolean;\n}\n\nexport interface IGenericTableData {\n  columns: IGenericTableColumn[];\n  rows: Array<{ [property: string]: any }>;\n  rowKey: string;\n}\n\nexport const DefaultHeaderFormat = (value: any) => (\n  <Table.Heading>{value}</Table.Heading>\n);\nexport const DefaultCellFormat = (value: any) => (\n  <Table.Cell>{value}</Table.Cell>\n);\n\nexport const GenericTable: React.FC<IGenericTableStyle & IGenericTableData> = ({\n  striped = true,\n  bordered = true,\n  hover = true,\n  columns,\n  rows,\n  rowKey,\n}) => (\n  <Table.PfProvider\n    striped={striped}\n    bordered={bordered}\n    hover={hover}\n    columns={columns}\n  >\n    <Table.Header />\n    <Table.Body rows={rows} rowKey={rowKey} />\n  </Table.PfProvider>\n);\n","import { Text } from '@patternfly/react-core';\nimport { EmptyState } from 'patternfly-react';\nimport { useState } from 'react';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../Layout';\n\nexport interface IUnrecoverableErrorProps {\n  i18nTitle: string;\n  i18nInfo: string;\n  i18nHelp: string;\n  i18nRefreshLabel: string;\n  i18nReportIssue: string;\n  i18nShowErrorInfoLabel?: string;\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\nexport const UnrecoverableError: React.FC<IUnrecoverableErrorProps> = ({\n  i18nTitle,\n  i18nInfo,\n  i18nHelp,\n  i18nRefreshLabel,\n  i18nReportIssue,\n  i18nShowErrorInfoLabel,\n  error,\n  errorInfo,\n}) => {\n  const [showErrorInfo, setShowErrorInfo] = useState(false);\n  const toggleErrorInfo = () => setShowErrorInfo(!showErrorInfo);\n  return (\n    <Container>\n      <EmptyState>\n        <EmptyState.Icon name={'error-circle-o'} />\n        <EmptyState.Title>{i18nTitle}</EmptyState.Title>\n        <EmptyState.Info>{i18nInfo}</EmptyState.Info>\n        <EmptyState.Help>{i18nHelp}</EmptyState.Help>\n        <EmptyState.Action>\n          <ButtonLink href={'.'} as={'primary'} size={'lg'}>\n            {i18nRefreshLabel}\n          </ButtonLink>\n        </EmptyState.Action>\n        <EmptyState.Action secondary={true}>\n          {error && (\n            <ButtonLink onClick={toggleErrorInfo}>\n              {i18nShowErrorInfoLabel}\n            </ButtonLink>\n          )}\n          <a\n            className={'btn btn-default'}\n            href={\n              'https://github.com/syndesisio/syndesis/issues/new?template=simple.md&labels=cat/bug&title=Error%20report'\n            }\n          >\n            {i18nReportIssue}\n          </a>\n        </EmptyState.Action>\n        {showErrorInfo && error && (\n          <EmptyState.Help style={{ textAlign: 'left' }}>\n            <Text>\n              {error.name}: {error.message}\n            </Text>\n            {errorInfo && <pre>{errorInfo.componentStack}</pre>}\n          </EmptyState.Help>\n        )}\n      </EmptyState>\n    </Container>\n  );\n};\n","import { WithEnvironments, WithIntegrationTags } from '@syndesis/api';\nimport {\n  CiCdList,\n  CiCdListSkeleton,\n  ITagIntegrationEntry,\n  TagIntegrationDialog,\n  TagIntegrationDialogBody,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { ApiError } from '../../../shared';\n\nexport interface ITagIntegrationDialogWrapperProps {\n  manageCiCdHref: H.LocationDescriptor;\n  targetIntegrationId: string;\n  onSave: () => void;\n  onHide: () => void;\n  tagIntegration: (\n    integrationId: string,\n    environments: string[]\n  ) => Promise<Response>;\n}\n\nexport class TagIntegrationDialogWrapper extends React.Component<\n  ITagIntegrationDialogWrapperProps\n> {\n  public constructor(props: ITagIntegrationDialogWrapperProps) {\n    super(props);\n    this.handleSave = this.handleSave.bind(this);\n  }\n  public handleSave(items: ITagIntegrationEntry[]) {\n    this.props.onSave();\n    const newEnvironments = items\n      .filter(item => item.selected)\n      .map(item => item.name);\n    this.props.tagIntegration(this.props.targetIntegrationId, newEnvironments);\n  }\n  public render() {\n    return (\n      <Translation ns={['integrations', 'shared']}>\n        {t => (\n          <TagIntegrationDialog\n            i18nTitle={t('integrations:MarkIntegrationForCiCd')}\n            i18nCancelButtonText={t('shared:Cancel')}\n            i18nSaveButtonText={t('shared:Save')}\n            onHide={this.props.onHide}\n            onSave={this.handleSave}\n          >\n            {({ handleChange }) => (\n              <WithIntegrationTags\n                integrationId={this.props.targetIntegrationId}\n              >\n                {({ data: tags, hasData: hasTags, error: tagError }) => (\n                  <WithEnvironments disableUpdates={true}>\n                    {({\n                      data: environments,\n                      hasData: hasEnvironments,\n                      error: environmentsError,\n                    }) => {\n                      return (\n                        <>\n                          <p>\n                            {t('integrations:TagThisIntegrationForRelease')}\n                          </p>\n                          <WithLoader\n                            error={tagError || environmentsError}\n                            loading={!hasTags && !hasEnvironments}\n                            loaderChildren={\n                              <CiCdList>\n                                <CiCdListSkeleton />\n                              </CiCdList>\n                            }\n                            errorChildren={<ApiError />}\n                          >\n                            {() => {\n                              const mappedItems = environments.map(item => ({\n                                name: item,\n                                selected: typeof tags[item] !== 'undefined',\n                              }));\n                              return (\n                                <TagIntegrationDialogBody\n                                  key={JSON.stringify(tags)}\n                                  initialItems={mappedItems}\n                                  onChange={handleChange}\n                                  manageCiCdHref={this.props.manageCiCdHref}\n                                  i18nEmptyStateTitle={t(\n                                    'integrations:NoEnvironmentsAvailable'\n                                  )}\n                                  i18nEmptyStateInfo={t(\n                                    'integrations:NoEnvironmentsAvailableInfo'\n                                  )}\n                                  i18nEmptyStateButtonText={t(\n                                    'integrations:GoToManageCiCd'\n                                  )}\n                                />\n                              );\n                            }}\n                          </WithLoader>\n                        </>\n                      );\n                    }}\n                  </WithEnvironments>\n                )}\n              </WithIntegrationTags>\n            )}\n          </TagIntegrationDialog>\n        )}\n      </Translation>\n    );\n  }\n}\n","import {\n  canActivate,\n  canDeactivate,\n  canEdit,\n  getFinishIcon,\n  getStartIcon,\n  WithIntegrationHelpers,\n} from '@syndesis/api';\nimport { IntegrationWithMonitoring } from '@syndesis/models';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n  IIntegrationAction,\n  IntegrationActions,\n  IntegrationsList,\n  IntegrationsListItem,\n  IntegrationsListItemUnreadable,\n  IntegrationsListSkeleton,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { AppContext } from '../../../app';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport resolvers from '../resolvers';\nimport { TagIntegrationDialogWrapper } from './TagIntegrationDialogWrapper';\n\nexport interface IIntegrationsProps {\n  error: boolean;\n  loading: boolean;\n  integrations: IntegrationWithMonitoring[];\n}\n\nexport interface IIntegrationsState {\n  showActionPromptDialog: boolean;\n  showCiCdPromptDialog: boolean;\n  targetIntegrationId?: string;\n  promptDialogButtonText?: string;\n  promptDialogIcon?: ConfirmationIconType;\n  promptDialogText?: string;\n  promptDialogTitle?: string;\n  handleAction?: () => void;\n}\n\ninterface IPromptActionOptions {\n  promptDialogButtonText: string;\n  promptDialogIcon: ConfirmationIconType;\n  promptDialogText: string;\n  promptDialogTitle: string;\n  handleAction: () => void;\n}\n\nexport class Integrations extends React.Component<\n  IIntegrationsProps,\n  IIntegrationsState\n> {\n  public constructor(props: IIntegrationsProps) {\n    super(props);\n    this.state = {\n      showActionPromptDialog: false,\n      showCiCdPromptDialog: false,\n    };\n    this.handleAction = this.handleAction.bind(this);\n    this.handleActionCancel = this.handleActionCancel.bind(this);\n    this.promptForAction = this.promptForAction.bind(this);\n    this.closeCiCdDialog = this.closeCiCdDialog.bind(this);\n  }\n  public closeCiCdDialog() {\n    this.setState({\n      showCiCdPromptDialog: false,\n    });\n  }\n  public handleActionCancel() {\n    this.setState({\n      showActionPromptDialog: false,\n    });\n  }\n  public handleAction() {\n    const action = this.state.handleAction;\n    this.setState({\n      showActionPromptDialog: false,\n    });\n    if (typeof action === 'function') {\n      action.apply(this);\n    } else {\n      throw Error('Undefined action set for confirmation dialog');\n    }\n  }\n  public promptForAction(options: IPromptActionOptions) {\n    this.setState({\n      handleAction: options.handleAction,\n      promptDialogButtonText: options.promptDialogButtonText,\n      promptDialogIcon: options.promptDialogIcon,\n      promptDialogText: options.promptDialogText,\n      promptDialogTitle: options.promptDialogTitle,\n      showActionPromptDialog: true,\n    });\n  }\n  public promptForCiCd(targetIntegrationId: string) {\n    this.setState({\n      showCiCdPromptDialog: true,\n      targetIntegrationId,\n    });\n  }\n  public render() {\n    return (\n      <Translation ns={['integrations', 'shared']}>\n        {t => (\n          <AppContext.Consumer>\n            {({ config, getPodLogUrl, pushNotification }) => (\n              <WithIntegrationHelpers>\n                {({\n                  deleteIntegration,\n                  deployIntegration,\n                  exportIntegration,\n                  undeployIntegration,\n                  tagIntegration,\n                }) => (\n                  <>\n                    {this.state.showCiCdPromptDialog && (\n                      <TagIntegrationDialogWrapper\n                        manageCiCdHref={resolvers.manageCicd.root()}\n                        tagIntegration={tagIntegration}\n                        targetIntegrationId={this.state.targetIntegrationId!}\n                        onSave={this.closeCiCdDialog}\n                        onHide={this.closeCiCdDialog}\n                      />\n                    )}\n                    {this.state.showActionPromptDialog && (\n                      <ConfirmationDialog\n                        buttonStyle={ConfirmationButtonStyle.NORMAL}\n                        i18nCancelButtonText={t('shared:Cancel')}\n                        i18nConfirmButtonText={\n                          this.state.promptDialogButtonText!\n                        }\n                        i18nConfirmationMessage={this.state.promptDialogText!}\n                        i18nTitle={this.state.promptDialogTitle!}\n                        icon={this.state.promptDialogIcon!}\n                        showDialog={this.state.showActionPromptDialog}\n                        onCancel={this.handleActionCancel}\n                        onConfirm={this.handleAction}\n                      />\n                    )}\n                    <IntegrationsList>\n                      <WithLoader\n                        error={this.props.error}\n                        loading={this.props.loading}\n                        loaderChildren={<IntegrationsListSkeleton />}\n                        errorChildren={<ApiError />}\n                      >\n                        {() =>\n                          this.props.integrations.map(\n                            (mi: IntegrationWithMonitoring) => {\n                              try {\n                                const editAction: IIntegrationAction = {\n                                  href: resolvers.integration.edit.index({\n                                    flowId: mi.integration.flows![0].id!,\n                                    integration: mi.integration,\n                                  }),\n                                  label: 'Edit',\n                                };\n                                const startAction: IIntegrationAction = {\n                                  label: 'Start',\n                                  onClick: () =>\n                                    this.promptForAction({\n                                      handleAction: async () => {\n                                        pushNotification(\n                                          i18n.t(\n                                            'integrations:PublishingIntegrationMessage'\n                                          ),\n                                          'info'\n                                        );\n                                        try {\n                                          await deployIntegration(\n                                            mi.integration.id!,\n                                            mi.integration.version!,\n                                            false\n                                          );\n                                        } catch (err) {\n                                          pushNotification(\n                                            i18n.t(\n                                              'integrations.PublishingIntegrationFailedMessage',\n                                              { error: err }\n                                            ),\n                                            'warning'\n                                          );\n                                        }\n                                      },\n                                      promptDialogButtonStyle:\n                                        ConfirmationButtonStyle.NORMAL,\n                                      promptDialogButtonText: t('shared:Start'),\n                                      promptDialogIcon:\n                                        ConfirmationIconType.NONE,\n                                      promptDialogText: t(\n                                        'integrations:publishIntegrationModal',\n                                        { name: mi.integration.name }\n                                      ),\n                                      promptDialogTitle: t(\n                                        'integrations:publishIntegrationModalTitle'\n                                      ),\n                                    } as IPromptActionOptions),\n                                };\n                                const stopAction: IIntegrationAction = {\n                                  label: 'Stop',\n                                  onClick: () =>\n                                    this.promptForAction({\n                                      handleAction: async () => {\n                                        pushNotification(\n                                          i18n.t(\n                                            'integrations:UnpublishingIntegrationMessage'\n                                          ),\n                                          'info'\n                                        );\n                                        try {\n                                          undeployIntegration(\n                                            mi.integration.id!,\n                                            mi.integration.version!\n                                          );\n                                        } catch (err) {\n                                          pushNotification(\n                                            i18n.t(\n                                              'integrations.UnpublishingIntegrationFailedMessage',\n                                              { error: err }\n                                            ),\n                                            'warning'\n                                          );\n                                        }\n                                      },\n                                      promptDialogButtonStyle:\n                                        ConfirmationButtonStyle.NORMAL,\n                                      promptDialogButtonText: t('shared:Stop'),\n                                      promptDialogIcon:\n                                        ConfirmationIconType.NONE,\n                                      promptDialogText: t(\n                                        'integrations:unpublishIntegrationModal',\n                                        { name: mi.integration.name }\n                                      ),\n                                      promptDialogTitle: t(\n                                        'integrations:unpublishIntegrationModalTitle'\n                                      ),\n                                    } as IPromptActionOptions),\n                                };\n                                const deleteAction: IIntegrationAction = {\n                                  label: 'Delete',\n                                  onClick: () =>\n                                    this.promptForAction({\n                                      handleAction: async () => {\n                                        pushNotification(\n                                          i18n.t(\n                                            'integrations:DeletingIntegrationMessage'\n                                          ),\n                                          'info'\n                                        );\n                                        try {\n                                          await deleteIntegration(\n                                            mi.integration.id!\n                                          );\n                                        } catch (err) {\n                                          pushNotification(\n                                            i18n.t(\n                                              'integrations.DeletingIntegrationFailedMessage',\n                                              { error: err }\n                                            ),\n                                            'warning'\n                                          );\n                                        }\n                                      },\n                                      promptDialogButtonStyle:\n                                        ConfirmationButtonStyle.DANGER,\n                                      promptDialogButtonText: t(\n                                        'shared:Delete'\n                                      ),\n                                      promptDialogIcon:\n                                        ConfirmationIconType.DANGER,\n                                      promptDialogText: t(\n                                        'integrations:deleteIntegrationModal',\n                                        { name: mi.integration.name }\n                                      ),\n                                      promptDialogTitle: t(\n                                        'integrations:deleteIntegrationModalTitle'\n                                      ),\n                                    } as IPromptActionOptions),\n                                };\n                                const exportAction: IIntegrationAction = {\n                                  label: 'Export',\n                                  onClick: () =>\n                                    exportIntegration(\n                                      mi.integration.id!,\n                                      `${mi.integration.name}-export.zip`\n                                    ),\n                                };\n                                const ciCdAction: IIntegrationAction = {\n                                  label: 'Manage CI/CD',\n                                  onClick: () => {\n                                    this.promptForCiCd(mi.integration.id!);\n                                  },\n                                };\n                                const actions: IIntegrationAction[] = [];\n                                if (canEdit(mi.integration)) {\n                                  actions.push(editAction);\n                                }\n                                if (canActivate(mi.integration)) {\n                                  actions.push(startAction);\n                                }\n                                if (canDeactivate(mi.integration)) {\n                                  actions.push(stopAction);\n                                }\n                                actions.push(deleteAction);\n                                actions.push(exportAction);\n                                actions.push(ciCdAction);\n                                return (\n                                  <IntegrationsListItem\n                                    key={mi.integration.id}\n                                    integrationName={mi.integration.name}\n                                    currentState={mi.integration!.currentState!}\n                                    targetState={mi.integration!.targetState!}\n                                    isConfigurationRequired={\n                                      !!(\n                                        mi.integration!.board!.warnings ||\n                                        mi.integration!.board!.errors ||\n                                        mi.integration!.board!.notices\n                                      )\n                                    }\n                                    monitoringValue={\n                                      mi.monitoring &&\n                                      t(\n                                        'integrations:' +\n                                          mi.monitoring.detailedState.value\n                                      )\n                                    }\n                                    monitoringCurrentStep={\n                                      mi.monitoring &&\n                                      mi.monitoring.detailedState.currentStep\n                                    }\n                                    monitoringTotalSteps={\n                                      mi.monitoring &&\n                                      mi.monitoring.detailedState.totalSteps\n                                    }\n                                    monitoringLogUrl={getPodLogUrl(\n                                      config,\n                                      mi.monitoring\n                                    )}\n                                    startConnectionIcon={getStartIcon(\n                                      config.apiEndpoint,\n                                      mi.integration\n                                    )}\n                                    finishConnectionIcon={getFinishIcon(\n                                      config.apiEndpoint,\n                                      mi.integration\n                                    )}\n                                    actions={\n                                      <IntegrationActions\n                                        integrationId={mi.integration!.id!}\n                                        actions={actions}\n                                        detailsHref={resolvers.integration.details(\n                                          { integrationId: mi.integration.id! }\n                                        )}\n                                      />\n                                    }\n                                    i18nConfigurationRequired={t(\n                                      'integrations:ConfigurationRequired'\n                                    )}\n                                    i18nError={t('shared:Error')}\n                                    i18nPublished={t('shared:Published')}\n                                    i18nUnpublished={t('shared:Unpublished')}\n                                    i18nProgressPending={t('shared:Pending')}\n                                    i18nProgressStarting={t(\n                                      'integrations:progressStarting'\n                                    )}\n                                    i18nProgressStopping={t(\n                                      'integrations:progressStopping'\n                                    )}\n                                    i18nLogUrlText={t('shared:viewLogs')}\n                                  />\n                                );\n                              } catch (e) {\n                                return (\n                                  <IntegrationsListItemUnreadable\n                                    key={mi.integration.id}\n                                    integrationName={\n                                      (mi &&\n                                        mi.integration &&\n                                        mi.integration.name) ||\n                                      'An integration'\n                                    }\n                                    i18nDescription={\n                                      \"Sorry, we can't display more information about this integration right now.\"\n                                    }\n                                    rawObject={JSON.stringify(\n                                      mi.integration,\n                                      null,\n                                      2\n                                    )}\n                                  />\n                                );\n                              }\n                            }\n                          )\n                        }\n                      </WithLoader>\n                    </IntegrationsList>\n                  </>\n                )}\n              </WithIntegrationHelpers>\n            )}\n          </AppContext.Consumer>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { WizardStep, WizardSteps } from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IIntegrationCreatorBreadcrumbsProps {\n  /**\n   * The one-based active step number.\n   */\n  step: number;\n  /**\n   * Optional. The one-based active sub-step number.\n   */\n  subStep?: number;\n}\n\nexport interface IIntegrationCreatorBreadcrumbsState {\n  /**\n   * Indicates if the user clicked on a step. Used to show\n   * sub-steps when browsing from a mobile device.\n   */\n  active: boolean;\n}\n\n/**\n * A component to display the PatternFly Wizard Steps specific to the integration\n * creator flow.\n * @see [step]{@link IIntegrationCreatorBreadcrumbsProps#step}\n * @see [subStep]{@link IIntegrationCreatorBreadcrumbsProps#subStep}\n */\nexport class IntegrationCreatorBreadcrumbs extends React.Component<\n  IIntegrationCreatorBreadcrumbsProps,\n  IIntegrationCreatorBreadcrumbsState\n> {\n  public state = {\n    active: false,\n  };\n\n  constructor(props: IIntegrationCreatorBreadcrumbsProps) {\n    super(props);\n    this.toggleActive = this.toggleActive.bind(this);\n  }\n\n  public toggleActive() {\n    this.setState({\n      active: !this.state.active,\n    });\n  }\n\n  public render() {\n    return (\n      <WizardSteps\n        active={this.state.active}\n        mainSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              onClick={this.toggleActive}\n              step={1}\n              title={'Start connection'}\n              subSteps={[\n                'Choose connection',\n                'Choose action',\n                'Configure action',\n              ]}\n              activeSubstep={this.props.subStep}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              onClick={this.toggleActive}\n              step={2}\n              title={'Finish connection'}\n              subSteps={[\n                'Choose connection',\n                'Choose action',\n                'Configure action',\n              ]}\n              activeSubstep={this.props.subStep}\n            />\n            <WizardStep\n              isActive={this.props.step === 3}\n              isDisabled={this.props.step < 3}\n              onClick={this.toggleActive}\n              step={3}\n              title={'Add to integration'}\n            />\n            <WizardStep\n              isActive={this.props.step === 4}\n              isDisabled={this.props.step < 4}\n              onClick={this.toggleActive}\n              step={4}\n              title={'Create an integration'}\n            />\n          </>\n        }\n        altSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={1}\n              title={'Start connection'}\n              subSteps={[\n                '1A. Choose connection',\n                '1B. Choose action',\n                '1C. Configure action',\n              ]}\n              activeSubstep={this.props.subStep}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={2}\n              title={'Finish connection'}\n              subSteps={[\n                '2A. Choose connection',\n                '2B. Choose action',\n                '2C. Configure action',\n              ]}\n              activeSubstep={this.props.subStep}\n            />\n            <WizardStep\n              isActive={this.props.step === 3}\n              isDisabled={this.props.step < 3}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={3}\n              title={'Add to integration'}\n            />\n            <WizardStep\n              isActive={this.props.step === 4}\n              isDisabled={this.props.step < 4}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={4}\n              title={'Create an integration'}\n            />\n          </>\n        }\n      />\n    );\n  }\n}\n","import { IntegrationDeploymentOverview } from '@syndesis/models';\nimport {\n  IntegrationActions,\n  IntegrationDetailHistoryListViewItem,\n} from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\n\nexport interface IIntegrationDetailDeploymentsProps {\n  actions: any;\n  deployments: IntegrationDeploymentOverview[];\n  integrationId: string;\n  updatedAt: number;\n  version: number;\n}\n\nexport class IntegrationDetailHistory extends React.Component<\n  IIntegrationDetailDeploymentsProps\n> {\n  public render() {\n    const deployments = this.props.deployments ? this.props.deployments : [];\n    return (\n      <Translation ns={['integrations', 'shared']}>\n        {t =>\n          deployments.map((deployment, idx) => {\n            return (\n              <IntegrationDetailHistoryListViewItem\n                key={idx}\n                actions={\n                  <IntegrationActions\n                    integrationId={this.props.integrationId}\n                    actions={this.props.actions}\n                  />\n                }\n                currentState={deployment.currentState!}\n                i18nTextLastPublished={t('integrations:detail:lastPublished')}\n                i18nTextVersion={t('shared:Version')}\n                updatedAt={deployment.updatedAt}\n                version={deployment.version}\n              />\n            );\n          })\n        }\n      </Translation>\n    );\n  }\n}\n","import { getStepIcon, getSteps } from '@syndesis/api';\nimport { Integration } from '@syndesis/models';\nimport {\n  IntegrationStepsHorizontalItem,\n  IntegrationStepsHorizontalView,\n} from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IIntegrationDetailStepsProps {\n  integration: Integration;\n}\n\nexport class IntegrationDetailSteps extends React.Component<\n  IIntegrationDetailStepsProps\n> {\n  public render() {\n    const flowId = this.props.integration.flows![0].id!;\n    const steps = getSteps(this.props.integration, flowId);\n\n    return (\n      <IntegrationStepsHorizontalView>\n        {steps.map((s, idx) => {\n          const isFirst = idx === 0;\n          const stepName = s.connection!\n            ? s.connection!.connector!.name\n            : s.name;\n\n          return (\n            <React.Fragment key={idx}>\n              <IntegrationStepsHorizontalItem\n                name={stepName}\n                icon={getStepIcon(\n                  process.env.PUBLIC_URL,\n                  this.props.integration,\n                  flowId,\n                  idx\n                )}\n                isFirst={isFirst}\n              />\n            </React.Fragment>\n          );\n        })}\n      </IntegrationStepsHorizontalView>\n    );\n  }\n}\n","import { WizardStep, WizardSteps } from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IIntegrationEditorBreadcrumbsProps {\n  /**\n   * The one-based active step number.\n   */\n  step: number;\n}\n\nexport interface IIntegrationEditorBreadcrumbsState {\n  /**\n   * Indicates if the user clicked on a step. Used to show\n   * sub-steps when browsing from a mobile device.\n   */\n  active: boolean;\n}\n\n/**\n * A component to display the PatternFly Wizard Steps specific to the integration\n * editor flow.\n * @see [step]{@link IIntegrationEditorBreadcrumbsProps#step}\n */\nexport class IntegrationEditorBreadcrumbs extends React.Component<\n  IIntegrationEditorBreadcrumbsProps,\n  IIntegrationEditorBreadcrumbsState\n> {\n  public state = {\n    active: false,\n  };\n\n  constructor(props: IIntegrationEditorBreadcrumbsProps) {\n    super(props);\n    this.toggleActive = this.toggleActive.bind(this);\n  }\n\n  public toggleActive() {\n    this.setState({\n      active: !this.state.active,\n    });\n  }\n\n  public render() {\n    return (\n      <WizardSteps\n        active={this.state.active}\n        mainSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              onClick={this.toggleActive}\n              step={1}\n              title={'Add to integration'}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              onClick={this.toggleActive}\n              step={2}\n              title={'Save the integration'}\n            />\n          </>\n        }\n        altSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={1}\n              title={'Add to integration'}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={4}\n              title={'Save the integration'}\n            />\n          </>\n        }\n      />\n    );\n  }\n}\n","import { getConnectionIcon } from '@syndesis/api';\nimport { Step } from '@syndesis/models';\nimport {\n  IntegrationFlowStepGeneric,\n  IntegrationFlowStepWithOverview,\n  IntegrationVerticalFlow,\n} from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IIntegrationEditorSidebarProps {\n  /**\n   * the list of steps to render.\n   */\n  steps: Step[];\n  /**\n   * the zero-based index of a configured step that should be highlighted as\n   * active.\n   * This should not be set in conjunction with [addAtIndex]{@link IIntegrationEditorSidebarProps#addAtIndex}\n   */\n  activeIndex?: number;\n  /**\n   * the zero-based index where a new step is being added.\n   * This should not be set in conjunction with [activeIndex]{@link IIntegrationEditorSidebarProps#activeIndex}\n   */\n  addAtIndex?: number;\n  /**\n   * the icon to show in the circle of the step that is being added.\n   */\n  addIcon?: any;\n  /**\n   * The title of the information table shown for the step that is being added,\n   * in the extended view.\n   */\n  addI18nTitle?: string;\n  /**\n   * The text to show on the tooltip that opens when hovering with the mouse on\n   * the icon.\n   */\n  addI18nTooltip?: string;\n  /**\n   * The description of the information table shown for the step that is being\n   * added, in the extended view.\n   */\n  addI18nDescription?: string;\n}\n\n/**\n * This component shows the steps of an integration in a vertical fashion. It's\n * meant to be used as the sidebar of the `IntegrationEditorLayout` component.\n * Steps are rendered as circles, showing the step's connection icon.\n *\n * It offers two visualization, a compact one where just the icons are shown,\n * and an expanded one where additional information about the step are shown in\n * a table next to the step's circle.\n *\n * It can also show a step that is being added to the integration by providing\n * its position and some information about the configuration step.\n *\n * @see [steps]{@link IIntegrationEditorSidebarProps#steps}\n * @see [activeIndex]{@link IIntegrationEditorSidebarProps#activeIndex}\n * @see [addAtIndex]{@link IIntegrationEditorSidebarProps#addAtIndex}\n * @see [addIcon]{@link IIntegrationEditorSidebarProps#addIcon}\n * @see [addI18nTitle]{@link IIntegrationEditorSidebarProps#addI18nTitle}\n * @see [addI18nTooltip]{@link IIntegrationEditorSidebarProps#addI18nTooltip}\n * @see [addI18nDescription]{@link IIntegrationEditorSidebarProps#addI18nDescription}\n */\nexport class IntegrationEditorSidebar extends React.Component<\n  IIntegrationEditorSidebarProps\n> {\n  public render() {\n    return (\n      <IntegrationVerticalFlow>\n        {({ expanded }) =>\n          this.props.steps.map((s, idx) => {\n            const isActive = idx === this.props.activeIndex;\n            const hasAddStep = this.props.addAtIndex === idx + 1;\n            const isAfterActiveAddStep = this.props.addAtIndex! - 1 < idx;\n            const position = isAfterActiveAddStep ? idx + 2 : idx + 1;\n\n            const activeAddStep = (\n              <IntegrationFlowStepGeneric\n                icon={this.props.addIcon || <i className={'fa fa-plus'} />}\n                i18nTitle={this.props.addI18nTitle!}\n                i18nTooltip={this.props.addI18nTooltip!}\n                active={true}\n                showDetails={expanded}\n                description={this.props.addI18nDescription!}\n              />\n            );\n            return (\n              <React.Fragment key={idx}>\n                {s.stepKind === 'endpoint' && (\n                  <IntegrationFlowStepWithOverview\n                    icon={\n                      <img\n                        src={getConnectionIcon(\n                          process.env.PUBLIC_URL,\n                          s.connection!\n                        )}\n                        width={24}\n                        height={24}\n                      />\n                    }\n                    i18nTitle={`${position}. ${s.action!.name}`}\n                    i18nTooltip={`${position}. ${s.action!.name}`}\n                    active={isActive}\n                    showDetails={expanded}\n                    name={s.connection!.connector!.name}\n                    action={s.action!.name}\n                    dataType={'TODO'}\n                  />\n                )}\n                {hasAddStep ? activeAddStep : null}\n              </React.Fragment>\n            );\n          })\n        }\n      </IntegrationVerticalFlow>\n    );\n  }\n}\n","export * from './Integrations';\nexport * from './IntegrationCreatorBreadcrumbs';\nexport * from './IntegrationDetailHistory';\nexport * from './IntegrationDetailSteps';\nexport * from './IntegrationEditorBreadcrumbs';\nexport * from './IntegrationEditorSidebar';\nexport * from './IntegrationEditorStepAdder';\n","import { include } from 'named-urls';\n\nexport default include('/customizations', {\n  apiConnectors: include('api-connector', {\n    apiConnector: ':apiConnectorId',\n    create: include('create/swagger-connector', {\n      review: 'review',\n      save: 'save',\n      security: 'security',\n      upload: 'upload',\n    }),\n    list: '',\n  }),\n  extensions: include('extensions', {\n    extension: include(':extensionId', {\n      details: '',\n      update: 'update',\n    }),\n    import: 'import',\n    list: '',\n  }),\n  root: '',\n});\n","module.exports = __webpack_public_path__ + \"static/media/syndesis_logo_full_darkbkg.9c467d96.svg\";","import { include } from 'named-urls';\n\nexport default include('/data', {\n  root: '',\n  virtualizations: include('virtualizations', {\n    create: 'create',\n    import: 'import',\n    list: '',\n    virtualization: include(':virtualizationId', {\n      metrics: 'metrics',\n      relationship: 'relationship',\n      root: '',\n      sqlClient: 'sqlClient',\n      views: include('views', {\n        importSource: include('importSource', {\n          root: '',\n          selectConnection: 'selectConnection',\n          selectViews: 'selectViews',\n        }),\n        root: '',\n      }),\n    }),\n  }),\n});\n","/* tslint:disable:object-literal-sort-keys no-empty-interface */\nimport { Connection, Connector } from '@syndesis/models';\nimport { makeResolver, makeResolverNoParams } from '@syndesis/utils';\nimport routes from './routes';\n\nexport default {\n  connections: makeResolverNoParams(routes.connections),\n  connection: {\n    details: makeResolver<{ connection: Connection }>(\n      routes.connection.details,\n      ({ connection }) => ({\n        params: {\n          connectionId: connection.id,\n        },\n        state: {\n          connection,\n        },\n      })\n    ),\n    edit: makeResolver<{ connection: Connection }>(\n      routes.connection.edit,\n      ({ connection }) => ({\n        params: {\n          connectionId: connection.id,\n        },\n        state: {\n          connection,\n        },\n      })\n    ),\n  },\n  create: {\n    selectConnector: makeResolverNoParams(routes.create.selectConnector),\n    configureConnector: makeResolver<{\n      connector: Connector;\n    }>(routes.create.configureConnector, ({ connector }) => ({\n      params: {\n        connectorId: connector.id,\n      },\n      state: {\n        connector,\n      },\n    })),\n    review: makeResolver<{\n      connector: Connector;\n      configuredProperties: { [key: string]: string };\n    }>(routes.create.review, ({ connector, configuredProperties }) => ({\n      state: {\n        connector,\n        configuredProperties,\n      },\n    })),\n  },\n};\n","import { IntegrationMonitoring } from '@syndesis/models';\nimport { INotificationType } from '@syndesis/ui';\nimport * as React from 'react';\nimport { IConfigFile } from './WithConfig';\n\nexport interface IAppContext {\n  config: IConfigFile;\n  getPodLogUrl: (\n    config: IConfigFile,\n    monitoring: IntegrationMonitoring | undefined\n  ) => string | undefined;\n  logout(): void;\n  hideNavigation(): void;\n  showNavigation(): void;\n  pushNotification(msg: string, type: INotificationType): void;\n}\n\nexport const AppContextDefaultValue = {} as IAppContext;\n\nexport const AppContext = React.createContext<IAppContext>(\n  AppContextDefaultValue\n);\n","import * as React from 'react';\n\nexport interface IConfigFile {\n  apiBase: string;\n  apiEndpoint: string;\n  title: string;\n  consoleUrl: string;\n  project: string;\n  datamapper: {\n    baseMappingServiceUrl: string;\n    baseJavaInspectionServiceUrl: string;\n    baseXMLInspectionServiceUrl: string;\n    baseJSONInspectionServiceUrl: string;\n    disableMappingPreviewMode: boolean;\n  };\n  datavirt: {\n    dvUrl: string;\n  };\n  features: {\n    logging: boolean;\n  };\n  branding: {\n    logoWhiteBg: string;\n    logoDarkBg: string;\n    appName: string;\n    favicon32: string;\n    favicon16: string;\n    touchIcon: string;\n    productBuild: boolean;\n  };\n}\n\nexport interface IWithConfigProps {\n  children(props: IWithConfigState): any;\n}\n\nexport interface IWithConfigState {\n  loading: boolean;\n  error: boolean;\n  config?: IConfigFile;\n}\n\nexport class WithConfig extends React.Component<\n  IWithConfigProps,\n  IWithConfigState\n> {\n  public state = {\n    error: false,\n    loading: true,\n  };\n\n  public async componentDidMount() {\n    try {\n      const configResponse = await fetch(\n        `${process.env.PUBLIC_URL}/config.json`\n      );\n      const config = await configResponse.json();\n      this.setState({\n        config,\n        loading: false,\n      });\n    } catch (e) {\n      this.setState({\n        error: true,\n        loading: false,\n      });\n    }\n  }\n\n  public render() {\n    return this.props.children(this.state);\n  }\n}\n","import {\n  ApiContext,\n  ServerEventsContext,\n  WithServerEvents,\n} from '@syndesis/api';\nimport { IntegrationMonitoring } from '@syndesis/models';\nimport {\n  AppLayout,\n  AppTopMenu,\n  INotification,\n  INotificationType,\n  Loader,\n  Notifications,\n  PfDropdownItem,\n  PfVerticalNavItem,\n  UnrecoverableError,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouter } from '@syndesis/utils';\nimport i18next from 'i18next';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link, Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport { PageNotFound, WithErrorBoundary } from '../shared';\nimport './App.css';\nimport { AppContext } from './AppContext';\nimport { IConfigFile, WithConfig } from './WithConfig';\n\nimport logo from './syndesis_logo_full_darkbkg.svg';\n\nexport interface IAppRoute {\n  component:\n    | React.ComponentType<RouteComponentProps<any>>\n    | React.ComponentType<any>;\n  exact?: boolean;\n  icon: string;\n  label: string;\n  to: string;\n}\n\nexport interface IAppBaseProps {\n  routes: IAppRoute[];\n}\n\nexport interface IAppBaseState {\n  showNavigation: boolean;\n  notifications: INotification[];\n}\n\nexport class App extends React.Component<IAppBaseProps, IAppBaseState> {\n  public state = {\n    notifications: [],\n    showNavigation: true,\n  };\n\n  constructor(props: IAppBaseProps) {\n    super(props);\n    this.logout = this.logout.bind(this);\n    this.getPodLogUrl = this.getPodLogUrl.bind(this);\n    this.hideNavigation = this.hideNavigation.bind(this);\n    this.showNavigation = this.showNavigation.bind(this);\n    this.pushNotification = this.pushNotification.bind(this);\n    this.removeNotificationAction = this.removeNotificationAction.bind(this);\n  }\n\n  public removeNotificationAction(notifToRemove: INotification) {\n    const notifications = this.state.notifications.filter(\n      (n: INotification) => n.key !== notifToRemove.key\n    );\n\n    this.setState({\n      notifications,\n    });\n  }\n\n  public pushNotification(msg: string, type: INotificationType) {\n    this.setState({\n      notifications: [\n        ...this.state.notifications,\n        {\n          key: Date.now().toString(),\n          message: msg,\n          type,\n        },\n      ],\n    });\n  }\n\n  public logout() {\n    // do nothing\n  }\n\n  public getPodLogUrl(\n    config: IConfigFile,\n    monitoring: IntegrationMonitoring | undefined\n  ): string | undefined {\n    if (\n      !config ||\n      !monitoring ||\n      !monitoring.linkType ||\n      !monitoring.namespace ||\n      !monitoring.podName\n    ) {\n      return undefined;\n    }\n    const baseUrl = `${config.consoleUrl}/project/${\n      monitoring.namespace\n    }/browse/pods/${monitoring.podName}?tab=`;\n    switch (monitoring.linkType) {\n      case 'LOGS':\n        return baseUrl + 'logs';\n      case 'EVENTS':\n        return baseUrl + 'events';\n      default:\n        return undefined;\n    }\n  }\n\n  public hideNavigation(): void {\n    this.setState({\n      showNavigation: false,\n    });\n  }\n\n  public showNavigation(): void {\n    this.setState({\n      showNavigation: true,\n    });\n  }\n\n  public renderAppNav(t: i18next.TFunction) {\n    return (\n      <AppTopMenu username={'developer'}>\n        <PfDropdownItem>\n          <Link\n            to={'/logout'}\n            className=\"pf-c-dropdown__menu-item\"\n            children={t('Logout')}\n          />\n        </PfDropdownItem>\n      </AppTopMenu>\n    );\n  }\n\n  public renderVerticalNav() {\n    return this.props.routes.map(({ exact, icon, label, to }, index) => (\n      <PfVerticalNavItem\n        exact={exact}\n        icon={icon}\n        label={label}\n        to={to}\n        key={index}\n        data-testid={`navbar-link-${to}`}\n      />\n    ));\n  }\n\n  public render() {\n    return (\n      <Translation ns={['app', 'shared']}>\n        {t => (\n          <WithConfig>\n            {({ config, loading, error }) => (\n              <WithLoader\n                loading={loading}\n                error={error}\n                loaderChildren={<Loader />}\n                errorChildren={\n                  <UnrecoverableError\n                    i18nTitle={t('shared:error.title')}\n                    i18nInfo={t('shared:error.info')}\n                    i18nHelp={t('shared:error.help')}\n                    i18nRefreshLabel={t('shared:error.refreshButton')}\n                    i18nReportIssue={t('shared:error.reportIssueButton')}\n                    i18nShowErrorInfoLabel={t(\n                      'shared:error.showErrorInfoButton'\n                    )}\n                  />\n                }\n                minWait={1000}\n              >\n                {() => (\n                  <AppContext.Provider\n                    value={{\n                      config: config!,\n                      getPodLogUrl: this.getPodLogUrl,\n                      hideNavigation: this.hideNavigation,\n                      logout: this.logout,\n                      pushNotification: this.pushNotification,\n                      showNavigation: this.showNavigation,\n                    }}\n                  >\n                    <ApiContext.Provider\n                      value={{\n                        apiUri: `${config!.apiBase}${config!.apiEndpoint}`,\n                        dvApiUri: `${config!.apiBase}${config!.datavirt.dvUrl}`,\n                        headers: { 'SYNDESIS-XSRF-TOKEN': 'awesome' },\n                      }}\n                    >\n                      <ApiContext.Consumer>\n                        {({ apiUri, headers }) => (\n                          <WithServerEvents apiUri={apiUri} headers={headers}>\n                            {functions => (\n                              <ServerEventsContext.Provider value={functions}>\n                                <AppLayout\n                                  appTitle={'Syndesis'}\n                                  appNav={this.renderAppNav(t)}\n                                  verticalNav={this.renderVerticalNav()}\n                                  pictograph={\n                                    <img\n                                      src={logo}\n                                      alt=\"Syndesis\"\n                                      style={{ minWidth: '164px' }}\n                                    />\n                                  }\n                                  logoHref={'/'}\n                                  showNavigation={this.state.showNavigation}\n                                  onNavigationCollapse={this.hideNavigation}\n                                  onNavigationExpand={this.showNavigation}\n                                >\n                                  <Notifications\n                                    notifications={this.state.notifications}\n                                    notificationTimerDelay={8000}\n                                    removeNotificationAction={\n                                      this.removeNotificationAction\n                                    }\n                                  />\n                                  <WithRouter>\n                                    {({ match }) => (\n                                      <WithErrorBoundary key={match.url}>\n                                        <Switch>\n                                          {this.props.routes.map(\n                                            (\n                                              { to, exact, component },\n                                              index\n                                            ) => (\n                                              <Route\n                                                path={to}\n                                                exact={exact}\n                                                component={component}\n                                                key={index}\n                                              />\n                                            )\n                                          )}\n                                          <Route component={PageNotFound} />\n                                        </Switch>\n                                      </WithErrorBoundary>\n                                    )}\n                                  </WithRouter>\n                                </AppLayout>\n                              </ServerEventsContext.Provider>\n                            )}\n                          </WithServerEvents>\n                        )}\n                      </ApiContext.Consumer>\n                    </ApiContext.Provider>\n                  </AppContext.Provider>\n                )}\n              </WithLoader>\n            )}\n          </WithConfig>\n        )}\n      </Translation>\n    );\n  }\n}\n","export * from './App';\nexport * from './AppContext';\n","/* tslint:disable:object-literal-sort-keys */\nimport { include } from 'named-urls';\n\nexport default include('/connections', {\n  connections: '',\n  connection: include(':connectionId', {\n    edit: 'edit',\n    details: '',\n  }),\n  create: include('create', {\n    selectConnector: 'connection-basics',\n    configureConnector: 'configure-fields/:connectorId',\n    review: 'review',\n    root: '',\n  }),\n});\n","import { IFormControl } from '../models';\n\nexport function getValidationState({ form, field }: IFormControl) {\n  return form.touched[field.name] && form.errors[field.name]\n    ? 'error'\n    : form.touched[field.name]\n    ? 'success'\n    : null;\n}\n","import {\n  ControlLabel,\n  FieldLevelHelp,\n  FormControl,\n  FormGroup,\n  HelpBlock,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\nexport const FormInputComponent: React.FunctionComponent<\n  IFormControl\n> = props => (\n  <FormGroup\n    controlId={props.field.name}\n    validationState={getValidationState(props)}\n  >\n    <ControlLabel>{props.property.displayName}</ControlLabel>\n    {props.property.labelHint && (\n      <ControlLabel>\n        <FieldLevelHelp content={props.property.labelHint} />\n      </ControlLabel>\n    )}\n    <FormControl\n      {...props.property.fieldAttributes}\n      {...props.field}\n      data-testid={props.field.name}\n      disabled={props.form.isSubmitting || props.property.disabled}\n      placeholder={props.property.placeholder}\n      type={props.type || 'text'}\n      onChange={props.field.onChange}\n      title={props.property.controlHint}\n    />\n    <HelpBlock>\n      {props.property.description}\n      {props.form.errors[props.field.name]}\n    </HelpBlock>\n  </FormGroup>\n);\n","import {\n  ControlLabel,\n  FieldLevelHelp,\n  FormControl,\n  FormGroup,\n  HelpBlock,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\nfunction getSelectedValues(select: HTMLSelectElement) {\n  return Array.from(select.selectedOptions).map(option => option.value);\n}\n\nexport const FormSelectComponent: React.FunctionComponent<\n  IFormControl\n> = props => {\n  const isMultiple =\n    props.property.fieldAttributes && props.property.fieldAttributes.multiple;\n  const { onChange, onBlur, ...field } = props.field;\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (isMultiple) {\n      const newValue = getSelectedValues(event.currentTarget);\n      props.form.setFieldValue(props.field.name, newValue);\n    } else {\n      onChange(event);\n    }\n  };\n  return (\n    <FormGroup\n      controlId={field.name}\n      validationState={getValidationState(props)}\n    >\n      <ControlLabel>{props.property.displayName}</ControlLabel>\n      {props.property.labelHint && (\n        <ControlLabel>\n          <FieldLevelHelp content={props.property.labelHint} />\n        </ControlLabel>\n      )}\n      <FormControl\n        {...props.property.fieldAttributes}\n        {...props.field}\n        onChange={handleChange}\n        onBlur={handleChange}\n        data-testid={props.field.name}\n        disabled={props.form.isSubmitting || props.property.disabled}\n        componentClass=\"select\"\n        title={props.property.controlHint}\n      >\n        {props.property.enum &&\n          props.property.enum.map((opt: any) => (\n            <option key={opt.value} value={opt.value}>\n              {opt.label}\n            </option>\n          ))}\n      </FormControl>\n      <HelpBlock>\n        {props.property.description}\n        {props.form.errors[props.field.name]}\n      </HelpBlock>\n    </FormGroup>\n  );\n};\n","import {\n  ControlLabel,\n  FieldLevelHelp,\n  FormControl,\n  FormGroup,\n  HelpBlock,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\nexport const FormTextAreaComponent: React.FunctionComponent<\n  IFormControl\n> = props => (\n  <FormGroup\n    controlId={props.field.name}\n    validationState={getValidationState(props)}\n  >\n    <ControlLabel>{props.property.displayName}</ControlLabel>\n    {props.property.labelHint && (\n      <ControlLabel>\n        <FieldLevelHelp content={props.property.labelHint} />\n      </ControlLabel>\n    )}\n    <FormControl\n      {...props.property.fieldAttributes}\n      {...props.field}\n      data-testid={props.field.name}\n      disabled={props.form.isSubmitting || props.property.disabled}\n      componentClass=\"textarea\"\n      title={props.property.controlHint}\n    />\n    <HelpBlock>\n      {props.property.description}\n      {props.form.errors[props.field.name]}\n    </HelpBlock>\n  </FormGroup>\n);\n","import {\n  Checkbox,\n  FieldLevelHelp,\n  FormGroup,\n  HelpBlock,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\nexport const FormCheckboxComponent: React.FunctionComponent<\n  IFormControl\n> = props => (\n  <FormGroup\n    controlId={props.field.name}\n    validationState={getValidationState(props)}\n  >\n    <Checkbox\n      {...props.property.fieldAttributes}\n      {...props.field}\n      id={props.field.name}\n      checked={props.field.value}\n      data-testid={props.field.name}\n      disabled={props.form.isSubmitting || props.property.disabled}\n      title={props.property.controlHint}\n    >\n      {props.property.displayName}\n      {props.property.labelHint && (\n        <FieldLevelHelp\n          className={'inline-block'}\n          content={props.property.labelHint}\n        />\n      )}\n    </Checkbox>\n    <HelpBlock>\n      {props.property.description}\n      {props.form.errors[props.field.name]}\n    </HelpBlock>\n  </FormGroup>\n);\n","import * as React from 'react';\nimport { IFormControl } from '../models';\n\nexport const FormHiddenComponent: React.FunctionComponent<\n  IFormControl\n> = props => (\n  <div>\n    <input\n      {...props.property.fieldAttributes}\n      {...props.field}\n      type={props.type}\n      id={props.name}\n      data-testid={props.name}\n    />\n    {props.form.touched[props.field.name] &&\n      props.form.errors[props.field.name] && (\n        <div className=\"error\">{props.form.errors[props.field.name]}</div>\n      )}\n  </div>\n);\n","import {\n  ControlLabel,\n  DropdownButton,\n  FieldLevelHelp,\n  Form,\n  FormGroup,\n  HelpBlock,\n  MenuItem,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\ninterface IDuration {\n  label: string;\n  value: number;\n}\n\nconst durations = [\n  {\n    label: 'Milliseconds',\n    value: 1,\n  },\n  {\n    label: 'Seconds',\n    value: 1000,\n  },\n  {\n    label: 'Minutes',\n    value: 60000,\n  },\n  {\n    label: 'Hours',\n    value: 3600000,\n  },\n  {\n    label: 'Days',\n    value: 86400000,\n  },\n] as IDuration[];\n\nfunction calculateDuration(duration: IDuration, initialValue: number) {\n  return initialValue / duration.value;\n}\n\nfunction calculateValue(duration: IDuration, value: number) {\n  return value * duration.value;\n}\n\nexport interface IFormDurationComponentState {\n  duration: IDuration;\n}\n\nexport class FormDurationComponent extends React.Component<\n  IFormControl,\n  IFormDurationComponentState\n> {\n  private inputField: HTMLInputElement = undefined as any;\n  constructor(props: IFormControl) {\n    super(props);\n    // find the highest duration that keeps the duration above 1\n    const index =\n      durations.findIndex(d => !(this.props.field.value / d.value >= 1.0)) - 1;\n    // if the index is invalid than we use the highest available duration.\n    const duration = durations[index] || durations[durations.length - 1];\n    this.state = {\n      duration,\n    };\n    this.handleOnSelect = this.handleOnSelect.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.receiveInputRef = this.receiveInputRef.bind(this);\n  }\n  public receiveInputRef(ref: HTMLInputElement) {\n    this.inputField = ref;\n  }\n  public handleOnSelect(eventKey: number, event: React.ChangeEvent) {\n    const newDuration =\n      durations.find(duration => duration.value === eventKey) || durations[0];\n    this.setState({\n      duration: newDuration,\n    });\n    this.props.form.setFieldValue(\n      this.props.field.name,\n      calculateValue(newDuration, this.inputField.valueAsNumber),\n      true\n    );\n  }\n  public handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.props.form.setFieldValue(\n      this.props.field.name,\n      calculateValue(this.state.duration, event.target.valueAsNumber),\n      true\n    );\n  }\n  public handleBlur(event: React.ChangeEvent<HTMLInputElement>) {\n    this.props.form.setFieldValue(\n      this.props.field.name,\n      calculateValue(this.state.duration, event.target.valueAsNumber),\n      true\n    );\n  }\n  public render() {\n    return (\n      <FormGroup\n        controlId={this.props.field.name}\n        validationState={getValidationState(this.props)}\n      >\n        <ControlLabel>{this.props.property.displayName}</ControlLabel>\n        {this.props.property.labelHint && (\n          <ControlLabel>\n            <FieldLevelHelp content={this.props.property.labelHint} />\n          </ControlLabel>\n        )}\n        <Form.InputGroup>\n          <Form.FormControl\n            min={0}\n            {...this.props.property.fieldAttributes}\n            data-testid={this.props.field.name}\n            type={'number'}\n            defaultValue={calculateDuration(\n              this.state.duration,\n              this.props.field.value\n            )}\n            disabled={\n              this.props.form.isSubmitting || this.props.property.disabled\n            }\n            onChange={this.handleChange}\n            onBlur={this.handleBlur}\n            inputRef={this.receiveInputRef}\n            title={this.props.property.controlHint}\n          />\n          <DropdownButton\n            id={this.props.field.name + '-duration'}\n            componentClass={Form.InputGroup.Button}\n            title={this.state.duration.label}\n            onSelect={this.handleOnSelect}\n            disabled={\n              this.props.form.isSubmitting || this.props.property.disabled\n            }\n          >\n            {durations.map((duration, index) => (\n              <MenuItem key={index} eventKey={duration.value}>\n                {duration.label}\n              </MenuItem>\n            ))}\n          </DropdownButton>\n        </Form.InputGroup>\n        <HelpBlock>\n          {this.props.property.description}\n          {this.props.form.errors[this.props.field.name]}\n        </HelpBlock>\n      </FormGroup>\n    );\n  }\n}\n","import { Field } from 'formik';\nimport * as React from 'react';\nimport { IFormDefinition, IFormDefinitionProperty } from './models';\nimport {\n  FormCheckboxComponent,\n  FormDurationComponent,\n  FormHiddenComponent,\n  FormInputComponent,\n  FormSelectComponent,\n  FormTextAreaComponent,\n} from './widgets';\n\nexport interface INamedConfigurationProperty extends IFormDefinitionProperty {\n  name: string;\n}\n\nexport interface IRenderFieldProps {\n  property: INamedConfigurationProperty;\n  value: any;\n  [name: string]: any;\n}\n\nexport interface IFormBuilderProps<T> {\n  definition: IFormDefinition;\n  initialValue: T;\n  i18nRequiredProperty: string;\n  onSave: (value: T | any, actions: any) => void;\n  children(props: IFormBuilderChildrenProps<T>): any;\n}\n\nexport interface IFormBuilderChildrenProps<T> {\n  fields: INamedConfigurationProperty[];\n  getField: (props: IRenderFieldProps) => any;\n  initialValue: T;\n  onSave: (value: T, actions: any) => void;\n}\n\nexport class FormBuilder<T> extends React.Component<IFormBuilderProps<T>> {\n  /**\n   * Converts a property configuration to some kind of input field\n   * @param props\n   */\n  public getField = (props: IRenderFieldProps): any => {\n    // Massage the value in the definition to an input type\n    const type = this.massageType(props.property);\n    const componentTypemaps = {\n      checkbox: FormCheckboxComponent,\n      duration: FormDurationComponent,\n      hidden: FormHiddenComponent,\n      select: FormSelectComponent,\n      textarea: FormTextAreaComponent,\n    };\n    const validate = (value: any) => {\n      if (props.property.required && !value) {\n        return this.props.i18nRequiredProperty;\n      }\n      return undefined;\n    };\n    return (\n      <Field\n        key={props.property.name}\n        name={props.property.name}\n        type={type}\n        validate={validate}\n        {...props}\n        component={componentTypemaps[type] || FormInputComponent}\n      />\n    );\n  };\n\n  public render() {\n    const fields = this.enrichAndOrderProperties(this.props.definition);\n    const massagedValue = this.sanitizeValues(\n      this.props.definition,\n      this.props.initialValue\n    );\n    return this.props.children({\n      fields,\n      getField: this.getField,\n      initialValue: massagedValue,\n      onSave: this.props.onSave,\n    });\n  }\n\n  /**\n   * Ensure that the input values match the property definitions\n   */\n  private sanitizeValues(definition: IFormDefinition, initialValue: any): T {\n    return Object.keys(definition).reduce((result, key): any => {\n      const prop = definition[key];\n      let value = this.massageValue(prop, initialValue[key]);\n      if (value == null) {\n        value = this.massageValue(prop, prop.defaultValue);\n      }\n      return { ...result, [key]: value };\n    }, {}) as T;\n  }\n\n  /**\n   * Add the 'name' field from the property ID and sort them by the 'order' property\n   */\n  private enrichAndOrderProperties(definition: IFormDefinition) {\n    return Object.keys(definition)\n      .map(key => ({\n        ...definition[key],\n        name: key,\n        required: this.massageRequired(definition[key]),\n        type: this.massageType(definition[key]),\n      }))\n      .sort((a, b) => {\n        const aOrder = (a.order || 0) as number;\n        const bOrder = (b.order || 0) as number;\n        return aOrder - bOrder;\n      });\n  }\n\n  /**\n   * Converts various values passed into the property type to known input types\n   *\n   * @param property\n   */\n  private massageType(property: IFormDefinitionProperty) {\n    let type = property.type || 'text';\n    switch (type) {\n      case 'int':\n      case 'integer':\n      case 'long':\n        type = 'number';\n        break;\n      case 'string':\n        type = 'text';\n        break;\n      case 'boolean':\n        type = 'checkbox';\n    }\n    if (property.enum && property.enum.length) {\n      type = 'select';\n    }\n    if (property.secret) {\n      type = 'password';\n    }\n    return type;\n  }\n\n  /**\n   * Ensure that the 'required' property is false for checkboxes and hidden fields\n   *\n   * This is a candidate for removal in the future, as it's a workaround\n   *\n   * @param property\n   */\n  private massageRequired(property: IFormDefinitionProperty): any {\n    switch (property.type) {\n      case 'boolean':\n      case 'checkbox':\n      case 'hidden':\n        return false;\n      default:\n        return property.required;\n    }\n  }\n\n  /**\n   * Converts the given value from a string to the type defined in the property definition\n   *\n   * This is a candidate for removal as it's a workaround\n   *\n   * @param property\n   * @param value\n   */\n  private massageValue(property: IFormDefinitionProperty, value?: string) {\n    if (value === undefined || value === null) {\n      return value;\n    }\n    switch (property.type) {\n      case 'number':\n        return parseInt(value, 10);\n      case 'boolean':\n      case 'checkbox':\n        return String(value).toLocaleLowerCase() === 'true';\n      default:\n        return value;\n    }\n  }\n}\n","import { Formik, FormikErrors } from 'formik';\nimport * as React from 'react';\nimport { FormBuilder } from './FormBuilder';\nimport { IFormDefinition, IFormErrors } from './models';\n\nexport interface IAutoFormProps<T> {\n  /**\n   * A map of configuration properties as returned by the Syndesis API\n   */\n  definition: IFormDefinition;\n  /**\n   * The initial value that should be set on the form\n   */\n  initialValue: T;\n  /**\n   * String to be displayed when a required field isn't set\n   */\n  i18nRequiredProperty: string;\n  /**\n   * Callback function that will be called when the form is submitted\n   */\n  onSave: (value: T, actions: any) => void;\n  /**\n   * Validation function called whenever a change or blur event occurs on the form\n   */\n  validate?: (value: T | any) => IFormErrors | Promise<any> | undefined;\n  /**\n   * Child component that will receive the form fields and submit handler\n   */\n  children: (state: IAutoFormChildrenProps) => any;\n}\n\nexport interface IAutoFormChildrenProps {\n  /**\n   * Fragment containing all of the form fields\n   */\n  fields: JSX.Element;\n  /**\n   * Function to trigger a form submit which will then trigger onSave\n   */\n  handleSubmit: (e?: any) => void;\n  dirty: boolean;\n  isSubmitting: boolean;\n  isValid: boolean;\n  isValidating: boolean;\n  resetForm: (nextValues?: any) => void;\n  submitForm: () => void;\n  validateForm: () => Promise<FormikErrors<any>>;\n  values: any;\n  errors: any;\n}\n\nexport class AutoForm<T> extends React.Component<IAutoFormProps<T>> {\n  public render() {\n    return (\n      <FormBuilder\n        definition={this.props.definition}\n        initialValue={this.props.initialValue}\n        onSave={this.props.onSave}\n        i18nRequiredProperty={this.props.i18nRequiredProperty}\n      >\n        {({ initialValue, fields, onSave, getField }) => (\n          <Formik<T>\n            initialValues={initialValue}\n            onSubmit={onSave}\n            validate={this.props.validate}\n          >\n            {({\n              handleSubmit,\n              values,\n              touched,\n              dirty,\n              errors,\n              isValid,\n              isValidating,\n              isSubmitting,\n              resetForm,\n              validateForm,\n              submitForm,\n            }) =>\n              this.props.children({\n                dirty,\n                errors,\n                fields: (\n                  <React.Fragment>\n                    {fields.map(property =>\n                      getField({\n                        errors,\n                        property,\n                        touched,\n                        value: (values || {})[property.name],\n                      })\n                    )}\n                  </React.Fragment>\n                ),\n                handleSubmit,\n                isSubmitting,\n                isValid,\n                isValidating,\n                resetForm,\n                submitForm,\n                validateForm,\n                values,\n              })\n            }\n          </Formik>\n        )}\n      </FormBuilder>\n    );\n  }\n}\n","import { IFormDefinition, IFormDefinitionProperty } from '@syndesis/auto-form';\nimport {\n  IConfigurationProperties,\n  IConfigurationProperty,\n} from '@syndesis/models';\n\n/**\n * Maps an API map of ConfigurationProperty objects to\n * an autoform IFormDefinition object.  Use on properties\n * objects from backend responses to ensure they're mapped\n * properly\n *\n * @param properties\n */\nexport function toFormDefinition(properties: IConfigurationProperties) {\n  if (!properties) {\n    throw new Error('Undefined value passed to form definition converter');\n  }\n  const answer: IFormDefinition = {};\n  Object.keys(properties).forEach(key => {\n    answer[key] = toFormDefinitionProperty(properties[key]);\n  });\n  return answer;\n}\n\n/**\n * Maps an API ConfigurationProperty object to an autoform IFormDefinitionPropertyObject\n * @param property\n */\nexport function toFormDefinitionProperty(property: IConfigurationProperty) {\n  const {\n    cols,\n    max,\n    min,\n    multiple,\n    rows,\n    controlHint,\n    controlTooltip,\n    labelHint,\n    labelTooltip,\n    ...formDefinitionProperty\n  } = property as any; // needed, ConfigurationProperty is a lie\n  return {\n    ...formDefinitionProperty,\n    controlHint: controlHint || controlTooltip,\n    fieldAttributes: {\n      cols,\n      max,\n      min,\n      multiple,\n      rows,\n    },\n    labelHint: labelHint || labelTooltip,\n  } as IFormDefinitionProperty;\n}\n","const ALPHABET =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\nconst RANDOMNESS: number[] = [];\nlet lastTimestamp = 0;\n\n/**\n * Generates lexically sortable unique keys based on:\n *\n * https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html\n *\n * You can also consider the generated kys to be like UUIDS except:\n * (1) strictly increment from the generating node's point of view\n * (2) loosely increment based on relative machine time when viewed across nodes.\n */\nexport function key() {\n  // first time setup.. initialize the randomness...\n  if (RANDOMNESS.length === 0) {\n    for (let i = 0; i < 12; i++) {\n      RANDOMNESS[i] = Math.floor(Math.random() * 64);\n    }\n  }\n\n  // we build the resulting key backwards. The most significant bits at the front of the key.\n  let result = '';\n  const timestamp = new Date().getTime();\n\n  // Lets encode the random part of the key. (72 bits of randomness)\n  // 72/6 = 12 base64 characters.\n\n  // increment randomness when we being called too keys too quickly.\n  if (timestamp === lastTimestamp) {\n    for (let i = 0; i < 12; i++) {\n      RANDOMNESS[i]++;\n      if (RANDOMNESS[i] === 64) {\n        RANDOMNESS[i] = 0; // we need to carry to the next random byte.\n      } else {\n        break; // done incrementing.\n      }\n    }\n  }\n\n  for (let i = 0; i < 12; i++) {\n    result = ALPHABET.charAt(RANDOMNESS[i]) + result;\n  }\n\n  // Base64 encodes 6 bits of data per character. We want to encode\n  // 6 bytes of the timestamp (48 bits), 48/6 = 8 base64 chars for the ts part\n  // the key.\n  let remainingTimestamp = timestamp;\n  for (let i = 0; i < 8; i++) {\n    result = ALPHABET.charAt(remainingTimestamp % 64) + result;\n    remainingTimestamp = Math.floor(remainingTimestamp / 64);\n  }\n\n  lastTimestamp = timestamp;\n  return result;\n}\n","import { IActiveFilter, IFilterType, ISortType } from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IWithListViewToolbarHelpers\n  extends IWithListViewToolbarHelpersState {\n  onClearFilters(event: React.MouseEvent<HTMLAnchorElement>): void;\n  onFilterAdded(title: string, value: string): void;\n  onFilterValueSelected(filterValue: { id: string; title: string }): void;\n  onRemoveFilter(filter: IActiveFilter): void;\n  onSelectFilterType(filterType: IFilterType): void;\n  onToggleCurrentSortDirection(): void;\n  onUpdateCurrentSortType(sortType: string): void;\n  onUpdateCurrentValue(event: Event): void;\n  onValueKeyPress(keyEvent: KeyboardEvent): void;\n}\n\nexport interface IWithListViewToolbarHelpersProps {\n  defaultFilterType: IFilterType;\n  defaultSortType: ISortType;\n  children(props: IWithListViewToolbarHelpers): any;\n}\n\nexport interface IWithListViewToolbarHelpersState {\n  activeFilters: IActiveFilter[];\n  currentFilterType: IFilterType;\n  currentSortType: string;\n  currentValue: any;\n  filterCategory: any;\n  isSortAscending: boolean;\n}\n\nexport class WithListViewToolbarHelpers extends React.Component<\n  IWithListViewToolbarHelpersProps,\n  IWithListViewToolbarHelpersState\n> {\n  constructor(props: IWithListViewToolbarHelpersProps) {\n    super(props);\n    this.state = {\n      activeFilters: [] as IActiveFilter[],\n      currentFilterType: this.props.defaultFilterType,\n      currentSortType: this.props.defaultSortType.title,\n      currentValue: '',\n      filterCategory: null,\n      isSortAscending: true,\n    };\n  }\n\n  public onUpdateCurrentValue = (event: Event) => {\n    this.setState({ currentValue: (event.target as HTMLInputElement).value });\n  };\n\n  public onValueKeyPress = (keyEvent: KeyboardEvent) => {\n    const { currentValue, currentFilterType } = this.state;\n\n    if (keyEvent.key === 'Enter' && currentValue && currentValue.length > 0) {\n      this.setState({ currentValue: '' });\n      this.onFilterAdded(currentFilterType.title, currentValue);\n      keyEvent.stopPropagation();\n      keyEvent.preventDefault();\n    }\n  };\n\n  public onFilterAdded = (title: string, value: string) => {\n    const { activeFilters } = this.state;\n    this.setState({\n      activeFilters: [\n        ...activeFilters,\n        {\n          title,\n          value,\n        } as IActiveFilter,\n      ],\n    });\n  };\n\n  public onSelectFilterType = (filterType: IFilterType) => {\n    const { currentFilterType } = this.state;\n    if (currentFilterType !== filterType) {\n      this.setState({ currentValue: '', currentFilterType: filterType });\n    }\n  };\n\n  public onFilterValueSelected = (filterValue: {\n    id: string;\n    title: string;\n  }) => {\n    const { currentFilterType } = this.state;\n\n    this.setState({ currentValue: filterValue.title });\n    if (filterValue) {\n      this.onFilterAdded(currentFilterType.title, filterValue.title);\n    }\n  };\n\n  public onRemoveFilter = (filter: IActiveFilter) => {\n    const { activeFilters } = this.state;\n\n    const index = activeFilters.indexOf(filter);\n    if (index > -1) {\n      const updated = [\n        ...activeFilters.slice(0, index),\n        ...activeFilters.slice(index + 1),\n      ];\n      this.setState({ activeFilters: updated });\n    }\n  };\n\n  public onClearFilters = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    event.preventDefault();\n    this.setState({ activeFilters: [] });\n  };\n\n  public onToggleCurrentSortDirection = () => {\n    const { isSortAscending } = this.state;\n\n    this.setState({ isSortAscending: !isSortAscending });\n  };\n\n  public onUpdateCurrentSortType = (sortType: string) => {\n    const { currentSortType } = this.state;\n\n    if (currentSortType !== sortType) {\n      this.setState({\n        currentSortType: sortType,\n        isSortAscending: true,\n      });\n    }\n  };\n\n  public render() {\n    return this.props.children({\n      onClearFilters: this.onClearFilters,\n      onFilterAdded: this.onFilterAdded,\n      onFilterValueSelected: this.onFilterValueSelected,\n      onRemoveFilter: this.onRemoveFilter,\n      onSelectFilterType: this.onSelectFilterType,\n      onToggleCurrentSortDirection: this.onToggleCurrentSortDirection,\n      onUpdateCurrentSortType: this.onUpdateCurrentSortType,\n      onUpdateCurrentValue: this.onUpdateCurrentValue,\n      onValueKeyPress: this.onValueKeyPress,\n      ...this.state,\n    });\n  }\n}\n","import * as React from 'react';\n\nexport interface IWithLoaderProps {\n  /**\n   * If true, the [errorChildren]{@link IWithLoaderProps#errorChildren} will be\n   * rendered.\n   */\n  error: boolean;\n  /**\n   * If true, the [loaderChildren]{@link IWithLoaderProps#loaderChildren}\n   * will be rendered.\n   */\n  loading: boolean;\n  /**\n   * The minimum amount of time to wait before invoking the [children]{@link IWithLoaderProps#children}\n   * render prop. If high enough, it will avoid a flash of loading component.\n   * Defaults to 500ms.\n   */\n  minWait?: number;\n  /**\n   * The content to render when data is loading.\n   */\n  loaderChildren: JSX.Element;\n  /**\n   * The content to render when error occurred while loading data.\n   */\n  errorChildren: JSX.Element;\n\n  /**\n   * A render prop that will be invoked if both [loading]{@link IWithLoaderProps#loading}\n   * and [error]{@link IWithLoaderProps#error} are `false`.\n   */\n  children(): any;\n}\n\nexport interface IWithLoaderState {\n  loaded: boolean;\n}\n\n/**\n * A component to handle asynchronous data-loading. It will show the provided\n * loader component for a minimum amount of time - to avoid flash of loading\n * component - before invoking the children render prop.\n * It will also handle the error state rendering the provided error component\n * in case of errors loading the data.\n *\n * @see [error]{@link IWithLoaderProps#error}\n * @see [loading]{@link IWithLoaderProps#loading}\n * @see [minWait]{@link IWithLoaderProps#minWait}\n * @see [loaderChildren]{@link IWithLoaderProps#loaderChildren}\n * @see [errorChildren]{@link IWithLoaderProps#errorChildren}\n * @see [children]{@link IWithLoaderProps#children}\n */\nexport class WithLoader extends React.Component<\n  IWithLoaderProps,\n  IWithLoaderState\n> {\n  public static defaultProps = {\n    minWait: 500,\n  };\n\n  protected waitTimeout?: number;\n\n  constructor(props: IWithLoaderProps) {\n    super(props);\n    this.state = {\n      loaded: !this.props.loading,\n    };\n  }\n\n  public componentWillReceiveProps(nextProps: IWithLoaderProps) {\n    this.setState({\n      loaded: !nextProps.loading,\n    });\n  }\n\n  public componentDidUpdate(prevProps: IWithLoaderProps) {\n    if (!this.props.loading && !this.waitTimeout) {\n      this.setTimeout();\n    }\n  }\n\n  public render() {\n    if (this.props.error) {\n      return this.props.errorChildren;\n    }\n    if (!this.state.loaded) {\n      return this.props.loaderChildren;\n    }\n    return this.props.children();\n  }\n\n  protected setTimeout() {\n    this.clearTimeout();\n    this.waitTimeout = window.setTimeout(() => {\n      this.setState({\n        loaded: true,\n      });\n    }, this.props.minWait!);\n  }\n\n  protected clearTimeout() {\n    if (this.waitTimeout) {\n      clearTimeout(this.waitTimeout);\n      this.waitTimeout = undefined;\n    }\n  }\n}\n","import * as React from 'react';\nimport { Route, RouteChildrenProps } from 'react-router';\n\nexport interface IWithRouteDataProps<P, S> {\n  /**\n   * A render propr that will receive the route params and state.\n   * @param params - the route params, with type `P`.\n   * @param state - the route state, with type `S`.\n   * @param route - the raw route object, as provided by the `Route` component.\n   */\n  children(params: P, state: S, route: RouteChildrenProps): any;\n}\n\n/**\n * A render-prop component that returns a route params - with type `P` - and\n * state - with type `S`.\n * *Warning:* this component doesn't provide any assurance on the returned shape\n * of neither the params nor the state objects.\n * @see [children]{@link IWithRouteDataProps#children}\n */\nexport class WithRouteData<P, S> extends React.Component<\n  IWithRouteDataProps<P, S>\n> {\n  public render() {\n    return (\n      <Route>\n        {route => {\n          if (!route.match) {\n            throw new Error(\"Route doesn't have a match\");\n          }\n          const params: P = route.match.params || ({} as P);\n          const state: S = route.location.state || ({} as S);\n          return this.props.children(params, state, route);\n        }}\n      </Route>\n    );\n  }\n}\n","import * as React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router';\n\nexport interface IWithRouterProps extends RouteComponentProps {\n  children(router: RouteComponentProps): any;\n}\n\nexport class WithRouterBase extends React.Component<IWithRouterProps> {\n  public render() {\n    const { children, ...props } = this.props;\n    return children(props);\n  }\n}\n\nexport const WithRouter = withRouter<IWithRouterProps>(WithRouterBase);\n","import { reverse } from 'named-urls';\n\nexport interface IRoute<P, S> {\n  params?: P;\n  state?: S;\n  route?: string;\n}\n\nexport interface IResolvedRoute<P, S> extends IRoute<P, S> {\n  pathname: string;\n}\n\n/**\n * Creates a function that takes a route and some `data` `T` that returns the\n * reversed URL.\n * Use `mapper` to write the business logic required to convert the `data` object\n * to the basic params that can be passed in an url (strings and numbers), and to\n * set the state object that will be pushed in the history together with the url.\n * @param defaultRoute\n * @param mapper\n */\nexport function makeResolver<T, P = any, S = any>(\n  defaultRoute: string,\n  mapper: (data: T) => IRoute<P, S>\n) {\n  return (data: T): IResolvedRoute<P, S> => {\n    const { params, route, state } = mapper(data);\n    return {\n      params,\n      pathname: reverse(route || defaultRoute, params || {}),\n      route: route || defaultRoute,\n      state,\n    };\n  };\n}\n\n/**\n * Creates a function that takes a route and some `data` `T` that returns the\n * reversed URL.\n * Use `mapper` to write the business logic required to convert the `data` object\n * to the basic params that can be passed in an url (strings and numbers), and to\n * set the state object that will be pushed in the history together with the url.\n * @param defaultRoute\n * @param mapper\n */\nexport function makeResolverNoParamsWithDefaults<P = any, S = any>(\n  defaultRoute: string,\n  mapper: () => IRoute<P, S>\n) {\n  return (): IResolvedRoute<P, S> => {\n    const { params, route, state } = mapper();\n    return {\n      params,\n      pathname: reverse(route || defaultRoute, params || {}),\n      route: route || defaultRoute,\n      state,\n    };\n  };\n}\n\n/**\n * Creates a function that takes a route and some `data` `T` that returns the\n * reversed URL.\n * @param route\n */\nexport function makeResolverNoParams(route: string) {\n  return (): IResolvedRoute<null, null> => ({\n    pathname: reverse(route),\n    route,\n  });\n}\n","import { OptionalInt } from '@syndesis/models';\n\n/**\n *\n * @param value the value being used\n * @returns the `OptionalInt` object created from the specified value\n */\nexport function createOptionalInt(value: number): OptionalInt {\n  return { present: true, asInt: value };\n}\n\n/**\n * @param optional the `OptionalInt` whose value is being requested\n * @param defaultValue the value to return if no value exists\n * @returns the int value (defaults to zero)\n */\nexport function optionalIntValue(\n  optional: OptionalInt | undefined,\n  defaultValue: number = 0\n): number {\n  if (optional && optional.present) {\n    const value = optional.asInt;\n    return value ? value : defaultValue;\n  }\n\n  return defaultValue;\n}\n\n/**\n * @param optional the value whose value is being checked\n * @returns true if the optional exists and there is a value\n */\nexport function optionalIntHasValue(\n  optional: OptionalInt | undefined\n): boolean {\n  return optional && optional.present ? optional.present : false;\n}\n","import { WizardStep, WizardSteps } from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IConnectionCreatorBreadcrumbsProps {\n  /**\n   * The one-based active step number.\n   */\n  step: number;\n}\n\nexport interface IConnectionCreatorBreadcrumbsState {\n  /**\n   * Indicates if the user clicked on a step. Used to show\n   * sub-steps when browsing from a mobile device.\n   */\n  active: boolean;\n}\n\n/**\n * A component to display the PatternFly Wizard Steps specific to the integration\n * creator flow.\n * @see [step]{@link IConnectionCreatorBreadcrumbsProps#step}\n * @see [subStep]{@link IConnectionCreatorBreadcrumbsProps#subStep}\n */\nexport class ConnectionCreatorBreadcrumbs extends React.Component<\n  IConnectionCreatorBreadcrumbsProps,\n  IConnectionCreatorBreadcrumbsState\n> {\n  public state = {\n    active: false,\n  };\n\n  constructor(props: IConnectionCreatorBreadcrumbsProps) {\n    super(props);\n    this.toggleActive = this.toggleActive.bind(this);\n  }\n\n  public toggleActive() {\n    this.setState({\n      active: !this.state.active,\n    });\n  }\n\n  public render() {\n    return (\n      <WizardSteps\n        active={this.state.active}\n        mainSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              onClick={this.toggleActive}\n              step={1}\n              title={'Select connector'}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              onClick={this.toggleActive}\n              step={2}\n              title={'Configure connection'}\n            />\n            <WizardStep\n              isActive={this.props.step === 3}\n              isDisabled={this.props.step < 3}\n              onClick={this.toggleActive}\n              step={3}\n              title={'Name connection'}\n            />\n          </>\n        }\n        altSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={1}\n              title={'Select connector'}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={2}\n              title={'Configure connection'}\n            />\n            <WizardStep\n              isActive={this.props.step === 3}\n              isDisabled={this.props.step < 3}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={3}\n              title={'Name connection'}\n            />\n          </>\n        }\n      />\n    );\n  }\n}\n","import { getConnectionIcon, WithConnectionHelpers } from '@syndesis/api';\nimport { Connection } from '@syndesis/models';\nimport {\n  ConnectionCard,\n  ConnectionsGrid,\n  ConnectionsGridCell,\n  ConnectionSkeleton,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { AppContext } from '../../../app';\nimport { ApiError } from '../../../shared';\n\nexport interface IConnectionsProps {\n  error: boolean;\n  includeConnectionMenu: boolean;\n  loading: boolean;\n  connections: Connection[];\n  getConnectionHref(connection: Connection): H.LocationDescriptor;\n  getConnectionEditHref(connection: Connection): H.LocationDescriptor;\n}\n\nexport class Connections extends React.Component<IConnectionsProps> {\n  public render() {\n    return (\n      <AppContext.Consumer>\n        {({ pushNotification }) => {\n          return (\n            <Translation ns={['connections', 'shared']}>\n              {t => (\n                <WithConnectionHelpers>\n                  {({ deleteConnection }) => {\n                    const doDelete = async (\n                      connectionId: string,\n                      connectionName: string\n                    ) => {\n                      try {\n                        await deleteConnection(connectionId);\n                        pushNotification(\n                          t('connectionDeletedSuccess', { connectionName }),\n                          'success'\n                        );\n                      } catch (error) {\n                        const details = error.message ? error.message : '';\n                        pushNotification(\n                          t('connectionDeletedFailed', {\n                            connectionName,\n                            details,\n                          }),\n                          'error'\n                        );\n                      }\n                    };\n                    return (\n                      <ConnectionsGrid>\n                        <WithLoader\n                          error={this.props.error}\n                          loading={this.props.loading}\n                          loaderChildren={\n                            <>\n                              {new Array(5).fill(0).map((_, index) => (\n                                <ConnectionsGridCell key={index}>\n                                  <ConnectionSkeleton />\n                                </ConnectionsGridCell>\n                              ))}\n                            </>\n                          }\n                          errorChildren={<ApiError />}\n                        >\n                          {() =>\n                            this.props.connections.map((c, index) => {\n                              const handleDelete = (): void => {\n                                doDelete(c.id!, c.name); // must have an ID if deleting\n                              };\n\n                              return (\n                                <ConnectionsGridCell key={index}>\n                                  <ConnectionCard\n                                    name={c.name}\n                                    description={c.description || ''}\n                                    icon={getConnectionIcon(\n                                      process.env.PUBLIC_URL,\n                                      c,\n                                    )}\n                                    href={this.props.getConnectionHref(c)}\n                                    menuProps={\n                                      this.props.includeConnectionMenu\n                                        ? {\n                                            editHref: this.props.getConnectionEditHref(\n                                              c\n                                            ),\n                                            i18nCancelLabel: t('shared:Cancel'),\n                                            i18nDeleteLabel: t('shared:Delete'),\n                                            i18nDeleteModalMessage: t(\n                                              'deleteModalMessage',\n                                              { connectionName: c.name }\n                                            ),\n                                            i18nDeleteModalTitle: t(\n                                              'deleteModalTitle'\n                                            ),\n                                            i18nEditLabel: t('shared:Edit'),\n                                            i18nMenuTitle: t(\n                                              'connectionCardMenuTitle'\n                                            ),\n                                            i18nViewLabel: t('shared:View'),\n                                            isDeleteEnabled:\n                                              (c.uses as number) === 0,\n                                            onDelete: handleDelete,\n                                          }\n                                        : undefined\n                                    }\n                                  />\n                                </ConnectionsGridCell>\n                              );\n                            })\n                          }\n                        </WithLoader>\n                      </ConnectionsGrid>\n                    );\n                  }}\n                </WithConnectionHelpers>\n              )}\n            </Translation>\n          );\n        }}\n      </AppContext.Consumer>\n    );\n  }\n}\n","import { Connection } from '@syndesis/models';\nimport {\n  ConnectionsListView,\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport resolvers from '../resolvers';\nimport { Connections, IConnectionsProps } from './Connections';\n\nfunction getFilteredAndSortedConnections(\n  connections: Connection[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSortedConnections = connections;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSortedConnections = filteredAndSortedConnections.filter(\n      (c: Connection) => c.name.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSortedConnections = filteredAndSortedConnections.sort(\n    (miA, miB) => {\n      const left = isSortAscending ? miA : miB;\n      const right = isSortAscending ? miB : miA;\n      return left.name.localeCompare(right.name);\n    }\n  );\n\n  return filteredAndSortedConnections;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport interface IConnectionsWithToolbarProps extends IConnectionsProps {\n  children?: any;\n}\n\nexport class ConnectionsWithToolbar extends React.Component<\n  IConnectionsWithToolbarProps\n> {\n  public static defaultProps = {\n    includeHidden: false,\n  };\n\n  public render() {\n    return (\n      <Translation ns={['shared']}>\n        {t => (\n          <WithListViewToolbarHelpers\n            defaultFilterType={filterByName}\n            defaultSortType={sortByName}\n          >\n            {helpers => {\n              const filteredAndSortedConnections = getFilteredAndSortedConnections(\n                this.props.connections,\n                helpers.activeFilters,\n                helpers.currentSortType,\n                helpers.isSortAscending\n              );\n\n              return (\n                <ConnectionsListView\n                  linkToConnectionCreate={resolvers.create.selectConnector()}\n                  filterTypes={filterTypes}\n                  sortTypes={sortTypes}\n                  resultsCount={filteredAndSortedConnections.length}\n                  {...helpers}\n                  i18nLinkCreateConnection={t('shared:linkCreateConnection')}\n                  i18nResultsCount={t('shared:resultsCount', {\n                    count: filteredAndSortedConnections.length,\n                  })}\n                >\n                  {this.props.children}\n                  <Connections\n                    error={this.props.error}\n                    includeConnectionMenu={true}\n                    loading={this.props.loading}\n                    connections={filteredAndSortedConnections}\n                    getConnectionHref={this.props.getConnectionHref}\n                    getConnectionEditHref={this.props.getConnectionEditHref}\n                  />\n                </ConnectionsListView>\n              );\n            }}\n          </WithListViewToolbarHelpers>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { WithConnectionHelpers } from '@syndesis/api';\nimport { AutoForm } from '@syndesis/auto-form';\nimport { Connector } from '@syndesis/models';\nimport { IConnectorConfigurationFormValidationResult } from '@syndesis/ui';\nimport { toFormDefinition } from '@syndesis/utils';\nimport * as React from 'react';\n\nexport interface IWithConnectorFormChildrenProps {\n  /**\n   * the form (embedded in the right UI elements)\n   */\n  fields: JSX.Element;\n  /**\n   * true if the form has been modified.\n   */\n  dirty: boolean;\n  /**\n   * true if the form contains valid values. Can be used to enable/disable the\n   * submit button.\n   */\n  isValid: boolean;\n  /**\n   * true if the form is being validated. Can be used to enable/disable the\n   * validate button.\n   */\n  isValidating: boolean;\n  /**\n   * true if the form is being submitted. Can be used to enable/disable the\n   * submit button.\n   */\n  isSubmitting: boolean;\n  /**\n   * the current values of the form fields\n   */\n  values: { [key: string]: string };\n\n  validationResults: IConnectorConfigurationFormValidationResult[];\n\n  resetForm: (nextValues?: any) => void;\n\n  handleSubmit: (e?: any) => void;\n  /**\n   * the callback to trigger to validate the form against the backend.\n   */\n  validateForm(): any;\n  /**\n   * the callback to trigger to submit the form.\n   */\n  submitForm(): any;\n}\n\nexport interface IWithConnectorFormProps {\n  /**\n   * the connection object that contains the action with the provided\n   * [actionId]{@link IWithConnectorFormProps#actionId}. Used to retrieve\n   * the form definition.\n   */\n  connector: Connector;\n  /**\n   * the values to assign to the form once rendered. These can come either from\n   * an existing integration or from the [onSave]{@link IWithConnectorFormProps#onSave}\n   * callback.\n   */\n  initialValue?: { [key: string]: string };\n\n  /**\n   * true to have the fields rendered as read-only.\n   */\n  disabled?: boolean;\n\n  /**\n   * the render prop that will receive the ready-to-be-rendered form and some\n   * helpers.\n   *\n   * @see [form]{@link IWithConnectorFormChildrenProps#form}\n   * @see [isValid]{@link IWithConnectorFormChildrenProps#isValid}\n   * @see [isSubmitting]{@link IWithConnectorFormChildrenProps#isSubmitting}\n   * @see [onSubmit]{@link IWithConnectorFormChildrenProps#submitForm}\n   */\n  children(props: IWithConnectorFormChildrenProps): any;\n\n  /**\n   * the callback that is fired after the form submit with valid values.\n   *\n   * @see [action]{@link IOnUpdatedIntegrationProps#action}\n   */\n  onSave(props: { [key: string]: string }, action: any): any;\n}\n\n/**\n * A component to generate a configuration form for a given action and values.\n *\n * @see [action]{@link IWithConnectorFormProps#action}\n * @see [moreConfigurationSteps]{@link IWithConnectorFormProps#moreConfigurationSteps}\n * @see [values]{@link IWithConnectorFormProps#values}\n */\nexport class WithConnectorForm extends React.Component<\n  IWithConnectorFormProps\n> {\n  public static defaultProps = {\n    initialValue: {},\n  };\n\n  public render() {\n    const definition = Object.keys(this.props.connector.properties!).reduce(\n      (def, key) => {\n        const d = this.props.connector.properties![key];\n        def[key] = {\n          ...d,\n          disabled: this.props.disabled,\n        };\n        return def;\n      },\n      {}\n    );\n    return (\n      <WithConnectionHelpers>\n        {({ validateConfiguration }) => {\n          let shouldValidateAgainstBackend = false;\n          let validationResults: IConnectorConfigurationFormValidationResult[] = [];\n          const validateFormAgainstBackend = async (values: {\n            [key: string]: string;\n          }) => {\n            validationResults = [];\n            if (shouldValidateAgainstBackend) {\n              const errors: { [key: string]: string } = {};\n              const status = await validateConfiguration(\n                this.props.connector.id!,\n                values\n              );\n              (\n                (\n                  status.find(obj => obj.scope === 'PARAMETERS') || {\n                    errors: [],\n                  }\n                ).errors || []\n              ).forEach(obj => {\n                obj.parameters.forEach(p => (errors[p] = obj.description));\n              });\n              validationResults = (\n                (\n                  status.find(obj => obj.scope === 'CONNECTIVITY') || {\n                    errors: [],\n                  }\n                ).errors || []\n              ).map(\n                obj =>\n                  ({\n                    message: obj.description,\n                    type: 'error',\n                  } as IConnectorConfigurationFormValidationResult)\n              );\n              if (Object.keys(errors).length) {\n                throw errors;\n              }\n              if (validationResults.length === 0) {\n                validationResults = [\n                  {\n                    message: `${\n                      this.props.connector.name\n                    } has been successfully validated`,\n                    type: 'success',\n                  } as IConnectorConfigurationFormValidationResult,\n                ];\n              }\n            }\n          };\n\n          return (\n            <AutoForm<{ [key: string]: string }>\n              i18nRequiredProperty={'* Required field'}\n              definition={toFormDefinition(definition)}\n              initialValue={this.props.initialValue!}\n              validate={validateFormAgainstBackend}\n              onSave={this.props.onSave}\n            >\n              {({\n                fields,\n                handleSubmit,\n                isSubmitting,\n                dirty,\n                isValid,\n                isValidating,\n                resetForm,\n                submitForm,\n                validateForm,\n                values,\n              }) => {\n                const enableValidationAgainstBackend = async () => {\n                  shouldValidateAgainstBackend = true;\n                  await validateForm();\n                  shouldValidateAgainstBackend = false;\n                };\n\n                return this.props.children({\n                  dirty,\n                  fields,\n                  handleSubmit,\n                  isSubmitting,\n                  isValid,\n                  isValidating,\n                  resetForm,\n                  submitForm,\n                  validateForm: enableValidationAgainstBackend,\n                  validationResults,\n                  values,\n                });\n              }}\n            </AutoForm>\n          );\n        }}\n      </WithConnectionHelpers>\n    );\n  }\n}\n","export * from './ConnectionCreatorBreadcrumbs';\nexport * from './Connections';\nexport * from './ConnectionsWithToolbar';\nexport * from './WithConnectorForm';\n","module.exports = __webpack_public_path__ + \"atlasmap-runtime.js\";","module.exports = __webpack_public_path__ + \"atlasmap-polyfills.js\";","module.exports = __webpack_public_path__ + \"atlasmap-styles.js\";","module.exports = __webpack_public_path__ + \"atlasmap-scripts.js\";","module.exports = __webpack_public_path__ + \"atlasmap-vendor.js\";","module.exports = __webpack_public_path__ + \"atlasmap-main.js\";","import {\n  getConnectionIcon,\n  IValidationResult,\n  WithConnection,\n  WithConnectionHelpers,\n} from '@syndesis/api';\nimport { Connection } from '@syndesis/models';\nimport {\n  Breadcrumb,\n  ConnectionDetailsForm,\n  ConnectionDetailsHeader,\n  Loader,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { AppContext } from '../../../app';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport resolvers from '../../resolvers';\nimport { WithConnectorForm } from '../components';\n\nexport interface IConnectionDetailsRouteParams {\n  connectionId: string;\n}\n\nexport interface IConnectionDetailsRouteState {\n  connection?: Connection;\n}\n\nexport interface IConnectionDetailsPageProps {\n  edit: boolean;\n}\n\nexport interface IConnectionDetailsPageState {\n  isWorking: boolean;\n}\n\nexport class ConnectionDetailsPage extends React.Component<\n  IConnectionDetailsPageProps,\n  IConnectionDetailsPageState\n> {\n  public state = {\n    isWorking: false,\n  };\n\n  public getUsedByMessage(connection: Connection): string {\n    // TODO: Schema is currently wrong as it has 'uses' as an OptionalInt. Remove cast when schema is fixed.\n    const numUsedBy = connection.uses as number;\n\n    if (numUsedBy === 1) {\n      return i18n.t('connections:usedByOne');\n    }\n\n    return i18n.t('connections:usedByMulti', { count: numUsedBy });\n  }\n\n  public render() {\n    return (\n      <AppContext.Consumer>\n        {({ pushNotification }) => {\n          return (\n            <WithRouteData<\n              IConnectionDetailsRouteParams,\n              IConnectionDetailsRouteState\n            >>\n              {({ connectionId }, { connection }, { history, location }) => (\n                <Translation ns={['connections', 'shared']}>\n                  {t => (\n                    <WithConnectionHelpers>\n                      {({ updateConnection, saveConnection, validateName }) => {\n                        return (\n                          <WithConnection\n                            id={connectionId}\n                            initialValue={connection}\n                            key={location.key}\n                          >\n                            {({ data, hasData, error }) => {\n                              const save = async ({\n                                name,\n                                description,\n                                configuredProperties,\n                              }: {\n                                name?: string;\n                                description?: string;\n                                configuredProperties?: {\n                                  [key: string]: string;\n                                };\n                              }): Promise<boolean> => {\n                                const updatedConnection = updateConnection(\n                                  data,\n                                  name,\n                                  description,\n                                  configuredProperties\n                                );\n                                try {\n                                  await saveConnection(updatedConnection);\n                                  history.push(\n                                    resolvers.connections.connection.details({\n                                      connection: updatedConnection,\n                                    })\n                                  );\n                                  return true;\n                                } catch (error) {\n                                  pushNotification(\n                                    t('errorSavingConnection'),\n                                    'error'\n                                  );\n                                  return false;\n                                }\n                              };\n\n                              const saveDescription = async (\n                                description: string\n                              ): Promise<boolean> => {\n                                this.setState({ isWorking: true });\n                                const saved = await save({ description });\n                                this.setState({ isWorking: false });\n                                return saved;\n                              };\n\n                              const saveName = async (\n                                name: string\n                              ): Promise<boolean> => {\n                                let saved = false;\n                                this.setState({ isWorking: true });\n                                const validation = await doValidateName(name);\n                                if (validation === true) {\n                                  saved = await save({ name });\n                                } else {\n                                  pushNotification(validation, 'error');\n                                }\n                                this.setState({ isWorking: false });\n                                return saved;\n                              };\n\n                              const saveConnector = async (\n                                configuredProperties: { [key: string]: string },\n                                actions: any\n                              ): Promise<void> => {\n                                this.setState({ isWorking: true });\n                                await save({ configuredProperties });\n                                actions.setSubmitting(false);\n                                this.setState({ isWorking: false });\n                              };\n\n                              /**\n                               * Backend validation only occurs when save has been called.\n                               * @param proposedName the name to validate\n                               */\n                              const doValidateName = async (\n                                proposedName: string\n                              ): Promise<true | string> => {\n                                // make sure name has a value\n                                if (proposedName === '') {\n                                  return t(\n                                    'shared:requiredFieldMessage'\n                                  ) as string;\n                                }\n\n                                const response: IValidationResult = await validateName(\n                                  connection!,\n                                  proposedName\n                                );\n\n                                if (!response.isError) {\n                                  return true;\n                                }\n\n                                if (response.error === 'UniqueProperty') {\n                                  const msg = t('duplicateNameError');\n                                  return msg\n                                    ? msg\n                                    : 'connections:duplicateNameError';\n                                }\n\n                                return response.message\n                                  ? response.message\n                                  : t('errorValidatingName')\n                                  ? t('errorValidatingName')!\n                                  : 'connections:errorValidatingName'; // return missing i18n key\n                              };\n\n                              const cancelEditing = () => {\n                                history.push(\n                                  resolvers.connections.connection.details({\n                                    connection: data,\n                                  })\n                                );\n                              };\n\n                              const startEditing = () => {\n                                history.push(\n                                  resolvers.connections.connection.edit({\n                                    connection: data,\n                                  })\n                                );\n                              };\n\n                              return (\n                                <WithLoader\n                                  error={error}\n                                  loading={!hasData}\n                                  loaderChildren={<Loader />}\n                                  errorChildren={<ApiError />}\n                                >\n                                  {() => {\n                                    return (\n                                      <WithConnectorForm\n                                        connector={data.connector!}\n                                        initialValue={data.configuredProperties}\n                                        disabled={!this.props.edit}\n                                        onSave={saveConnector}\n                                      >\n                                        {({\n                                          fields,\n                                          handleSubmit,\n                                          validationResults,\n                                          dirty,\n                                          isSubmitting,\n                                          isValid,\n                                          isValidating,\n                                          validateForm,\n                                        }) => (\n                                          <>\n                                            <Breadcrumb>\n                                              <Link\n                                                to={resolvers.dashboard.root()}\n                                              >\n                                                {t('shared:Home')}\n                                              </Link>\n                                              <Link\n                                                to={resolvers.connections.connections()}\n                                              >\n                                                {t('shared:Connections')}\n                                              </Link>\n                                              <span>\n                                                {t('connectionDetailPageTitle')}\n                                              </span>\n                                            </Breadcrumb>\n                                            <ConnectionDetailsHeader\n                                              allowEditing={true}\n                                              connectionDescription={\n                                                data.description\n                                              }\n                                              connectionIcon={getConnectionIcon(\n                                                process.env.PUBLIC_URL,\n                                                data\n                                              )}\n                                              connectionName={data.name}\n                                              i18nDescriptionLabel={t(\n                                                'shared:Description'\n                                              )}\n                                              i18nDescriptionPlaceholder={t(\n                                                'descriptionPlaceholder'\n                                              )}\n                                              i18nNamePlaceholder={t(\n                                                'namePlaceholder'\n                                              )}\n                                              i18nUsageLabel={t('shared:Usage')}\n                                              i18nUsageMessage={this.getUsedByMessage(\n                                                data\n                                              )}\n                                              isWorking={this.state.isWorking}\n                                              onChangeDescription={\n                                                saveDescription\n                                              }\n                                              onChangeName={saveName}\n                                            />\n                                            <ConnectionDetailsForm\n                                              i18nCancelLabel={t(\n                                                'shared:Cancel'\n                                              )}\n                                              i18nEditLabel={t('shared:Edit')}\n                                              i18nSaveLabel={t('shared:Save')}\n                                              i18nTitle={t(\n                                                'detailsSectionTitle',\n                                                {\n                                                  connectionName: data.name,\n                                                }\n                                              )}\n                                              i18nValidateLabel={t(\n                                                'shared:Validate'\n                                              )}\n                                              handleSubmit={handleSubmit}\n                                              isValid={!dirty || isValid}\n                                              isWorking={\n                                                isSubmitting || isValidating\n                                              }\n                                              validationResults={\n                                                validationResults\n                                              }\n                                              isEditing={this.props.edit}\n                                              onCancelEditing={cancelEditing}\n                                              onStartEditing={startEditing}\n                                              onValidate={validateForm}\n                                            >\n                                              {fields}\n                                            </ConnectionDetailsForm>\n                                          </>\n                                        )}\n                                      </WithConnectorForm>\n                                    );\n                                  }}\n                                </WithLoader>\n                              );\n                            }}\n                          </WithConnection>\n                        );\n                      }}\n                    </WithConnectionHelpers>\n                  )}\n                </Translation>\n              )}\n            </WithRouteData>\n          );\n        }}\n      </AppContext.Consumer>\n    );\n  }\n}\n","import { WithConnections } from '@syndesis/api';\nimport * as React from 'react';\nimport { PageTitle } from '../../../shared';\nimport { ConnectionsWithToolbar } from '../components';\nimport resolvers from '../resolvers';\n\nexport class ConnectionsPage extends React.Component {\n  public render() {\n    return (\n      <WithConnections>\n        {({ data, hasData, error }) => (\n          <>\n            <PageTitle title={'Connections'} />\n            <ConnectionsWithToolbar\n              error={error}\n              includeConnectionMenu={true}\n              loading={!hasData}\n              connections={data.connectionsForDisplay}\n              getConnectionHref={connection =>\n                resolvers.connection.details({ connection })\n              }\n              getConnectionEditHref={connection =>\n                resolvers.connection.edit({ connection })\n              }\n            />\n          </>\n        )}\n      </WithConnections>\n    );\n  }\n}\n","import { WithConnector } from '@syndesis/api';\nimport { Connector } from '@syndesis/models';\nimport {\n  ButtonLink,\n  ConnectionCreatorLayout,\n  ConnectorConfigurationForm,\n  Loader,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { ApiError, PageTitle } from '../../../../shared';\nimport {\n  ConnectionCreatorBreadcrumbs,\n  WithConnectorForm,\n} from '../../components';\nimport resolvers from '../../resolvers';\n\nexport interface IConfigurationPageRouteParams {\n  connectorId: string;\n}\n\nexport interface IConfigurationPageRouteState {\n  connector?: Connector;\n}\n\nexport default class ConfigurationPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<\n        IConfigurationPageRouteParams,\n        IConfigurationPageRouteState\n      >>\n        {({ connectorId }, { connector }, { history }) => (\n          <WithConnector id={connectorId} initialValue={connector}>\n            {({ data, hasData, error }) => (\n              <WithLoader\n                error={error}\n                loading={!hasData}\n                loaderChildren={<Loader />}\n                errorChildren={<ApiError />}\n              >\n                {() => {\n                  const onSave = (configuredProperties: {\n                    [key: string]: string;\n                  }) => {\n                    history.push(\n                      resolvers.create.review({\n                        configuredProperties,\n                        connector: data,\n                      })\n                    );\n                  };\n                  return (\n                    <WithConnectorForm connector={data} onSave={onSave}>\n                      {({\n                        fields,\n                        handleSubmit,\n                        validationResults,\n                        submitForm,\n                        isSubmitting,\n                        isValid,\n                        isValidating,\n                        validateForm,\n                      }) => {\n                        return (\n                          <>\n                            <PageTitle title={'Configure connection'} />\n                            <ConnectionCreatorLayout\n                              header={<ConnectionCreatorBreadcrumbs step={2} />}\n                              content={\n                                <ConnectorConfigurationForm\n                                  i18nFormTitle={data.name}\n                                  handleSubmit={handleSubmit}\n                                  validationResults={validationResults}\n                                >\n                                  {fields}\n                                </ConnectorConfigurationForm>\n                              }\n                              backHref={resolvers.create.selectConnector()}\n                              cancelHref={resolvers.connections()}\n                              onNext={submitForm}\n                              isNextDisabled={isSubmitting}\n                              extraButtons={\n                                <ButtonLink\n                                  onClick={validateForm}\n                                  disabled={!isValid || isValidating}\n                                >\n                                  Validate\n                                  {isValidating && (\n                                    <>\n                                      &nbsp;\n                                      <Loader size={'sm'} inline={true} />\n                                    </>\n                                  )}\n                                </ButtonLink>\n                              }\n                            />\n                          </>\n                        );\n                      }}\n                    </WithConnectorForm>\n                  );\n                }}\n              </WithLoader>\n            )}\n          </WithConnector>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { getConnectionIcon, WithConnectors } from '@syndesis/api';\nimport { IConnectionWithIconFile } from '@syndesis/models';\nimport {\n  ConnectionCard,\n  ConnectionCreatorLayout,\n  ConnectionsGrid,\n  ConnectionsGridCell,\n  ConnectionSkeleton,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { ApiError, PageTitle } from '../../../../shared';\nimport { ConnectionCreatorBreadcrumbs } from '../../components';\nimport resolvers from '../../resolvers';\n\nexport default class ConnectorsPage extends React.Component {\n  public render() {\n    return (\n      <WithConnectors>\n        {({ data, hasData, error }) => (\n          <>\n            <PageTitle title={'Select connector'} />\n            <ConnectionCreatorLayout\n              header={<ConnectionCreatorBreadcrumbs step={1} />}\n              content={\n                <ConnectionsGrid>\n                  <WithLoader\n                    error={error}\n                    loading={!hasData}\n                    loaderChildren={\n                      <>\n                        {new Array(5).fill(0).map((_, index) => (\n                          <ConnectionsGridCell key={index}>\n                            <ConnectionSkeleton />\n                          </ConnectionsGridCell>\n                        ))}\n                      </>\n                    }\n                    errorChildren={<ApiError />}\n                  >\n                    {() =>\n                      data.connectorsForDisplay\n                        .sort((a, b) => a.name.localeCompare(b.name))\n                        .map((connector, index) => (\n                          <ConnectionsGridCell key={index}>\n                            <ConnectionCard\n                              name={connector.name}\n                              description={connector.description || ''}\n                              icon={getConnectionIcon(\n                                process.env.PUBLIC_URL,\n                                connector as IConnectionWithIconFile\n                              )}\n                              href={resolvers.create.configureConnector({\n                                connector,\n                              })}\n                            />\n                          </ConnectionsGridCell>\n                        ))\n                    }\n                  </WithLoader>\n                </ConnectionsGrid>\n              }\n              cancelHref={resolvers.connections()}\n            />\n          </>\n        )}\n      </WithConnectors>\n    );\n  }\n}\n","import ConfigurationPage from './ConfigurationPage';\nimport ConnectorsPage from './ConnectorsPage';\nimport ReviewPage from './ReviewPage';\n\nexport const create = {\n  ConfigurationPage,\n  ConnectorsPage,\n  ReviewPage,\n};\n","import { WithConnectionHelpers } from '@syndesis/api';\nimport { AutoForm, IFormDefinition } from '@syndesis/auto-form';\nimport { Connector } from '@syndesis/models';\nimport {\n  ConnectionCreatorLayout,\n  ConnectorConfigurationForm,\n} from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { AppContext } from '../../../../app';\nimport { PageTitle } from '../../../../shared';\nimport { ConnectionCreatorBreadcrumbs } from '../../components';\nimport resolvers from '../../resolvers';\n\nexport interface ISaveForm {\n  name: string;\n  description?: string;\n}\n\nexport interface IReviewPageRouteState {\n  connector: Connector;\n  configuredProperties: { [key: string]: string };\n}\n\nexport default class ReviewPage extends React.Component {\n  public render() {\n    return (\n      <AppContext.Consumer>\n        {({ pushNotification }) => (\n          <WithRouteData<null, IReviewPageRouteState>>\n            {(_, { connector, configuredProperties }, { history }) => (\n              <WithConnectionHelpers>\n                {({ createConnection, saveConnection }) => {\n                  const onSave = async (\n                    { name, description }: ISaveForm,\n                    actions: any\n                  ) => {\n                    try {\n                      const connection = createConnection(\n                        connector,\n                        name,\n                        description || '',\n                        configuredProperties\n                      );\n                      await saveConnection(connection);\n                      actions.setSubmitting(false);\n                      pushNotification(\n                        `<strong>Connection created</strong> Connection <strong>${name}</strong> successfully created`,\n                        'success'\n                      );\n                      history.push(resolvers.connections());\n                    } catch (e) {\n                      // TODO notification or inline message?\n                    }\n                  };\n                  const definition: IFormDefinition = {\n                    name: {\n                      defaultValue: '',\n                      displayName: 'Name',\n                      required: true,\n                      type: 'string',\n                    },\n                    /* tslint:disable-next-line:object-literal-sort-keys */\n                    description: {\n                      defaultValue: '',\n                      displayName: 'Description',\n                      type: 'textarea',\n                    },\n                  };\n                  return (\n                    <AutoForm<ISaveForm>\n                      i18nRequiredProperty={'* Required field'}\n                      definition={definition}\n                      initialValue={{\n                        description: '',\n                        name: '',\n                      }}\n                      onSave={onSave}\n                    >\n                      {({\n                        fields,\n                        handleSubmit,\n                        isSubmitting,\n                        isValid,\n                        submitForm,\n                      }) => (\n                        <ConnectionCreatorLayout\n                          header={<ConnectionCreatorBreadcrumbs step={3} />}\n                          content={\n                            <>\n                              <PageTitle title={'Name connection'} />\n                              <ConnectorConfigurationForm\n                                i18nFormTitle={'Name connection'}\n                                handleSubmit={handleSubmit}\n                              >\n                                {fields}\n                              </ConnectorConfigurationForm>\n                            </>\n                          }\n                          cancelHref={resolvers.connections()}\n                          backHref={resolvers.create.configureConnector({\n                            connector,\n                          })}\n                          onNext={submitForm}\n                          isNextDisabled={!isValid}\n                          isNextLoading={isSubmitting}\n                          isLastStep={true}\n                        />\n                      )}\n                    </AutoForm>\n                  );\n                }}\n              </WithConnectionHelpers>\n            )}\n          </WithRouteData>\n        )}\n      </AppContext.Consumer>\n    );\n  }\n}\n","import { Breadcrumb } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { WithClosedNavigation } from '../../shared';\nimport { create } from './pages';\nimport resolvers from './resolvers';\nimport routes from './routes';\n\nexport default class ConnectionsCreatorApp extends React.Component {\n  public render() {\n    return (\n      <WithClosedNavigation>\n        <Breadcrumb>\n          <Link to={resolvers.connections()}>Connections</Link>\n          <span>Create connection</span>\n        </Breadcrumb>\n        <Switch>\n          <Route\n            path={routes.create.selectConnector}\n            exact={true}\n            component={create.ConnectorsPage}\n          />\n          <Route\n            path={routes.create.configureConnector}\n            exact={true}\n            component={create.ConfigurationPage}\n          />\n          <Route\n            path={routes.create.review}\n            exact={true}\n            component={create.ReviewPage}\n          />\n        </Switch>\n      </WithClosedNavigation>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport ConnectionsCreatorApp from './ConnectionsCreatorApp';\nimport { ConnectionDetailsPage, ConnectionsPage } from './pages';\nimport routes from './routes';\n\nexport class ConnectionsModule extends React.Component {\n  public render() {\n    return (\n      <Switch>\n        <Route path={routes.create.root} component={ConnectionsCreatorApp} />\n        <Route\n          path={routes.connections}\n          exact={true}\n          component={ConnectionsPage}\n        />\n        <Route\n          path={routes.connection.edit}\n          exact={true}\n          children={<ConnectionDetailsPage edit={true} />}\n        />\n        <Route\n          path={routes.connection.details}\n          exact={true}\n          children={<ConnectionDetailsPage edit={false} />}\n        />\n      </Switch>\n    );\n  }\n}\n","import { Container, TabBar, TabBarItem } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport routes from '../routes';\n\n/**\n * A component that displays a nav bar with 2 items:\n *\n * 1. a link to the page that displays a list of API Connectors, and\n * 2. a link to the page that displays a list of extensions.\n *\n * @see [ApiConnectorsPage]{@link ../pages/ApiConnectorsPage}\n * @see [ExtensionsPage]{@link ../pages/ExtensionsPage}\n */\nexport default class CustomizationsNavBar extends React.Component {\n  public render() {\n    return (\n      <Translation ns={['customizations', 'shared']}>\n        {t => (\n          <Container\n            style={{\n              background: '#fff',\n            }}\n          >\n            <TabBar>\n              <TabBarItem\n                label={t('apiConnector.apiConnectorsPageTitle')}\n                to={routes.apiConnectors.list}\n              />\n              <TabBarItem\n                label={t('extension.extensionsPageTitle')}\n                to={routes.extensions.list}\n              />\n            </TabBar>\n          </Container>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { WithApiConnectors } from '@syndesis/api';\nimport { Connector } from '@syndesis/models';\nimport {\n  ApiConnectorListItem,\n  ApiConnectorListSkeleton,\n  ApiConnectorListView,\n  Container,\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n} from '@syndesis/ui';\nimport {\n  optionalIntValue,\n  WithListViewToolbarHelpers,\n  WithLoader,\n} from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport routes from '../routes';\nimport CustomizationsNavBar from '../shared/CustomizationsNavBar';\n\nfunction getFilteredAndSortedApiConnectors(\n  apiConnectors: Connector[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSorted = apiConnectors;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter((api: Connector) =>\n      api.name.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort((thisApi, thatApi) => {\n    if (isSortAscending) {\n      return thisApi.name.localeCompare(thatApi.name);\n    }\n\n    // sort descending\n    return thatApi.name.localeCompare(thisApi.name);\n  });\n\n  return filteredAndSorted;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport default class ApiConnectorsPage extends React.Component {\n  public filterUndefinedId(api: Connector): boolean {\n    return api.id !== undefined;\n  }\n\n  public getUsedByMessage(api: Connector): string {\n    const numUsedBy = optionalIntValue(api.uses);\n\n    if (numUsedBy === 1) {\n      return i18n.t('customizations:usedByOne');\n    }\n\n    return i18n.t('customizations:usedByMulti', { count: numUsedBy });\n  }\n\n  public handleDelete(apiConnectorId: string) {\n    // TODO: implement handleDelete\n    alert('Delete API client connector ' + apiConnectorId);\n  }\n\n  public handleDetails(apiConnectorId: string) {\n    // TODO: implement handleDetails\n    alert('Show details of API client connector ' + apiConnectorId);\n  }\n\n  public render() {\n    return (\n      <WithApiConnectors>\n        {({ data, hasData, error }) => (\n          <WithListViewToolbarHelpers\n            defaultFilterType={filterByName}\n            defaultSortType={sortByName}\n          >\n            {helpers => {\n              const filteredAndSorted = getFilteredAndSortedApiConnectors(\n                data.items,\n                helpers.activeFilters,\n                helpers.currentSortType,\n                helpers.isSortAscending\n              );\n\n              return (\n                <Translation ns={['customizations', 'shared']}>\n                  {t => (\n                    <>\n                      <CustomizationsNavBar />\n                      <Container className=\"pf-u-my-md\">\n                        <h1 className=\"pf-c-title pf-m-xl\">\n                          {t('apiConnector.apiConnectorsPageTitle')}\n                        </h1>\n                        <p\n                          dangerouslySetInnerHTML={{\n                            __html: t(\n                              'apiConnector.apiConnectorsPageDescription'\n                            ),\n                          }}\n                        />\n                      </Container>\n                      <ApiConnectorListView\n                        filterTypes={filterTypes}\n                        sortTypes={sortTypes}\n                        {...this.state}\n                        linkCreateApiConnector={\n                          routes.apiConnectors.create.upload\n                        }\n                        resultsCount={filteredAndSorted.length}\n                        {...helpers}\n                        i18nTitle={''}\n                        i18nDescription={''}\n                        i18nEmptyStateInfo={t('apiConnector.emptyStateInfo')}\n                        i18nEmptyStateTitle={t(\n                          'apiConnector.CreateApiConnector'\n                        )}\n                        i18nLinkCreateApiConnector={t(\n                          'apiConnector.CreateApiConnector'\n                        )}\n                        i18nLinkCreateApiConnectorTip={t(\n                          'apiConnector.createApiConnectorTip'\n                        )}\n                        i18nName={t('shared:Name')}\n                        i18nResultsCount={t('shared:resultsCount', {\n                          count: filteredAndSorted.length,\n                        })}\n                      >\n                        <WithLoader\n                          error={error}\n                          loading={!hasData}\n                          loaderChildren={\n                            <ApiConnectorListSkeleton\n                              width={800}\n                              style={{\n                                backgroundColor: '#FFF',\n                                marginTop: 30,\n                              }}\n                            />\n                          }\n                          errorChildren={<ApiError />}\n                        >\n                          {() =>\n                            filteredAndSorted\n                              .filter((api: Connector) =>\n                                this.filterUndefinedId(api)\n                              )\n                              .map((api: Connector, index: number) => (\n                                <ApiConnectorListItem\n                                  key={index}\n                                  apiConnectorId={api.id as string}\n                                  apiConnectorDescription={api.description}\n                                  apiConnectorIcon={api.icon}\n                                  apiConnectorName={api.name}\n                                  i18nDelete={t('shared:Delete')}\n                                  i18nDetails={t('shared:Details')}\n                                  i18nDetailsTip={t(\n                                    'apiConnector.detailsApiConnectorTip'\n                                  )}\n                                  i18nUsedByMessage={this.getUsedByMessage(api)}\n                                  onDelete={this.handleDelete}\n                                  onDetails={this.handleDetails}\n                                  usedBy={optionalIntValue(api.uses)}\n                                />\n                              ))\n                          }\n                        </WithLoader>\n                      </ApiConnectorListView>\n                    </>\n                  )}\n                </Translation>\n              );\n            }}\n          </WithListViewToolbarHelpers>\n        )}\n      </WithApiConnectors>\n    );\n  }\n}\n","import { WithExtensionIntegrations } from '@syndesis/api';\nimport {\n  ExtensionIntegrationsTable,\n  IExtensionIntegration,\n  Loader,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\n\nexport interface IExtensionIntegrationsProps {\n  extensionId: string;\n  uses: number;\n  onSelectIntegration: (integrationId: string) => void;\n}\n\n/**\n * A component that lists the integrations that uses a specific extension.\n */\nexport default class ExtensionIntegrations extends React.Component<\n  IExtensionIntegrationsProps\n> {\n  public getUsageMessage(uses: number): string {\n    if (uses === 1) {\n      return i18n.t('customizations:usedByOne');\n    }\n\n    return i18n.t('customizations:usedByMulti', {\n      count: uses,\n    });\n  }\n\n  public render() {\n    return (\n      <WithExtensionIntegrations extensionId={this.props.extensionId}>\n        {({ data, hasData, error }) => (\n          <WithLoader\n            error={error}\n            loading={!hasData}\n            loaderChildren={<Loader />}\n            errorChildren={<ApiError />}\n          >\n            {() => (\n              <Translation ns={['customizations', 'shared']}>\n                {t => (\n                  <ExtensionIntegrationsTable\n                    i18nDescription={t('shared:Description')}\n                    i18nName={t('shared:Name')}\n                    i18nUsageMessage={this.getUsageMessage(this.props.uses)}\n                    onSelectIntegration={this.props.onSelectIntegration}\n                    data={data as IExtensionIntegration[]}\n                  />\n                )}\n              </Translation>\n            )}\n          </WithLoader>\n        )}\n      </WithExtensionIntegrations>\n    );\n  }\n}\n","import { WithExtension, WithExtensionHelpers } from '@syndesis/api';\nimport { Action, Extension } from '@syndesis/models';\nimport {\n  Breadcrumb,\n  ExtensionDetail,\n  ExtensionOverview,\n  ExtensionSupports,\n  IAction,\n  Loader,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport resolvers from '../../resolvers';\nimport ExtensionIntegrations from '../shared/ExtensionIntegrations';\n\n/**\n * @param extensionId - the ID of the extension whose details are being shown by this page.\n */\nexport interface IExtensionDetailRouteParams {\n  extensionId: string;\n}\n\n/**\n * @param extension - the extension whose details are being shown by this page. If\n * exists, it must equal to the [extensionId]{@link IExtensionDetailRouteParams#extensionId}.\n * This is used to immediately show the details to the user, without\n * any loader; the backend will be called nonetheless to ensure that we are\n * working with the latest data available. This will be used when navigating from the\n * [ExtensionPage]{@link ExtensionsPage}.\n */\nexport interface IExtensionDetailRouteState {\n  extension?: Extension;\n}\n\nexport default class ExtensionDetailsPage extends React.Component {\n  public getTypeMessage(type: string): string {\n    if ('Steps' === type) {\n      return i18n.t('customizations:extension.StepExtension');\n    }\n\n    if ('Connectors' === type) {\n      return i18n.t('customizations:extension.ConnectorExtension');\n    }\n\n    if ('Libraries' === type) {\n      return i18n.t('customizations:extension.LibraryExtension');\n    }\n\n    return i18n.t('customizations:extension.unknownExtensionType');\n  }\n\n  public render() {\n    return (\n      <WithRouteData<IExtensionDetailRouteParams, IExtensionDetailRouteState>>\n        {({ extensionId }, { extension }, { history }) => {\n          const handleSelectIntegration = (selectedIntegrationId: string) => {\n            // redirect to the integration detail page\n            history.push(\n              resolvers.integrations.integration.details({\n                integrationId: selectedIntegrationId,\n              })\n            );\n          };\n          return (\n            <WithExtensionHelpers>\n              {({ deleteExtension }) => {\n                const handleDelete = async () => {\n                  await deleteExtension(extensionId);\n                  // TODO: post toast notification\n                  // display extensions list page\n                  history.push(resolvers.customizations.extensions.list());\n                };\n                return (\n                  <WithExtension\n                    extensionId={extensionId}\n                    initialValue={extension}\n                  >\n                    {({ data, hasData, error }) => (\n                      <WithLoader\n                        error={error}\n                        loading={!hasData}\n                        loaderChildren={<Loader />}\n                        errorChildren={<ApiError />}\n                      >\n                        {() => (\n                          <Translation ns={['customizations', 'shared']}>\n                            {t => (\n                              <>\n                                <Breadcrumb>\n                                  <Link to={resolvers.dashboard.root()}>\n                                    {t('shared:Home')}\n                                  </Link>\n                                  <Link to={resolvers.customizations.root()}>\n                                    {t('shared:Customizations')}\n                                  </Link>\n                                  <Link\n                                    to={resolvers.customizations.extensions.list()}\n                                  >\n                                    {t('shared:Extensions')}\n                                  </Link>\n                                  <span>\n                                    {t('extension.extensionDetailPageTitle')}\n                                  </span>\n                                </Breadcrumb>\n                                <ExtensionDetail\n                                  extensionName={data.name}\n                                  // TODO: Schema is currently wrong as it has 'uses` as an OptionalInt. Remove cast when schema is fixed.\n                                  extensionUses={data.uses as number}\n                                  i18nCancelText={t('shared:Cancel')}\n                                  i18nDelete={t('shared:Delete')}\n                                  i18nDeleteModalMessage={t(\n                                    'extension.deleteModalMessage',\n                                    { name: data.name }\n                                  )}\n                                  i18nDeleteModalTitle={t(\n                                    'extension.deleteModalTitle'\n                                  )}\n                                  i18nDeleteTip={t(\n                                    'extension.deleteExtensionTip'\n                                  )}\n                                  i18nIdMessage={t('extension.idMessage', {\n                                    id: data.extensionId!,\n                                  })}\n                                  i18nOverviewSectionTitle={t(\n                                    'extension.overviewSectionTitle'\n                                  )}\n                                  i18nSupportsSectionTitle={\n                                    data.extensionType === 'Steps'\n                                      ? t(\n                                          'extension.supportedStepsSectionTitle'\n                                        )\n                                      : data.extensionType === 'Connectors'\n                                      ? t(\n                                          'extension.supportedConnectorsSectionTitle'\n                                        )\n                                      : t(\n                                          'extension.supportedLibrariesSectionTitle'\n                                        )\n                                  }\n                                  i18nUpdate={t('shared:Update')}\n                                  i18nUpdateTip={t(\n                                    'extension.updateExtensionTip'\n                                  )}\n                                  i18nUsageSectionTitle={t(\n                                    'extension.usageSectionTitle'\n                                  )}\n                                  integrationsSection={\n                                    <ExtensionIntegrations\n                                      extensionId={data.id!}\n                                      uses={\n                                        // TODO: Schema is currently wrong as it has 'uses` as an OptionalInt. Remove cast when schema is fixed.\n                                        data.uses as number\n                                      }\n                                      onSelectIntegration={\n                                        handleSelectIntegration\n                                      }\n                                    />\n                                  }\n                                  linkUpdateExtension={resolvers.customizations.extensions.extension.update(\n                                    { extension: data }\n                                  )}\n                                  onDelete={handleDelete}\n                                  overviewSection={\n                                    <ExtensionOverview\n                                      extensionDescription={data.description}\n                                      extensionName={data.name}\n                                      i18nDescription={t('shared:Description')}\n                                      i18nLastUpdate={t('extension.LastUpdate')}\n                                      i18nLastUpdateDate={\n                                        data.lastUpdated\n                                          ? new Date(\n                                              data.lastUpdated\n                                            ).toLocaleString()\n                                          : ''\n                                      }\n                                      i18nName={t('shared:Name')}\n                                      i18nType={t('shared:Type')}\n                                      i18nTypeMessage={this.getTypeMessage(\n                                        data.extensionType\n                                      )}\n                                    />\n                                  }\n                                  supportsSection={\n                                    <ExtensionSupports\n                                      extensionActions={data.actions.map(\n                                        (action: Action) =>\n                                          ({\n                                            description: action.description,\n                                            name: action.name,\n                                          } as IAction)\n                                      )}\n                                    />\n                                  }\n                                />\n                              </>\n                            )}\n                          </Translation>\n                        )}\n                      </WithLoader>\n                    )}\n                  </WithExtension>\n                );\n              }}\n            </WithExtensionHelpers>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { Extension } from '@syndesis/models';\nimport i18n from '../../i18n';\n\n/**\n * Obtains a localized extension type name.\n * @param extension the extension whose type name is being requested\n */\nexport function getExtensionTypeName(extension: Extension) {\n  const type = extension.extensionType;\n\n  if ('Steps' === type) {\n    return i18n.t('customizations:extension.StepExtension');\n  }\n\n  if ('Connectors' === type) {\n    return i18n.t('customizations:extension.ConnectorExtension');\n  }\n\n  if ('Libraries' === type) {\n    return i18n.t('customizations:extension.LibraryExtension');\n  }\n\n  return i18n.t('customizations:extension.unknownExtensionType');\n}\n","import { WithExtensionHelpers } from '@syndesis/api';\nimport { Action, Extension } from '@syndesis/models';\nimport {\n  Breadcrumb,\n  ButtonLink,\n  Container,\n  ExtensionImportCard,\n  ExtensionImportReview,\n  IImportAction,\n  Loader,\n} from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { AppContext } from '../../../app';\nimport i18n from '../../../i18n';\nimport resolvers from '../../resolvers';\nimport { getExtensionTypeName } from '../customizationsUtils';\nimport './ExtensionImportPage.css';\n\nexport interface IExtensionImportRouteProps {\n  extensionId?: string;\n}\n\nexport interface IExtensionImportPageState {\n  /**\n   * `true` if the dropzone should be disabled. Defaults to `false`. When the review component is being\n   * shown, the dropzone is disabled.\n   */\n  disableDropzone: boolean;\n\n  /**\n   * A general, localized message for when a file upload is rejected. This is shown in the DnD dropzone.\n   */\n  dndUploadFailedMessage?: string;\n\n  /**\n   * A general, localized message for when a file upload is accepted. This is shown in the DnD dropzone.\n   */\n  dndUploadSuccessMessage?: string;\n\n  /**\n   * The existing extension being updated or the extension created by processing the uploaded file.\n   */\n  extension?: Extension;\n\n  /**\n   * A localized error message indicating that the jar file uploading could not be processed as an extension.\n   */\n  i18nAlertMessage?: string;\n\n  /**\n   * `true` if the extension *.jar file is being processed by the server. Defaults to `false`.\n   */\n  loading: boolean;\n}\n\nexport default class ExtensionImportPage extends React.Component<\n  {},\n  IExtensionImportPageState\n> {\n  public constructor(props: IExtensionImportRouteProps) {\n    super(props);\n    this.state = { disableDropzone: false, loading: false };\n  }\n\n  /**\n   * Obtains a localized label for the extension actions.\n   */\n  public getActionsLabel(): string {\n    if (this.state.extension) {\n      switch (this.state.extension.extensionType) {\n        case 'Steps':\n          return i18n.t('shared:Steps');\n        default:\n          break;\n      }\n    }\n\n    return i18n.t('shared:Actions');\n  }\n\n  /**\n   * Obtains a localized message describing the action.\n   * @param name the action name\n   * @param description the action description\n   */\n  public getActionText(name: string, description: string): string {\n    return i18n.t('customizations:action', {\n      actionDescription: description,\n      actionName: name,\n    });\n  }\n\n  public render() {\n    return (\n      <AppContext.Consumer>\n        {({ pushNotification }) => {\n          const onDndUploadRejectedHandler = (failedFileName: string) => {\n            const text = i18n.t(\n              'customizations:extension.importUploadFailedAlertMessage',\n              {\n                fileName: failedFileName,\n              }\n            );\n            pushNotification(text, 'error');\n            return text;\n          };\n          return (\n            <WithRouteData<IExtensionImportRouteProps, null>>\n              {({ extensionId }, _, { history }) => (\n                <WithExtensionHelpers>\n                  {({ importExtension, uploadExtension }) => {\n                    const onDndUploadAcceptedHandler = async (\n                      files: File[]\n                    ) => {\n                      try {\n                        // set state before call to backend\n                        this.setState({\n                          ...this.state,\n                          disableDropzone: true,\n                          dndUploadFailedMessage: undefined,\n                          dndUploadSuccessMessage: undefined,\n                          i18nAlertMessage: undefined,\n                          loading: true,\n                        });\n\n                        // make server call to update existing or to create a new extension\n                        const uploaded = extensionId\n                          ? await uploadExtension(files[0], extensionId)\n                          : await uploadExtension(files[0]);\n\n                        pushNotification(\n                          `${uploaded.id} was uploaded`,\n                          'success'\n                        );\n\n                        // set state based on successful upload\n                        this.setState({\n                          ...this.state,\n                          dndUploadSuccessMessage: i18n.t(\n                            'customizations:extension.importUploadSuccessMessage'\n                          ),\n                          extension: uploaded,\n                          loading: false,\n                        });\n                      } catch (e) {\n                        // set state based on failed upload\n                        this.setState({\n                          ...this.state,\n                          disableDropzone: false,\n                          dndUploadFailedMessage: i18n.t(\n                            'customizations:extension.importUploadFailedMessage'\n                          ),\n                          i18nAlertMessage: i18n.t(\n                            'customizations:extension.importInvalidFileMessage'\n                          ),\n                          loading: false,\n                        });\n                      }\n                    };\n                    const handleImport = async (importExtensionId: string) => {\n                      try {\n                        await importExtension(importExtensionId);\n                        history.push(\n                          resolvers.customizations.extensions.list()\n                        );\n                      } catch (e) {\n                        // TODO: post notification\n                      }\n                    };\n                    return (\n                      <Translation ns={['customizations', 'shared']}>\n                        {t => (\n                          <>\n                            <Container className=\"col-sm-11\">\n                              <Breadcrumb>\n                                <Link to={resolvers.dashboard.root()}>\n                                  {t('shared:Home')}\n                                </Link>\n                                <Link to={resolvers.customizations.root()}>\n                                  {t('shared:Customizations')}\n                                </Link>\n                                <Link\n                                  to={resolvers.customizations.extensions.list()}\n                                >\n                                  {t('shared:Extensions')}\n                                </Link>\n                                <span>\n                                  {t('extension.extensionImportPageTitle')}\n                                </span>\n                              </Breadcrumb>\n                            </Container>\n                            <Container\n                              className={\n                                'extension-import-page__actionContainer col-sm-1'\n                              }\n                            >\n                              <ButtonLink\n                                className={'extension-import-page__action'}\n                                href={resolvers.customizations.extensions.list()}\n                                as={'default'}\n                              >\n                                {t('shared:Cancel')}\n                              </ButtonLink>\n                            </Container>\n                            {this.state.loading ? <Loader /> : null}\n                            <ExtensionImportCard\n                              dndDisabled={this.state.disableDropzone}\n                              i18nAlertMessage={this.state.i18nAlertMessage}\n                              i18nDndHelpMessage={t(\n                                'extension.importHelpMessage'\n                              )}\n                              i18nDndInstructions={t(\n                                'extension.importDndInstructions'\n                              )}\n                              i18nDndNoFileSelectedMessage={t(\n                                'extension.importNoFileSelectedMessage'\n                              )}\n                              i18nDndSelectedFileLabel={t(\n                                'extension.importSelectedFileLabel'\n                              )}\n                              i18nDndUploadFailedMessage={\n                                this.state.dndUploadFailedMessage\n                              }\n                              i18nDndUploadSuccessMessage={\n                                this.state.dndUploadSuccessMessage\n                              }\n                              i18nImportInstructions={t(\n                                'extension.importUpdateMessage'\n                              )}\n                              i18nTitle={t('extension.ImportExtension')}\n                              onDndUploadAccepted={onDndUploadAcceptedHandler}\n                              onDndUploadRejected={onDndUploadRejectedHandler}\n                            />\n                            {this.state.extension &&\n                            this.state.extension.id &&\n                            this.state.extension.extensionId ? (\n                              <ExtensionImportReview\n                                actions={this.state.extension.actions.map(\n                                  (action: Action) =>\n                                    ({\n                                      description: action.description,\n                                      name: action.name,\n                                    } as IImportAction)\n                                )}\n                                cancelLink={resolvers.customizations.extensions.list()}\n                                extensionDescription={\n                                  this.state.extension.description\n                                }\n                                extensionId={this.state.extension.extensionId}\n                                extensionName={this.state.extension.name}\n                                extensionUid={this.state.extension.id}\n                                i18nActionsLabel={this.getActionsLabel()}\n                                i18nCancel={i18n.t('shared:Cancel')}\n                                i18nDescriptionLabel={i18n.t(\n                                  'shared:Description'\n                                )}\n                                i18nExtensionTypeMessage={getExtensionTypeName(\n                                  this.state.extension\n                                )}\n                                i18nIdLabel={i18n.t('shared:ID')}\n                                i18nImport={i18n.t(\n                                  'customizations:extension.ImportExtension'\n                                )}\n                                i18nNameLabel={i18n.t('shared:Name')}\n                                i18nTitle={i18n.t(\n                                  'customizations:extension.ImportReview'\n                                )}\n                                i18nTypeLabel={i18n.t('shared:Type')}\n                                i18nActionText={this.getActionText}\n                                onImport={handleImport}\n                              />\n                            ) : (\n                              <Container />\n                            )}\n                          </>\n                        )}\n                      </Translation>\n                    );\n                  }}\n                </WithExtensionHelpers>\n              )}\n            </WithRouteData>\n          );\n        }}\n      </AppContext.Consumer>\n    );\n  }\n}\n","import { WithExtensionHelpers, WithExtensions } from '@syndesis/api';\nimport { Extension } from '@syndesis/models';\nimport {\n  Container,\n  ExtensionListItem,\n  ExtensionListSkeleton,\n  ExtensionListView,\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers, WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport { getExtensionTypeName } from '../customizationsUtils';\nimport resolvers from '../resolvers';\nimport CustomizationsNavBar from '../shared/CustomizationsNavBar';\n\nfunction getFilteredAndSortedExtensions(\n  extensions: Extension[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSorted = extensions;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter((extension: Extension) =>\n      extension.name.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort((thisExtension, thatExtension) => {\n    if (isSortAscending) {\n      return thisExtension.name.localeCompare(thatExtension.name);\n    }\n\n    // sort descending\n    return thatExtension.name.localeCompare(thisExtension.name);\n  });\n\n  return filteredAndSorted;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport default class ExtensionsPage extends React.Component {\n  public filterUndefinedId(extension: Extension): boolean {\n    return extension.id !== undefined;\n  }\n\n  public getUsedByMessage(extension: Extension): string {\n    // TODO: Schema is currently wrong as it has 'uses` as an OptionalInt. Remove cast when schema is fixed.\n    const numUsedBy = extension.uses as number;\n\n    if (numUsedBy === 1) {\n      return i18n.t('customizations:usedByOne');\n    }\n\n    return i18n.t('customizations:usedByMulti', { count: numUsedBy });\n  }\n\n  public render() {\n    return (\n      <WithExtensionHelpers>\n        {({ deleteExtension }) => {\n          const handleDelete = async (extensionId: string) => {\n            await deleteExtension(extensionId);\n            // TODO: post toast notification\n          };\n          return (\n            <WithExtensions>\n              {({ data, hasData, error }) => (\n                <WithListViewToolbarHelpers\n                  defaultFilterType={filterByName}\n                  defaultSortType={sortByName}\n                >\n                  {helpers => {\n                    const filteredAndSorted = getFilteredAndSortedExtensions(\n                      data.items,\n                      helpers.activeFilters,\n                      helpers.currentSortType,\n                      helpers.isSortAscending\n                    );\n\n                    return (\n                      <Translation ns={['customizations', 'shared']}>\n                        {t => (\n                          <>\n                            <CustomizationsNavBar />\n                            <Container className=\"pf-u-my-md\">\n                              <h1 className=\"pf-c-title pf-m-xl\">\n                                {t('extension.extensionsPageTitle')}\n                              </h1>\n                              <p\n                                dangerouslySetInnerHTML={{\n                                  __html: t(\n                                    'extension.extensionsPageDescription'\n                                  ),\n                                }}\n                              />\n                            </Container>\n                            <ExtensionListView\n                              filterTypes={filterTypes}\n                              sortTypes={sortTypes}\n                              linkImportExtension={resolvers.extensions.import()}\n                              resultsCount={filteredAndSorted.length}\n                              {...helpers}\n                              i18nTitle={''}\n                              i18nDescription={''}\n                              i18nEmptyStateInfo={t(\n                                'extension.emptyStateInfoMessage'\n                              )}\n                              i18nEmptyStateTitle={t(\n                                'extension.emptyStateTitle'\n                              )}\n                              i18nLinkImportExtension={t(\n                                'extension.ImportExtension'\n                              )}\n                              i18nLinkImportExtensionTip={t(\n                                'extension.importExtensionTip'\n                              )}\n                              i18nName={t('shared:Name')}\n                              i18nNameFilterPlaceholder={t(\n                                'shared:nameFilterPlaceholder'\n                              )}\n                              i18nResultsCount={t('shared:resultsCount', {\n                                count: filteredAndSorted.length,\n                              })}\n                            >\n                              <WithLoader\n                                error={error}\n                                loading={!hasData}\n                                loaderChildren={\n                                  <ExtensionListSkeleton\n                                    width={800}\n                                    style={{\n                                      backgroundColor: '#FFF',\n                                      marginTop: 30,\n                                    }}\n                                  />\n                                }\n                                errorChildren={<ApiError />}\n                              >\n                                {() =>\n                                  filteredAndSorted\n                                    .filter((extension: Extension) =>\n                                      this.filterUndefinedId(extension)\n                                    )\n                                    .map(\n                                      (extension: Extension, index: number) => (\n                                        <ExtensionListItem\n                                          key={index}\n                                          detailsPageLink={resolvers.extensions.extension.details(\n                                            { extension }\n                                          )}\n                                          extensionDescription={\n                                            extension.description\n                                          }\n                                          extensionIcon={extension.icon}\n                                          extensionId={extension.id!}\n                                          extensionName={extension.name}\n                                          i18nCancelText={t('shared:Cancel')}\n                                          i18nDelete={t('shared:Delete')}\n                                          i18nDeleteModalMessage={t(\n                                            'extension.deleteModalMessage',\n                                            { name: extension.name }\n                                          )}\n                                          i18nDeleteModalTitle={t(\n                                            'extension.deleteModalTitle'\n                                          )}\n                                          i18nDeleteTip={t(\n                                            'extension.deleteExtensionTip'\n                                          )}\n                                          i18nDetails={t('shared:Details')}\n                                          i18nDetailsTip={t(\n                                            'extension.detailsExtensionTip'\n                                          )}\n                                          i18nExtensionType={getExtensionTypeName(\n                                            extension\n                                          )}\n                                          i18nUpdate={t('shared:Update')}\n                                          i18nUpdateTip={t(\n                                            'extension.updateExtensionTip'\n                                          )}\n                                          i18nUsedByMessage={this.getUsedByMessage(\n                                            extension\n                                          )}\n                                          linkUpdateExtension={resolvers.extensions.extension.update(\n                                            { extension }\n                                          )}\n                                          onDelete={handleDelete}\n                                          usedBy={\n                                            // TODO: Schema is currently wrong as it has 'uses` as an OptionalInt. Remove cast when schema is fixed.\n                                            extension.uses as number\n                                          }\n                                        />\n                                      )\n                                    )\n                                }\n                              </WithLoader>\n                            </ExtensionListView>\n                          </>\n                        )}\n                      </Translation>\n                    );\n                  }}\n                </WithListViewToolbarHelpers>\n              )}\n            </WithExtensions>\n          );\n        }}\n      </WithExtensionHelpers>\n    );\n  }\n}\n","import {\n  Connection,\n  ProjectedColumn,\n  RestDataService,\n  SchemaNode,\n  ViewDefinition,\n  ViewEditorState,\n  ViewInfo,\n  VirtualizationPublishingDetails,\n  VirtualizationSourceStatus,\n} from '@syndesis/models';\n\nconst PREVIEW_VDB_NAME = 'PreviewVdb';\nconst SCHEMA_MODEL_SUFFIX = 'schemamodel';\n\nexport enum DvConnectionStatus {\n  ACTIVE = 'ACTIVE',\n  INACTIVE = 'INACTIVE',\n}\n\nexport enum DvConnectionSelection {\n  SELECTED = 'SELECTED',\n  NOTSELECTED = 'NOTSELECTED',\n}\n\n/**\n * Get the name of the preview VDB used for preview queries\n */\nexport function getPreviewVdbName(): string {\n  return PREVIEW_VDB_NAME;\n}\n\n/**\n * Recursively flattens the tree structure of SchemaNodes,\n * into an array of ViewInfos\n * @param viewInfos the array of ViewInfos\n * @param schemaNode the SchemaNode from which the ViewInfo is generated\n * @param nodePath path for current SchemaNode\n * @param selectedViewNames names of views which are selected\n * @param existingViewNames names of views which exist (marked as update)\n */\nexport function generateViewInfos(\n  viewInfos: ViewInfo[],\n  schemaNode: SchemaNode,\n  nodePath: string[],\n  selectedViewNames: string[],\n  existingViewNames: string[]\n): void {\n  if (schemaNode) {\n    // Generate source path from nodePath array\n    const sourcePath: string[] = [];\n    for (const seg of nodePath) {\n      sourcePath.push(seg);\n    }\n\n    // Creates ViewInfo if the SchemaNode is queryable\n    if (schemaNode.queryable === true) {\n      const vwName = schemaNode.connectionName + '_' + schemaNode.name;\n      // Determine whether ViewInfo should be selected\n      const selectedState =\n        selectedViewNames.findIndex(viewName => viewName === vwName) === -1\n          ? false\n          : true;\n      // Deteremine whether ViewInfo is an update\n      const hasExistingView =\n        existingViewNames.findIndex(viewName => viewName === vwName) === -1\n          ? false\n          : true;\n      // Create ViewInfo\n      const view: ViewInfo = {\n        connectionName: schemaNode.connectionName,\n        isUpdate: hasExistingView,\n        nodePath: sourcePath,\n        selected: selectedState,\n        viewName: vwName,\n        viewSourceNode: schemaNode,\n      };\n      viewInfos.push(view);\n    }\n    // Update path for next level\n    sourcePath.push(schemaNode.name);\n    // Process this nodes children\n    if (schemaNode.children && schemaNode.children.length > 0) {\n      for (const childNode of schemaNode.children) {\n        generateViewInfos(\n          viewInfos,\n          childNode,\n          sourcePath,\n          selectedViewNames,\n          existingViewNames\n        );\n      }\n    }\n  }\n}\n\n/**\n * Generates ViewEditorStates for the supplied ViewInfos\n * @param serviceVdbName the name of the virtualization vdb\n * @param viewInfos the array of ViewInfos\n */\nexport function generateViewEditorStates(\n  serviceVdbName: string,\n  viewInfos: ViewInfo[]\n): ViewEditorState[] {\n  const editorStates: ViewEditorState[] = [];\n  for (const viewInfo of viewInfos) {\n    const srcPaths: string[] = [];\n    const path =\n      'connection=' +\n      viewInfo.connectionName +\n      '/' +\n      viewInfo.viewSourceNode.path;\n    srcPaths.push(path);\n\n    // All columns are projected\n    const projCols: ProjectedColumn[] = [];\n    const projCol: ProjectedColumn = {\n      name: 'ALL',\n      selected: true,\n      type: 'ALL',\n    };\n    projCols.push(projCol);\n\n    // View Definition\n    // TODO: need to supply the description here instead of generate\n    const viewDefn: ViewDefinition = {\n      compositions: [],\n      isComplete: true,\n      keng__description: viewInfo.viewName + ' description',\n      projectedColumns: projCols,\n      sourcePaths: srcPaths,\n      viewName: viewInfo.viewName,\n    };\n\n    // ViewEditorState which is supplied to the user profile\n    const editorState: ViewEditorState = {\n      id: serviceVdbName + '.' + viewInfo.viewName,\n      viewDefinition: viewDefn,\n    };\n    editorStates.push(editorState);\n  }\n  return editorStates;\n}\n\n/**\n * Generate array of DvConnections.  Takes the incoming connections and updates the 'options',\n * based on the Virtualization connection status and selection state\n * @param conns the connections\n * @param virtualizationsSourceStatuses the available virtualization sources\n * @param selectedConn name of a selected connection\n */\nexport function generateDvConnections(\n  conns: Connection[],\n  virtualizationsSourceStatuses: VirtualizationSourceStatus[],\n  selectedConn: string\n): Connection[] {\n  const dvConns: Connection[] = [];\n  for (const conn of conns) {\n    let connStatus = DvConnectionStatus.INACTIVE;\n    const virtSrcStatus = virtualizationsSourceStatuses.find(\n      virtStatus => virtStatus.sourceName === conn.name\n    );\n    if (\n      virtSrcStatus &&\n      virtSrcStatus.vdbState === 'ACTIVE' &&\n      virtSrcStatus.schemaState === 'ACTIVE'\n    ) {\n      connStatus = DvConnectionStatus.ACTIVE;\n    }\n\n    let selectionState = DvConnectionSelection.NOTSELECTED;\n    if (conn.name === selectedConn) {\n      selectionState = DvConnectionSelection.SELECTED;\n    }\n    conn.options = { dvStatus: connStatus, dvSelected: selectionState };\n    dvConns.push(conn);\n  }\n  return dvConns;\n}\n\n/**\n * Get the Connection DV status.  DV uses the options on a connection to set status\n * @param connection the connection\n */\nexport function getDvConnectionStatus(conn: Connection): string {\n  let dvState: string = DvConnectionStatus.INACTIVE;\n  if (conn.options && conn.options.dvStatus) {\n    dvState = conn.options.dvStatus;\n  }\n  return dvState;\n}\n\n/**\n * Determine if the Connection is selected with the DV wizard.  DV uses the options on a connection to set selection\n * @param connection the connection\n */\nexport function isDvConnectionSelected(conn: Connection) {\n  let isSelected = false;\n  if (\n    conn.options &&\n    conn.options.dvSelected &&\n    conn.options.dvSelected === DvConnectionSelection.SELECTED\n  ) {\n    isSelected = true;\n  }\n  return isSelected;\n}\n\n/**\n * Get publishing state details for the specified virtualization\n * @param virtualization the RestDataService\n */\nexport function getPublishingDetails(\n  virtualization: RestDataService\n): VirtualizationPublishingDetails {\n  // Determine published state\n  const publishStepDetails: VirtualizationPublishingDetails = {\n    state: virtualization.publishedState,\n    stepNumber: 0,\n    stepText: '',\n    stepTotal: 4,\n  };\n  switch (virtualization.publishedState) {\n    case 'CONFIGURING':\n      publishStepDetails.stepNumber = 1;\n      publishStepDetails.stepText = 'Configuring';\n      break;\n    case 'BUILDING':\n      publishStepDetails.stepNumber = 2;\n      publishStepDetails.stepText = 'Building';\n      break;\n    case 'DEPLOYING':\n      publishStepDetails.stepNumber = 3;\n      publishStepDetails.stepText = 'Deploying';\n      break;\n    case 'RUNNING':\n      publishStepDetails.stepNumber = 4;\n      publishStepDetails.stepText = 'Published';\n      break;\n  }\n  if (virtualization.publishLogUrl) {\n    publishStepDetails.logUrl = virtualization.publishLogUrl;\n  }\n  return publishStepDetails;\n}\n\n/**\n * Generate preview SQL for the specified view definition\n * @param viewDefinition the ViewDefinition\n */\nexport function getPreviewSql(viewDefinition: ViewDefinition): string {\n  // TODO: This assumes a single source view.  Will need to expand capability later\n  const sourcePath = viewDefinition.sourcePaths[0];\n  if (sourcePath) {\n    return 'SELECT * FROM ' + getPreviewTableName(sourcePath) + ';';\n  }\n  return '';\n}\n\n/**\n * Generates the table name for the preview query, given the source path.\n * Example sourcePath: (connection=pgConn/schema=public/table=account)\n * @param sourcePath the path for the view source\n */\nfunction getPreviewTableName(sourcePath: string): string {\n  // Assemble the name, utilizing the schema model suffix\n  return (\n    getConnectionName(sourcePath).toLowerCase() +\n    SCHEMA_MODEL_SUFFIX +\n    '.' +\n    getNodeName(sourcePath)\n  );\n}\n\n/**\n * Get the connection name from the supplied source path.  connection is always the first segment.\n * Example sourcePath: 'connection=pgConn/schema=public/table=account'\n * @param sourcePath the view definition sourcePath\n */\nfunction getConnectionName(sourcePath: string): string {\n  // Connection name is the value of the first segment\n  return sourcePath.split('/')[0].split('=')[1];\n}\n\n/**\n * Get the node name from the supplied source path.\n * Example sourcePath: 'connection=pgConn/schema=public/table=account'\n * @param sourcePath the view definition sourcePath\n */\nfunction getNodeName(sourcePath: string): string {\n  const segments = sourcePath.split('/');\n  // Node name is the value of the last segment\n  return segments[segments.length - 1].split('=')[1];\n}\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\nimport ApiConnectorsPage from './pages/ApiConnectorsPage';\nimport ExtensionDetailsPage from './pages/ExtensionDetailsPage';\nimport ExtensionImportPage from './pages/ExtensionImportPage';\nimport ExtensionsPage from './pages/ExtensionsPage';\nimport routes from './routes';\n\nexport default class CustomizationApp extends React.Component {\n  public render() {\n    return (\n      <Switch>\n        <Redirect\n          path={routes.root}\n          exact={true}\n          to={routes.apiConnectors.list}\n        />\n        <Route\n          path={routes.apiConnectors.list}\n          exact={true}\n          component={ApiConnectorsPage}\n        />\n        <Route\n          path={routes.extensions.list}\n          exact={true}\n          component={ExtensionsPage}\n        />\n        <Route\n          path={routes.extensions.import}\n          exact={true}\n          component={ExtensionImportPage}\n        />\n        // **This route must appear after import page**\n        <Route\n          path={routes.extensions.extension.details}\n          exact={true}\n          component={ExtensionDetailsPage}\n        />\n        <Route\n          path={routes.extensions.extension.update}\n          exact={true}\n          component={ExtensionImportPage}\n        />\n      </Switch>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport CustomizationsApp from './CustomizationsApp';\nimport routes from './routes';\n\nexport class CustomizationsModule extends React.Component {\n  public render() {\n    return (\n      <Switch>\n        <Route path={routes.root} component={CustomizationsApp} />\n      </Switch>\n    );\n  }\n}\n","import { WithRouter } from '@syndesis/utils';\nimport * as React from 'react';\nimport Loadable from 'react-loadable';\nimport { ModuleLoader } from '../../shared';\n\nconst LoadableDashboardPage = Loadable({\n  loader: () => import(/* webpackChunkName: \"Dashboard\" */ './DashboardApp'),\n  loading: ModuleLoader,\n});\n\nexport class DashboardModule extends React.Component {\n  public render() {\n    return (\n      <WithRouter>\n        {({ match }) => <LoadableDashboardPage baseurl={match.url} />}\n      </WithRouter>\n    );\n  }\n}\n","import customizations from './customizations/routes';\nimport dashboard from './dashboard/routes';\nimport data from './data/routes';\nimport integrations from './integrations/routes';\n\nexport default {\n  customizations,\n  dashboard,\n  data,\n  integrations,\n};\n","import { WithVirtualization } from '@syndesis/api';\nimport { Container, Loader } from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { ApiError } from '../../../shared';\n\nexport interface IWithVirtualizationDetailHeaderProps {\n  virtualizationId: string;\n}\n\nexport class HeaderView extends React.Component<\n  IWithVirtualizationDetailHeaderProps\n> {\n  public constructor(props: IWithVirtualizationDetailHeaderProps) {\n    super(props);\n  }\n\n  public render() {\n    return (\n      <WithVirtualization virtualizationId={this.props.virtualizationId}>\n        {({ data, hasData, error }) => (\n          <WithLoader\n            error={error}\n            loading={!hasData}\n            loaderChildren={<Loader />}\n            errorChildren={<ApiError />}\n          >\n            {() => (\n              <Container>\n                <h2>{data.keng__id}</h2>\n                <h3>{data.tko__description}</h3>\n              </Container>\n            )}\n          </WithLoader>\n        )}\n      </WithVirtualization>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport { Container, TabBar, TabBarItem } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport resolvers from '../resolvers';\n\n/**\n * @param virtualization - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationNavBarProps#virtualization}.\n */\n\nexport interface IVirtualizationNavBarProps {\n  virtualization: RestDataService;\n}\n\n/**\n * A component that displays a nav bar with 4 items:\n *\n * 1. a link to the page that displays a list of Views\n * 2. a link to the page that displays relationships\n * 3. a link to the page that displays the SQL Query editor\n * 4. a link to the page that dispays metrics\n *\n */\nexport class VirtualizationNavBar extends React.Component<\n  IVirtualizationNavBarProps\n> {\n  public render() {\n    const virtualization = this.props.virtualization;\n    return (\n      <Translation ns={['data', 'shared']}>\n        {t => (\n          <Container\n            style={{\n              background: '#fff',\n            }}\n          >\n            <TabBar>\n              <TabBarItem\n                label={t('data:virtualization.views')}\n                to={resolvers.virtualizations.views.root({\n                  virtualization,\n                })}\n              />\n              <TabBarItem\n                label={t('data:virtualization.relationship')}\n                to={resolvers.virtualizations.relationship({\n                  virtualization,\n                })}\n              />\n              <TabBarItem\n                label={t('data:virtualization.sqlClient')}\n                to={resolvers.virtualizations.sqlClient({\n                  virtualization,\n                })}\n              />\n              <TabBarItem\n                label={t('data:virtualization.metrics')}\n                to={resolvers.virtualizations.metrics({\n                  virtualization,\n                })}\n              />\n            </TabBar>\n          </Container>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { WizardStep, WizardSteps } from '@syndesis/ui';\nimport * as React from 'react';\nimport i18n from '../../../i18n';\n\nexport interface IViewsCreateStepsProps {\n  /**\n   * The one-based active step number.\n   */\n  step: number;\n}\n\nexport interface IViewsCreateStepsState {\n  /**\n   * Indicates if the user clicked on a step. Used to show\n   * sub-steps when browsing from a mobile device.\n   */\n  active: boolean;\n}\n\n/**\n * A component to display the PatternFly Wizard Steps specific to the integration\n * creator flow.\n * @see [step]{@link IViewsCreateStepsProps#step}\n * @see [subStep]{@link IViewsCreateStepsProps#subStep}\n */\nexport class ViewsCreateSteps extends React.Component<\n  IViewsCreateStepsProps,\n  IViewsCreateStepsState\n> {\n  public state = {\n    active: false,\n  };\n\n  constructor(props: IViewsCreateStepsProps) {\n    super(props);\n    this.toggleActive = this.toggleActive.bind(this);\n  }\n\n  public toggleActive() {\n    this.setState({\n      active: !this.state.active,\n    });\n  }\n\n  public render() {\n    return (\n      <WizardSteps\n        active={this.state.active}\n        mainSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              onClick={this.toggleActive}\n              step={1}\n              title={i18n.t('data:virtualization.importDataSourceWizardStep1')}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              onClick={this.toggleActive}\n              step={2}\n              title={i18n.t('data:virtualization.importDataSourceWizardStep2')}\n            />\n          </>\n        }\n        altSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={1}\n              title={i18n.t('data:virtualization.importDataSourceWizardStep1')}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={2}\n              title={i18n.t('data:virtualization.importDataSourceWizardStep2')}\n            />\n          </>\n        }\n      />\n    );\n  }\n}\n","import { WithVirtualizationConnectionSchema } from '@syndesis/api';\nimport { SchemaNode, ViewInfo } from '@syndesis/models';\nimport {\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n  ViewInfoList,\n  ViewInfoListItem,\n  ViewInfoListSkeleton,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers, WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport { generateViewInfos } from './VirtualizationUtils';\n\nfunction getFilteredAndSortedViewInfos(\n  schemaNodes: SchemaNode[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean,\n  selectedViewNames: string[],\n  existingViewNames: string[]\n) {\n  const viewInfos: ViewInfo[] = [];\n  if (schemaNodes && schemaNodes.length > 0) {\n    generateViewInfos(\n      viewInfos,\n      schemaNodes[0],\n      [],\n      selectedViewNames,\n      existingViewNames\n    );\n  }\n\n  let filteredAndSorted = viewInfos;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter((viewInfo: ViewInfo) =>\n      viewInfo.viewName.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort((thisViewInfo, thatViewInfo) => {\n    if (isSortAscending) {\n      return thisViewInfo.viewName.localeCompare(thatViewInfo.viewName);\n    }\n\n    // sort descending\n    return thatViewInfo.viewName.localeCompare(thisViewInfo.viewName);\n  });\n\n  return filteredAndSorted;\n}\n\nexport interface IViewInfosContentProps {\n  connectionName: string;\n  existingViewNames: string[];\n  onViewSelected: (view: ViewInfo) => void;\n  onViewDeselected: (viewName: string) => void;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport class ViewInfosContent extends React.Component<IViewInfosContentProps> {\n  public displayedViews: ViewInfo[] = [];\n  public selectedViewNames: string[] = [];\n\n  public constructor(props: IViewInfosContentProps) {\n    super(props);\n    this.handleViewSelectionChange = this.handleViewSelectionChange.bind(this);\n  }\n\n  public handleViewSelectionChange(name: string, selected: boolean) {\n    if (selected) {\n      for (const viewInfo of this.displayedViews) {\n        if (viewInfo.viewName === name) {\n          this.props.onViewSelected(viewInfo);\n        }\n      }\n    } else {\n      this.props.onViewDeselected(name);\n    }\n  }\n\n  public render() {\n    return (\n      <WithVirtualizationConnectionSchema\n        connectionId={this.props.connectionName}\n      >\n        {({ data, hasData, error }) => (\n          <WithListViewToolbarHelpers\n            defaultFilterType={filterByName}\n            defaultSortType={sortByName}\n          >\n            {helpers => {\n              const filteredAndSorted = getFilteredAndSortedViewInfos(\n                data,\n                helpers.activeFilters,\n                helpers.currentSortType,\n                helpers.isSortAscending,\n                this.selectedViewNames,\n                this.props.existingViewNames\n              );\n              this.displayedViews = filteredAndSorted;\n\n              return (\n                <Translation ns={['data', 'shared']}>\n                  {t => (\n                    <ViewInfoList\n                      filterTypes={filterTypes}\n                      sortTypes={sortTypes}\n                      {...this.state}\n                      resultsCount={filteredAndSorted.length}\n                      {...helpers}\n                      i18nEmptyStateInfo={t(\n                        'virtualization.emptyStateInfoMessage'\n                      )}\n                      i18nEmptyStateTitle={t('virtualization.emptyStateTitle')}\n                      i18nName={t('shared:Name')}\n                      i18nNameFilterPlaceholder={t(\n                        'shared:nameFilterPlaceholder'\n                      )}\n                      i18nResultsCount={t('shared:resultsCount', {\n                        count: filteredAndSorted.length,\n                      })}\n                    >\n                      <WithLoader\n                        error={error}\n                        loading={!hasData}\n                        loaderChildren={\n                          <ViewInfoListSkeleton\n                            width={800}\n                            style={{\n                              backgroundColor: '#FFF',\n                              marginTop: 30,\n                            }}\n                          />\n                        }\n                        errorChildren={<ApiError />}\n                      >\n                        {() =>\n                          filteredAndSorted.map(\n                            (viewInfo: ViewInfo, index: number) => (\n                              <ViewInfoListItem\n                                key={index}\n                                connectionName={viewInfo.connectionName}\n                                name={viewInfo.viewName}\n                                nodePath={viewInfo.nodePath}\n                                selected={viewInfo.selected}\n                                i18nUpdate={t('shared:Update')}\n                                isUpdateView={viewInfo.isUpdate}\n                                onSelectionChanged={\n                                  this.handleViewSelectionChange\n                                }\n                              />\n                            )\n                          )\n                        }\n                      </WithLoader>\n                    </ViewInfoList>\n                  )}\n                </Translation>\n              );\n            }}\n          </WithListViewToolbarHelpers>\n        )}\n      </WithVirtualizationConnectionSchema>\n    );\n  }\n}\n","import { WithVirtualizationHelpers } from '@syndesis/api';\nimport { AutoForm, IFormDefinition } from '@syndesis/auto-form';\nimport { QueryResults, ViewDefinition } from '@syndesis/models';\nimport { Container } from '@syndesis/ui';\n// tslint:disable-next-line:no-implicit-dependencies\nimport { DropdownButton, MenuItem } from 'patternfly-react';\nimport * as React from 'react';\nimport i18n from '../../../i18n';\nimport { getPreviewSql } from './VirtualizationUtils';\n\nexport interface IViewSqlFormProps {\n  /**\n   * @param views the array of view definitions for the current virtualization\n   */\n  views: ViewDefinition[];\n\n  /**\n   * @param targetVdb the name of the vdb to query\n   */\n  targetVdb: string;\n\n  /**\n   * @param onQueryResultsChanged the parameter function called by the parent component to that returns\n   * the promotes the value of the latest query results\n   */\n  onQueryResultsChanged: (queryResults: QueryResults) => void;\n}\n\nexport interface IViewSqlFormState {\n  queryResults: QueryResults;\n  querySql: string;\n  selectedView?: ViewDefinition;\n}\n\nexport class ViewSqlForm extends React.Component<\n  IViewSqlFormProps,\n  IViewSqlFormState\n> {\n  public static queryResultsEmpty: QueryResults = {\n    columns: [],\n    rows: [],\n  };\n\n  public constructor(props: IViewSqlFormProps) {\n    super(props);\n    this.state = {\n      queryResults: ViewSqlForm.queryResultsEmpty,\n      querySql: '',\n    };\n\n    this.updateQueryResults = this.updateQueryResults.bind(this);\n    this.viewSelected = this.viewSelected.bind(this);\n  }\n\n  public updateQueryResults(results: QueryResults) {\n    {\n      results && results.columns.length > 0\n        ? this.setState({ queryResults: results })\n        : this.setState({ queryResults: ViewSqlForm.queryResultsEmpty });\n    }\n\n    this.props.onQueryResultsChanged(this.state.queryResults);\n  }\n\n  public viewSelected() {\n    const viewSql = getPreviewSql(this.props.views[0]);\n    // TODO: change the defaultValue in the SqlStatement text area\n    // to reflect the newly selected view name (if changed)\n    // Maybe even show a text field showing the selected component depending on the PF4 widget type\n    this.setState({\n      queryResults: ViewSqlForm.queryResultsEmpty,\n      querySql: viewSql,\n      selectedView: this.props.views[0],\n    });\n  }\n\n  public render() {\n    const formDefinition = {\n      rowLimit: {\n        componentProperty: true,\n        defaultValue: '10',\n        deprecated: false,\n        description: i18n.t(\n          'data:virtualization.viewSqlFormRowLimitDescription'\n        ),\n        displayName: i18n.t('data:virtualization.viewSqlFormRowLimit'),\n        javaType: 'java.lang.Integer',\n        kind: 'property',\n        order: 3,\n        required: true,\n        secret: false,\n        type: 'number',\n      },\n      rowOffset: {\n        componentProperty: true,\n        defaultValue: '1',\n        deprecated: false,\n        description: i18n.t(\n          'data:virtualization.viewSqlFormRowOffsetDescription'\n        ),\n        displayName: i18n.t('data:virtualization.viewSqlFormRowOffset'),\n        javaType: 'java.lang.Integer',\n        kind: 'property',\n        order: 4,\n        required: false,\n        secret: false,\n        type: 'number',\n      },\n      sqlStatement: {\n        componentProperty: true,\n        defaultValue: this.state.querySql,\n        deprecated: false,\n        description: i18n.t(\n          'data:virtualization.viewSqlFormSqlStatementDescription'\n        ),\n        displayName: i18n.t('data:virtualization.viewSqlFormSqlStatement'),\n        height: 300,\n        javaType: 'java.lang.String',\n        kind: 'property',\n        order: 2,\n        required: true,\n        secret: false,\n        type: 'textarea',\n      },\n    } as IFormDefinition;\n\n    return (\n      // TODO need to retrieve real user here\n      <WithVirtualizationHelpers username=\"developer\">\n        {({ queryVirtualization }) => {\n          const doSubmit = async (value: any) => {\n            const results: QueryResults = await queryVirtualization(\n              this.props.targetVdb,\n              value.sqlStatement,\n              value.rowLimit,\n              value.rowOffset\n            );\n            this.updateQueryResults(results);\n          };\n          return (\n            // NOTE: This is a fake SELECTOR widget (i.e. dropdown menu) just to show a selector-like UI component\n            // TODO replace DropdownButton with\n            <>\n              <Container>\n                <DropdownButton\n                  bsStyle=\"default\"\n                  title={\n                    // TODO: i18n translations\n                    this.props.views.length > 0\n                      ? 'Select View...'\n                      : 'No Views Defined'\n                  }\n                  id=\"dropdown-example\"\n                  onClick={this.viewSelected}\n                >\n                  {this.props.views.map((view, index) => (\n                    <MenuItem key={index}>{view.viewName}</MenuItem>\n                  ))}\n                </DropdownButton>\n              </Container>\n              <Container>\n                <AutoForm\n                  definition={formDefinition}\n                  initialValue={''}\n                  i18nRequiredProperty={'*Required'}\n                  onSave={doSubmit}\n                >\n                  {({ fields, handleSubmit }) => (\n                    <React.Fragment>\n                      {fields}\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-primary\"\n                        onClick={handleSubmit}\n                      >\n                        Submit\n                      </button>\n                    </React.Fragment>\n                  )}\n                </AutoForm>\n              </Container>\n            </>\n          );\n        }}\n      </WithVirtualizationHelpers>\n    );\n  }\n}\n","import { QueryResults, ViewDefinition } from '@syndesis/models';\nimport { Container, GenericTable } from '@syndesis/ui';\n// tslint:disable-next-line:no-implicit-dependencies\nimport { EmptyState, Grid, Table } from 'patternfly-react';\nimport * as React from 'react';\nimport i18n from '../../../i18n';\nimport { ViewSqlForm } from '../shared/';\n\nexport interface IViewSqlFormAndTableProps {\n  /**\n   * @param views the list of ViewDefinitions for the virtualization\n   */\n  views: ViewDefinition[];\n\n  /**\n   * @param targetVdb the name of the vdb to query\n   */\n  targetVdb: string;\n}\n\nexport interface IViewSqlFormAndTableState {\n  queryResults: QueryResults;\n}\n\nexport class ViewSqlFormAndTable extends React.Component<\n  IViewSqlFormAndTableProps,\n  IViewSqlFormAndTableState\n> {\n  public constructor(props: IViewSqlFormAndTableProps) {\n    super(props);\n    this.state = {\n      queryResults: ViewSqlForm.queryResultsEmpty,\n    };\n\n    this.setQueryResults = this.setQueryResults.bind(this);\n  }\n\n  public setQueryResults(results: QueryResults) {\n    {\n      results && results.columns.length > 0\n        ? this.setState({\n            queryResults: results,\n          })\n        : this.setState({\n            queryResults: ViewSqlForm.queryResultsEmpty,\n          });\n    }\n  }\n\n  public render() {\n    const defaultCellFormat = (value: any) => (\n      <Table.Heading>{value}</Table.Heading>\n    );\n    const defaultHeaderFormat = (value: any) => (\n      <Table.Cell>{value}</Table.Cell>\n    );\n\n    return (\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Container>\n            <ViewSqlForm\n              views={this.props.views}\n              targetVdb={this.props.targetVdb}\n              onQueryResultsChanged={this.setQueryResults}\n            />\n          </Container>\n        </Grid.Col>\n        <Grid.Col md={6}>\n          <Container>\n            {this.state.queryResults.rows.length > 0 ? (\n              <GenericTable\n                columns={this.state.queryResults.columns.map(c => ({\n                  cell: {\n                    formatters: [defaultCellFormat],\n                  },\n                  header: {\n                    formatters: [defaultHeaderFormat],\n                    label: c.label,\n                  },\n                  property: c.name,\n                }))}\n                rows={this.state.queryResults.rows\n                  .map(row => row.row)\n                  .map(row =>\n                    row.reduce(\n                      // tslint:disable-next-line:no-shadowed-variable\n                      (row, r, idx) => ({\n                        ...row,\n                        [this.state.queryResults.columns[idx].name]: r,\n                      }),\n                      {}\n                    )\n                  )}\n                rowKey={\n                  this.state.queryResults.columns.length > 0\n                    ? this.state.queryResults.columns[0].name\n                    : ''\n                }\n                {...this.props}\n              />\n            ) : (\n              <EmptyState>\n                <EmptyState.Title>\n                  {i18n.t(\n                    'data:virtualization.queryResultsTableEmptyStateTitle'\n                  )}\n                </EmptyState.Title>\n                <EmptyState.Info>\n                  {i18n.t(\n                    'data:virtualization.queryResultsTableEmptyStateInfo'\n                  )}\n                </EmptyState.Info>\n              </EmptyState>\n            )}\n          </Container>\n        </Grid.Col>\n      </Grid.Row>\n    );\n  }\n}\n","import { getConnectionIcon } from '@syndesis/api';\nimport { Connection } from '@syndesis/models';\nimport {\n  DvConnectionCard,\n  DvConnectionsGrid,\n  DvConnectionsGridCell,\n  DvConnectionSkeleton,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { ApiError } from '../../../shared';\nimport {\n  getDvConnectionStatus,\n  isDvConnectionSelected,\n} from './VirtualizationUtils';\n\nexport interface IDvConnectionsProps {\n  error: boolean;\n  loading: boolean;\n  connections: Connection[];\n  onConnectionSelectionChanged: (name: string, selected: boolean) => void;\n}\n\nexport class DvConnections extends React.Component<IDvConnectionsProps> {\n  public constructor(props: IDvConnectionsProps) {\n    super(props);\n    this.handleConnSourceSelectionChanged = this.handleConnSourceSelectionChanged.bind(\n      this\n    );\n  }\n\n  public handleConnSourceSelectionChanged(name: string, isSelected: boolean) {\n    this.props.onConnectionSelectionChanged(name, isSelected);\n  }\n\n  public render() {\n    return (\n      <DvConnectionsGrid>\n        <WithLoader\n          error={this.props.error}\n          loading={this.props.loading}\n          loaderChildren={\n            <>\n              {new Array(5).fill(0).map((_, index) => (\n                <DvConnectionsGridCell key={index}>\n                  <DvConnectionSkeleton />\n                </DvConnectionsGridCell>\n              ))}\n            </>\n          }\n          errorChildren={<ApiError />}\n        >\n          {() =>\n            this.props.connections.map((c, index) => (\n              <DvConnectionsGridCell key={index}>\n                <DvConnectionCard\n                  name={c.name}\n                  description={c.description || ''}\n                  dvStatus={getDvConnectionStatus(c)}\n                  icon={getConnectionIcon(process.env.PUBLIC_URL, c)}\n                  selected={isDvConnectionSelected(c)}\n                  onSelectionChanged={this.handleConnSourceSelectionChanged}\n                />\n              </DvConnectionsGridCell>\n            ))\n          }\n        </WithLoader>\n      </DvConnectionsGrid>\n    );\n  }\n}\n","import { WithConnections } from '@syndesis/api';\nimport { Connection, VirtualizationSourceStatus } from '@syndesis/models';\nimport {\n  DvConnectionsListView,\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport resolvers from '../../resolvers';\nimport { DvConnections } from './DvConnections';\nimport { generateDvConnections } from './VirtualizationUtils';\n\nfunction getFilteredAndSortedConnections(\n  connections: Connection[],\n  dvSourceStatuses: VirtualizationSourceStatus[],\n  selectedConn: string,\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  // Connections are adjusted to supply dvStatus and selection\n  let filteredAndSortedConnections = generateDvConnections(\n    connections,\n    dvSourceStatuses,\n    selectedConn\n  );\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSortedConnections = filteredAndSortedConnections.filter(\n      (c: Connection) => c.name.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSortedConnections = filteredAndSortedConnections.sort(\n    (miA, miB) => {\n      const left = isSortAscending ? miA : miB;\n      const right = isSortAscending ? miB : miA;\n      return left.name.localeCompare(right.name);\n    }\n  );\n\n  return filteredAndSortedConnections;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport interface IDvConnectionsWithToolbarProps {\n  error: boolean;\n  loading: boolean;\n  dvSourceStatuses: VirtualizationSourceStatus[];\n  onConnectionSelectionChanged: (name: string, selected: boolean) => void;\n  children?: any;\n}\nexport interface IDvConnectionsWithToolbarState {\n  selectedConnection: any;\n}\n\nexport class DvConnectionsWithToolbar extends React.Component<\n  IDvConnectionsWithToolbarProps,\n  IDvConnectionsWithToolbarState\n> {\n  public constructor(props: IDvConnectionsWithToolbarProps) {\n    super(props);\n    this.state = {\n      selectedConnection: '', // initial selected connection empty\n    };\n    this.handleConnectionSelectionChanged = this.handleConnectionSelectionChanged.bind(\n      this\n    );\n  }\n\n  public handleConnectionSelectionChanged(name: string, selected: boolean) {\n    this.props.onConnectionSelectionChanged(name, selected);\n  }\n\n  public render() {\n    return (\n      <Translation ns={['shared']}>\n        {t => (\n          <WithConnections>\n            {({ data, hasData, error }) => (\n              <WithListViewToolbarHelpers\n                defaultFilterType={filterByName}\n                defaultSortType={sortByName}\n              >\n                {helpers => {\n                  const filteredAndSortedConnections = getFilteredAndSortedConnections(\n                    data.connectionsForDisplay,\n                    this.props.dvSourceStatuses,\n                    this.state.selectedConnection,\n                    helpers.activeFilters,\n                    helpers.currentSortType,\n                    helpers.isSortAscending\n                  );\n\n                  return (\n                    <DvConnectionsListView\n                      linkToConnectionCreate={resolvers.connections.create.selectConnector()}\n                      filterTypes={filterTypes}\n                      sortTypes={sortTypes}\n                      resultsCount={filteredAndSortedConnections.length}\n                      {...helpers}\n                      i18nLinkCreateConnection={t(\n                        'shared:linkCreateConnection'\n                      )}\n                      i18nResultsCount={t('shared:resultsCount', {\n                        count: filteredAndSortedConnections.length,\n                      })}\n                    >\n                      {this.props.children}\n                      <DvConnections\n                        error={this.props.error}\n                        loading={this.props.loading}\n                        connections={filteredAndSortedConnections}\n                        onConnectionSelectionChanged={\n                          this.handleConnectionSelectionChanged\n                        }\n                      />\n                    </DvConnectionsListView>\n                  );\n                }}\n              </WithListViewToolbarHelpers>\n            )}\n          </WithConnections>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { WithVirtualizationConnectionStatuses } from '@syndesis/api';\nimport { RestDataService } from '@syndesis/models';\nimport { ViewsCreateLayout } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport resolvers from '../../../resolvers';\nimport { DvConnectionsWithToolbar, ViewsCreateSteps } from '../../shared';\n\n/**\n * @param virtualizationId - the ID of the virtualization for the wizard\n */\nexport interface ISelectConnectionRouteParams {\n  virtualizationId: string;\n}\n\n/**\n * @param virtualization - the virtualization for the wizard.\n */\nexport interface ISelectConnectionRouteState {\n  virtualization: RestDataService;\n}\n\nexport interface ISelectConnectionPageState {\n  selectedConnection: any;\n}\n\nexport class SelectConnectionPage extends React.Component<\n  {},\n  ISelectConnectionPageState\n> {\n  public constructor(props: {}) {\n    super(props);\n    this.state = {\n      selectedConnection: '', // initial selected connection empty\n    };\n    this.handleConnectionSelectionChanged = this.handleConnectionSelectionChanged.bind(\n      this\n    );\n  }\n\n  public handleConnectionSelectionChanged(name: string, selected: boolean) {\n    const selConn = selected ? name : '';\n    this.setState({\n      selectedConnection: selConn,\n    });\n  }\n\n  public render() {\n    const connectionId: string = this.state.selectedConnection;\n    return (\n      <WithRouteData<ISelectConnectionRouteParams, ISelectConnectionRouteState>>\n        {({ virtualizationId }, { virtualization }, { history }) => (\n          <ViewsCreateLayout\n            header={<ViewsCreateSteps step={1} />}\n            content={\n              <WithVirtualizationConnectionStatuses>\n                {({ data, hasData, error }) => (\n                  <DvConnectionsWithToolbar\n                    error={error}\n                    loading={!hasData}\n                    dvSourceStatuses={data}\n                    onConnectionSelectionChanged={\n                      this.handleConnectionSelectionChanged\n                    }\n                  />\n                )}\n              </WithVirtualizationConnectionStatuses>\n            }\n            cancelHref={resolvers.data.virtualizations.views.root({\n              virtualization,\n            })}\n            nextHref={resolvers.data.virtualizations.views.importSource.selectViews(\n              {\n                connectionId,\n                virtualization,\n              }\n            )}\n            isNextDisabled={this.state.selectedConnection.length < 1}\n            isNextLoading={false}\n            isLastStep={false}\n          />\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { WithViewEditorStates, WithVirtualizationHelpers } from '@syndesis/api';\nimport { RestDataService, ViewEditorState, ViewInfo } from '@syndesis/models';\nimport { ViewsCreateLayout } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport resolvers from '../../../resolvers';\nimport { ViewInfosContent, ViewsCreateSteps } from '../../shared';\nimport { generateViewEditorStates } from '../../shared/VirtualizationUtils';\n\n/**\n * @param virtualizationId - the ID of the virtualization for the wizard.\n */\nexport interface ISelectViewsRouteParams {\n  virtualizationId: string;\n}\n\n/**\n * @param virtualization - the virtualization for the wizard.\n * @param connectionId - the id of the selected connection\n */\nexport interface ISelectViewsRouteState {\n  virtualization: RestDataService;\n  connectionId: string;\n}\n\nexport interface ISelectViewsPageState {\n  hasSelectedTables: boolean;\n}\n\nexport class SelectViewsPage extends React.Component<\n  {},\n  ISelectViewsPageState\n> {\n  public selectedViews: ViewInfo[] = []; // Maintains list of selected views\n\n  public constructor(props: {}) {\n    super(props);\n    this.state = {\n      hasSelectedTables: false, // initialize selected tables state\n    };\n    this.handleAddView = this.handleAddView.bind(this);\n    this.handleRemoveView = this.handleRemoveView.bind(this);\n  }\n\n  public getExistingViewNames(editorStates: ViewEditorState[]) {\n    const viewNames: string[] = [];\n    for (const editorState of editorStates) {\n      viewNames.push(editorState.viewDefinition.viewName);\n    }\n    return viewNames;\n  }\n\n  public handleAddView(view: ViewInfo) {\n    this.selectedViews.push(view);\n    this.setState({\n      hasSelectedTables: this.selectedViews.length > 0,\n    });\n  }\n\n  public handleRemoveView(viewName: string) {\n    const index = this.selectedViews.findIndex(\n      view => view.viewName === viewName\n    );\n\n    if (index !== -1) {\n      this.selectedViews.splice(index, 1);\n    }\n    this.setState({\n      hasSelectedTables: this.selectedViews.length > 0,\n    });\n  }\n\n  public render() {\n    return (\n      <WithRouteData<ISelectViewsRouteParams, ISelectViewsRouteState>>\n        {(\n          { virtualizationId },\n          { virtualization, connectionId },\n          { history }\n        ) => (\n          // TODO need to retrieve real user here\n          <WithVirtualizationHelpers username=\"developer\">\n            {({ refreshVirtualizationViews }) => {\n              const handleCreateViews = async () => {\n                const viewEditorStates = generateViewEditorStates(\n                  virtualization.serviceVdbName,\n                  this.selectedViews\n                );\n                await refreshVirtualizationViews(\n                  virtualization.keng__id,\n                  viewEditorStates\n                );\n                // TODO: post toast notification\n                history.push(\n                  resolvers.data.virtualizations.views.root({ virtualization })\n                );\n              };\n              return (\n                <WithViewEditorStates\n                  idPattern={virtualization.serviceVdbName + '*'}\n                >\n                  {({ data, hasData, error }) => (\n                    <ViewsCreateLayout\n                      header={<ViewsCreateSteps step={2} />}\n                      content={\n                        <ViewInfosContent\n                          connectionName={connectionId}\n                          existingViewNames={this.getExistingViewNames(data)}\n                          onViewSelected={this.handleAddView}\n                          onViewDeselected={this.handleRemoveView}\n                        />\n                      }\n                      cancelHref={resolvers.data.virtualizations.views.root({\n                        virtualization,\n                      })}\n                      backHref={resolvers.data.virtualizations.views.importSource.selectConnection(\n                        { virtualization }\n                      )}\n                      onCreateViews={handleCreateViews}\n                      isNextDisabled={!this.state.hasSelectedTables}\n                      isNextLoading={false}\n                      isLastStep={true}\n                    />\n                  )}\n                </WithViewEditorStates>\n              );\n            }}\n          </WithVirtualizationHelpers>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport { Breadcrumb } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../i18n';\nimport { WithClosedNavigation } from '../../shared';\nimport resolvers from '../resolvers';\nimport routes from '../routes';\nimport { SelectConnectionPage, SelectViewsPage } from './pages/views';\n\nexport interface ICreateViewsAppRouteState {\n  virtualization: RestDataService;\n}\n\nexport default class CreateViewsApp extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<null, ICreateViewsAppRouteState>>\n        {(_, { virtualization }) => (\n          <WithClosedNavigation>\n            <Breadcrumb>\n              <Link to={resolvers.dashboard.root()}>\n                {i18n.t('shared:Home')}\n              </Link>\n              <Link to={resolvers.data.root()}>\n                {i18n.t('shared:DataVirtualizations')}\n              </Link>\n              <Link\n                to={resolvers.data.virtualizations.views.root({\n                  virtualization,\n                })}\n              >\n                {virtualization.keng__id}\n              </Link>\n              <span>{i18n.t('data:virtualization.importDataSource')}</span>\n            </Breadcrumb>\n            <Switch>\n              {/* step 1 */}\n              <Route\n                path={\n                  routes.data.virtualizations.virtualization.views.importSource\n                    .selectConnection\n                }\n                exact={true}\n                component={SelectConnectionPage}\n              />\n              {/* step 2 */}\n              <Route\n                path={\n                  routes.data.virtualizations.virtualization.views.importSource\n                    .selectViews\n                }\n                exact={true}\n                component={SelectViewsPage}\n              />\n            </Switch>\n          </WithClosedNavigation>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { WithVirtualizationHelpers } from '@syndesis/api';\nimport { AutoForm, IFormDefinition } from '@syndesis/auto-form';\nimport { Breadcrumb, Container } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../../i18n';\nimport resolvers from '../../resolvers';\n\nexport class VirtualizationCreatePage extends React.Component {\n  public render() {\n    const formDefinition = {\n      virtDescription: {\n        componentProperty: true,\n        deprecated: false,\n        displayName: i18n.t(\n          'data:virtualization.virtualizationDescriptionDisplay'\n        ),\n        javaType: 'java.lang.String',\n        kind: 'property',\n        order: 1,\n        required: false,\n        secret: false,\n        type: 'textarea',\n      },\n      virtName: {\n        componentProperty: true,\n        deprecated: false,\n        displayName: i18n.t('data:virtualization.virtualizationNameDisplay'),\n        javaType: 'java.lang.String',\n        kind: 'property',\n        order: 0,\n        required: true,\n        secret: false,\n        type: 'string',\n      },\n    } as IFormDefinition;\n    const validate = (v: { virtName: string }) => {\n      const errors: any = {};\n      // TODO Incorporate service call to validate virtualization name\n      if (v.virtName.includes('?')) {\n        errors.virtName = 'Virtualization name contains an illegal character';\n      }\n      return errors;\n    };\n\n    return (\n      <WithRouteData<null, null>>\n        {(p, s, { history }) => (\n          // TODO need to retrieve real user here\n          <WithVirtualizationHelpers username=\"developer\">\n            {({ createVirtualization }) => {\n              const handleCreate = async (value: any) => {\n                const virtualization = await createVirtualization(\n                  value.virtName,\n                  value.virtDescription\n                );\n                // TODO: post toast notification\n                history.push(\n                  resolvers.data.virtualizations.views.root({ virtualization })\n                );\n              };\n              return (\n                <Translation ns={['data', 'shared']}>\n                  {t => (\n                    <>\n                      <Breadcrumb>\n                        <Link to={resolvers.dashboard.root()}>\n                          {t('shared:Home')}\n                        </Link>\n                        <Link to={resolvers.data.root()}>\n                          {t('shared:DataVirtualizations')}\n                        </Link>\n                        <span>\n                          {t(\n                            'data:virtualization.createDataVirtualizationTitle'\n                          )}\n                        </span>\n                      </Breadcrumb>\n                      <Container>\n                        <h1>\n                          {t(\n                            'data:virtualization.createDataVirtualizationTitle'\n                          )}\n                        </h1>\n                        <AutoForm\n                          definition={formDefinition}\n                          initialValue={''}\n                          i18nRequiredProperty={t(\n                            'data:virtualization.requiredPropertyText'\n                          )}\n                          validate={validate}\n                          onSave={handleCreate}\n                        >\n                          {({ fields, handleSubmit }) => (\n                            <React.Fragment>\n                              {fields}\n                              <button\n                                type=\"button\"\n                                className=\"btn btn-primary\"\n                                onClick={handleSubmit}\n                              >\n                                {t('shared:Create')}\n                              </button>\n                            </React.Fragment>\n                          )}\n                        </AutoForm>\n                      </Container>\n                    </>\n                  )}\n                </Translation>\n              );\n            }}\n          </WithVirtualizationHelpers>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport { Breadcrumb, Container } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport resolvers from '../../resolvers';\nimport { HeaderView } from '../shared';\nimport { VirtualizationNavBar } from '../shared';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationMetricsPageRouteParams {\n  virtualizationId: string;\n  virtualization: RestDataService;\n}\n\n/**\n * @param virtualizationId - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationMetricsPageRouteParams#virtualizationId}.\n */\n\nexport interface IVirtualizationMetricsPageRouteState {\n  virtualization: RestDataService;\n}\n\nexport class VirtualizationMetricsPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<\n        IVirtualizationMetricsPageRouteParams,\n        IVirtualizationMetricsPageRouteState\n      >>\n        {({ virtualizationId }, { virtualization }, { history }) => {\n          return (\n            <Translation ns={['data', 'shared']}>\n              {t => (\n                <div>\n                  <Breadcrumb>\n                    <Link to={resolvers.dashboard.root()}>\n                      {t('shared:Home')}\n                    </Link>\n                    <Link to={resolvers.data.root()}>\n                      {t('shared:DataVirtualizations')}\n                    </Link>\n                    <span>\n                      {virtualizationId + ' '}\n                      {t('data:virtualization.metrics')}\n                    </span>\n                  </Breadcrumb>\n                  <HeaderView virtualizationId={virtualizationId} />\n                  <VirtualizationNavBar virtualization={virtualization} />\n                  <Container>\n                    <h3>Metrics are not yet implemented</h3>\n                  </Container>\n                </div>\n              )}\n            </Translation>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport { Breadcrumb, Container } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport resolvers from '../../resolvers';\nimport { HeaderView } from '../shared';\nimport { VirtualizationNavBar } from '../shared';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationRelationshipPageRouteParams {\n  virtualizationId: string;\n  virtualization: RestDataService;\n}\n\n/**\n * @param virtualizationId - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationRelationshipPageRouteState#virtualizationId}.\n */\n\nexport interface IVirtualizationRelationshipPageRouteState {\n  virtualization: RestDataService;\n}\n\nexport class VirtualizationRelationshipPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<\n        IVirtualizationRelationshipPageRouteParams,\n        IVirtualizationRelationshipPageRouteState\n      >>\n        {({ virtualizationId }, { virtualization }, { history }) => {\n          return (\n            <Translation ns={['data', 'shared']}>\n              {t => (\n                <div>\n                  <Breadcrumb>\n                    <Link to={resolvers.dashboard.root()}>\n                      {t('shared:Home')}\n                    </Link>\n                    <Link to={resolvers.data.root()}>\n                      {t('shared:DataVirtualizations')}\n                    </Link>\n                    <span>\n                      {virtualizationId + ' '}\n                      {t('data:virtualization.relationship')}\n                    </span>\n                  </Breadcrumb>\n                  <HeaderView virtualizationId={virtualizationId} />\n                  <VirtualizationNavBar virtualization={virtualization} />\n                  <Container>\n                    <h3>Relationships are not yet implemented</h3>\n                  </Container>\n                </div>\n              )}\n            </Translation>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { WithVirtualizationHelpers, WithVirtualizations } from '@syndesis/api';\nimport { RestDataService } from '@syndesis/models';\nimport {\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n  VirtualizationList,\n  VirtualizationListItem,\n  VirtualizationListSkeleton,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers, WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport resolvers from '../resolvers';\nimport { getPublishingDetails } from '../shared/VirtualizationUtils';\n\nfunction getFilteredAndSortedVirtualizations(\n  virtualizations: RestDataService[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSorted = virtualizations;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter(\n      (virtualization: RestDataService) =>\n        virtualization.keng__id.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort(\n    (thisVirtualization, thatVirtualization) => {\n      if (isSortAscending) {\n        return thisVirtualization.keng__id.localeCompare(\n          thatVirtualization.keng__id\n        );\n      }\n\n      // sort descending\n      return thatVirtualization.keng__id.localeCompare(\n        thisVirtualization.keng__id\n      );\n    }\n  );\n\n  return filteredAndSorted;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport function getVirtualizationsHref(baseUrl: string): string {\n  return `${baseUrl}`;\n}\n\nexport class VirtualizationsPage extends React.Component {\n  public filterUndefinedId(virtualization: RestDataService): boolean {\n    return virtualization.keng__id !== undefined;\n  }\n\n  public handleImportVirt(virtualizationName: string) {\n    // TODO: implement handleImportVirt\n    alert('Import virtualization ' + virtualizationName);\n  }\n\n  public handleExportVirtualization() {\n    // TODO: implement handleExportVirtualization\n    alert('Export virtualization ');\n  }\n\n  public render() {\n    return (\n      <WithVirtualizations>\n        {({ data, hasData, error, read }) => {\n          return (\n            // TODO need to retrieve real username here\n            <WithVirtualizationHelpers username=\"developer\">\n              {({\n                deleteVirtualization,\n                publishVirtualization,\n                unpublishServiceVdb,\n              }) => {\n                const handleDelete = async (virtualizationName: string) => {\n                  await deleteVirtualization(virtualizationName).then(read);\n                  // TODO: post toast notification\n                };\n                const handlePublish = async (virtualizationName: string) => {\n                  await publishVirtualization(virtualizationName);\n                  // TODO: post toast notification\n                };\n                const handleUnpublish = async (serviceVdbName: string) => {\n                  await unpublishServiceVdb(serviceVdbName);\n                  // TODO: post toast notification\n                };\n                return (\n                  <WithListViewToolbarHelpers\n                    defaultFilterType={filterByName}\n                    defaultSortType={sortByName}\n                  >\n                    {helpers => {\n                      const filteredAndSorted = getFilteredAndSortedVirtualizations(\n                        data,\n                        helpers.activeFilters,\n                        helpers.currentSortType,\n                        helpers.isSortAscending\n                      );\n\n                      return (\n                        <Translation ns={['data', 'shared']}>\n                          {t => (\n                            <VirtualizationList\n                              filterTypes={filterTypes}\n                              sortTypes={sortTypes}\n                              resultsCount={filteredAndSorted.length}\n                              {...helpers}\n                              i18nCreateDataVirtualization={t(\n                                'virtualization.createDataVirtualization'\n                              )}\n                              i18nCreateDataVirtualizationTip={t(\n                                'virtualization.createDataVirtualizationTip'\n                              )}\n                              i18nDescription={t(\n                                'virtualization.virtualizationsPageDescription'\n                              )}\n                              i18nEmptyStateInfo={t(\n                                'virtualization.emptyStateInfoMessage'\n                              )}\n                              i18nEmptyStateTitle={t(\n                                'virtualization.emptyStateTitle'\n                              )}\n                              i18nImport={t('shared:Import')}\n                              i18nImportTip={t(\n                                'virtualization.importVirtualizationTip'\n                              )}\n                              i18nLinkCreateVirtualization={t(\n                                'virtualization.createDataVirtualization'\n                              )}\n                              i18nName={t('shared:Name')}\n                              i18nNameFilterPlaceholder={t(\n                                'shared:nameFilterPlaceholder'\n                              )}\n                              i18nResultsCount={t('shared:resultsCount', {\n                                count: filteredAndSorted.length,\n                              })}\n                              i18nTitle={t(\n                                'virtualization.virtualizationsPageTitle'\n                              )}\n                              linkCreateHRef={resolvers.virtualizations.create()}\n                              onImport={this.handleImportVirt}\n                              hasListData={data.length > 0}\n                            >\n                              <WithLoader\n                                error={error}\n                                loading={!hasData}\n                                loaderChildren={\n                                  <VirtualizationListSkeleton\n                                    width={800}\n                                    style={{\n                                      backgroundColor: '#FFF',\n                                      marginTop: 30,\n                                    }}\n                                  />\n                                }\n                                errorChildren={<ApiError />}\n                              >\n                                {() =>\n                                  filteredAndSorted.map(\n                                    (\n                                      virtualization: RestDataService,\n                                      index: number\n                                    ) => {\n                                      const publishingDetails = getPublishingDetails(\n                                        virtualization\n                                      );\n                                      return (\n                                        <VirtualizationListItem\n                                          key={index}\n                                          detailsPageLink={resolvers.virtualizations.views.root(\n                                            { virtualization }\n                                          )}\n                                          virtualizationName={\n                                            virtualization.keng__id\n                                          }\n                                          virtualizationDescription={\n                                            virtualization.tko__description\n                                              ? virtualization.tko__description\n                                              : ''\n                                          }\n                                          serviceVdbName={\n                                            virtualization.serviceVdbName\n                                          }\n                                          i18nCancelText={t('shared:Cancel')}\n                                          i18nDelete={t('shared:Delete')}\n                                          i18nDeleteModalMessage={t(\n                                            'virtualization.deleteModalMessage',\n                                            { name: virtualization.keng__id }\n                                          )}\n                                          i18nDeleteModalTitle={t(\n                                            'virtualization.deleteModalTitle'\n                                          )}\n                                          i18nDraft={t('shared:Draft')}\n                                          i18nEdit={t('shared:Edit')}\n                                          i18nEditTip={t(\n                                            'virtualization.editDataVirtualizationTip'\n                                          )}\n                                          i18nError={t('shared:Error')}\n                                          i18nExport={t('shared:Export')}\n                                          i18nPublish={t('shared:Publish')}\n                                          i18nPublished={t(\n                                            'virtualization.publishedDataVirtualization'\n                                          )}\n                                          i18nUnpublish={t('shared:Unpublish')}\n                                          i18nUnpublishModalMessage={t(\n                                            'virtualization.unpublishModalMessage',\n                                            { name: virtualization.keng__id }\n                                          )}\n                                          i18nUnpublishModalTitle={t(\n                                            'virtualization.unpublishModalTitle'\n                                          )}\n                                          onDelete={handleDelete}\n                                          onExport={\n                                            this.handleExportVirtualization\n                                          }\n                                          onUnpublish={handleUnpublish}\n                                          onPublish={handlePublish}\n                                          currentPublishedState={\n                                            publishingDetails.state\n                                          }\n                                          publishingLogUrl={\n                                            publishingDetails.logUrl\n                                          }\n                                          publishingCurrentStep={\n                                            publishingDetails.stepNumber\n                                          }\n                                          publishingTotalSteps={\n                                            publishingDetails.stepTotal\n                                          }\n                                          publishingStepText={\n                                            publishingDetails.stepText\n                                          }\n                                          i18nPublishInProgress={t(\n                                            'virtualization.publishInProgress'\n                                          )}\n                                          i18nPublishLogUrlText={t(\n                                            'shared:viewLogs'\n                                          )}\n                                        />\n                                      );\n                                    }\n                                  )\n                                }\n                              </WithLoader>\n                            </VirtualizationList>\n                          )}\n                        </Translation>\n                      );\n                    }}\n                  </WithListViewToolbarHelpers>\n                );\n              }}\n            </WithVirtualizationHelpers>\n          );\n        }}\n      </WithVirtualizations>\n    );\n  }\n}\n","import { WithViewEditorStates } from '@syndesis/api';\nimport { RestDataService, ViewEditorState } from '@syndesis/models';\nimport { Breadcrumb } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport resolvers from '../../resolvers';\nimport {\n  HeaderView,\n  ViewSqlFormAndTable,\n  VirtualizationNavBar,\n} from '../shared/';\nimport { getPreviewVdbName } from '../shared/VirtualizationUtils';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationSqlClientPageRouteParams {\n  virtualizationId: string;\n  virtualization: RestDataService;\n}\n\n/**\n * NOTE that this SQL query page requires\n *  1) a list of View children of the Virtualization\n *    - This list will need to be retrieved (already in the VirtualizationViewsPage)\n *  2) Views list needs to populate the View selector DropdownButton's MenuItems\n *  3) If # Views == 0\n *    - Define Example SQL statement and show query results in EMPTY STATE mode\n *  4) if # Views > 0\n *    - Select the first view\n *    - Enter a simple SQL statement like:  \"SELECT * FROM view1\"\n */\n\n/**\n * @param virtualizationId - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationSqlClientPageRouteParams#virtualizationId}.\n */\n\nexport interface IVirtualizationSqlClientPageRouteState {\n  virtualization: RestDataService;\n}\n\nexport class VirtualizationSqlClientPage extends React.Component<\n  IVirtualizationSqlClientPageRouteState\n> {\n  public render() {\n    return (\n      <WithRouteData<\n        IVirtualizationSqlClientPageRouteParams,\n        IVirtualizationSqlClientPageRouteState\n      >>\n        {({ virtualizationId }, { virtualization }, { history }) => (\n          <Translation ns={['data', 'shared']}>\n            {t => (\n              <>\n                <Breadcrumb>\n                  <Link to={resolvers.dashboard.root()}>\n                    {t('shared:Home')}\n                  </Link>\n                  <Link to={resolvers.data.root()}>\n                    {t('shared:DataVirtualizations')}\n                  </Link>\n                  <span>\n                    {virtualizationId + ' '}\n                    {t('data:virtualization.sqlClient')}\n                  </span>\n                </Breadcrumb>\n                <HeaderView virtualizationId={virtualizationId} />\n                <VirtualizationNavBar virtualization={virtualization} />\n                <WithViewEditorStates\n                  idPattern={virtualization.serviceVdbName + '*'}\n                >\n                  {({ data, hasData, error }) => (\n                    <ViewSqlFormAndTable\n                      views={data.map(\n                        (editorState: ViewEditorState) =>\n                          editorState.viewDefinition\n                      )}\n                      targetVdb={getPreviewVdbName()}\n                    />\n                  )}\n                </WithViewEditorStates>\n              </>\n            )}\n          </Translation>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { WithViewEditorStates, WithVirtualizationHelpers } from '@syndesis/api';\nimport { RestDataService } from '@syndesis/models';\nimport { ViewDefinition, ViewEditorState } from '@syndesis/models';\nimport { Breadcrumb } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport { HeaderView } from '../shared';\nimport { VirtualizationNavBar } from '../shared';\n\nimport {\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n  ViewList,\n  ViewListItem,\n  ViewListSkeleton,\n} from '@syndesis/ui';\nimport {\n  WithListViewToolbarHelpers,\n  WithLoader,\n  WithRouteData,\n} from '@syndesis/utils';\nimport { Translation } from 'react-i18next';\nimport resolvers from '../../resolvers';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationViewsPageRouteParams {\n  virtualizationId: string;\n  virtualization: RestDataService;\n}\n\n/**\n * @param virtualizationId - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationViewsPageRouteParams#virtualizationId}.\n */\n\nexport interface IVirtualizationViewsPageRouteState {\n  virtualization: RestDataService;\n}\n\nfunction getFilteredAndSortedViewDefns(\n  viewDefinitions: ViewDefinition[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSorted = viewDefinitions;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter((view: ViewDefinition) =>\n      view.viewName.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort((thisView, thatView) => {\n    if (isSortAscending) {\n      return thisView.viewName.localeCompare(thatView.viewName);\n    }\n\n    // sort descending\n    return thatView.viewName.localeCompare(thisView.viewName);\n  });\n\n  return filteredAndSorted;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport class VirtualizationViewsPage extends React.Component<\n  IVirtualizationViewsPageRouteParams,\n  IVirtualizationViewsPageRouteState\n> {\n  public filterUndefinedId(view: ViewDefinition): boolean {\n    return view.viewName !== undefined;\n  }\n\n  public handleImportView(viewName: string) {\n    // TODO: implement handleImportView\n    alert('Import view ' + viewName);\n  }\n\n  public handleEditView() {\n    // TODO: implement handleEdit\n    alert('Edit view ');\n  }\n\n  public render() {\n    return (\n      <WithRouteData<\n        IVirtualizationViewsPageRouteParams,\n        IVirtualizationViewsPageRouteState\n      >>\n        {({ virtualizationId }, { virtualization }, { history }) => {\n          return (\n            <Translation ns={['data', 'shared']}>\n              {t => (\n                <>\n                  <Breadcrumb>\n                    <Link to={resolvers.dashboard.root()}>\n                      {t('shared:Home')}\n                    </Link>\n                    <Link to={resolvers.data.root()}>\n                      {t('shared:DataVirtualizations')}\n                    </Link>\n                    <span>\n                      {virtualizationId + ' '}\n                      {t('data:virtualization.views')}\n                    </span>\n                  </Breadcrumb>\n                  <HeaderView virtualizationId={virtualizationId} />\n                  <WithViewEditorStates\n                    idPattern={virtualization.serviceVdbName + '*'}\n                  >\n                    {({ data, hasData, error, read }) => {\n                      return (\n                        // TODO need to retrieve real username here\n                        <WithVirtualizationHelpers username=\"developer\">\n                          {({ deleteView }) => {\n                            const handleDeleteView = async (\n                              viewName: string\n                            ) => {\n                              await deleteView(virtualization, viewName).then(\n                                read\n                              );\n                              // TODO: post toast notification\n                            };\n                            return (\n                              <WithListViewToolbarHelpers\n                                defaultFilterType={filterByName}\n                                defaultSortType={sortByName}\n                              >\n                                {helpers => {\n                                  const viewDefns = data.map(\n                                    (editorState: ViewEditorState) =>\n                                      editorState.viewDefinition\n                                  );\n                                  const filteredAndSorted = getFilteredAndSortedViewDefns(\n                                    viewDefns,\n                                    helpers.activeFilters,\n                                    helpers.currentSortType,\n                                    helpers.isSortAscending\n                                  );\n                                  return (\n                                    <>\n                                      <VirtualizationNavBar\n                                        virtualization={virtualization}\n                                      />\n                                      <ViewList\n                                        filterTypes={filterTypes}\n                                        sortTypes={sortTypes}\n                                        {...this.state}\n                                        resultsCount={filteredAndSorted.length}\n                                        {...helpers}\n                                        i18nDescription={t(\n                                          'data:virtualization.viewsPageDescription'\n                                        )}\n                                        i18nEmptyStateInfo={t(\n                                          'data:virtualization.viewEmptyStateInfo'\n                                        )}\n                                        i18nEmptyStateTitle={t(\n                                          'data:virtualization.viewEmptyStateTitle'\n                                        )}\n                                        i18nImportViews={t(\n                                          'data:virtualization.importDataSource'\n                                        )}\n                                        i18nImportViewsTip={t(\n                                          'data:virtualization.importDataSourceTip'\n                                        )}\n                                        i18nCreateView={t(\n                                          'data:virtualization.createView'\n                                        )}\n                                        i18nCreateViewTip={t(\n                                          'data:virtualization.createViewTip'\n                                        )}\n                                        i18nName={t('shared:Name')}\n                                        i18nNameFilterPlaceholder={t(\n                                          'shared:nameFilterPlaceholder'\n                                        )}\n                                        i18nResultsCount={t(\n                                          'shared:resultsCount',\n                                          {\n                                            count: filteredAndSorted.length,\n                                          }\n                                        )}\n                                        // TODO - Point to views.create when available\n                                        linkCreateViewHRef={resolvers.data.virtualizations.create()}\n                                        linkImportViewsHRef={resolvers.data.virtualizations.views.importSource.selectConnection(\n                                          { virtualization }\n                                        )}\n                                        onImportView={this.handleImportView}\n                                        hasListData={data.length > 0}\n                                      />\n                                      <WithLoader\n                                        error={error}\n                                        loading={!hasData}\n                                        loaderChildren={\n                                          <ViewListSkeleton\n                                            width={800}\n                                            style={{\n                                              backgroundColor: '#FFF',\n                                              marginTop: 30,\n                                            }}\n                                          />\n                                        }\n                                        errorChildren={<ApiError />}\n                                      >\n                                        {() =>\n                                          filteredAndSorted\n                                            .filter((view: ViewDefinition) =>\n                                              this.filterUndefinedId(view)\n                                            )\n                                            .map(\n                                              (\n                                                view: ViewDefinition,\n                                                index: number\n                                              ) => (\n                                                <ViewListItem\n                                                  key={index}\n                                                  viewName={view.viewName}\n                                                  viewDescription={\n                                                    view.keng__description\n                                                  }\n                                                  i18nCancelText={t(\n                                                    'shared:Cancel'\n                                                  )}\n                                                  i18nDelete={t(\n                                                    'shared:Delete'\n                                                  )}\n                                                  i18nDeleteModalMessage={t(\n                                                    'virtualization.deleteViewModalMessage',\n                                                    {\n                                                      name: view.viewName,\n                                                    }\n                                                  )}\n                                                  i18nDeleteModalTitle={t(\n                                                    'virtualization.deleteModalTitle'\n                                                  )}\n                                                  i18nEdit={t('shared:Edit')}\n                                                  i18nEditTip={t(\n                                                    'view.editViewTip'\n                                                  )}\n                                                  onDelete={handleDeleteView}\n                                                  onEdit={this.handleEditView}\n                                                />\n                                              )\n                                            )\n                                        }\n                                      </WithLoader>\n                                    </>\n                                  );\n                                }}\n                              </WithListViewToolbarHelpers>\n                            );\n                          }}\n                        </WithVirtualizationHelpers>\n                      );\n                    }}\n                  </WithViewEditorStates>\n                </>\n              )}\n            </Translation>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\nimport CreateViewsApp from './CreateViewsApp';\nimport {\n  VirtualizationCreatePage,\n  VirtualizationMetricsPage,\n  VirtualizationRelationshipPage,\n  VirtualizationsPage,\n  VirtualizationSqlClientPage,\n  VirtualizationViewsPage,\n} from './pages';\nimport routes from './routes';\n\nexport class DataModule extends React.Component {\n  public render() {\n    return (\n      <Switch>\n        <Redirect\n          path={routes.root}\n          exact={true}\n          to={routes.virtualizations.list}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.views.importSource.root}\n          component={CreateViewsApp}\n        />\n        <Route\n          path={routes.virtualizations.create}\n          exact={true}\n          component={VirtualizationCreatePage}\n        />\n        <Route\n          path={routes.virtualizations.list}\n          exact={true}\n          component={VirtualizationsPage}\n        />\n        <Redirect\n          path={routes.virtualizations.virtualization.root}\n          exact={true}\n          to={routes.virtualizations.virtualization.views.root}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.views.root}\n          exact={true}\n          component={VirtualizationViewsPage}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.relationship}\n          exact={true}\n          component={VirtualizationRelationshipPage}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.sqlClient}\n          exact={true}\n          component={VirtualizationSqlClientPage}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.metrics}\n          exact={true}\n          component={VirtualizationMetricsPage}\n        />\n      </Switch>\n    );\n  }\n}\n","import { getSteps } from '@syndesis/api';\nimport { Step } from '@syndesis/models';\nimport { Container, IntegrationEditorLayout } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { PageTitle } from '../../../../shared';\nimport { IntegrationEditorStepAdder } from '../IntegrationEditorStepAdder';\nimport { IBaseRouteParams, IBaseRouteState } from './interfaces';\n\nexport interface IAddStepPageProps {\n  cancelHref: (p: IBaseRouteParams, s: IBaseRouteState) => H.LocationDescriptor;\n  getEditAddStepHref: (\n    position: number,\n    p: IBaseRouteParams,\n    s: IBaseRouteState\n  ) => H.LocationDescriptor;\n  getEditConfigureStepHrefCallback: (\n    stepIdx: number,\n    step: Step,\n    p: IBaseRouteParams,\n    s: IBaseRouteState\n  ) => H.LocationDescriptor;\n  header: React.ReactNode;\n  nextHref: (p: IBaseRouteParams, s: IBaseRouteState) => H.LocationDescriptor;\n}\n\n/**\n * This page shows the steps of an existing integration.\n *\n * This component expects a [state]{@link IBaseRouteState} to be properly set in\n * the route object.\n *\n * **Warning:** this component will throw an exception if the route state is\n * undefined.\n *\n * @todo make this page shareable by making the [integration]{@link IBaseRouteState#integration}\n * optinal and adding a WithIntegration component to retrieve the integration\n * from the backend\n */\nexport class AddStepPage extends React.Component<IAddStepPageProps> {\n  public render() {\n    return (\n      <WithRouteData<IBaseRouteParams, IBaseRouteState>>\n        {({ flowId }, { integration }) => (\n          <IntegrationEditorLayout\n            header={this.props.header}\n            content={\n              <>\n                <PageTitle title={'Save or add step'} />\n                <Container>\n                  <h1>Add to Integration</h1>\n                  <p>\n                    You can continue adding steps and connections to your\n                    integration as well.\n                  </p>\n                  <IntegrationEditorStepAdder\n                    steps={getSteps(integration, flowId)}\n                    addStepHref={position =>\n                      this.props.getEditAddStepHref(\n                        position,\n                        { flowId },\n                        { integration }\n                      )\n                    }\n                    configureStepHref={(stepIdx: number, step: Step) =>\n                      this.props.getEditConfigureStepHrefCallback(\n                        stepIdx,\n                        step,\n                        { flowId },\n                        { integration }\n                      )\n                    }\n                  />\n                </Container>\n              </>\n            }\n            cancelHref={this.props.cancelHref({ flowId }, { integration })}\n            nextHref={this.props.nextHref({ flowId }, { integration })}\n          />\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { Integration } from '@syndesis/models';\nimport { Container, TabBar, TabBarItem } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport resolvers from '../resolvers';\n\n/**\n * @param integration - the integration being displayed. If it\n * exists, it must equal to the [integrationId]{@link IIntegrationDetailNavBarProps#integration}.\n */\nexport interface IIntegrationDetailNavBarProps {\n  integration: Integration;\n}\n\n/**\n * A component that displays a nav bar with 3 items, only showing 1 for now:\n *\n * 1. a link to the page that displays the integration with the Details tab enabled,\n * 2. a link to the page that displays the integration with the Activity tab enabled, and\n * 3. a link to the page that displays the integration with the Metrics tab enabled.\n *\n *\n * @see [DetailsPage]{@link ../pages/detail/DetailsPage}\n * @see [ActivityPage]{@link ../pages/detail/ActivityPage}\n * @see [MetricsPage]{@link ../pages/detail/MetricsPage}\n */\nexport class IntegrationDetailNavBar extends React.Component<\n  IIntegrationDetailNavBarProps\n> {\n  public render() {\n    const integration = this.props.integration;\n    return (\n      <Translation ns={['integration', 'shared']}>\n        {t => (\n          <Container\n            style={{\n              background: '#fff',\n            }}\n          >\n            <TabBar>\n              <TabBarItem\n                label={'Details'}\n                to={resolvers.integration.details({\n                  integrationId: integration.id!,\n                })}\n              />\n              <TabBarItem\n                label={'Activity'}\n                to={resolvers.integration.activity({\n                  integration,\n                })}\n              />\n              <TabBarItem\n                label={'Metrics'}\n                to={resolvers.integration.metrics({\n                  integration,\n                })}\n              />\n            </TabBar>\n          </Container>\n        )}\n      </Translation>\n    );\n  }\n}\n","import {\n  getActionById,\n  getActionDescriptor,\n  getActionStep,\n  getActionStepDefinition,\n  getActionSteps,\n  getConnectionConnector,\n  getConnectorActions,\n} from '@syndesis/api';\nimport { AutoForm } from '@syndesis/auto-form';\nimport { Action, ConnectionOverview } from '@syndesis/models';\nimport {\n  IntegrationEditorForm,\n  IntegrationEditorNothingToConfigure,\n} from '@syndesis/ui';\nimport { toFormDefinition } from '@syndesis/utils';\nimport * as React from 'react';\n\nexport interface IWithConfigurationFormChildrenProps {\n  /**\n   * the form (embedded in the right UI elements)\n   */\n  form: JSX.Element;\n  /**\n   * true if the form contains valid values. Can be used to enable/disable the\n   * submit button.\n   */\n  isValid: boolean;\n  /**\n   * true if the form is being submitted. Can be used to enable/disable the\n   * submit button.\n   */\n  isSubmitting: boolean;\n  /**\n   * the callback to fire to submit the form.\n   */\n  submitForm(): any;\n}\n\nexport interface IOnUpdatedIntegrationProps {\n  /**\n   * the action object that has been configured.\n   */\n  action: Action;\n  /**\n   * true if the configuration is not complete because there are other steps,\n   * false otherwise.\n   * If true the form should be re-rendered with an incremented\n   * [configurationStep]{@link IWithConfigurationFormProps#configurationStep}.\n   */\n  moreConfigurationSteps: boolean;\n  /**\n   * the configured values.\n   */\n  values: { [key: string]: string } | null;\n}\n\nexport interface IWithConfigurationFormProps {\n  /**\n   * the connection object that contains the action with the provided\n   * [actionId]{@link IWithConfigurationFormProps#actionId}. Used to retrieve\n   * the form definition.\n   */\n  connection: ConnectionOverview;\n  /**\n   * the ID of the action that needs to be configured.\n   */\n  actionId: string;\n  /**\n   * for actions whose configuration must be performed in multiple steps,\n   * indicates the current step.\n   */\n  configurationStep: number;\n  /**\n   * the values to assign to the form once rendered. These can come either from\n   * an existing integration or from the [onUpdatedIntegration]{@link IWithConfigurationFormProps#onUpdatedIntegration}\n   * callback.\n   */\n  initialValue?: { [key: string]: string };\n\n  /**\n   * the render prop that will receive the ready-to-be-rendered form and some\n   * helpers.\n   *\n   * @see [form]{@link IWithConfigurationFormChildrenProps#form}\n   * @see [isValid]{@link IWithConfigurationFormChildrenProps#isValid}\n   * @see [isSubmitting]{@link IWithConfigurationFormChildrenProps#isSubmitting}\n   * @see [onSubmit]{@link IWithConfigurationFormChildrenProps#submitForm}\n   */\n  children(props: IWithConfigurationFormChildrenProps): any;\n\n  /**\n   * the callback that is fired after the form submit with valid values.\n   *\n   * @see [action]{@link IOnUpdatedIntegrationProps#action}\n   * @see [moreConfigurationSteps]{@link IOnUpdatedIntegrationProps#moreConfigurationSteps}\n   * @see [values]{@link IOnUpdatedIntegrationProps#values}\n   */\n  onUpdatedIntegration(props: IOnUpdatedIntegrationProps): Promise<void>;\n}\n\n/**\n * A component to generate a configuration form for a given action and values.\n *\n * @see [action]{@link IWithConfigurationFormProps#action}\n * @see [moreConfigurationSteps]{@link IWithConfigurationFormProps#moreConfigurationSteps}\n * @see [values]{@link IWithConfigurationFormProps#values}\n */\nexport class WithConfigurationForm extends React.Component<\n  IWithConfigurationFormProps\n> {\n  public static defaultProps = {\n    initialValue: {},\n  };\n\n  constructor(props: IWithConfigurationFormProps) {\n    super(props);\n  }\n\n  public renderConfigurationForm(action: Action): JSX.Element | null {\n    try {\n      const descriptor = getActionDescriptor(action);\n      const steps = getActionSteps(descriptor);\n      const step = getActionStep(steps, this.props.configurationStep);\n      const definition = getActionStepDefinition(step);\n      const moreConfigurationSteps =\n        this.props.configurationStep < steps.length - 1;\n      const onSave = async (\n        values: { [key: string]: string },\n        actions: any\n      ): Promise<void> => {\n        await this.props.onUpdatedIntegration({\n          action,\n          moreConfigurationSteps,\n          values,\n        });\n        actions.setSubmitting(false);\n      };\n      return (\n        <AutoForm<{ [key: string]: string }>\n          i18nRequiredProperty={'* Required field'}\n          definition={toFormDefinition(definition)}\n          initialValue={this.props.initialValue!}\n          onSave={onSave}\n          key={this.props.configurationStep}\n        >\n          {({ fields, handleSubmit, isSubmitting, isValid, submitForm }) =>\n            this.props.children({\n              form: (\n                <IntegrationEditorForm\n                  i18nTitle={'Configure action'}\n                  i18nSubtitle={\n                    'Fill in the required information for the selected action.'\n                  }\n                  i18nFormTitle={`${action.name} - ${action.description}`}\n                  handleSubmit={handleSubmit}\n                >\n                  {fields}\n                </IntegrationEditorForm>\n              ),\n              isSubmitting,\n              isValid,\n              submitForm,\n            })\n          }\n        </AutoForm>\n      );\n    } catch (e) {\n      return null;\n    }\n  }\n\n  public renderNoPropertiesInfo(action: Action) {\n    const submitForm = () => {\n      this.props.onUpdatedIntegration({\n        action,\n        moreConfigurationSteps: false,\n        values: null,\n      });\n    };\n    return this.props.children({\n      form: (\n        <IntegrationEditorNothingToConfigure\n          i18nTitle={'Configure action'}\n          i18nSubtitle={\n            'Fill in the required information for the selected action.'\n          }\n          i18nAlert={'There are no properties to configure for this action.'}\n        />\n      ),\n      isSubmitting: false,\n      isValid: true,\n      submitForm,\n    });\n  }\n\n  public render() {\n    const action = getActionById(\n      getConnectorActions(getConnectionConnector(this.props.connection)),\n      this.props.actionId\n    );\n    return (\n      this.renderConfigurationForm(action) ||\n      this.renderNoPropertiesInfo(action)\n    );\n  }\n}\n","import { getSteps, WithIntegrationHelpers } from '@syndesis/api';\nimport { Connection, Integration, Step } from '@syndesis/models';\nimport { IntegrationEditorLayout } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { PageTitle } from '../../../../../shared';\nimport {\n  IOnUpdatedIntegrationProps,\n  WithConfigurationForm,\n} from '../../../shared';\nimport {\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState,\n} from '../interfaces';\n\nexport interface IConfigureActionPageProps {\n  backHref: (\n    p: IConfigureActionRouteParams,\n    s: IConfigureActionRouteState\n  ) => H.LocationDescriptor;\n  cancelHref: (\n    p: IConfigureActionRouteParams,\n    s: IConfigureActionRouteState\n  ) => H.LocationDescriptor;\n  header: React.ReactNode;\n  mode: 'adding' | 'editing';\n  nextStepHref: (\n    p: IConfigureActionRouteParams,\n    s: IConfigureActionRouteState\n  ) => H.LocationDescriptorObject;\n  sidebar: (props: {\n    connection: Connection;\n    steps: Step[];\n    activeIndex: number;\n  }) => React.ReactNode;\n  postConfigureHref: (\n    integration: Integration,\n    p: IConfigureActionRouteParams,\n    s: IConfigureActionRouteState\n  ) => H.LocationDescriptorObject;\n}\n\n/**\n * This page shows the configuration form for a given action.\n *\n * Submitting the form will update an *existing* integration step in\n * the [position specified in the params]{@link IConfigureActionRouteParams#position}\n * of the first flow, set up as specified by the form values.\n *\n * This component expects some [url params]{@link IConfigureActionRouteParams}\n * and [state]{@link IConfigureActionRouteState} to be properly set in\n * the route object.\n *\n * **Warning:** this component will throw an exception if the route state is\n * undefined.\n */\nexport class ConfigureActionPage extends React.Component<\n  IConfigureActionPageProps\n> {\n  public render() {\n    return (\n      <WithIntegrationHelpers>\n        {({ addConnection, updateConnection }) => (\n          <WithRouteData<\n            IConfigureActionRouteParams,\n            IConfigureActionRouteState\n          >>\n            {(\n              { actionId, flowId, step = '0', position },\n              {\n                configuredProperties,\n                connection,\n                integration,\n                updatedIntegration,\n              },\n              { history }\n            ) => {\n              const stepAsNumber = parseInt(step, 10);\n              const positionAsNumber = parseInt(position, 10);\n              const onUpdatedIntegration = async ({\n                action,\n                moreConfigurationSteps,\n                values,\n              }: IOnUpdatedIntegrationProps) => {\n                updatedIntegration = await (this.props.mode === 'adding' &&\n                  stepAsNumber === 0\n                  ? addConnection\n                  : updateConnection)(\n                  updatedIntegration || integration,\n                  connection,\n                  action,\n                  flowId,\n                  positionAsNumber,\n                  values\n                );\n                if (moreConfigurationSteps) {\n                  history.push(\n                    this.props.nextStepHref(\n                      {\n                        actionId,\n                        flowId,\n                        position,\n                        step: `${stepAsNumber + 1}`,\n                      },\n                      {\n                        configuredProperties,\n                        connection,\n                        integration,\n                        updatedIntegration,\n                      }\n                    )\n                  );\n                } else {\n                  history.push(\n                    this.props.postConfigureHref(\n                      updatedIntegration,\n                      { actionId, flowId, step, position },\n                      {\n                        configuredProperties,\n                        connection,\n                        integration,\n                        updatedIntegration,\n                      }\n                    )\n                  );\n                }\n              };\n\n              return (\n                <WithConfigurationForm\n                  connection={connection}\n                  actionId={actionId}\n                  configurationStep={stepAsNumber}\n                  initialValue={configuredProperties}\n                  onUpdatedIntegration={onUpdatedIntegration}\n                >\n                  {({ form, submitForm, isSubmitting }) => (\n                    <>\n                      <PageTitle title={'Configure the action'} />\n                      <IntegrationEditorLayout\n                        header={this.props.header}\n                        sidebar={this.props.sidebar({\n                          activeIndex: positionAsNumber,\n                          connection,\n                          steps: getSteps(\n                            updatedIntegration || integration,\n                            flowId\n                          ),\n                        })}\n                        content={form}\n                        backHref={this.props.backHref(\n                          { actionId, flowId, step, position },\n                          {\n                            configuredProperties,\n                            connection,\n                            integration,\n                            updatedIntegration,\n                          }\n                        )}\n                        cancelHref={this.props.cancelHref(\n                          { actionId, flowId, step, position },\n                          {\n                            configuredProperties,\n                            connection,\n                            integration,\n                            updatedIntegration,\n                          }\n                        )}\n                        onNext={submitForm}\n                        isNextLoading={isSubmitting}\n                      />\n                    </>\n                  )}\n                </WithConfigurationForm>\n              );\n            }}\n          </WithRouteData>\n        )}\n      </WithIntegrationHelpers>\n    );\n  }\n}\n","import { getSteps, WithConnection } from '@syndesis/api';\nimport { IConnectionWithIconFile, Step } from '@syndesis/models';\nimport {\n  ButtonLink,\n  IntegrationEditorActionsListItem,\n  IntegrationEditorChooseAction,\n  IntegrationEditorLayout,\n  Loader,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouteData } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { ApiError, PageTitle } from '../../../../../shared';\nimport {\n  ISelectActionRouteParams,\n  ISelectActionRouteState,\n} from '../interfaces';\n\nexport interface ISelectActionPageProps {\n  backHref?: (\n    p: ISelectActionRouteParams,\n    s: ISelectActionRouteState\n  ) => H.LocationDescriptor;\n  cancelHref: (\n    p: ISelectActionRouteParams,\n    s: ISelectActionRouteState\n  ) => H.LocationDescriptor;\n  header: React.ReactNode;\n  sidebar: (props: {\n    steps: Step[];\n    activeIndex: number;\n    connection: IConnectionWithIconFile;\n  }) => React.ReactNode;\n  selectHref: (\n    actionId: string,\n    p: ISelectActionRouteParams,\n    s: ISelectActionRouteState\n  ) => H.LocationDescriptor;\n}\n\n/**\n * This page shows the list of actions of a connection containing either a\n * **to** or **from pattern, depending on the specified [position]{@link ISelectActionRouteParams#position}.\n *\n * This component expects some [params]{@link ISelectActionRouteParams} and\n * [state]{@link ISelectActionRouteState} to be properly set in the route\n * object.\n *\n * **Warning:** this component will throw an exception if the route state is\n * undefined.\n */\nexport class SelectActionPage extends React.Component<ISelectActionPageProps> {\n  public render() {\n    return (\n      <WithRouteData<ISelectActionRouteParams, ISelectActionRouteState>>\n        {({ connectionId, flowId, position }, { connection, integration }) => {\n          const positionAsNumber = parseInt(position, 10);\n          return (\n            <WithConnection id={connectionId} initialValue={connection}>\n              {({ data, hasData, error }) => (\n                <WithLoader\n                  error={error}\n                  loading={!hasData}\n                  loaderChildren={<Loader />}\n                  errorChildren={<ApiError />}\n                >\n                  {() => (\n                    <>\n                      <PageTitle title={'Choose an action'} />\n                      <IntegrationEditorLayout\n                        header={this.props.header}\n                        sidebar={this.props.sidebar({\n                          activeIndex: positionAsNumber,\n                          connection: connection as IConnectionWithIconFile,\n                          steps: getSteps(integration, flowId),\n                        })}\n                        content={\n                          <IntegrationEditorChooseAction\n                            i18nTitle={`${connection.name} - Choose Action`}\n                            i18nSubtitle={\n                              'Choose an action for the selected connectionName.'\n                            }\n                          >\n                            {(positionAsNumber > 0\n                              ? data.actionsWithTo\n                              : data.actionsWithFrom\n                            )\n                              .sort((a, b) => a.name.localeCompare(b.name))\n                              .map((a, idx) => (\n                                <IntegrationEditorActionsListItem\n                                  key={idx}\n                                  integrationName={a.name}\n                                  integrationDescription={\n                                    a.description || 'No description available.'\n                                  }\n                                  actions={\n                                    <ButtonLink\n                                      href={this.props.selectHref(\n                                        a.id!,\n                                        { connectionId, flowId, position },\n                                        { connection, integration }\n                                      )}\n                                    >\n                                      Select\n                                    </ButtonLink>\n                                  }\n                                />\n                              ))}\n                          </IntegrationEditorChooseAction>\n                        }\n                        backHref={\n                          this.props.backHref\n                            ? this.props.backHref(\n                                { connectionId, flowId, position },\n                                { connection, integration }\n                              )\n                            : undefined\n                        }\n                        cancelHref={this.props.cancelHref(\n                          { connectionId, flowId, position },\n                          { connection, integration }\n                        )}\n                      />\n                    </>\n                  )}\n                </WithLoader>\n              )}\n            </WithConnection>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { setIntegrationName, WithIntegrationHelpers } from '@syndesis/api';\nimport { AutoForm, IFormDefinition } from '@syndesis/auto-form';\nimport { Integration } from '@syndesis/models';\nimport { IntegrationEditorForm, IntegrationEditorLayout } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { PageTitle } from '../../../../shared';\nimport {\n  ISaveIntegrationForm,\n  ISaveIntegrationRouteParams,\n  ISaveIntegrationRouteState,\n} from './interfaces';\n\nexport interface ISaveIntegrationPageProps {\n  backHref: (\n    p: ISaveIntegrationRouteParams,\n    s: ISaveIntegrationRouteState\n  ) => H.LocationDescriptor;\n  cancelHref: (\n    p: ISaveIntegrationRouteParams,\n    s: ISaveIntegrationRouteState\n  ) => H.LocationDescriptor;\n  header: React.ReactNode;\n  postSaveHref: (i: Integration) => H.LocationDescriptorObject;\n}\n\n/**\n * This page asks for the details of the integration, and saves it.\n *\n * This component expects a [state]{@link ISaveIntegrationRouteState} to be\n * properly set in the route object.\n *\n * **Warning:** this component will throw an exception if the route state is\n * undefined.\n *\n * @todo toast notifications.\n * @todo redirect to the integration detail page once available.\n */\nexport class SaveIntegrationPage extends React.Component<\n  ISaveIntegrationPageProps\n> {\n  public render() {\n    return (\n      <WithRouteData<ISaveIntegrationRouteParams, ISaveIntegrationRouteState>>\n        {({ flowId }, { integration }, { history }) => (\n          <WithIntegrationHelpers>\n            {({ saveIntegration }) => {\n              const onSave = async (\n                { name, description }: ISaveIntegrationForm,\n                actions: any\n              ) => {\n                const updatedIntegration = setIntegrationName(\n                  integration,\n                  name\n                );\n                // TODO: set the description\n                await saveIntegration(updatedIntegration);\n                actions.setSubmitting(false);\n                // TODO: toast notification\n                history.push(this.props.postSaveHref(updatedIntegration));\n              };\n              const definition: IFormDefinition = {\n                name: {\n                  defaultValue: '',\n                  displayName: 'Name',\n                  order: 0,\n                  required: true,\n                  type: 'string',\n                },\n                // tslint:disable-next-line\n                description: {\n                  defaultValue: '',\n                  displayName: 'Description',\n                  order: 1,\n                  type: 'textarea',\n                },\n              };\n              return (\n                <AutoForm<ISaveIntegrationForm>\n                  i18nRequiredProperty={'* Required field'}\n                  definition={definition}\n                  initialValue={{\n                    description: integration.description,\n                    name: integration.name,\n                  }}\n                  onSave={onSave}\n                >\n                  {({\n                    fields,\n                    dirty,\n                    handleSubmit,\n                    isSubmitting,\n                    isValid,\n                    submitForm,\n                  }) => (\n                    <IntegrationEditorLayout\n                      header={this.props.header}\n                      content={\n                        <>\n                          <PageTitle title={'Save the integration'} />\n                          <IntegrationEditorForm\n                            i18nTitle={'Save the integration'}\n                            i18nSubtitle={\n                              'Update details about this integration.'\n                            }\n                            handleSubmit={handleSubmit}\n                          >\n                            {fields}\n                          </IntegrationEditorForm>\n                        </>\n                      }\n                      cancelHref={this.props.cancelHref(\n                        { flowId },\n                        { integration }\n                      )}\n                      backHref={this.props.backHref(\n                        { flowId },\n                        { integration }\n                      )}\n                      onNext={submitForm}\n                      isNextDisabled={dirty && !isValid}\n                      isNextLoading={isSubmitting}\n                      isLastStep={true}\n                    />\n                  )}\n                </AutoForm>\n              );\n            }}\n          </WithIntegrationHelpers>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import {\n  getConnectionIcon,\n  getEmptyIntegration,\n  getExtensionIcon,\n  getStepKindIcon,\n  getSteps,\n  visibleStepsByPosition,\n  WithConnections,\n  WithExtensions,\n  WithSteps,\n} from '@syndesis/api';\nimport {\n  ConnectionOverview,\n  Extension,\n  Step,\n  StepKind,\n} from '@syndesis/models';\nimport {\n  ButtonLink,\n  IntegrationEditorChooseConnection,\n  IntegrationEditorConnectionsListItem,\n  IntegrationEditorLayout,\n  IntegrationsListSkeleton,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouteData } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { ApiError, PageTitle } from '../../../../shared';\nimport {\n  ISelectConnectionRouteParams,\n  ISelectConnectionRouteState,\n} from './interfaces';\n\nexport interface IUIStep extends StepKind {\n  icon: string;\n}\n\nexport function toStepKindCollection(\n  connections: ConnectionOverview[],\n  extensions: Extension[],\n  steps: StepKind[]\n): IUIStep[] {\n  return [\n    ...connections.map(c => ({\n      ...c,\n      description: c.description || '',\n      icon: getConnectionIcon(process.env.PUBLIC_URL, c),\n      properties: undefined,\n    })),\n    ...extensions.reduce(\n      (extentionsByAction, extension) => {\n        extension.actions.forEach(a => {\n          let properties = {};\n          if (\n            a.descriptor &&\n            Array.isArray(a.descriptor.propertyDefinitionSteps)\n          ) {\n            properties = a.descriptor.propertyDefinitionSteps.reduce(\n              (acc, current) => {\n                return { ...acc, ...current.properties };\n              },\n              {}\n            );\n          }\n          if (a.actionType === 'step') {\n            extentionsByAction.push({\n              action: a,\n              configuredProperties: undefined,\n              description: a.description || '',\n              extension,\n              icon: `${process.env.PUBLIC_URL}${getExtensionIcon(extension)}`,\n              name: a.name,\n              properties,\n              stepKind: 'extension',\n            });\n          }\n        });\n        return extentionsByAction;\n      },\n      [] as IUIStep[]\n    ),\n    ...steps.map(s => ({\n      ...s,\n      icon: `${process.env.PUBLIC_URL}${getStepKindIcon(s.stepKind)}`,\n    })),\n  ].sort((a, b) => a.name.localeCompare(b.name));\n}\n\nexport const getStepKind = (stepOrConnection: ConnectionOverview | Step) => {\n  if ((stepOrConnection as ConnectionOverview).connectorId === 'api-provider') {\n    return 'api-provider';\n  }\n  if ((stepOrConnection as Step).stepKind) {\n    // not a connection\n  }\n  return 'endpoint';\n};\n\nexport interface ISelectConnectionPageProps {\n  backHref?: (\n    p: ISelectConnectionRouteParams,\n    s: ISelectConnectionRouteState\n  ) => H.LocationDescriptor;\n  cancelHref: (\n    p: ISelectConnectionRouteParams,\n    s: ISelectConnectionRouteState\n  ) => H.LocationDescriptor;\n  header: React.ReactNode;\n  apiProviderHref: (\n    p: ISelectConnectionRouteParams,\n    s: ISelectConnectionRouteState\n  ) => H.LocationDescriptorObject;\n  connectionHref: (\n    connection: ConnectionOverview,\n    p: ISelectConnectionRouteParams,\n    s: ISelectConnectionRouteState\n  ) => H.LocationDescriptorObject;\n  sidebar: (props: { steps: Step[]; activeIndex: number }) => React.ReactNode;\n}\n\n/**\n * This page shows the list of connections containing actions with a **to**\n * pattern.\n *\n * This component expects some [params]{@link ISelectConnectionRouteParams} and\n * [state]{@link ISelectConnectionRouteState} to be properly set in the route\n * object.\n *\n * **Warning:** this component will throw an exception if the route state is\n * undefined.\n */\nexport class SelectConnectionPage extends React.Component<\n  ISelectConnectionPageProps\n> {\n  public render() {\n    return (\n      <WithRouteData<ISelectConnectionRouteParams, ISelectConnectionRouteState>>\n        {(params, state, { history }) => {\n          const { flowId, position } = params;\n          const { integration = getEmptyIntegration() } = state;\n          const positionAsNumber = parseInt(position, 10) || 0;\n          const onStepClick = (connectionOrStep: ConnectionOverview | Step) => {\n            const stepKind = getStepKind(connectionOrStep);\n            switch (stepKind) {\n              case 'api-provider':\n                history.push(this.props.apiProviderHref(params, state));\n                break;\n              case 'endpoint':\n                history.push(\n                  this.props.connectionHref(\n                    connectionOrStep as ConnectionOverview,\n                    {\n                      ...params,\n                    },\n                    state\n                  )\n                );\n                break;\n            }\n          };\n          const integrationSteps = getSteps(integration, flowId);\n          return (\n            <>\n              <PageTitle title={'Choose a connection'} />\n              <IntegrationEditorLayout\n                header={this.props.header}\n                sidebar={this.props.sidebar({\n                  activeIndex: positionAsNumber,\n                  steps: integrationSteps,\n                })}\n                content={\n                  <WithConnections>\n                    {({\n                      data: connectionsData,\n                      hasData: hasConnectionsData,\n                      error: connectionsError,\n                    }) => (\n                      <WithExtensions>\n                        {({\n                          data: extensionsData,\n                          hasData: hasExtensionsData,\n                          error: extensionsError,\n                        }) => (\n                          <WithSteps>\n                            {({ items: steps }) => (\n                              <IntegrationEditorChooseConnection\n                                i18nTitle={'Choose a connection'}\n                                i18nSubtitle={\n                                  'Click the connection that completes the integration. If the connection you need is not available, click Create Connection.'\n                                }\n                              >\n                                <WithLoader\n                                  error={connectionsError || extensionsError}\n                                  loading={\n                                    !hasConnectionsData && !hasExtensionsData\n                                  }\n                                  loaderChildren={<IntegrationsListSkeleton />}\n                                  errorChildren={<ApiError />}\n                                >\n                                  {() => (\n                                    <>\n                                      {(visibleStepsByPosition(\n                                        integration,\n                                        flowId,\n                                        toStepKindCollection(\n                                          positionAsNumber === 0\n                                            ? connectionsData.connectionsWithFromAction\n                                            : connectionsData.connectionsWithToAction,\n                                          extensionsData.items,\n                                          steps\n                                        ),\n                                        positionAsNumber\n                                      ) as IUIStep[]).map(\n                                        (step, idx: number) => (\n                                          <IntegrationEditorConnectionsListItem\n                                            key={idx}\n                                            integrationName={step.name}\n                                            integrationDescription={\n                                              step.description ||\n                                              'No description available.'\n                                            }\n                                            icon={\n                                              <img\n                                                src={step.icon}\n                                                width={24}\n                                                height={24}\n                                              />\n                                            }\n                                            actions={\n                                              <ButtonLink\n                                                onClick={() =>\n                                                  onStepClick(step)\n                                                }\n                                              >\n                                                Select\n                                              </ButtonLink>\n                                            }\n                                          />\n                                        )\n                                      )}\n                                      <IntegrationEditorConnectionsListItem\n                                        integrationName={''}\n                                        integrationDescription={''}\n                                        icon={''}\n                                        actions={\n                                          <ButtonLink href={'#'}>\n                                            Create connection\n                                          </ButtonLink>\n                                        }\n                                      />\n                                    </>\n                                  )}\n                                </WithLoader>\n                              </IntegrationEditorChooseConnection>\n                            )}\n                          </WithSteps>\n                        )}\n                      </WithExtensions>\n                    )}\n                  </WithConnections>\n                }\n                backHref={\n                  this.props.backHref\n                    ? this.props.backHref(params, state)\n                    : undefined\n                }\n                cancelHref={this.props.cancelHref(params, state)}\n              />\n            </>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { getConnectionIcon } from '@syndesis/api';\nimport {\n  Breadcrumb,\n  IntegrationFlowStepGeneric,\n  IntegrationFlowStepWithOverview,\n  IntegrationVerticalFlow,\n} from '@syndesis/ui';\nimport * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { WithClosedNavigation } from '../../shared';\nimport {\n  IntegrationCreatorBreadcrumbs,\n  IntegrationEditorSidebar,\n} from './components';\nimport { AddStepPage } from './components/editor/AddStepPage';\nimport { ConfigureActionPage } from './components/editor/endpoint/ConfigureActionPage';\nimport { SelectActionPage } from './components/editor/endpoint/SelectActionPage';\nimport { SaveIntegrationPage } from './components/editor/SaveIntegrationPage';\nimport { SelectConnectionPage } from './components/editor/SelectConnectionPage';\nimport resolvers from './resolvers';\nimport routes from './routes';\n\nconst addStepPage = (\n  <AddStepPage\n    cancelHref={resolvers.list}\n    getEditAddStepHref={(position, p, s) =>\n      resolvers.create.configure.addStep.selectStep({\n        position: `${position}`,\n        ...p,\n        ...s,\n      })\n    }\n    getEditConfigureStepHrefCallback={(stepIdx, step, p, s) =>\n      resolvers.create.configure.editStep.connection.configureAction({\n        actionId: step.action!.id!,\n        connection: step.connection!,\n        position: `${stepIdx}`,\n        ...p,\n        ...s,\n      })\n    }\n    header={<IntegrationCreatorBreadcrumbs step={3} />}\n    nextHref={(p, s) =>\n      resolvers.create.configure.saveAndPublish({\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst saveIntegrationPage = (\n  <SaveIntegrationPage\n    backHref={(p, s) => resolvers.create.configure.index({ ...p, ...s })}\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={4} />}\n    postSaveHref={resolvers.list}\n  />\n);\n\nconst startStepSelectConnectionPage = (\n  <SelectConnectionPage\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={1} />}\n    apiProviderHref={(p, s) => ({ pathname: 'todo' })}\n    connectionHref={(connection, params, state) =>\n      resolvers.create.start.connection.selectAction({\n        connection,\n        ...params,\n        ...state,\n      })\n    }\n    sidebar={() => (\n      <IntegrationVerticalFlow>\n        {({ expanded }) => (\n          <>\n            <IntegrationFlowStepGeneric\n              icon={<i className={'fa fa-plus'} />}\n              i18nTitle={'1. Start'}\n              i18nTooltip={'Start'}\n              active={true}\n              showDetails={expanded}\n              description={'Choose a connection'}\n            />\n            <IntegrationFlowStepWithOverview\n              icon={<i className={'fa fa-plus'} />}\n              i18nTitle={'2. Finish'}\n              i18nTooltip={'Finish'}\n              active={false}\n              showDetails={expanded}\n              name={'n/a'}\n              action={'n/a'}\n              dataType={'n/a'}\n            />\n          </>\n        )}\n      </IntegrationVerticalFlow>\n    )}\n  />\n);\n\nconst startStepSelectActionPage = (\n  <SelectActionPage\n    backHref={resolvers.create.start.selectStep}\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={1} />}\n    sidebar={({ connection }) => (\n      <IntegrationVerticalFlow>\n        {({ expanded }) => (\n          <>\n            <IntegrationFlowStepGeneric\n              icon={\n                <img\n                  src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n                  width={24}\n                  height={24}\n                />\n              }\n              i18nTitle={`1. ${connection.connector!.name}`}\n              i18nTooltip={`1. ${connection.name}`}\n              active={true}\n              showDetails={expanded}\n              description={'Choose an action'}\n            />\n            <IntegrationFlowStepWithOverview\n              icon={<i className={'fa fa-plus'} />}\n              i18nTitle={'2. Finish'}\n              i18nTooltip={'Finish'}\n              active={false}\n              showDetails={expanded}\n              name={'n/a'}\n              action={'n/a'}\n              dataType={'n/a'}\n            />\n          </>\n        )}\n      </IntegrationVerticalFlow>\n    )}\n    selectHref={(actionId, p, s) =>\n      resolvers.create.start.connection.configureAction({\n        actionId,\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst startStepConfigureActionPage = (\n  <ConfigureActionPage\n    backHref={(p, s) =>\n      resolvers.create.start.connection.selectAction({ ...p, ...s })\n    }\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={1} subStep={2} />}\n    mode={'adding'}\n    nextStepHref={(p, s) =>\n      resolvers.create.start.connection.configureAction({\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ connection }) => (\n      <IntegrationVerticalFlow>\n        {({ expanded }) => (\n          <>\n            <IntegrationFlowStepGeneric\n              icon={\n                <img\n                  src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n                  width={24}\n                  height={24}\n                />\n              }\n              i18nTitle={`1. ${connection.connector!.name}`}\n              i18nTooltip={`1. ${connection.name}`}\n              active={true}\n              showDetails={expanded}\n              description={'Configure the action'}\n            />\n            <IntegrationFlowStepWithOverview\n              icon={<i className={'fa fa-plus'} />}\n              i18nTitle={'2. Finish'}\n              i18nTooltip={'Finish'}\n              active={false}\n              showDetails={expanded}\n              name={'n/a'}\n              action={'n/a'}\n              dataType={'n/a'}\n            />\n          </>\n        )}\n      </IntegrationVerticalFlow>\n    )}\n    postConfigureHref={(integration, params, state) => {\n      return resolvers.create.finish.selectStep({\n        integration,\n        ...params,\n        position: '1',\n      });\n    }}\n  />\n);\n\nconst finishStepSelectConnectionPage = (\n  <SelectConnectionPage\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={2} />}\n    apiProviderHref={(p, s) => ({ pathname: 'todo' })}\n    connectionHref={(connection, params, state) =>\n      resolvers.create.finish.connection.selectAction({\n        connection,\n        ...params,\n        ...state,\n      })\n    }\n    sidebar={({ steps }) => (\n      <IntegrationVerticalFlow>\n        {({ expanded }) => {\n          const startAction = steps[0];\n          return (\n            <>\n              <IntegrationFlowStepWithOverview\n                icon={\n                  <img\n                    src={getConnectionIcon(\n                      process.env.PUBLIC_URL,\n                      startAction.connection!\n                    )}\n                    width={24}\n                    height={24}\n                  />\n                }\n                i18nTitle={`1. ${startAction.connection!.name}`}\n                i18nTooltip={`1. ${startAction.connection!.name}`}\n                active={false}\n                showDetails={expanded}\n                name={startAction.connection!.connector!.name}\n                action={startAction.connection!.name!}\n                dataType={'TODO'}\n              />\n              <IntegrationFlowStepGeneric\n                icon={<i className={'fa fa-plus'} />}\n                i18nTitle={'2. Finish'}\n                i18nTooltip={'Finish'}\n                active={true}\n                showDetails={expanded}\n                description={'Choose a connection'}\n              />\n            </>\n          );\n        }}\n      </IntegrationVerticalFlow>\n    )}\n  />\n);\n\nconst finishStepSelectActionPage = (\n  <SelectActionPage\n    backHref={(p, s) => resolvers.create.finish.selectStep({ ...p, ...s })}\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={2} />}\n    sidebar={({ connection, steps }) => (\n      <IntegrationVerticalFlow>\n        {({ expanded }) => {\n          const startAction = steps[0];\n          return (\n            <>\n              <IntegrationFlowStepWithOverview\n                icon={\n                  <img\n                    src={getConnectionIcon(\n                      process.env.PUBLIC_URL,\n                      startAction.connection!\n                    )}\n                    width={24}\n                    height={24}\n                  />\n                }\n                i18nTitle={`1. ${startAction.connection!.name}`}\n                i18nTooltip={`1. ${startAction.connection!.name}`}\n                active={false}\n                showDetails={expanded}\n                name={startAction.connection!.connector!.name}\n                action={startAction.connection!.name!}\n                dataType={'TODO'}\n              />\n              <IntegrationFlowStepGeneric\n                icon={\n                  <img\n                    src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n                    width={24}\n                    height={24}\n                  />\n                }\n                i18nTitle={`2. ${connection.connector!.name}`}\n                i18nTooltip={`2. ${connection.name}`}\n                active={true}\n                showDetails={expanded}\n                description={'Choose an action'}\n              />\n            </>\n          );\n        }}\n      </IntegrationVerticalFlow>\n    )}\n    selectHref={(actionId, p, s) =>\n      resolvers.create.finish.connection.configureAction({\n        actionId,\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst finishStepConfigureActionPage = (\n  <ConfigureActionPage\n    backHref={(p, s) =>\n      resolvers.create.finish.connection.selectAction({ ...p, ...s })\n    }\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={2} subStep={2} />}\n    mode={'adding'}\n    nextStepHref={(p, s) =>\n      resolvers.create.finish.connection.configureAction({\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ connection, steps }) => (\n      <IntegrationVerticalFlow>\n        {({ expanded }) => {\n          const startAction = steps[0];\n          return (\n            <>\n              <IntegrationFlowStepWithOverview\n                icon={\n                  <img\n                    src={getConnectionIcon(\n                      process.env.PUBLIC_URL,\n                      startAction.connection!\n                    )}\n                    width={24}\n                    height={24}\n                  />\n                }\n                i18nTitle={`1. ${startAction.connection!.name}`}\n                i18nTooltip={`1. ${startAction.connection!.name}`}\n                active={false}\n                showDetails={expanded}\n                name={startAction.connection!.connector!.name}\n                action={startAction.connection!.name!}\n                dataType={'TODO'}\n              />\n              <IntegrationFlowStepGeneric\n                icon={\n                  <img\n                    src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n                    width={24}\n                    height={24}\n                  />\n                }\n                i18nTitle={`2. ${connection.connector!.name}`}\n                i18nTooltip={`2. ${connection.name}`}\n                active={true}\n                showDetails={expanded}\n                description={'Configure the action'}\n              />\n            </>\n          );\n        }}\n      </IntegrationVerticalFlow>\n    )}\n    postConfigureHref={(integration, params) =>\n      resolvers.create.configure.index({\n        integration,\n        ...params,\n      })\n    }\n  />\n);\n\nconst addStepSelectConnectionPage = (\n  <SelectConnectionPage\n    cancelHref={(p, s) => resolvers.create.configure.index({ ...p, ...s })}\n    header={<IntegrationCreatorBreadcrumbs step={3} />}\n    apiProviderHref={(p, s) => ({ pathname: 'todo' })}\n    connectionHref={(connection, p, s) =>\n      resolvers.create.configure.addStep.connection.selectAction({\n        connection,\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ steps, activeIndex }) => (\n      <IntegrationEditorSidebar\n        steps={steps}\n        addAtIndex={activeIndex}\n        addI18nTitle={`${activeIndex + 1}. Start`}\n        addI18nTooltip={'Start'}\n        addI18nDescription={'Choose a connection'}\n      />\n    )}\n  />\n);\n\nconst addStepSelectActionPage = (\n  <SelectActionPage\n    cancelHref={(p, s) => resolvers.create.configure.index({ ...p, ...s })}\n    header={<IntegrationCreatorBreadcrumbs step={3} />}\n    sidebar={({ connection, steps, activeIndex }) => (\n      <IntegrationEditorSidebar\n        steps={steps}\n        addAtIndex={activeIndex}\n        addIcon={\n          <img\n            src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n            height={24}\n            width={24}\n          />\n        }\n        addI18nTitle={`${activeIndex + 1}. ${connection.connector!.name}`}\n        addI18nTooltip={`${activeIndex + 1}. ${connection.name}`}\n        addI18nDescription={'Choose an action'}\n      />\n    )}\n    selectHref={(actionId, p, s) =>\n      resolvers.create.configure.addStep.connection.configureAction({\n        actionId,\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst addStepConfigureActionPage = (\n  <ConfigureActionPage\n    backHref={(p, s) =>\n      resolvers.create.configure.addStep.connection.selectAction({ ...p, ...s })\n    }\n    cancelHref={(p, s) => resolvers.create.configure.index({ ...p, ...s })}\n    header={<IntegrationCreatorBreadcrumbs step={3} />}\n    mode={'adding'}\n    nextStepHref={(p, s) =>\n      resolvers.create.configure.addStep.connection.configureAction({\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ connection, steps, activeIndex }) => (\n      <IntegrationEditorSidebar\n        steps={steps}\n        addAtIndex={activeIndex}\n        addIcon={\n          <img\n            src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n            height={24}\n            width={24}\n          />\n        }\n        addI18nTitle={`${activeIndex + 1}. ${connection.connector!.name}`}\n        addI18nTooltip={`${activeIndex + 1}. ${connection.name}`}\n        addI18nDescription={'Configure the action'}\n      />\n    )}\n    postConfigureHref={(integration, params) =>\n      resolvers.create.configure.index({\n        integration,\n        ...params,\n      })\n    }\n  />\n);\n\nconst editStepSelectActionPage = (\n  <SelectActionPage\n    cancelHref={(p, s) => resolvers.create.configure.index({ ...p, ...s })}\n    header={<IntegrationCreatorBreadcrumbs step={3} />}\n    sidebar={({ steps, activeIndex }) => (\n      <IntegrationEditorSidebar steps={steps} activeIndex={activeIndex} />\n    )}\n    selectHref={(actionId, p, s) =>\n      resolvers.create.configure.editStep.connection.configureAction({\n        actionId,\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst editStepConfigureActionPage = (\n  <ConfigureActionPage\n    backHref={(p, s) =>\n      resolvers.create.configure.editStep.connection.selectAction({\n        ...p,\n        ...s,\n      })\n    }\n    cancelHref={(p, s) => resolvers.create.configure.index({ ...p, ...s })}\n    header={<IntegrationCreatorBreadcrumbs step={3} />}\n    mode={'editing'}\n    nextStepHref={(p, s) =>\n      resolvers.create.configure.editStep.connection.configureAction({\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ steps, activeIndex }) => (\n      <IntegrationEditorSidebar steps={steps} activeIndex={activeIndex} />\n    )}\n    postConfigureHref={(integration, params) =>\n      resolvers.create.configure.index({\n        integration,\n        ...params,\n      })\n    }\n  />\n);\n\n/**\n * Entry point for the integration creator app. This is shown when an user clicks\n * the \"Create integration\" button somewhere in the app.\n *\n * Since all the creation routes will show the same breadcrumb and require the\n * left navigation bar to be closed to reclaim space, we do it here.\n *\n * Almost all of the routes *require* some state to be passed for them to\n * properly work, so an url that works for an user *will not work* for another.\n * If you try and open the same url on a different browser, the code will throw\n * an exception because of this.\n *\n * We should set up an error boundary[1] to catch these errors and tell the user\n * that he reached an invalid url, or redirect him to a safe page.\n *\n * [1] https://reactjs.org/docs/error-boundaries.html\n *\n * @todo add an error handler!\n * @todo i18n everywhere!\n */\nexport const IntegrationCreatorApp: React.FunctionComponent = () => {\n  return (\n    <WithClosedNavigation>\n      <Breadcrumb>\n        <Link to={resolvers.list()}>Integrations</Link>\n        <span>New integration</span>\n      </Breadcrumb>\n      <Switch>\n        {/* step 1.1 */}\n        <Route\n          path={routes.create.start.selectStep}\n          exact={true}\n          children={startStepSelectConnectionPage}\n        />\n        {/* step 1.2 */}\n        <Route\n          path={routes.create.start.connection.selectAction}\n          exact={true}\n          children={startStepSelectActionPage}\n        />\n        {/* step 1.3 */}\n        <Route\n          path={routes.create.start.connection.configureAction}\n          exact={true}\n          children={startStepConfigureActionPage}\n        />\n        {/* step 2.1 */}\n        <Route\n          path={routes.create.finish.selectStep}\n          exact={true}\n          children={finishStepSelectConnectionPage}\n        />\n        {/* step 2.2 */}\n        <Route\n          path={routes.create.finish.connection.selectAction}\n          exact={true}\n          children={finishStepSelectActionPage}\n        />\n        {/* step 2.3 */}\n        <Route\n          path={routes.create.finish.connection.configureAction}\n          exact={true}\n          children={finishStepConfigureActionPage}\n        />\n        {/* step 3: index */}\n        <Route\n          path={routes.create.configure.index}\n          exact={true}\n          children={addStepPage}\n        />\n        {/* step 3: add connection.1 */}\n        <Route\n          path={routes.create.configure.addStep.selectStep}\n          exact={true}\n          children={addStepSelectConnectionPage}\n        />\n        {/* step 3: add connection.2 */}\n        <Route\n          path={routes.create.configure.addStep.connection.selectAction}\n          exact={true}\n          children={addStepSelectActionPage}\n        />\n        {/* step 3: add connection.3 */}\n        <Route\n          path={routes.create.configure.addStep.connection.configureAction}\n          exact={true}\n          children={addStepConfigureActionPage}\n        />\n        {/* step 3: edit connection.2 (this is optional and can be reached only from the configuration page), must be declared before the configure route */}\n        <Route\n          path={routes.create.configure.editStep.connection.selectAction}\n          exact={true}\n          children={editStepSelectActionPage}\n        />\n        {/* step 3: edit connection.1 (when editing we link directly to the configuration step) */}\n        <Route\n          path={routes.create.configure.editStep.connection.configureAction}\n          exact={true}\n          children={editStepConfigureActionPage}\n        />\n        {/* step 4 */}\n        <Route\n          path={routes.create.configure.saveAndPublish}\n          exact={true}\n          children={saveIntegrationPage}\n        />\n      </Switch>\n    </WithClosedNavigation>\n  );\n};\n","import { getConnectionIcon } from '@syndesis/api';\nimport { Integration } from '@syndesis/models';\nimport { Breadcrumb } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { WithClosedNavigation } from '../../shared';\nimport {\n  IntegrationEditorBreadcrumbs,\n  IntegrationEditorSidebar,\n} from './components';\nimport { AddStepPage } from './components/editor/AddStepPage';\nimport { ConfigureActionPage } from './components/editor/endpoint/ConfigureActionPage';\nimport { SelectActionPage } from './components/editor/endpoint/SelectActionPage';\nimport { SaveIntegrationPage } from './components/editor/SaveIntegrationPage';\nimport { SelectConnectionPage } from './components/editor/SelectConnectionPage';\nimport resolvers from './resolvers';\nimport routes from './routes';\n\nconst addStepPage = (\n  <AddStepPage\n    cancelHref={resolvers.list}\n    getEditAddStepHref={(position, p, s) =>\n      resolvers.integration.edit.addStep.selectStep({\n        position: `${position}`,\n        ...p,\n        ...s,\n      })\n    }\n    getEditConfigureStepHrefCallback={(stepIdx, step, p, s) =>\n      resolvers.integration.edit.editStep.connection.configureAction({\n        actionId: step.action!.id!,\n        connection: step.connection!,\n        position: `${stepIdx}`,\n        ...p,\n        ...s,\n      })\n    }\n    header={<IntegrationEditorBreadcrumbs step={1} />}\n    nextHref={(p, s) =>\n      resolvers.integration.edit.saveAndPublish({\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst selectConnectionPage = (\n  <SelectConnectionPage\n    cancelHref={(p, s) => resolvers.integration.edit.index({ ...p, ...s })}\n    header={<IntegrationEditorBreadcrumbs step={1} />}\n    apiProviderHref={(p, s) => ({ pathname: 'todo' })}\n    connectionHref={(connection, p, s) =>\n      resolvers.integration.edit.addStep.connection.selectAction({\n        connection,\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ steps, activeIndex }) => (\n      <IntegrationEditorSidebar\n        steps={steps}\n        addAtIndex={activeIndex}\n        addI18nTitle={`${activeIndex + 1}. Start`}\n        addI18nTooltip={'Start'}\n        addI18nDescription={'Choose a connection'}\n      />\n    )}\n  />\n);\n\nconst saveIntegrationPage = (\n  <SaveIntegrationPage\n    backHref={(p, s) => resolvers.integration.edit.index({ ...p, ...s })}\n    cancelHref={resolvers.list}\n    header={<IntegrationEditorBreadcrumbs step={2} />}\n    postSaveHref={resolvers.list}\n  />\n);\n\nconst addStepSelectActionPage = (\n  <SelectActionPage\n    cancelHref={(p, s) => resolvers.integration.edit.index({ ...p, ...s })}\n    header={<IntegrationEditorBreadcrumbs step={1} />}\n    sidebar={({ connection, steps, activeIndex }) => (\n      <IntegrationEditorSidebar\n        steps={steps}\n        addAtIndex={activeIndex}\n        addIcon={\n          <img\n            src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n            height={24}\n            width={24}\n          />\n        }\n        addI18nTitle={`${activeIndex + 1}. ${connection.connector!.name}`}\n        addI18nTooltip={`${activeIndex + 1}. ${connection.name}`}\n        addI18nDescription={'Choose an action'}\n      />\n    )}\n    selectHref={(actionId, p, s) =>\n      resolvers.integration.edit.addStep.connection.configureAction({\n        actionId,\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst addStepConfigureActionPage = (\n  <ConfigureActionPage\n    backHref={(p, s) =>\n      resolvers.integration.edit.addStep.connection.selectAction({ ...p, ...s })\n    }\n    cancelHref={(p, s) => resolvers.integration.edit.index({ ...p, ...s })}\n    header={<IntegrationEditorBreadcrumbs step={1} />}\n    mode={'adding'}\n    nextStepHref={(p, s) =>\n      resolvers.integration.edit.addStep.connection.configureAction({\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ connection, steps, activeIndex }) => (\n      <IntegrationEditorSidebar\n        steps={steps}\n        addAtIndex={activeIndex}\n        addIcon={\n          <img\n            src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n            height={24}\n            width={24}\n          />\n        }\n        addI18nTitle={`${activeIndex + 1}. ${connection.connector!.name}`}\n        addI18nTooltip={`${activeIndex + 1}. ${connection.name}`}\n        addI18nDescription={'Configure the action'}\n      />\n    )}\n    postConfigureHref={(integration, params) =>\n      resolvers.integration.edit.index({\n        integration,\n        ...params,\n      })\n    }\n  />\n);\n\nconst editStepSelectActionPage = (\n  <SelectActionPage\n    cancelHref={(p, s) => resolvers.integration.edit.index({ ...p, ...s })}\n    header={<IntegrationEditorBreadcrumbs step={1} />}\n    sidebar={({ steps, activeIndex }) => (\n      <IntegrationEditorSidebar steps={steps} activeIndex={activeIndex} />\n    )}\n    selectHref={(actionId, p, s) =>\n      resolvers.integration.edit.editStep.connection.configureAction({\n        actionId,\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst editStepConfigureActionPage = (\n  <ConfigureActionPage\n    backHref={(p, s) =>\n      resolvers.integration.edit.editStep.connection.selectAction({\n        ...p,\n        ...s,\n      })\n    }\n    cancelHref={(p, s) => resolvers.integration.edit.index({ ...p, ...s })}\n    header={<IntegrationEditorBreadcrumbs step={1} />}\n    mode={'editing'}\n    nextStepHref={(p, s) =>\n      resolvers.integration.edit.editStep.connection.configureAction({\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ steps, activeIndex }) => (\n      <IntegrationEditorSidebar steps={steps} activeIndex={activeIndex} />\n    )}\n    postConfigureHref={(integration, params) =>\n      resolvers.integration.edit.index({\n        integration,\n        ...params,\n      })\n    }\n  />\n);\n\nexport interface IIntegrationEditorAppRouteState {\n  integration: Integration;\n}\n\n/**\n * Entry point for the integration editor app. This is shown when an user clicks\n * on the \"Edit\" button for any existing integration.\n *\n * Since all the creation routes will show the same breadcrumb and require the\n * left navigation bar to be closed to reclaim space, we do it here.\n *\n * Almost all of the routes *require* some state to be passed for them to\n * properly work, so an url that works for an user *will not work* for another.\n * If you try and open the same url on a different browser, the code will throw\n * an exception because of this.\n *\n * We should set up an error boundary[1] to catch these errors and tell the user\n * that he reached an invalid url, or redirect him to a safe page.\n *\n * [1] https://reactjs.org/docs/error-boundaries.html\n *\n * @todo add an error handler!\n * @todo i18n everywhere!\n */\nexport const IntegrationEditorApp: React.FunctionComponent = () => {\n  return (\n    <WithRouteData<null, IIntegrationEditorAppRouteState>>\n      {(_, { integration }) => (\n        <WithClosedNavigation>\n          <Breadcrumb>\n            <Link to={resolvers.list()}>Integrations</Link>\n            <Link\n              to={resolvers.integration.details({\n                integrationId: integration.id!,\n              })}\n            >\n              {integration.name}\n            </Link>\n            <span>Add to integration</span>\n          </Breadcrumb>\n          <Switch>\n            <Route\n              path={routes.integration.edit.index}\n              exact={true}\n              children={addStepPage}\n            />\n            <Route\n              path={routes.integration.edit.addStep.selectStep}\n              exact={true}\n              children={selectConnectionPage}\n            />\n            <Route\n              path={routes.integration.edit.addStep.connection.selectAction}\n              exact={true}\n              children={addStepSelectActionPage}\n            />\n            <Route\n              path={routes.integration.edit.addStep.connection.configureAction}\n              exact={true}\n              children={addStepConfigureActionPage}\n            />\n            <Route\n              path={routes.integration.edit.editStep.connection.selectAction}\n              exact={true}\n              children={editStepSelectActionPage}\n            />\n            <Route\n              path={routes.integration.edit.editStep.connection.configureAction}\n              exact={true}\n              children={editStepConfigureActionPage}\n            />\n            <Route\n              path={routes.integration.edit.saveAndPublish}\n              exact={true}\n              children={saveIntegrationPage}\n            />\n          </Switch>\n        </WithClosedNavigation>\n      )}\n    </WithRouteData>\n  );\n};\n","import { Integration } from '@syndesis/models';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { IntegrationDetailNavBar } from '../../shared';\n\n/**\n * @integrationId - the ID of the integration for which details are being displayed.\n */\nexport interface IActivityPageParams {\n  integrationId: string;\n}\n\nexport interface IActivityPageState {\n  integration: Integration;\n}\n\n/**\n * This page shows the second tab of the Integration Detail page.\n *\n * This component expects either an integrationId in the URL,\n * or an integration object set via the state.\n *\n */\nexport class ActivityPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<IActivityPageParams, IActivityPageState>>\n        {({ integrationId }, { integration }, { history }) => {\n          return (\n            <div>\n              <Translation ns={['integration', 'shared']}>\n                {t => <IntegrationDetailNavBar integration={integration} />}\n              </Translation>\n              <p>This is the Integration Detail Activity page.</p>\n            </div>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import {\n  canActivate,\n  canDeactivate,\n  canEdit,\n  WithIntegration,\n  WithIntegrationHelpers,\n} from '@syndesis/api';\nimport { IIntegrationOverviewWithDraft } from '@syndesis/models';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n  IIntegrationAction,\n  IntegrationDetailDescription,\n  IntegrationDetailHistoryListView,\n  IntegrationDetailInfo,\n  Loader,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport {\n  IntegrationDetailHistory,\n  IntegrationDetailSteps,\n} from '../../components';\nimport resolvers from '../../resolvers';\nimport { IntegrationDetailNavBar } from '../../shared';\n\n/**\n * @integrationId - the ID of the integration for which details are being displayed.\n */\nexport interface IIntegrationDetailsRouteParams {\n  integrationId: string;\n}\n\nexport interface IIntegrationDetailsRouteState {\n  integration?: IIntegrationOverviewWithDraft;\n}\n\n/**\n * @integrationId - the ID of the integration for which details are being displayed.\n */\nexport interface IIntegrationDetailsPageProps {\n  error: boolean;\n  integration: IIntegrationOverviewWithDraft;\n  integrationId: string;\n  loading: boolean;\n}\n\nexport interface IIntegrationDetailsPageState {\n  handleAction?: () => void;\n  integration?: IIntegrationOverviewWithDraft;\n  promptDialogButtonText?: string;\n  promptDialogIcon?: ConfirmationIconType;\n  promptDialogText?: string;\n  promptDialogTitle?: string;\n  showPromptDialog?: boolean;\n}\n\ninterface IPromptActionOptions {\n  promptDialogButtonStyle: ConfirmationButtonStyle;\n  promptDialogButtonText: string;\n  promptDialogIcon: ConfirmationIconType;\n  promptDialogText: string;\n  promptDialogTitle: string;\n  handleAction: () => void;\n}\n\n/**\n * This page shows the first, and default, tab of the Integration Detail page.\n *\n * This component expects either an integrationId in the URL,\n * or an integration object set via the state.\n *\n */\nexport class DetailsPage extends React.Component<\n  IIntegrationDetailsPageProps,\n  IIntegrationDetailsPageState\n> {\n  public constructor(props: IIntegrationDetailsPageProps) {\n    super(props);\n    this.state = {\n      showPromptDialog: false,\n    };\n    this.handleAction = this.handleAction.bind(this);\n    this.handleActionCancel = this.handleActionCancel.bind(this);\n    this.promptForAction = this.promptForAction.bind(this);\n  }\n\n  public handleActionCancel() {\n    this.setState({\n      showPromptDialog: false,\n    });\n  }\n\n  public handleAction() {\n    const action = this.state.handleAction;\n    this.setState({\n      showPromptDialog: false,\n    });\n    if (typeof action === 'function') {\n      action.apply(this);\n    } else {\n      throw Error('Undefined action set for confirmation dialog');\n    }\n  }\n\n  public promptForAction(options: IPromptActionOptions) {\n    this.setState({\n      ...options,\n      showPromptDialog: true,\n    });\n  }\n\n  public render() {\n    return (\n      <WithRouteData<IIntegrationDetailsRouteParams, null>>\n        {({ integrationId }) => {\n          return (\n            <WithIntegrationHelpers>\n              {({\n                deleteIntegration,\n                deployIntegration,\n                exportIntegration,\n                undeployIntegration,\n              }) => {\n                return (\n                  <WithIntegration integrationId={integrationId}>\n                    {({ data, hasData, error }) => (\n                      <WithLoader\n                        error={error}\n                        loading={!hasData}\n                        loaderChildren={<Loader />}\n                        errorChildren={<div>TODO</div>}\n                      >\n                        {() => (\n                          <div>\n                            <Translation ns={['integrations', 'shared']}>\n                              {t => {\n                                const deployments = data.deployments\n                                  ? data.deployments\n                                  : [];\n                                const editAction: IIntegrationAction = {\n                                  href: resolvers.integration.edit.index({\n                                    flowId: '0',\n                                    integration: data,\n                                  }),\n                                  label: 'Edit',\n                                };\n                                const startAction: IIntegrationAction = {\n                                  label: 'Start',\n                                  onClick: () =>\n                                    this.promptForAction({\n                                      handleAction: () =>\n                                        deployIntegration(\n                                          data.id!,\n                                          data.version!,\n                                          false\n                                        ),\n                                      promptDialogButtonStyle:\n                                        ConfirmationButtonStyle.NORMAL,\n                                      promptDialogButtonText: t('shared:Start'),\n                                      promptDialogIcon:\n                                        ConfirmationIconType.NONE,\n                                      promptDialogText: t(\n                                        'integrations:publishIntegrationModal',\n                                        { name: data.name }\n                                      ),\n                                      promptDialogTitle: t(\n                                        'integrations:publishIntegrationModalTitle'\n                                      ),\n                                    } as IPromptActionOptions),\n                                };\n                                const stopAction: IIntegrationAction = {\n                                  label: 'Stop',\n                                  onClick: () =>\n                                    this.promptForAction({\n                                      handleAction: () =>\n                                        undeployIntegration(\n                                          data.id!,\n                                          data.version!\n                                        ),\n                                      promptDialogButtonStyle:\n                                        ConfirmationButtonStyle.NORMAL,\n                                      promptDialogButtonText: t('shared:Stop'),\n                                      promptDialogIcon:\n                                        ConfirmationIconType.NONE,\n                                      promptDialogText: t(\n                                        'integrations:unpublishIntegrationModal',\n                                        { name: data.name }\n                                      ),\n                                      promptDialogTitle: t(\n                                        'integrations:unpublishIntegrationModalTitle'\n                                      ),\n                                    } as IPromptActionOptions),\n                                };\n                                const deleteAction: IIntegrationAction = {\n                                  label: 'Delete',\n                                  onClick: () =>\n                                    this.promptForAction({\n                                      handleAction: () =>\n                                        deleteIntegration(data.id!),\n                                      promptDialogButtonStyle:\n                                        ConfirmationButtonStyle.DANGER,\n                                      promptDialogButtonText: t(\n                                        'shared:Delete'\n                                      ),\n                                      promptDialogIcon:\n                                        ConfirmationIconType.DANGER,\n                                      promptDialogText: t(\n                                        'integrations:deleteIntegrationModal',\n                                        { name: data.name }\n                                      ),\n                                      promptDialogTitle: t(\n                                        'integrations:deleteIntegrationModalTitle'\n                                      ),\n                                    } as IPromptActionOptions),\n                                };\n                                const exportAction: IIntegrationAction = {\n                                  label: 'Export',\n                                  onClick: () =>\n                                    exportIntegration(\n                                      data.id!,\n                                      `${data.name}-export.zip`\n                                    ),\n                                };\n\n                                const actions: IIntegrationAction[] = [];\n                                const draftActions: IIntegrationAction[] = [];\n                                if (canActivate(data)) {\n                                  data.isDraft\n                                    ? draftActions.push(startAction)\n                                    : actions.push(startAction);\n                                }\n                                if (canEdit(data)) {\n                                  data.isDraft\n                                    ? draftActions.push(editAction)\n                                    : actions.push(editAction);\n                                }\n                                if (canDeactivate(data)) {\n                                  actions.push(stopAction);\n                                }\n                                actions.push(deleteAction);\n                                actions.push(exportAction);\n\n                                return (\n                                  <>\n                                    <ConfirmationDialog\n                                      buttonStyle={\n                                        ConfirmationButtonStyle.NORMAL\n                                      }\n                                      i18nCancelButtonText={t('shared:Cancel')}\n                                      i18nConfirmButtonText={\n                                        this.state.promptDialogButtonText!\n                                      }\n                                      i18nConfirmationMessage={\n                                        this.state.promptDialogText!\n                                      }\n                                      i18nTitle={this.state.promptDialogTitle!}\n                                      icon={this.state.promptDialogIcon!}\n                                      showDialog={this.state.showPromptDialog!}\n                                      onCancel={this.handleActionCancel}\n                                      onConfirm={this.handleAction}\n                                    />\n                                    <IntegrationDetailInfo\n                                      name={data.name}\n                                      version={data.version}\n                                    />\n                                    <IntegrationDetailNavBar\n                                      integration={data}\n                                    />\n                                    <IntegrationDetailSteps\n                                      integration={data}\n                                    />\n                                    <IntegrationDetailDescription\n                                      description={data.description}\n                                      i18nNoDescription={t(\n                                        'integrations:detail:noDescription'\n                                      )}\n                                    />\n                                    <IntegrationDetailHistoryListView\n                                      actions={draftActions}\n                                      hasHistory={deployments.length > 0}\n                                      isDraft={data.isDraft}\n                                      i18nTextDraft={t('shared:Draft')}\n                                      i18nTextHistory={t(\n                                        'integrations:detail:History'\n                                      )}\n                                      children={\n                                        <IntegrationDetailHistory\n                                          actions={actions}\n                                          deployments={deployments}\n                                          integrationId={data.id!}\n                                          updatedAt={data.updatedAt!}\n                                          version={data.version!}\n                                        />\n                                      }\n                                    />\n                                  </>\n                                );\n                              }}\n                            </Translation>\n                          </div>\n                        )}\n                      </WithLoader>\n                    )}\n                  </WithIntegration>\n                );\n              }}\n            </WithIntegrationHelpers>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { Integration } from '@syndesis/models';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { IntegrationDetailNavBar } from '../../shared';\n\n/**\n * @integrationId - the ID of the integration for which details are being displayed.\n */\nexport interface IMetricsPageParams {\n  integrationId: string;\n}\n\nexport interface IMetricsPageState {\n  integration: Integration;\n}\n\n/**\n * This page shows the second tab of the Integration Detail page.\n *\n * This component expects either an integrationId in the URL,\n * or an integration object set via the state.\n *\n */\nexport class MetricsPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<IMetricsPageParams, IMetricsPageState>>\n        {({ integrationId }, { integration }, { history }) => {\n          return (\n            <div>\n              <Translation ns={['integration', 'shared']}>\n                {t => <IntegrationDetailNavBar integration={integration} />}\n              </Translation>\n              <p>This is the Integration Detail Metrics page.</p>\n            </div>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { WithIntegrationHelpers } from '@syndesis/api';\nimport { Breadcrumb, ImportPageUI } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../../../i18n';\nimport { PageTitle } from '../../../../shared';\nimport resolvers from '../../resolvers';\n\nexport interface IImportPageState {\n  disableDropzone: boolean;\n  uploadFailedMessages?: string[];\n  uploadSuccessMessages?: string[];\n}\nexport class ImportPage extends React.Component<{}, IImportPageState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      disableDropzone: false,\n    };\n  }\n  public render() {\n    return (\n      <Translation ns={['integrations', 'shared']}>\n        {t => (\n          <WithIntegrationHelpers>\n            {({ importIntegration }) => {\n              const handleUploadAccepted = async (files: File[]) => {\n                let uploadFails: string[] = [];\n                let uploadWins: string[] = [];\n                this.setState({\n                  disableDropzone: true,\n                  uploadFailedMessages: uploadFails,\n                  uploadSuccessMessages: uploadWins,\n                });\n                for (const file of files) {\n                  try {\n                    await importIntegration(file);\n                    uploadWins = uploadWins.concat([\n                      i18n.t('integrations:ImportUploadSuccessMessage', {\n                        fileName: file.name,\n                      }),\n                    ]);\n                  } catch (err) {\n                    uploadFails = uploadFails.concat([\n                      i18n.t('integrations:ImportUploadFailedMessage', {\n                        fileName: file.name,\n                      }),\n                    ]);\n                  }\n                  this.setState({\n                    uploadFailedMessages: uploadFails,\n                    uploadSuccessMessages: uploadWins,\n                  });\n                }\n                this.setState({\n                  disableDropzone: false,\n                });\n              };\n              const handleUploadRejected = (failed: string) => {\n                return i18n.t('integrations:ImportUploadFailedAlertMessage', {\n                  fileName: failed,\n                });\n              };\n              return (\n                <>\n                  <PageTitle title={t('shared:Import')} />\n                  <Breadcrumb>\n                    <Link to={resolvers.list()}>\n                      {t('shared:Integrations')}\n                    </Link>\n                    <span>{t('integrations:ImportIntegration')}</span>\n                  </Breadcrumb>\n                  <ImportPageUI\n                    i18nPageTitle={t('integrations:ImportIntegration')}\n                    i18nPageDescription={t(\n                      'integrations:ImportIntegrationDescription'\n                    )}\n                    i18nNoFileSelectedMessage={t(\n                      'integrations:ImportNoFileSelectedMessage'\n                    )}\n                    i18nSelectedFileLabel={t(\n                      'integrations:ImportSelectedFileLabel'\n                    )}\n                    i18nInstructions={t(\n                      'integrations:ImportIntegrationInstructions'\n                    )}\n                    i18nHelpMessage={t('integrations:ImportHelpMessage')}\n                    i18nUploadSuccessMessages={this.state.uploadSuccessMessages}\n                    i18nUploadFailedMessages={this.state.uploadFailedMessages}\n                    onUploadRejected={handleUploadRejected}\n                    onUploadAccepted={handleUploadAccepted}\n                  />\n                </>\n              );\n            }}\n          </WithIntegrationHelpers>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { WithConnections, WithMonitoredIntegrations } from '@syndesis/api';\nimport { Connection, IntegrationWithMonitoring } from '@syndesis/models';\nimport {\n  IActiveFilter,\n  IFilterType,\n  IntegrationsListView,\n  ISortType,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport { PageTitle } from '../../../shared';\nimport { Integrations } from '../components';\nimport resolvers from '../resolvers';\n\nfunction getFilteredAndSortedIntegrations(\n  integrations: IntegrationWithMonitoring[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSortedIntegrations = integrations;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSortedIntegrations = filteredAndSortedIntegrations.filter(\n      (mi: IntegrationWithMonitoring) => {\n        if (filter.title === 'Name') {\n          return mi.integration.name.toLowerCase().includes(valueToLower);\n        }\n        if (filter.title === 'Connection') {\n          const connectionNames = mi.integration!.flows!.reduce(\n            (acc, flow) => [\n              ...acc,\n              ...flow\n                .steps!.filter(s => s.connection)\n                .map(s => s.connection!.name.toLowerCase()),\n            ],\n            [] as string[]\n          );\n          return connectionNames.reduce(\n            (found, n) => found || n.includes(valueToLower),\n            false\n          );\n        }\n        return false;\n      }\n    );\n  });\n\n  filteredAndSortedIntegrations = filteredAndSortedIntegrations.sort(\n    (miA, miB) => {\n      const left = isSortAscending ? miA : miB;\n      const right = isSortAscending ? miB : miA;\n      if (currentSortType === 'Name') {\n        return left.integration.name.localeCompare(right.integration.name);\n      }\n      return left.integration!.currentState!.localeCompare(\n        right.integration!.currentState!\n      );\n    }\n  );\n\n  return filteredAndSortedIntegrations;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterByConnection = {\n  filterType: 'select',\n  filterValues: [],\n  id: 'connection',\n  placeholder: i18n.t('filterByConnectionPlaceholder'),\n  title: i18n.t('shared:Connection'),\n};\n\nfunction getFilterTypes(connections: Connection[]): IFilterType[] {\n  return [\n    filterByName,\n    {\n      ...filterByConnection,\n      filterValues: connections.map(c => ({\n        id: c.id,\n        title: c.name,\n      })),\n    } as IFilterType,\n  ];\n}\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortByStatus = {\n  id: 'status',\n  isNumeric: false,\n  title: i18n.t('shared:Status'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName, sortByStatus];\n\nexport class IntegrationsPage extends React.Component {\n  public render() {\n    return (\n      <WithMonitoredIntegrations>\n        {({ data: integrationsData, hasData, error }) => (\n          <WithConnections>\n            {({ data: connectionsData }) => (\n              <Translation ns={['integrations', 'shared']}>\n                {t => (\n                  <WithListViewToolbarHelpers\n                    defaultFilterType={filterByName}\n                    defaultSortType={sortByName}\n                  >\n                    {helpers => {\n                      const filteredAndSortedIntegrations = getFilteredAndSortedIntegrations(\n                        integrationsData.items,\n                        helpers.activeFilters,\n                        helpers.currentSortType,\n                        helpers.isSortAscending\n                      );\n\n                      return (\n                        <>\n                          <PageTitle title={t('shared:Integrations')} />\n                          <IntegrationsListView\n                            linkToIntegrationImport={'/integrations/import'}\n                            linkToManageCiCd={resolvers.manageCicd.root()}\n                            linkToIntegrationCreation={resolvers.create.start.selectStep()}\n                            filterTypes={getFilterTypes(\n                              connectionsData.connectionsForDisplay\n                            )}\n                            sortTypes={sortTypes}\n                            resultsCount={filteredAndSortedIntegrations.length}\n                            {...helpers}\n                            i18nImport={t('shared:Import')}\n                            i18nManageCiCd={t('integrations:ManageCiCd')}\n                            i18nLinkCreateConnection={t(\n                              'shared:linkCreateIntegration'\n                            )}\n                            i18nResultsCount={t('shared:resultsCount', {\n                              count: filteredAndSortedIntegrations.length,\n                            })}\n                          >\n                            <Integrations\n                              error={error}\n                              loading={!hasData}\n                              integrations={filteredAndSortedIntegrations}\n                            />\n                          </IntegrationsListView>\n                        </>\n                      );\n                    }}\n                  </WithListViewToolbarHelpers>\n                )}\n              </Translation>\n            )}\n          </WithConnections>\n        )}\n      </WithMonitoredIntegrations>\n    );\n  }\n}\n","import {\n  DataMapperAdapter,\n  DocumentType,\n  InspectionType,\n} from '@syndesis/atlasmap-adapter';\nimport { Breadcrumb, ButtonLink, Container } from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface ITestAtlasmapPageState {\n  mappings?: string;\n}\n\nexport class TestAtlasmapPage extends React.Component<\n  {},\n  ITestAtlasmapPageState\n> {\n  public state: ITestAtlasmapPageState = {};\n\n  constructor(props: {}) {\n    super(props);\n    this.onReset = this.onReset.bind(this);\n    this.onMappings = this.onMappings.bind(this);\n  }\n\n  public onReset() {\n    this.setState({\n      mappings: undefined,\n    });\n  }\n\n  public onMappings(mappings: string) {\n    this.setState({\n      mappings,\n    });\n  }\n\n  public render() {\n    return (\n      <>\n        <Container>\n          <div className=\"toolbar-pf row\">\n            <div className=\"col-sm-12\">\n              <div className=\"toolbar-pf-actions\">\n                <div className=\"form-group\">\n                  <Breadcrumb>\n                    <span>Home</span>\n                    <span>Library</span>\n                    <span>Data</span>\n                  </Breadcrumb>\n                </div>\n                <div className=\"toolbar-pf-action-right\">\n                  <div className=\"form-group\" style={{ marginTop: '5px' }}>\n                    <ButtonLink>Cancel</ButtonLink>\n                    <ButtonLink\n                      disabled={!this.state.mappings}\n                      onClick={this.onReset}\n                    >\n                      Reset\n                    </ButtonLink>\n                    <ButtonLink as={'success'} disabled={!this.state.mappings}>\n                      Save\n                    </ButtonLink>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Container>\n        <div\n          style={{\n            display: 'flex',\n            flexFlow: 'column',\n            height: 'calc(100% - 57px)',\n          }}\n        >\n          <DataMapperAdapter\n            documentId={'-LRMAUOoTSCTd3Eg7_bi'}\n            inputName={'SQL Result'}\n            inputDescription={'Result of SQL [SELECT * from TODO]'}\n            inputDocumentType={DocumentType.JSON}\n            inputInspectionType={InspectionType.SCHEMA}\n            inputDataShape={\n              '{\"type\":\"object\",\"$schema\":\"http://json-schema.org/schema#\",\"title\":\"SQL_PARAM_OUT\",\"properties\":{\"id\":{\"type\":\"integer\",\"required\":true},\"task\":{\"type\":\"string\",\"required\":true},\"completed\":{\"type\":\"integer\",\"required\":true}}}'\n            }\n            outputName={'add_lead Parameter'}\n            outputDescription={'Parameters of Stored Procedure \"add_lead\"'}\n            outputDocumentType={DocumentType.JSON}\n            outputInspectionType={InspectionType.SCHEMA}\n            outputDataShape={\n              '{\"type\":\"object\",\"$schema\":\"http://json-schema.org/schema#\",\"title\":\"add_lead_IN\",\"properties\":{\"first_and_last_name\":{\"type\":\"string\",\"required\":true},\"company\":{\"type\":\"string\",\"required\":true},\"phone\":{\"type\":\"string\",\"required\":true},\"email\":{\"type\":\"string\",\"required\":true},\"lead_source\":{\"type\":\"string\",\"required\":true},\"lead_status\":{\"type\":\"string\",\"required\":true},\"rating\":{\"type\":\"string\",\"required\":true}}}'\n            }\n            mappings={this.state.mappings}\n            onMappings={this.onMappings}\n          />\n        </div>\n      </>\n    );\n  }\n}\n","import { WithEnvironmentHelpers, WithEnvironments } from '@syndesis/api';\nimport {\n  Breadcrumb,\n  CiCdList,\n  CiCdListEmptyState,\n  CiCdListItem,\n  CiCdListSkeleton,\n  CiCdManagePageUI,\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n  TagNameValidationError,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers, WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../../../i18n';\nimport { ApiError, PageTitle } from '../../../../shared';\nimport resolvers from '../../resolvers';\n\nfunction getFilteredAndSortedEnvironments(\n  environments: string[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let answer = environments;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    answer = answer.filter(name => name.toLowerCase().includes(valueToLower));\n  });\n  answer = answer.sort((a, b) => {\n    const left = isSortAscending ? a : b;\n    const right = isSortAscending ? b : a;\n    return left.localeCompare(right);\n  });\n  return answer.map(name => ({\n    i18nUsesText: '',\n    name,\n  }));\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nfunction createConfirmRemoveString(name: string) {\n  return i18n.t('integrations:ConfirmRemoveTag', { tag: name });\n}\n\nexport interface IManageCiCdPageState {\n  nameValidationError: TagNameValidationError;\n}\n\nexport class ManageCiCdPage extends React.Component<{}, IManageCiCdPageState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      nameValidationError: TagNameValidationError.NoErrors,\n    };\n  }\n  public render() {\n    return (\n      <Translation ns={['integrations', 'shared']}>\n        {t => (\n          <WithEnvironments>\n            {({ data, hasData, error, read }) => (\n              <WithListViewToolbarHelpers\n                defaultFilterType={filterByName}\n                defaultSortType={sortByName}\n              >\n                {helpers => {\n                  const filteredAndSortedEnvironments = getFilteredAndSortedEnvironments(\n                    data,\n                    helpers.activeFilters,\n                    helpers.currentSortType,\n                    helpers.isSortAscending\n                  );\n                  const handleValidateItem = (name: string) => {\n                    if (!name || name === '') {\n                      this.setState({\n                        nameValidationError: TagNameValidationError.NoName,\n                      });\n                    } else if (data.indexOf(name) !== -1) {\n                      this.setState({\n                        nameValidationError: TagNameValidationError.NameInUse,\n                      });\n                    } else {\n                      this.setState({\n                        nameValidationError: TagNameValidationError.NoErrors,\n                      });\n                    }\n                  };\n                  return (\n                    <WithEnvironmentHelpers>\n                      {({\n                        createEnvironment,\n                        deleteEnvironment,\n                        renameEnvironment,\n                      }) => (\n                        <>\n                          <PageTitle title={t('integrations:ManageCiCd')} />\n                          <Breadcrumb>\n                            <Link to={resolvers.list()}>\n                              {t('shared:Integrations')}\n                            </Link>\n                            <span>{t('integrations:ManageCiCd')}</span>\n                          </Breadcrumb>\n                          <CiCdManagePageUI\n                            onEditItem={(name: string, newName: string) =>\n                              renameEnvironment(name, newName).finally(read)\n                            }\n                            onAddItem={(name: string) =>\n                              createEnvironment(name).finally(read)\n                            }\n                            onRemoveItem={(name: string) =>\n                              deleteEnvironment(name).finally(read)\n                            }\n                            onValidateItem={handleValidateItem}\n                            filterTypes={filterTypes}\n                            sortTypes={sortTypes}\n                            {...helpers}\n                            resultsCount={filteredAndSortedEnvironments.length}\n                            i18nResultsCount={t('shared:resultsCount', {\n                              count: filteredAndSortedEnvironments.length,\n                            })}\n                            i18nAddNewButtonText={t('shared:AddNew')}\n                            i18nPageTitle={t('integrations:ManageCiCd')}\n                            i18nCancelButtonText={t('shared:Cancel')}\n                            i18nSaveButtonText={t('shared:Save')}\n                            i18nConfirmRemoveButtonText={t('shared:Yes')}\n                            i18nConfirmCancelButtonText={t('shared:No')}\n                            i18nRemoveConfirmationMessage={\n                              createConfirmRemoveString\n                            }\n                            i18nRemoveConfirmationTitle={t(\n                              'shared:ConfirmRemove'\n                            )}\n                            i18nRemoveConfirmationDetailMessage={t(\n                              'integrations:ConfirmRemoveTagDetail'\n                            )}\n                            i18nAddTagDialogTitle={t(\n                              'integrations:AddTagDialogTitle'\n                            )}\n                            i18nAddTagDialogDescription={t(\n                              'integrations:AddTagDialogDescription'\n                            )}\n                            i18nEditTagDialogTitle={t(\n                              'integrations:EditTagDialogTitle'\n                            )}\n                            i18nEditTagDialogDescription={t(\n                              'integrations:EditTagDialogDescription'\n                            )}\n                            i18nTagInputLabel={t('integrations:TagName')}\n                            i18nPageDescription={t(\n                              'integrations:ManageCiCdDescription'\n                            )}\n                            nameValidationError={this.state.nameValidationError}\n                            i18nNoNameError={t(\n                              'integrations:PleaseEnterATagName'\n                            )}\n                            i18nNameInUseError={t(\n                              'integrations:ThatTagNameIsInUse'\n                            )}\n                          >\n                            {({\n                              openAddDialog,\n                              openEditDialog,\n                              openRemoveDialog,\n                            }) => (\n                              <WithLoader\n                                error={error}\n                                loading={!hasData}\n                                loaderChildren={\n                                  <CiCdList children={<CiCdListSkeleton />} />\n                                }\n                                errorChildren={<ApiError />}\n                              >\n                                {() => (\n                                  <>\n                                    {filteredAndSortedEnvironments.length !==\n                                      0 && (\n                                      <CiCdList\n                                        children={filteredAndSortedEnvironments.map(\n                                          (listItem, index) => (\n                                            <CiCdListItem\n                                              key={index}\n                                              onEditClicked={openEditDialog}\n                                              onRemoveClicked={openRemoveDialog}\n                                              i18nEditButtonText={t(\n                                                'shared:Edit'\n                                              )}\n                                              i18nRemoveButtonText={t(\n                                                'shared:Remove'\n                                              )}\n                                              name={listItem.name}\n                                              i18nUsesText={\n                                                listItem.i18nUsesText\n                                              }\n                                            />\n                                          )\n                                        )}\n                                      />\n                                    )}\n                                    {filteredAndSortedEnvironments.length ===\n                                      0 && (\n                                      <CiCdListEmptyState\n                                        onAddNew={openAddDialog}\n                                        i18nTitle={t(\n                                          'integrations:NoEnvironmentsAvailable'\n                                        )}\n                                        i18nAddNewButtonText={t(\n                                          'shared:AddNew'\n                                        )}\n                                        i18nInfo={t(\n                                          'integrations:NoEnvironmentsAvailableInfo'\n                                        )}\n                                      />\n                                    )}\n                                  </>\n                                )}\n                              </WithLoader>\n                            )}\n                          </CiCdManagePageUI>\n                        </>\n                      )}\n                    </WithEnvironmentHelpers>\n                  );\n                }}\n              </WithListViewToolbarHelpers>\n            )}\n          </WithEnvironments>\n        )}\n      </Translation>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { IntegrationCreatorApp } from './IntegrationCreatorApp';\nimport { IntegrationEditorApp } from './IntegrationEditorApp';\nimport {\n  ActivityPage,\n  DetailsPage,\n  ImportPage,\n  IntegrationsPage,\n  MetricsPage,\n  TestAtlasmapPage,\n} from './pages';\nimport { ManageCiCdPage } from './pages/cicd';\nimport routes from './routes';\n\n/**\n * Entry point for the integrations section.\n *\n * Since the section is logically split in sub-apps, each with their own routes,\n * we do the same thing here: instead of listing all the routes in a single place\n * we have components called \"Apps\" that will define their own route handlers.\n *\n * @todo the IntegrationCreatorApp and IntegrationEditorApp could benefit from\n * some refactoring aimed to DRY the business logic that's embedded in every\n * page of the same type (especially the configuration ones).\n * Actually the IntegrationEditorApp is the result of a copy-paste of this folder\n * `syndesis/src/modules/integrations/pages/create/configure/editStep`,\n * with updated titles and links between the steps.\n * This is an hint that at least those 2 \"areas\" could be DRYed up, but it could\n * be worth exploring options to take it up a notch and figure out a way to\n * simplify also the other pages.\n */\nexport class IntegrationsModule extends React.Component {\n  public render() {\n    return (\n      <Switch>\n        <Route\n          path={routes.manageCicd.root}\n          exact={true}\n          component={ManageCiCdPage}\n        />\n        <Route path={routes.import.root} exact={true} component={ImportPage} />\n        <Route path={routes.create.root} component={IntegrationCreatorApp} />\n        <Route\n          path={routes.integration.edit.root}\n          component={IntegrationEditorApp}\n        />\n        <Route path={routes.list} exact={true} component={IntegrationsPage} />\n        <Route\n          path={'/integrations/atlasmap'}\n          exact={true}\n          component={TestAtlasmapPage}\n        />\n        <Route\n          path={routes.integration.details}\n          exact={true}\n          component={DetailsPage}\n        />\n        <Route\n          path={routes.integration.activity}\n          exact={true}\n          component={ActivityPage}\n        />\n        <Route\n          path={routes.integration.metrics}\n          exact={true}\n          component={MetricsPage}\n        />\n      </Switch>\n    );\n  }\n}\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { I18nextProvider, Translation } from 'react-i18next';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { App } from './app';\nimport i18n from './i18n';\nimport './index.css';\nimport { ConnectionsModule } from './modules/connections';\nimport { CustomizationsModule } from './modules/customizations';\nimport { DashboardModule } from './modules/dashboard';\nimport { DataModule } from './modules/data';\nimport { IntegrationsModule } from './modules/integrations';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <Router>\n    <I18nextProvider i18n={i18n}>\n      <Translation ns={['shared']}>\n        {t => (\n          <App\n            routes={[\n              {\n                component: DashboardModule,\n                exact: true,\n                icon: 'fa fa-tachometer-alt',\n                label: t('Home'),\n                to: '/',\n              },\n              {\n                component: IntegrationsModule,\n                icon: 'pficon pficon-integration',\n                label: t('Integrations'),\n                to: '/integrations',\n              },\n              {\n                component: ConnectionsModule,\n                icon: 'pficon pficon-plugged',\n                label: t('Connections'),\n                to: '/connections',\n              },\n              {\n                component: CustomizationsModule,\n                icon: 'fa fa-cube',\n                label: t('Customizations'),\n                to: '/customizations',\n              },\n              {\n                component: DataModule,\n                icon: 'fa fa-database',\n                label: t('Data'),\n                to: '/data',\n              },\n              // {\n              // component: TODO,\n              // icon: 'pficon pficon-settings',\n              // label: t('Settings'),\n              // to: '/settings',\n              // },\n            ]}\n          />\n        )}\n      </Translation>\n    </I18nextProvider>\n  </Router>,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n","import * as React from 'react';\n\nexport interface IApiContext {\n  apiUri: string;\n  dvApiUri: string;\n  headers: { [name: string]: string };\n}\n\nexport const ApiContextDefaultValue = {\n  apiUri: 'http://example.com',\n  dvApiUri: 'http://example.com',\n  headers: {},\n} as IApiContext;\n\nexport const ApiContext = React.createContext<IApiContext>(\n  ApiContextDefaultValue\n);\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = (function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof Symbol !== \"undefined\") {\n\t\tvar iteratorSymbol = Symbol.iterator;\n\t\tif (iteratorSymbol && (iteratorSymbol in target)) {\n\t\t\tvar iterator = target[iteratorSymbol](), step, pact, reject;\n\t\t\tfunction _cycle(result) {\n\t\t\t\ttry {\n\t\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (pact) {\n\t\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpact = result;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t_cycle();\n\t\t\tif (iterator.return) {\n\t\t\t\tvar _fixup = function(value) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\t\titerator.return();\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch(e) {\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\tif (pact && pact.then) {\n\t\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t_fixup();\n\t\t\t}\n\t\t\treturn pact;\n\t\t}\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"value is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof Symbol !== \"undefined\") {\n\t\tvar asyncIteratorSymbol = Symbol.asyncIterator;\n\t\tif (asyncIteratorSymbol && (asyncIteratorSymbol in target)) {\n\t\t\tvar pact = new _Pact();\n\t\t\tvar iterator = target[asyncIteratorSymbol]();\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t\treturn pact;\n\t\t\tfunction _resumeAfterBody(result) {\n\t\t\t\tif (check && !check()) {\n\t\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t\t}\n\t\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t\t}\n\t\t\tfunction _resumeAfterNext(step) {\n\t\t\t\tif (step.done) {\n\t\t\t\t\t_settle(pact, 1);\n\t\t\t\t} else {\n\t\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction _reject(error) {\n\t\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t\t}\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = (function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype[Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))] = function() {\n\t\treturn this;\n\t};\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","export interface IFetchHeaders {\n  [s: string]: string;\n}\nexport interface IFetch {\n  url: string;\n  method: 'GET' | 'PUT' | 'POST' | 'DELETE';\n  headers?: IFetchHeaders;\n  body?: any;\n\n  /**\n   * Indicates if the content type should be included in the headers. Defaults to `true`. When using a\n   * content type of 'multipart/form-data' this should be set to `false` but you still need to set the\n   * content type.\n   */\n  includeContentType?: boolean;\n\n  /**\n   * Defaults to 'application/json; charset=utf-8' if not set.\n   */\n  contentType?: string;\n\n  /**\n   * Indicates if 'accept' should be included in the headers. Defaults to `true`.\n   */\n  includeAccept?: boolean;\n\n  /**\n   * Defaults to 'application/json,text/plain,*&#47*' if not set.\n   */\n  accept?: string;\n\n  /**\n   * Indicates if a 'Referer Policy' of 'no-referrer' should be included.\n   */\n  includeReferrerPolicy?: boolean;\n\n  /**\n   * Whether or not to stringify the data to JSON, overrides the content type\n   */\n  stringifyBody?: boolean;\n}\n\nexport function callFetch({\n  url,\n  method,\n  headers = {},\n  body,\n  includeContentType = true,\n  contentType = 'application/json; charset=utf-8',\n  includeAccept = true,\n  accept = 'application/json,text/plain,*/*',\n  includeReferrerPolicy = true,\n  stringifyBody = true,\n}: IFetch) {\n  if (includeAccept) {\n    const acceptId = 'Accept';\n    headers[acceptId] = accept;\n  }\n\n  if (includeContentType) {\n    const contentTypeId = 'Content-Type';\n    headers[contentTypeId] = contentType;\n  }\n\n  if (includeReferrerPolicy) {\n    const referrerPolicyId = 'referrerPolicy';\n    headers[referrerPolicyId] = 'no-referrer';\n  }\n\n  return fetch(url, {\n    body:\n      contentType.includes('application/json') && stringifyBody\n        ? JSON.stringify(body)\n        : body,\n    cache: 'no-cache',\n    credentials: 'include',\n    headers: {\n      ...headers,\n    },\n    method,\n    mode: 'cors',\n    redirect: 'follow',\n  });\n}\n","import deepmerge from 'deepmerge';\nimport * as React from 'react';\nimport equal from 'react-fast-compare';\nimport { callFetch, IFetchHeaders } from './callFetch';\n\nexport interface IFetchState<T> {\n  data: T;\n  error: boolean;\n  errorMessage?: string;\n  hasData: boolean;\n  loading: boolean;\n}\n\nexport interface IFetchRenderProps<T> {\n  response: IFetchState<T>;\n  read(): Promise<void>;\n}\n\nexport interface IFetchProps<T> {\n  baseUrl: string;\n  url: string;\n  headers?: IFetchHeaders;\n  contentType?: string;\n  defaultValue: T;\n  initialValue?: T;\n  children(props: IFetchRenderProps<T>): any;\n}\n\nexport class Fetch<T> extends React.Component<IFetchProps<T>, IFetchState<T>> {\n  public constructor(props: IFetchProps<T>) {\n    super(props);\n    this.read = this.read.bind(this);\n    this.state = {\n      data: this.props.initialValue || this.props.defaultValue,\n      error: false,\n      hasData: !!this.props.initialValue,\n      loading: true,\n    };\n  }\n\n  public async componentDidMount() {\n    this.read();\n  }\n\n  public async componentDidUpdate(prevProps: IFetchProps<T>) {\n    if (prevProps.url !== this.props.url) {\n      this.read();\n    }\n  }\n\n  public shouldComponentUpdate(\n    nextProps: IFetchProps<T>,\n    nextState: IFetchState<T>\n  ): boolean {\n    return !equal(this.props, nextProps) || !equal(this.state, nextState);\n  }\n\n  public render() {\n    return this.props.children({\n      read: this.read,\n      response: this.state,\n    });\n  }\n\n  public async read() {\n    try {\n      this.setState({ loading: true });\n      const response = await callFetch({\n        contentType: this.props.contentType,\n        headers: this.props.headers,\n        method: 'GET',\n        url: `${this.props.baseUrl}${this.props.url}`,\n      });\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      let data;\n      if (\n        !this.props.contentType ||\n        this.props.contentType.indexOf('application/json') === 0\n      ) {\n        data = await response.json();\n        if (this.props.defaultValue) {\n          data = deepmerge(this.props.defaultValue, data);\n        }\n      } else {\n        data = await response.text();\n      }\n      this.setState({ data, hasData: true, loading: false });\n    } catch (e) {\n      this.setState({\n        data: this.props.defaultValue,\n        error: true,\n        errorMessage: e.message,\n        hasData: false,\n        loading: false,\n      });\n    }\n  }\n}\n","import { callFetch } from './callFetch';\nimport { Fetch, IFetchProps } from './Fetch';\n\nexport class Stream extends Fetch<string[]> {\n  protected reader: ReadableStreamReader | undefined;\n\n  public async componentDidUpdate(prevProps: IFetchProps<string[]>) {\n    if (prevProps.url !== this.props.url) {\n      if (this.reader) {\n        this.reader.cancel();\n      }\n      this.read();\n    }\n  }\n\n  public componentWillUnmount() {\n    if (this.reader) {\n      this.reader.cancel();\n    }\n  }\n\n  public read = async () => {\n    try {\n      this.setState({\n        loading: true,\n      });\n\n      callFetch({\n        contentType: this.props.contentType,\n        headers: this.props.headers,\n        method: 'GET',\n        url: `${this.props.baseUrl}${this.props.url}`,\n      })\n        .then(response => response.body)\n        .then(body => {\n          this.reader = body!.getReader();\n          const textDecoder = new TextDecoder('utf-8');\n          const pushData = ({\n            done,\n            value,\n          }: {\n            done: boolean;\n            value: Uint8Array;\n          }) => {\n            if (done) {\n              this.setState({\n                loading: false,\n              });\n            } else {\n              this.setState({\n                data: [...(this.state.data || []), textDecoder.decode(value)],\n              });\n\n              this.reader!.read().then(pushData);\n            }\n          };\n\n          this.reader.read().then(pushData);\n        });\n    } catch (e) {\n      this.setState({\n        error: true,\n        errorMessage: e.message,\n        loading: false,\n      });\n    }\n  };\n\n  public onSave = async () => {\n    throw new Error(`Can't save from a stream`);\n  };\n}\n","import * as React from 'react';\nimport { ApiContext } from './ApiContext';\nimport { Fetch, IFetchRenderProps } from './Fetch';\nimport { Stream } from './Stream';\n\nexport interface ISyndesisFetchProps<T> {\n  autoload?: boolean;\n  contentType?: string;\n  url: string;\n  stream?: boolean;\n  defaultValue: T;\n  initialValue?: T;\n  children(props: IFetchRenderProps<T>): any;\n}\n\nexport class SyndesisFetch<T> extends React.Component<ISyndesisFetchProps<T>> {\n  public render() {\n    const { url, stream, ...props } = this.props;\n\n    const FetchOrStream = stream ? Stream : Fetch;\n\n    return (\n      <ApiContext.Consumer>\n        {({ apiUri, headers }) => (\n          <FetchOrStream\n            baseUrl={apiUri}\n            url={url}\n            headers={headers}\n            {...props}\n          />\n        )}\n      </ApiContext.Consumer>\n    );\n  }\n}\n","import * as React from 'react';\nimport { ApiContext } from './ApiContext';\nimport { Fetch, IFetchRenderProps } from './Fetch';\n\nexport interface IDVFetchProps<T> {\n  autoload?: boolean;\n  contentType?: string;\n  url: string;\n  stream?: boolean;\n  defaultValue: T;\n  initialValue?: T;\n  children(props: IFetchRenderProps<T>): any;\n}\n\nexport class DVFetch<T> extends React.Component<IDVFetchProps<T>> {\n  public render() {\n    const { url, stream, ...props } = this.props;\n\n    return (\n      <ApiContext.Consumer>\n        {({ apiUri, dvApiUri, headers }) => (\n          <Fetch baseUrl={dvApiUri} url={url} headers={{}} {...props} />\n        )}\n      </ApiContext.Consumer>\n    );\n  }\n}\n","// Enum for the LeveledMessage level field\nexport enum MessageLevel {\n  INFO = 'INFO',\n  WARN = 'WARN',\n  ERROR = 'ERROR',\n}\n\n// Data shape kind enum when working with the DataShape type\nexport enum DataShapeKinds {\n  ANY = 'any',\n  JAVA = 'java',\n  JSON_SCHEMA = 'json-schema',\n  JSON_INSTANCE = 'json-instance',\n  XML_SCHEMA = 'xml-schema',\n  XML_SCHEMA_INSPECTED = 'xml-schema-inspected',\n  XML_INSTANCE = 'xml-instance',\n  NONE = 'none',\n}\n\n// These are message codes that we know about\nexport enum MessageCode {\n  SYNDESIS000 = 'SYNDESIS000', // generic message\n  SYNDESIS001 = 'SYNDESIS001', // One or more properties have been updated\n  SYNDESIS002 = 'SYNDESIS002', // One or more properties have been added or removed\n  SYNDESIS003 = 'SYNDESIS003', // Connector has been deleted\n  SYNDESIS004 = 'SYNDESIS004', // Extension has been deleted\n  SYNDESIS005 = 'SYNDESIS005', // Action has been deleted\n  SYNDESIS006 = 'SYNDESIS006', // One or more required properties is not set\n  SYNDESIS007 = 'SYNDESIS007', // Secrets update needed\n  SYNDESIS008 = 'SYNDESIS008', // Validation Error\n}\n\n// Integration status types and consts\nexport const PENDING = 'Pending';\nexport const PUBLISHED = 'Published';\nexport const UNPUBLISHED = 'Unpublished';\nexport const ERROR = 'Error';\n\nexport type IntegrationStatus =\n  | 'Pending'\n  | 'Published'\n  | 'Unpublished'\n  | 'Error';\n\nexport enum IntegrationType {\n  SingleFlow = 'SingleFlow',\n  ApiProvider = 'ApiProvider',\n  MultiFlow = 'MultiFlow',\n}\n\n// These types are for the integration detailed state\n// TODO: this should come from the swagger but it's missing\nexport enum ConsoleLinkType {\n  Events = 'EVENTS',\n  Logs = 'LOGS',\n}\n\nexport enum DetailedStatus {\n  Assembling = 'ASSEMBLING',\n  Building = 'BUILDING',\n  Deploying = 'DEPLOYING',\n  Starting = 'STARTING',\n}\n\n// Special sekret connection metadata keys\nexport const HIDE_FROM_STEP_SELECT = 'hide-from-step-select';\nexport const HIDE_FROM_CONNECTION_PAGES = 'hide-from-connection-pages';\n\n// stuff used by the ui to compute the StepKinds\nexport const EXTENSION = 'extension';\nexport const ENDPOINT = 'endpoint';\nexport const CONNECTION = ENDPOINT;\nexport const DATA_MAPPER = 'mapper';\nexport const BASIC_FILTER = 'ruleFilter';\nexport const ADVANCED_FILTER = 'expressionFilter';\nexport const STORE_DATA = 'storeData';\nexport const SET_DATA = 'setData';\nexport const CALL_ROUTE = 'callRoute';\nexport const CONDITIONAL_PROCESSING = 'conditionalProcessing';\nexport const SPLIT = 'split';\nexport const AGGREGATE = 'aggregate';\nexport const LOG = 'log';\nexport const TEMPLATE = 'template';\n","import * as React from 'react';\nimport { IChangeEvent, IMessageEvent } from './WithServerEvents';\n\nexport interface IServerEventsContext {\n  registerChangeListener: (listener: (event: IChangeEvent) => void) => void;\n  registerMessageListener: (listener: (event: IMessageEvent) => void) => void;\n  unregisterChangeListener: (listener: (event: IChangeEvent) => void) => void;\n  unregisterMessageListener: (listener: (event: IMessageEvent) => void) => void;\n}\n\nexport const ServerEventsContextDefaultValue = {} as IServerEventsContext;\n\nexport const ServerEventsContext = React.createContext<IServerEventsContext>(\n  ServerEventsContextDefaultValue\n);\n","import {\n  Action,\n  ActionDescriptor,\n  Connection,\n  Integration,\n  Step,\n} from '@syndesis/models';\nimport { saveAs } from 'file-saver';\nimport produce from 'immer';\nimport * as React from 'react';\nimport { ApiContext, IApiContext } from './ApiContext';\nimport { callFetch } from './callFetch';\nimport { PUBLISHED, UNPUBLISHED } from './constants';\n\ntype UpdateOrAddConnection = (\n  integration: Integration,\n  connection: Connection,\n  action: Action,\n  flowId: string,\n  position: number,\n  configuredProperties: any\n) => Promise<Integration>;\n\nexport interface IWithIntegrationHelpersChildrenProps {\n  /**\n   * adds a step of type connection to the provided integration object.\n   *\n   * @param integration - the integration object to modify\n   * @param connection - the connection object that's been used to set up the\n   * step\n   * @param action - the action that's been used to set up the step\n   * @param flow - the zero-based index of the flow where to add the step\n   * @param position - the zero-based index of the steps where to add the step\n   * @param configuredProperties - the values configured by the user for the step\n   *\n   * @todo should we check `flow` and `position` to see if they are valid?\n   * @todo perhaps rename it with a better name\n   */\n  addConnection: UpdateOrAddConnection;\n  /**\n   * updates a step of type connection to the provided integration object.\n   *\n   * @param integration - the integration object to modify\n   * @param connection - the connection object that's been used to set up the\n   * step\n   * @param action - the action that's been used to set up the step\n   * @param flow - the zero-based index of the flow where to add the step\n   * @param position - the zero-based index of the steps where to add the step\n   * @param configuredProperties - the values configured by the user for the step\n   *\n   * @todo perhaps rename it with a better name\n   * @todo should we check `flow` and `position` to see if they are valid?\n   */\n  updateConnection: UpdateOrAddConnection;\n  /**\n   * updates a step of type connection to the provided integration object if\n   * a step exists at the provided `flow` and `position` indexes; a new step is\n   * added otherwise.\n   *\n   * @param integration - the integration object to modify\n   * @param connection - the connection object that's been used to set up the\n   * step\n   * @param action - the action that's been used to set up the step\n   * @param flow - the zero-based index of the flow where to add the step\n   * @param position - the zero-based index of the steps where to add the step\n   * @param configuredProperties - the values configured by the user for the step\n   *\n   * @todo perhaps rename it with a better name\n   * @todo should we check `flow` and `position` to see if they are valid?\n   */\n  updateOrAddConnection: UpdateOrAddConnection;\n  /**\n   * Delete the integration with the specified ID, empty response is returned\n   * @param id\n   */\n  deleteIntegration(id: string): Promise<void>;\n  /**\n   * Deploy the integration with the specified ID and version.  Empty response is returned\n   *\n   * @param id\n   * @param version\n   * @param isIntegrationDeployment\n   */\n  deployIntegration(\n    id: string,\n    version: string | number,\n    isIntegrationDeployment?: boolean\n  ): Promise<void>;\n  /**\n   * Uploads and imports the supplied file as a new integration\n   * @param file\n   */\n  importIntegration(file: File): Promise<void>;\n  /**\n   * Requests a .zip file of the integration, using the specified filename\n   * @param id\n   * @param fileName\n   */\n  exportIntegration(id: string, fileName: string): Promise<void>;\n  /**\n   * asynchronously saves the provided integration, returning the saved\n   * integration in case of success.\n   *\n   * @param integration\n   *\n   * @todo make the returned object immutable to avoid uncontrolled changes\n   */\n  saveIntegration(integration: Integration): Promise<Integration>;\n  /**\n   * Tags the integration with the given CI/CD environments\n   * @param integrationId\n   * @param environments\n   */\n  tagIntegration(\n    integrationId: string,\n    environments: string[]\n  ): Promise<Response>;\n  /**\n   * Request that the given integration ID at the given version be deactivated, empty response is returned\n   * @param id\n   * @param version\n   */\n  undeployIntegration(id: string, version: string | number): Promise<void>;\n}\n\nexport interface IWithIntegrationHelpersProps {\n  children(props: IWithIntegrationHelpersChildrenProps): any;\n}\n\nexport class WithIntegrationHelpersWrapped extends React.Component<\n  IWithIntegrationHelpersProps & IApiContext\n> {\n  constructor(props: IWithIntegrationHelpersProps & IApiContext) {\n    super(props);\n    this.addConnection = this.addConnection.bind(this);\n    this.deleteIntegration = this.deleteIntegration.bind(this);\n    this.deployIntegration = this.deployIntegration.bind(this);\n    this.exportIntegration = this.exportIntegration.bind(this);\n    this.importIntegration = this.importIntegration.bind(this);\n    this.saveIntegration = this.saveIntegration.bind(this);\n    this.undeployIntegration = this.undeployIntegration.bind(this);\n    this.updateConnection = this.updateConnection.bind(this);\n    this.updateOrAddConnection = this.updateOrAddConnection.bind(this);\n    this.tagIntegration = this.tagIntegration.bind(this);\n  }\n\n  public async getActionDescriptor(\n    connectionId: string,\n    actionId: string,\n    configuredProperties: any\n  ): Promise<ActionDescriptor | null> {\n    if (configuredProperties) {\n      const response = await callFetch({\n        body: configuredProperties,\n        headers: this.props.headers,\n        method: 'POST',\n        url: `${\n          this.props.apiUri\n        }/connections/${connectionId}/actions/${actionId}`,\n      });\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return (await response.json()) as ActionDescriptor;\n    } else {\n      return null;\n    }\n  }\n\n  public async addConnection(\n    integration: Integration,\n    connection: Connection,\n    action: Action,\n    flowId: string,\n    position: number,\n    configuredProperties: any\n  ): Promise<Integration> {\n    const actionDescriptor = await this.getActionDescriptor(\n      connection.id!,\n      action.id!,\n      configuredProperties\n    );\n    return produce(integration, draft => {\n      const step: Step = {\n        action,\n        configuredProperties,\n        connection,\n        id: flowId,\n      };\n      if (actionDescriptor) {\n        step.action!.descriptor = actionDescriptor;\n      }\n      step.stepKind = 'endpoint';\n      draft.flows = draft.flows!.map(f => {\n        if (f.id === flowId) {\n          f.steps!.splice(position, 0, step);\n        }\n        return f;\n      });\n      draft.tags = Array.from(new Set([...(draft.tags || []), connection.id!]));\n    });\n  }\n\n  public async deleteIntegration(id: string) {\n    const response = await callFetch({\n      headers: this.props.headers,\n      method: 'DELETE',\n      url: `${this.props.apiUri}/integrations/${id}`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n  }\n\n  public async importIntegration(file: File) {\n    const response = await callFetch({\n      body: file,\n      contentType: 'application/zip',\n      headers: this.props.headers,\n      includeContentType: false,\n      method: 'POST',\n      url: `${this.props.apiUri}/integration-support/import`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n  }\n\n  public async exportIntegration(id: string, fileName: string) {\n    return callFetch({\n      headers: this.props.headers,\n      method: 'GET',\n      url: `${this.props.apiUri}/integration-support/export.zip?id=${id}`,\n    }).then(async body => saveAs(await body.blob(), fileName));\n  }\n\n  public async deployIntegration(\n    id: string,\n    version: string | number,\n    isIntegrationDeployment = false\n  ) {\n    const response = await callFetch({\n      body: isIntegrationDeployment ? { targetState: PUBLISHED } : {},\n      headers: this.props.headers,\n      method: isIntegrationDeployment ? 'POST' : 'PUT',\n      url: isIntegrationDeployment\n        ? `${\n            this.props.apiUri\n          }/integrations/${id}/deployments/${version}/targetState`\n        : `${this.props.apiUri}/integrations/${id}/deployments`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n  }\n\n  public async undeployIntegration(id: string, version: string | number) {\n    const response = await callFetch({\n      body: { targetState: UNPUBLISHED },\n      headers: this.props.headers,\n      method: 'POST',\n      url: `${\n        this.props.apiUri\n      }/integrations/${id}/deployments/${version}/targetState`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n  }\n\n  public async updateConnection(\n    integration: Integration,\n    connection: Connection,\n    action: Action,\n    flowId: string,\n    position: number,\n    configuredProperties: any\n  ): Promise<Integration> {\n    const actionDescriptor = await this.getActionDescriptor(\n      connection.id!,\n      action.id!,\n      configuredProperties\n    );\n    return produce(integration, draft => {\n      const step: Step = {\n        action,\n        configuredProperties,\n        connection,\n        id: flowId,\n      };\n      if (actionDescriptor) {\n        step.action!.descriptor = actionDescriptor;\n      }\n      step.stepKind = 'endpoint';\n      draft.flows = draft.flows!.map(f => {\n        if (f.id === flowId) {\n          f.steps![position] = step;\n        }\n        return f;\n      });\n    });\n  }\n  public async updateOrAddConnection(\n    integration: Integration,\n    connection: Connection,\n    action: Action,\n    flowId: string,\n    position: number,\n    configuredProperties: any\n  ): Promise<Integration> {\n    const actionDescriptor = await this.getActionDescriptor(\n      connection.id!,\n      action.id!,\n      configuredProperties\n    );\n    return produce(integration, draft => {\n      const step: Step = {\n        action,\n        configuredProperties,\n        connection,\n        id: flowId,\n      };\n      if (actionDescriptor) {\n        step.action!.descriptor = actionDescriptor;\n      }\n      step.stepKind = 'endpoint';\n      draft.flows = draft.flows!.map(f => {\n        if (f.id === flowId) {\n          if (f.steps![position]) {\n            f.steps![position] = step;\n          } else {\n            f.steps!.splice(position, 0, step);\n            draft.tags = Array.from(\n              new Set([...(draft.tags || []), connection.id!])\n            );\n          }\n        }\n        return f;\n      });\n    });\n  }\n\n  public async saveIntegration(integration: Integration): Promise<Integration> {\n    const response = await callFetch({\n      body: integration,\n      headers: this.props.headers,\n      method: integration.id ? 'PUT' : 'POST',\n      url: integration.id\n        ? `${this.props.apiUri}/integrations/${integration.id}`\n        : `${this.props.apiUri}/integrations`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return !integration.id\n      ? ((await response.json()) as Integration)\n      : Promise.resolve(integration);\n  }\n\n  public async tagIntegration(integrationId: string, environments: []) {\n    return callFetch({\n      body: environments,\n      headers: this.props.headers,\n      method: 'PUT',\n      url: `${this.props.apiUri}/public/integrations/${integrationId}/tags`,\n    });\n  }\n\n  public render() {\n    return this.props.children({\n      addConnection: this.addConnection,\n      deleteIntegration: this.deleteIntegration,\n      deployIntegration: this.deployIntegration,\n      exportIntegration: this.exportIntegration,\n      importIntegration: this.importIntegration,\n      saveIntegration: this.saveIntegration,\n      tagIntegration: this.tagIntegration,\n      undeployIntegration: this.undeployIntegration,\n      updateConnection: this.updateConnection,\n      updateOrAddConnection: this.updateOrAddConnection,\n    });\n  }\n}\n\n/**\n * This component provides through a render prop a number of helper\n * functions useful when working with an integration.\n *\n * Some of these helpers are available also as stand-alone functions\n * (packages/api/src/integrationHelpers/index.ts), but this component provides\n * methods like `saveIntegration` that can talk with the backend without any\n * additional information provided.\n *\n * Methods that modify an integration return a immutable copy of the original\n * object, to reduce the risk of bugs.\n *\n * @see [addConnection]{@link IWithIntegrationHelpersChildrenProps#addConnection}\n * @see [updateConnection]{@link IWithIntegrationHelpersChildrenProps#updateConnection}\n * @see [updateOrAddConnection]{@link IWithIntegrationHelpersChildrenProps#updateOrAddConnection}\n * @see [saveIntegration]{@link IWithIntegrationHelpersChildrenProps#saveIntegration}\n */\nexport const WithIntegrationHelpers: React.FunctionComponent<\n  IWithIntegrationHelpersProps\n> = props => (\n  <ApiContext.Consumer>\n    {apiContext => <WithIntegrationHelpersWrapped {...props} {...apiContext} />}\n  </ApiContext.Consumer>\n);\n","import * as React from 'react';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IWithChangeListenerProps {\n  filter: (change: IChangeEvent) => boolean;\n  read: () => void;\n  registerChangeListener: (listener: (event: IChangeEvent) => void) => void;\n  unregisterChangeListener: (listener: (event: IChangeEvent) => void) => void;\n  children(): any;\n}\n\nexport class WithChangeListener extends React.Component<\n  IWithChangeListenerProps\n> {\n  public constructor(props: IWithChangeListenerProps) {\n    super(props);\n    this.changeListener = this.changeListener.bind(this);\n  }\n\n  public render() {\n    return this.props.children();\n  }\n\n  public async componentDidMount() {\n    this.props.registerChangeListener(this.changeListener);\n  }\n\n  public async componentWillUnmount() {\n    this.props.unregisterChangeListener(this.changeListener);\n  }\n\n  public changeListener(event: IChangeEvent) {\n    if (this.props.filter(event)) {\n      this.props.read();\n    }\n  }\n}\n","import { Connector } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IApiConnectorsResponse {\n  items: Connector[];\n  totalCount: number;\n}\n\nexport interface IWithApiConnectorsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IApiConnectorsResponse>): any;\n}\n\nexport class WithApiConnectors extends React.Component<\n  IWithApiConnectorsProps\n> {\n  public changeFilter(change: IChangeEvent) {\n    return change.kind.startsWith('connector');\n  }\n\n  public render() {\n    return (\n      <SyndesisFetch<IApiConnectorsResponse>\n        url={'/connectors?query=connectorGroupId%3Dswagger-connector-template'}\n        defaultValue={{\n          items: [],\n          totalCount: 0,\n        }}\n      >\n        {({ read, response }) => {\n          if (this.props.disableUpdates) {\n            return this.props.children(response);\n          }\n          return (\n            <ServerEventsContext.Consumer>\n              {({ registerChangeListener, unregisterChangeListener }) => (\n                <WithChangeListener\n                  read={read}\n                  registerChangeListener={registerChangeListener}\n                  unregisterChangeListener={unregisterChangeListener}\n                  filter={this.changeFilter}\n                >\n                  {() => this.props.children(response)}\n                </WithChangeListener>\n              )}\n            </ServerEventsContext.Consumer>\n          );\n        }}\n      </SyndesisFetch>\n    );\n  }\n}\n","import * as React from 'react';\n\nexport interface IWithPollingProps {\n  polling: number;\n  read: () => void;\n  children(): any;\n}\n\nexport class WithPolling extends React.Component<IWithPollingProps> {\n  public pollingTimer?: number;\n\n  public constructor(props: IWithPollingProps) {\n    super(props);\n    this.poller = this.poller.bind(this);\n  }\n\n  public async componentDidMount() {\n    this.startPolling();\n  }\n\n  public async componentWillUnmount() {\n    this.stopPolling();\n  }\n\n  public render() {\n    return this.props.children();\n  }\n\n  public poller() {\n    this.props.read();\n  }\n\n  public setPoller(func: () => void) {\n    this.poller = func;\n  }\n\n  private startPolling() {\n    this.stopPolling();\n    if (this.props.polling) {\n      this.pollingTimer = setInterval(this.poller, this.props.polling) as any;\n    }\n  }\n\n  private stopPolling() {\n    if (this.pollingTimer) {\n      clearInterval(this.pollingTimer);\n      this.pollingTimer = undefined;\n    }\n  }\n}\n","import * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithPolling } from './WithPolling';\n\nexport interface IWithEnvironmentsRenderProps extends IFetchState<string[]> {\n  read(): Promise<void>;\n}\n\nexport interface IWithEnvironmentsProps {\n  disableUpdates?: boolean;\n  children(props: IWithEnvironmentsRenderProps): any;\n}\n\nexport class WithEnvironments extends React.Component<IWithEnvironmentsProps> {\n  public render() {\n    return (\n      <SyndesisFetch<string[]> url={'/public/environments'} defaultValue={[]}>\n        {({ read, response }) => {\n          if (this.props.disableUpdates) {\n            return this.props.children({ ...response, read });\n          }\n          return (\n            <WithPolling read={read} polling={5000}>\n              {() => this.props.children({ ...response, read })}\n            </WithPolling>\n          );\n        }}\n      </SyndesisFetch>\n    );\n  }\n}\n","import * as React from 'react';\nimport { ApiContext, IApiContext } from './ApiContext';\nimport { callFetch } from './callFetch';\n\n/**\n *\n */\nexport interface IWithEnvironmentHelpersChildrenProps {\n  deleteEnvironment(name: string): Promise<any>;\n  createEnvironment(name: string): Promise<any>;\n  renameEnvironment(name: string, newName: string): Promise<any>;\n}\n\nexport interface IWithEnvironmentHelpersProps {\n  children(props: IWithEnvironmentHelpersChildrenProps): any;\n}\n\nexport class WithEnvironmentHelpersWrapped extends React.Component<\n  IWithEnvironmentHelpersProps & IApiContext\n> {\n  constructor(props: IWithEnvironmentHelpersProps & IApiContext) {\n    super(props);\n    this.createEnvironment = this.createEnvironment.bind(this);\n    this.deleteEnvironment = this.deleteEnvironment.bind(this);\n    this.renameEnvironment = this.renameEnvironment.bind(this);\n  }\n\n  public async createEnvironment(name: string) {\n    const response = await callFetch({\n      body: name,\n      headers: this.props.headers,\n      method: 'PUT' /* @todo this won't actually work */,\n      stringifyBody: false,\n      url: `${this.props.apiUri}/public/environments/${name}`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return await response.body;\n  }\n\n  public async deleteEnvironment(name: string) {\n    const response = await callFetch({\n      headers: this.props.headers,\n      method: 'DELETE',\n      url: `${this.props.apiUri}/public/environments/${name}`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return await response.body;\n  }\n\n  public async renameEnvironment(name: string, newName: string) {\n    const response = await callFetch({\n      body: newName,\n      headers: this.props.headers,\n      method: 'PUT',\n      stringifyBody: false,\n      url: `${this.props.apiUri}/public/environments/${name}`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return await response.body;\n  }\n\n  public render() {\n    return this.props.children({\n      createEnvironment: this.createEnvironment,\n      deleteEnvironment: this.deleteEnvironment,\n      renameEnvironment: this.renameEnvironment,\n    });\n  }\n}\n\nexport const WithEnvironmentHelpers: React.FunctionComponent<\n  IWithEnvironmentHelpersProps\n> = props => (\n  <ApiContext.Consumer>\n    {apiContext => <WithEnvironmentHelpersWrapped {...props} {...apiContext} />}\n  </ApiContext.Consumer>\n);\n","import { Extension } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { SyndesisFetch } from './SyndesisFetch';\n\nexport interface IWithExtensionProps {\n  extensionId: string;\n  initialValue?: Extension;\n  children(props: IFetchState<Extension>): any;\n}\n\n/**\n * A component that fetches the extension with the specified identifier.\n * @see [extensionId]{@link IWithExtensionProps#extensionId}\n */\nexport class WithExtension extends React.Component<IWithExtensionProps> {\n  public render() {\n    return (\n      <SyndesisFetch<Extension>\n        url={`/extensions/${this.props.extensionId}`}\n        defaultValue={{\n          actions: [],\n          extensionType: 'Steps',\n          name: '',\n          schemaVersion: '',\n        }}\n        initialValue={this.props.initialValue}\n      >\n        {({ response }) => this.props.children(response)}\n      </SyndesisFetch>\n    );\n  }\n}\n","import { Extension } from '@syndesis/models';\nimport * as React from 'react';\nimport { ApiContext, IApiContext } from './ApiContext';\nimport { callFetch } from './callFetch';\n\nexport interface IWithExtensionHelpersChildrenProps {\n  deleteExtension(extensionId: string): Promise<void>;\n  importExtension(extensionId: string): Promise<void>;\n  uploadExtension(file: File, extensionId?: string): Promise<Extension>;\n}\n\nexport interface IWithExtensionHelpersProps {\n  children(props: IWithExtensionHelpersChildrenProps): any;\n}\n\nexport class WithExtensionHelpersWrapped extends React.Component<\n  IWithExtensionHelpersProps & IApiContext\n> {\n  constructor(props: IWithExtensionHelpersProps & IApiContext) {\n    super(props);\n    this.deleteExtension = this.deleteExtension.bind(this);\n    this.importExtension = this.importExtension.bind(this);\n    this.uploadExtension = this.uploadExtension.bind(this);\n  }\n\n  /**\n   * Deletes the extension with the specified identifier.\n   * @param extensionId the ID of the extension being deleted\n   */\n  public async deleteExtension(extensionId: string): Promise<void> {\n    const response = await callFetch({\n      headers: this.props.headers,\n      method: 'DELETE',\n      url: `${this.props.apiUri}/extensions/${extensionId}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Imports the extension with the specified identifier.\n   * @param extensionId the ID of the extension being imported\n   */\n  public async importExtension(extensionId: string): Promise<void> {\n    const response = await callFetch({\n      headers: this.props.headers,\n      method: 'POST',\n      url: `${this.props.apiUri}/extensions/${extensionId}/install`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Updates the extension with the specified identifier or creates a new extension if there is no identifier.\n   * @param extensionId the ID of the extension being uploaded\n   */\n  public async uploadExtension(\n    file: File,\n    extensionId?: string\n  ): Promise<Extension> {\n    const data = new FormData();\n    data.append('file', file, file.name);\n\n    const url = `${this.props.apiUri}/extensions`;\n\n    const response = await callFetch({\n      body: data,\n      contentType: 'multipart/form-data',\n      headers: this.props.headers,\n      includeAccept: false,\n      includeContentType: false,\n      includeReferrerPolicy: false,\n      method: 'POST',\n      url: extensionId ? `${url}?updatedId=${extensionId}` : url,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return (await response.json()) as Extension;\n  }\n\n  public render() {\n    return this.props.children({\n      deleteExtension: this.deleteExtension,\n      importExtension: this.importExtension,\n      uploadExtension: this.uploadExtension,\n    });\n  }\n}\n\nexport const WithExtensionHelpers: React.FunctionComponent<\n  IWithExtensionHelpersProps\n> = props => (\n  <ApiContext.Consumer>\n    {apiContext => <WithExtensionHelpersWrapped {...props} {...apiContext} />}\n  </ApiContext.Consumer>\n);\n","import { IntegrationOverview } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IWithExtensionIntegrationsProps {\n  extensionId: string;\n  disableUpdates?: boolean;\n  children(props: IFetchState<IntegrationOverview[]>): any;\n}\n\n/**\n * A component that fetches the integrations that a specified extension is used by.\n * @see [extensionId]{@link IWithExtensionIntegrationsProps#extensionId}\n */\nexport class WithExtensionIntegrations extends React.Component<\n  IWithExtensionIntegrationsProps\n> {\n  public changeFilter(change: IChangeEvent) {\n    return (\n      // rerun fetch if there was a change in integrations\n      change.kind === 'integration' || change.kind === 'integration-deployment'\n    );\n  }\n\n  public render() {\n    return (\n      <SyndesisFetch<IntegrationOverview[]>\n        url={`/extensions/${this.props.extensionId}/integrations`}\n        defaultValue={[]}\n      >\n        {({ read, response }) =>\n          this.props.disableUpdates ? (\n            this.props.children(response)\n          ) : (\n            <ServerEventsContext.Consumer>\n              {({ registerChangeListener, unregisterChangeListener }) => (\n                <WithChangeListener\n                  read={read}\n                  registerChangeListener={registerChangeListener}\n                  unregisterChangeListener={unregisterChangeListener}\n                  filter={this.changeFilter}\n                >\n                  {() => this.props.children(response)}\n                </WithChangeListener>\n              )}\n            </ServerEventsContext.Consumer>\n          )\n        }\n      </SyndesisFetch>\n    );\n  }\n}\n","import { Extension } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IExtensionsResponse {\n  items: Extension[];\n  totalCount: number;\n}\n\nexport interface IWithExtensionsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IExtensionsResponse>): any;\n}\n\n/**\n * A component that fetches all the extensions.\n */\nexport class WithExtensions extends React.Component<IWithExtensionsProps> {\n  public changeFilter(change: IChangeEvent) {\n    return change.kind === 'extension';\n  }\n\n  public render() {\n    return (\n      <SyndesisFetch<IExtensionsResponse>\n        url={'/extensions'}\n        defaultValue={{ items: [], totalCount: 0 }}\n      >\n        {({ read, response }) =>\n          this.props.disableUpdates ? (\n            this.props.children(response)\n          ) : (\n            <ServerEventsContext.Consumer>\n              {({ registerChangeListener, unregisterChangeListener }) => (\n                <WithChangeListener\n                  read={read}\n                  registerChangeListener={registerChangeListener}\n                  unregisterChangeListener={unregisterChangeListener}\n                  filter={this.changeFilter}\n                >\n                  {() => this.props.children(response)}\n                </WithChangeListener>\n              )}\n            </ServerEventsContext.Consumer>\n          )\n        }\n      </SyndesisFetch>\n    );\n  }\n}\n","import { IIntegrationOverviewWithDraft } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { SyndesisFetch } from './SyndesisFetch';\n\nexport interface IWithIntegrationProps {\n  integrationId: string;\n  initialValue?: IIntegrationOverviewWithDraft;\n  children(props: IFetchState<IIntegrationOverviewWithDraft>): any;\n}\n\n/**\n * A component that fetches the integration with the specified identifier.\n * @see [integrationId]{@link IWithIntegrationProps#integrationId}\n */\nexport class WithIntegration extends React.Component<IWithIntegrationProps> {\n  public render() {\n    return (\n      <SyndesisFetch<IIntegrationOverviewWithDraft>\n        url={`/integrations/${this.props.integrationId}`}\n        defaultValue={{\n          isDraft: true,\n          name: '',\n        }}\n        initialValue={this.props.initialValue}\n      >\n        {({ response }) => this.props.children(response)}\n      </SyndesisFetch>\n    );\n  }\n}\n","import { IntegrationOverview } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IIntegrationsResponse {\n  items: IntegrationOverview[];\n  totalCount: number;\n}\n\nexport interface IWithIntegrationsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IIntegrationsResponse>): any;\n}\n\nexport class WithIntegrations extends React.Component<IWithIntegrationsProps> {\n  public changeFilter(change: IChangeEvent) {\n    return (\n      change.kind === 'integration' || change.kind === 'integration-deployment'\n    );\n  }\n\n  public render() {\n    return (\n      <SyndesisFetch<IIntegrationsResponse>\n        url={'/integrations'}\n        defaultValue={{ items: [], totalCount: 0 }}\n      >\n        {({ read, response }) =>\n          this.props.disableUpdates ? (\n            this.props.children(response)\n          ) : (\n            <ServerEventsContext.Consumer>\n              {({ registerChangeListener, unregisterChangeListener }) => (\n                <WithChangeListener\n                  read={read}\n                  registerChangeListener={registerChangeListener}\n                  unregisterChangeListener={unregisterChangeListener}\n                  filter={this.changeFilter}\n                >\n                  {() => this.props.children(response)}\n                </WithChangeListener>\n              )}\n            </ServerEventsContext.Consumer>\n          )\n        }\n      </SyndesisFetch>\n    );\n  }\n}\n","import * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { SyndesisFetch } from './SyndesisFetch';\n\nexport interface IWithIntegrationTagsProps {\n  integrationId: string;\n  initialValue?: Map<string, any>;\n  children(props: IFetchState<Map<string, any>>): any;\n}\n\nexport class WithIntegrationTags extends React.Component<\n  IWithIntegrationTagsProps\n> {\n  public render() {\n    return (\n      <SyndesisFetch<Map<string, any>>\n        url={`/public/integrations/${this.props.integrationId}/tags`}\n        defaultValue={{} as Map<string, any>}\n        initialValue={this.props.initialValue}\n      >\n        {({ response }) => this.props.children(response)}\n      </SyndesisFetch>\n    );\n  }\n}\n","import {\n  Integration,\n  IntegrationMonitoring,\n  IntegrationWithMonitoring,\n} from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IIntegrationsResponse, WithIntegrations } from './WithIntegrations';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IMonitoredIntegrationsResponse {\n  items: IntegrationWithMonitoring[];\n  totalCount: number;\n}\n\nexport interface IWithMonitoredIntegrationsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IMonitoredIntegrationsResponse>): any;\n}\n\nexport class WithMonitoredIntegrations extends React.Component<\n  IWithMonitoredIntegrationsProps\n> {\n  public changeFilter(change: IChangeEvent) {\n    return (\n      change.kind === 'integration-deployment' ||\n      change.kind === 'integration-deployment-state-details'\n    );\n  }\n  public getMonitoredIntegrations(\n    integrations: IIntegrationsResponse,\n    response: IFetchState<IntegrationMonitoring[]>\n  ) {\n    return {\n      items: integrations.items.map(\n        (i: Integration): IntegrationWithMonitoring => ({\n          integration: i,\n          monitoring: response.data.find(\n            (o: IntegrationMonitoring) => o.integrationId === i.id\n          ),\n        })\n      ),\n      totalCount: integrations.totalCount,\n    } as IMonitoredIntegrationsResponse;\n  }\n  public render() {\n    return (\n      <WithIntegrations disableUpdates={this.props.disableUpdates}>\n        {({ data: integrations, ...props }) => (\n          <SyndesisFetch<IntegrationMonitoring[]>\n            url={'/monitoring/integrations'}\n            defaultValue={[]}\n          >\n            {({ read, response }) => {\n              if (this.props.disableUpdates) {\n                const data = this.getMonitoredIntegrations(\n                  integrations,\n                  response\n                );\n                return this.props.children({ ...props, data });\n              }\n              return (\n                <ServerEventsContext.Consumer>\n                  {({ registerChangeListener, unregisterChangeListener }) => (\n                    <WithChangeListener\n                      read={read}\n                      registerChangeListener={registerChangeListener}\n                      unregisterChangeListener={unregisterChangeListener}\n                      filter={this.changeFilter}\n                    >\n                      {() => {\n                        const data = this.getMonitoredIntegrations(\n                          integrations,\n                          response\n                        );\n                        return this.props.children({ ...props, data });\n                      }}\n                    </WithChangeListener>\n                  )}\n                </ServerEventsContext.Consumer>\n              );\n            }}\n          </SyndesisFetch>\n        )}\n      </WithIntegrations>\n    );\n  }\n}\n","import { IntegrationMetricsSummary } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithPolling } from './WithPolling';\n\nexport interface IWithIntegrationsMetricsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IntegrationMetricsSummary>): any;\n}\n\nexport class WithIntegrationsMetrics extends React.Component<\n  IWithIntegrationsMetricsProps\n> {\n  public render() {\n    return (\n      <SyndesisFetch<IntegrationMetricsSummary>\n        url={'/metrics/integrations'}\n        defaultValue={{\n          errors: 0, // int64\n          id: '-1',\n          integrationDeploymentMetrics: [],\n          lastProcessed: `${Date.now()}`, // date-time\n          messages: 0, // int64\n          metricsProvider: 'null',\n          start: `${Date.now()}`, // date-time\n          topIntegrations: {},\n        }}\n      >\n        {({ read, response }) => {\n          if (this.props.disableUpdates) {\n            return this.props.children(response);\n          }\n          return (\n            <WithPolling read={read} polling={5000}>\n              {() => this.props.children(response)}\n            </WithPolling>\n          );\n        }}\n      </SyndesisFetch>\n    );\n  }\n}\n","import { ConnectionOverview } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport function getConnectionsForDisplay(connections: ConnectionOverview[]) {\n  return connections.filter(\n    c => !c.metadata || !c.metadata['hide-from-connection-pages']\n  );\n}\n\nexport function getConnectionsWithFromAction(\n  connections: ConnectionOverview[]\n) {\n  return connections.filter(connection => {\n    if (!connection.connector) {\n      // safety net\n      return true;\n    }\n    return connection.connector.actions.some(action => {\n      return action.pattern === 'From';\n    });\n  });\n}\n\nexport function getConnectionsWithToAction(connections: ConnectionOverview[]) {\n  return connections.filter(connection => {\n    if (!connection.connector) {\n      // safety net\n      return true;\n    }\n    if (connection.connectorId === 'api-provider') {\n      // api provider can be used only for From actions\n      return false;\n    }\n    return connection.connector.actions.some(action => {\n      return action.pattern === 'To';\n    });\n  });\n}\n\nexport interface IConnectionsFetchResponse {\n  readonly items: ConnectionOverview[];\n  readonly totalCount: number;\n}\n\nexport interface IConnectionsResponse {\n  readonly connectionsForDisplay: ConnectionOverview[];\n  readonly connectionsWithToAction: ConnectionOverview[];\n  readonly connectionsWithFromAction: ConnectionOverview[];\n  readonly dangerouslyUnfilteredConnections: ConnectionOverview[];\n  readonly totalCount: number;\n}\n\nexport interface IWithConnectionsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IConnectionsResponse>): any;\n}\n\nexport function transformResponse(\n  response: IFetchState<IConnectionsFetchResponse>\n): IFetchState<IConnectionsResponse> {\n  return {\n    ...response,\n    data: {\n      connectionsForDisplay: getConnectionsForDisplay(response.data.items),\n      connectionsWithFromAction: getConnectionsWithFromAction(\n        response.data.items\n      ),\n      connectionsWithToAction: getConnectionsWithToAction(response.data.items),\n      dangerouslyUnfilteredConnections: response.data.items,\n      totalCount: response.data.totalCount,\n    },\n  };\n}\n\nexport class WithConnections extends React.Component<IWithConnectionsProps> {\n  public changeFilter(change: IChangeEvent) {\n    return change.kind.startsWith('connection');\n  }\n\n  public render() {\n    return (\n      <SyndesisFetch<IConnectionsFetchResponse>\n        url={'/connections'}\n        defaultValue={{\n          items: [],\n          totalCount: 0,\n        }}\n      >\n        {({ read, response }) => {\n          if (this.props.disableUpdates) {\n            return this.props.children(transformResponse(response));\n          }\n          return (\n            <ServerEventsContext.Consumer>\n              {({ registerChangeListener, unregisterChangeListener }) => (\n                <WithChangeListener\n                  read={read}\n                  registerChangeListener={registerChangeListener}\n                  unregisterChangeListener={unregisterChangeListener}\n                  filter={this.changeFilter}\n                >\n                  {() => this.props.children(transformResponse(response))}\n                </WithChangeListener>\n              )}\n            </ServerEventsContext.Consumer>\n          );\n        }}\n      </SyndesisFetch>\n    );\n  }\n}\n","import {\n  Action,\n  ActionDescriptor,\n  ActionDescriptorStep,\n  ConfigurationProperty,\n  ConnectionOverview,\n  Connector,\n  IConnectionWithIconFile,\n} from '@syndesis/models';\n\nexport function getActionsWithFrom(actions: Action[] = []) {\n  return actions.filter(a => a.pattern === 'From');\n}\n\nexport function getActionsWithTo(actions: Action[] = []) {\n  return actions.filter(a => a.pattern === 'To');\n}\n\nexport function getConnectionConnector(\n  connection: ConnectionOverview\n): Connector {\n  if (!connection.connector) {\n    throw Error(`FATAL: Connection ${connection.id} doesn't have a connector`);\n  }\n  return connection.connector;\n}\n\nexport function getConnectorActions(connector: Connector): Action[] {\n  return connector.actions;\n}\n\nexport function getActionById(actions: Action[], actionId: string): Action {\n  const action = actions.find(a => a.id === actionId);\n  if (!action) {\n    throw Error(`FATAL: Action ${actionId} not found`);\n  }\n  return action;\n}\n\nexport function getActionDescriptor(action: Action): ActionDescriptor {\n  if (!action.descriptor) {\n    throw Error(`FATAL: Action ${action.id} doesn't have any descriptor`);\n  }\n  return action.descriptor;\n}\n\nexport function getActionSteps(\n  descriptor: ActionDescriptor\n): ActionDescriptorStep[] {\n  if (!descriptor.propertyDefinitionSteps) {\n    throw Error(`FATAL: Descriptor doesn't have any definition`);\n  }\n  return descriptor.propertyDefinitionSteps;\n}\n\nexport function getActionStep(\n  steps: ActionDescriptorStep[],\n  step: number\n): ActionDescriptorStep {\n  if (step > steps.length - 1) {\n    throw Error(`FATAL: Step ${step} does not exist in the descriptor steps`);\n  }\n  return steps[step];\n}\n\nexport function getActionStepDefinition(\n  step: ActionDescriptorStep\n): {\n  [name: string]: ConfigurationProperty;\n} {\n  if (!step.properties) {\n    throw Error(`FATAL: Step ${step} does not have valid properties`);\n  }\n  return step.properties;\n}\n\nexport function getConnectionIcon(\n  apiUri: string,\n  connection: IConnectionWithIconFile\n) {\n  if (\n    typeof connection.icon === 'undefined' &&\n    typeof connection.iconFile === 'undefined'\n  ) {\n    // The connection has no icon for whatever reason\n    // TODO: sensible default icon\n    return '';\n  }\n  // Connections created from the API client connector can have a custom icon file\n  if (connection.iconFile || connection.icon instanceof File) {\n    const file = connection.iconFile || connection.icon;\n    const tempIconBlobPath = URL.createObjectURL(file);\n    return tempIconBlobPath;\n  }\n  // The connection has an embedded icon\n  if (connection.icon.toLowerCase().startsWith('data:')) {\n    return connection.icon;\n  }\n  // The connection's icon is stored in the DB in some weird way\n  if (\n    connection.icon.toLowerCase().startsWith('db:') ||\n    connection.icon.toLowerCase().startsWith('extension:')\n  ) {\n    return `${apiUri}/connectors/${connection.id}/icon?${connection.icon}`;\n  }\n  // Legacy connections rely on the icon being in the UI's assets\n  return `./../../icons/${connection.icon}.connection.png`;\n}\n","import {\n  Extension,\n  IConnectionWithIconFile,\n  Integration,\n  IntegrationOverview,\n  Step,\n} from '@syndesis/models';\nimport { Connection, ConnectorAction, StepKind } from '@syndesis/models/src';\nimport { key } from '@syndesis/utils';\nimport produce from 'immer';\nimport {\n  ADVANCED_FILTER,\n  AGGREGATE,\n  BASIC_FILTER,\n  DATA_MAPPER,\n  ENDPOINT,\n  HIDE_FROM_STEP_SELECT,\n  SPLIT,\n  TEMPLATE,\n} from '../constants';\nimport { getConnectionIcon } from './connectionFunctions';\n\nexport const NEW_INTEGRATION = {\n  name: '',\n  tags: [],\n} as Integration;\n\n/**\n * returns an empty integration object.\n *\n * @todo make the returned object immutable to avoid uncontrolled changes\n */\nexport function getEmptyIntegration(): Integration {\n  return produce(NEW_INTEGRATION, draft => {\n    draft.flows = [\n      {\n        id: key(),\n        name: '',\n        steps: [],\n      },\n    ];\n  });\n}\n\n/**\n * updates the name of an integration.\n *\n * @param integration\n * @param name\n */\n\nexport function setIntegrationName(\n  integration: Integration,\n  name: string\n): Integration {\n  return produce(integration, nextIntegration => {\n    nextIntegration.name = name;\n  });\n}\n\n/**\n * returns true if the provided integration can be published; returns false\n * otherwise.\n *\n * @param integration\n */\nexport function canPublish(integration: IntegrationOverview) {\n  return integration.currentState !== 'Pending';\n}\n\n/**\n * returns true if the provided integration can be activated; returns false\n * otherwise.\n *\n * @param integration\n */\nexport function canActivate(integration: IntegrationOverview) {\n  return (\n    integration.currentState !== 'Pending' &&\n    integration.currentState !== 'Published'\n  );\n}\n\n/**\n * returns true if the provided integration can be edited; returns false\n * otherwise.\n *\n * @param integration\n */\nexport function canEdit(integration: IntegrationOverview) {\n  return integration.currentState !== 'Pending';\n}\n\n/**\n * returns true if the provided integration can be deactivated; returns false\n * otherwise.\n *\n * @param integration\n */\nexport function canDeactivate(integration: IntegrationOverview) {\n  return integration.currentState !== 'Unpublished';\n}\n\n/**\n * returns the list of steps of the provided integration.\n *\n * @param integration\n * @param flowId\n *\n * @todo make the returned object immutable to avoid uncontrolled changes\n */\nexport function getSteps(integration: Integration, flowId: string): Step[] {\n  try {\n    const flow = getFlow(integration, flowId);\n    return flow!.steps!;\n  } catch (e) {\n    return [];\n  }\n}\n\n/**\n * returns a specific step of the provided integration.\n *\n * @param integration\n * @param flowId\n * @param step\n *\n * @todo make the returned object immutable to avoid uncontrolled changes\n */\n\nexport function getStep(\n  integration: Integration,\n  flowId: string,\n  step: number\n): Step {\n  try {\n    const flow = getFlow(integration, flowId);\n    return flow!.steps![step];\n  } catch (e) {\n    throw new Error(\n      `Can't find a step ${step} for flow ${flowId} in integration ${\n        integration.id\n      }`\n    );\n  }\n}\n\n/**\n * Returns the start icon representing the provided integration\n * @param integration\n */\nexport function getStartIcon(apiUri: string, integration: Integration) {\n  const flow = integration.flows![0];\n  return getStepIcon(apiUri, integration, flow.id!, 0);\n}\n\n/**\n * Returns the ending icon representing the provided integration\n * @param integration\n */\nexport function getFinishIcon(apiUri: string, integration: Integration) {\n  const flow = integration.flows![0];\n  return getStepIcon(apiUri, integration, flow.id!, flow.steps!.length - 1);\n}\n\nexport function getExtensionIcon(extension: Extension) {\n  return extension.icon || ''; // TODO: a default icon?\n}\n\nexport function getStepKindIcon(stepKind: Step['stepKind']) {\n  return `/icons/steps/${stepKind}.svg`;\n}\n\n/**\n * Returns the icon for the supplied step index of the supplied flow index\n * @param apiUri\n * @param integration\n * @param flowId\n * @param stepIndex\n */\nexport function getStepIcon(\n  apiUri: string,\n  integration: Integration,\n  flowId: string,\n  stepIndex: number\n): string {\n  const step = getStep(integration, flowId, stepIndex);\n  // The step is a connection\n  if (step.connection) {\n    const connection = step.connection as IConnectionWithIconFile;\n    return getConnectionIcon(apiUri, connection);\n  }\n  // The step is an extension\n  if (step.extension) {\n    return getExtensionIcon(step.extension);\n  }\n  // It's just a step\n  return getStepKindIcon(step.stepKind);\n}\n\n/**\n * Returns the flow object with the given ID\n * @param integration\n * @param flowId\n */\nexport function getFlow(integration: Integration, flowId: string) {\n  // TODO some code relies on these semantics\n  if (!integration || !integration.flows || !flowId) {\n    return undefined;\n  }\n  return integration.flows.find(flow => flow.id === flowId);\n}\n\n/**\n * Returns the last index of the step array of the given flow or undefined if it hasn't been created\n * @param integration\n * @param flowId\n */\nexport function getLastPosition(integration: Integration, flowId: string) {\n  if (!flowId) {\n    return undefined;\n  }\n  const flow = getFlow(integration, flowId);\n  if (!flow) {\n    return undefined;\n  }\n  // TODO preserve this block for now\n  if (!flow.steps) {\n    return undefined;\n  }\n  if (flow.steps.length <= 1) {\n    return 1;\n  }\n  return flow.steps.length - 1;\n}\n\n/**\n * Filters connections based on the supplied position in the step array\n * @param steps\n * @param position\n */\nexport function filterStepsByPosition(\n  integration: Integration,\n  flowId: string,\n  steps: StepKind[],\n  position: number\n) {\n  if (typeof position === 'undefined' || !steps) {\n    // safety net\n    return steps;\n  }\n  const atStart = position === 0;\n  const atEnd = getLastPosition(integration, flowId) === position;\n  return steps.filter(step => {\n    // Hide steps that are marked as such, and specifically the log connection\n    if (\n      (typeof step.connection !== 'undefined' &&\n        typeof step.connection.metadata !== 'undefined' &&\n        step.connection.metadata[HIDE_FROM_STEP_SELECT]) ||\n      (typeof step.metadata !== 'undefined' &&\n        step.metadata[HIDE_FROM_STEP_SELECT]) ||\n      (step as Connection).connectorId === 'log'\n    ) {\n      return false;\n    }\n    // Special handling for the beginning of a flow\n    if (atStart) {\n      // At the moment only endpoints can be at the start\n      if (step.stepKind) {\n        return false;\n      }\n      if ((step as Connection).connector) {\n        return (step as Connection).connector!.actions.some(\n          (action: ConnectorAction) => {\n            return action.pattern === 'From';\n          }\n        );\n      }\n      // it's not a connection\n      return true;\n    }\n    // Special handling for the end of a flow\n    if (atEnd) {\n      // Several step kinds aren't usable at the end of a flow\n      switch ((step as Step).stepKind) {\n        case DATA_MAPPER:\n        case BASIC_FILTER:\n        case ADVANCED_FILTER:\n        case SPLIT:\n        case AGGREGATE:\n        case TEMPLATE:\n          return false;\n        default:\n      }\n    }\n    if ((step as Connection).connectorId === 'api-provider') {\n      // api provider can be used only for From actions\n      return false;\n    }\n    // All non-connection steps can be shown, except the above\n    if (step.stepKind !== ENDPOINT) {\n      return true;\n    }\n    // Only show connections that have at least one action that accepts data\n    if ((step as Connection).connector) {\n      return (step as Connection).connector!.actions.some(\n        (action: ConnectorAction) => {\n          return action.pattern === 'To';\n        }\n      );\n    }\n    return true;\n  });\n}\n\n/**\n * Filters connections based on the supplied position in the step array and their\n * visibility status\n * @param steps\n * @param position\n */\nexport function visibleStepsByPosition(\n  integration: Integration,\n  flowId: string,\n  steps: StepKind[],\n  position: number\n) {\n  const previousSteps = getPreviousSteps(integration, flowId, position);\n  const subsequentSteps = getSubsequentSteps(integration, flowId, position);\n  return filterStepsByPosition(integration, flowId, steps, position).filter(s =>\n    s.visible\n      ? typeof s.visible === 'function'\n        ? s.visible(position, previousSteps, subsequentSteps)\n        : s.visible\n      : true\n  );\n}\n\n/**\n * Get an array of steps from the flow before the given position\n * @param integration\n * @param flowId\n * @param position\n */\nexport function getPreviousSteps(\n  integration: Integration,\n  flowId: string,\n  position: number\n) {\n  const flow = getFlow(integration, flowId);\n  if (!flow || !flow.steps) {\n    // TODO following semantics for now, this should throw an error\n    return [];\n  }\n  return flow.steps.slice(0, position);\n}\n\n/**\n * Get an array of steps from the flow after the given position\n * @param integration\n * @param flowId\n * @param position\n */\nexport function getSubsequentSteps(\n  integration: Integration,\n  flowId: string,\n  position: number\n) {\n  const flow = getFlow(integration, flowId);\n  if (!flow || !flow.steps) {\n    // TODO following semantics for now, this should throw an error\n    return [];\n  }\n  return flow.steps.slice(position + 1);\n}\n","import { Action, ConnectionOverview } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { getActionsWithFrom, getActionsWithTo } from './helpers';\nimport { SyndesisFetch } from './SyndesisFetch';\n\nexport interface IConnectionOverviewExtended extends ConnectionOverview {\n  readonly actionsWithFrom: Action[];\n  readonly actionsWithTo: Action[];\n}\n\nexport interface IWithConnectionProps {\n  id: string;\n  initialValue?: ConnectionOverview;\n  children(props: IFetchState<IConnectionOverviewExtended>): any;\n}\n\nexport class WithConnection extends React.Component<IWithConnectionProps> {\n  public render() {\n    return (\n      <SyndesisFetch<ConnectionOverview>\n        url={`/connections/${this.props.id}`}\n        defaultValue={{\n          name: '',\n        }}\n        initialValue={this.props.initialValue}\n      >\n        {({ response }) =>\n          this.props.children({\n            ...response,\n            data: {\n              ...response.data,\n              actionsWithFrom: getActionsWithFrom(\n                response.data.connector ? response.data.connector.actions : []\n              ),\n              actionsWithTo: getActionsWithTo(\n                response.data.connector ? response.data.connector.actions : []\n              ),\n            },\n          })\n        }\n      </SyndesisFetch>\n    );\n  }\n}\n","import { Connection, Connector } from '@syndesis/models';\nimport produce from 'immer';\nimport * as React from 'react';\nimport { ApiContext, IApiContext } from './ApiContext';\nimport { callFetch } from './callFetch';\n\nexport interface IConfigurationValidationViolation {\n  code: string;\n  description: string;\n  parameters: string[];\n  attributes: { [key: string]: string };\n}\n\nexport interface IConfigurationValidation {\n  status: 'OK' | 'ERROR';\n  scope: 'PARAMETERS' | 'CONNECTIVITY';\n  errors?: IConfigurationValidationViolation[];\n}\n\nexport interface IValidationResult {\n  isError: boolean;\n  error?: string;\n  message?: string;\n  property?: string;\n}\n\nexport interface IWithConnectionHelpersChildrenProps {\n  /**\n   * asynchronously saves the provided connection, returning the saved\n   * connection in case of success.\n   *\n   * @param connection\n   *\n   * @todo make the returned object immutable to avoid uncontrolled changes\n   */\n  validateConfiguration(\n    connectionId: string,\n    values: { [key: string]: string }\n  ): Promise<IConfigurationValidation[]>;\n  /**\n   * create a new Connection object starting from a Connector.\n   *\n   * @param connector\n   * @param name\n   * @param description\n   */\n  createConnection(\n    connector: Connector,\n    name: string,\n    description: string,\n    configuredProperties: { [key: string]: string }\n  ): Connection;\n  /**\n   * asynchronously saves the provided connection, returning the saved\n   * connection in case of success.\n   *\n   * @param connection\n   *\n   * @todo make the returned object immutable to avoid uncontrolled changes\n   */\n  saveConnection(connection: Connection): Promise<Connection>;\n  /**\n   * create a new Connection object starting from an existing Connection.\n   *\n   * @param connection\n   * @param name\n   * @param description\n   * @param configuredProperties\n   */\n  updateConnection(\n    connection: Connection,\n    name?: string,\n    description?: string,\n    configuredProperties?: { [key: string]: string }\n  ): Connection;\n  /**\n   * asynchronously deletes the provided connection.\n   *\n   * @param connectionId the connection ID\n   */\n  deleteConnection(connectionId: string): Promise<void>;\n  /**\n   *  Asynchronously validates the proposed connection name.\n   *\n   * @param connection the connection whose name is being changed\n   * @param proposedName the name being validated\n   * @returns a validation result\n   */\n  validateName(\n    connection: Connection,\n    proposedName: string\n  ): Promise<IValidationResult>;\n}\n\nexport interface IWithConnectionHelpersProps {\n  children(props: IWithConnectionHelpersChildrenProps): any;\n}\n\nexport class WithConnectionHelpersWrapped extends React.Component<\n  IWithConnectionHelpersProps & IApiContext\n> {\n  constructor(props: IWithConnectionHelpersProps & IApiContext) {\n    super(props);\n    this.createConnection = this.createConnection.bind(this);\n    this.deleteConnection = this.deleteConnection.bind(this);\n    this.updateConnection = this.updateConnection.bind(this);\n    this.validateConfiguration = this.validateConfiguration.bind(this);\n    this.saveConnection = this.saveConnection.bind(this);\n    this.validateName = this.validateName.bind(this);\n  }\n\n  public createConnection(\n    connector: Connector,\n    name: string,\n    description: string,\n    configuredProperties: { [key: string]: string }\n  ): Connection {\n    const connection = {} as Connection;\n    return produce(connection, draft => {\n      connection.name = name;\n      connection.description = description;\n      connection.configuredProperties = configuredProperties;\n      connection.connector = connector;\n      connection.connectorId = connector.id;\n      connection.icon = connector.icon;\n    });\n  }\n\n  public async deleteConnection(connectionId: string): Promise<void> {\n    const response = await callFetch({\n      headers: this.props.headers,\n      method: 'DELETE',\n      url: `${this.props.apiUri}/connections/${connectionId}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  public updateConnection(\n    connection: Connection,\n    name?: string,\n    description?: string,\n    configuredProperties?: { [key: string]: string }\n  ): Connection {\n    return produce(connection, draft => {\n      connection.name = name || connection.name;\n      // allow empty descriptions\n      connection.description =\n        description === undefined ? connection.description : description;\n      connection.configuredProperties =\n        configuredProperties || connection.configuredProperties;\n    });\n  }\n\n  public async validateConfiguration(\n    connectorId: string,\n    values: { [key: string]: string }\n  ): Promise<IConfigurationValidation[]> {\n    const response = await callFetch({\n      body: values,\n      headers: this.props.headers,\n      method: 'POST',\n      url: `${this.props.apiUri}/connectors/${connectorId}/verifier`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return (await response.json()) as IConfigurationValidation[];\n  }\n\n  public async saveConnection(connection: Connection): Promise<Connection> {\n    const response = await callFetch({\n      body: connection,\n      headers: this.props.headers,\n      method: connection.id ? 'PUT' : 'POST',\n      url: connection.id\n        ? `${this.props.apiUri}/connections/${connection.id}`\n        : `${this.props.apiUri}/connections`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return !connection.id\n      ? ((await response.json()) as Connection)\n      : Promise.resolve(connection);\n  }\n\n  public async validateName(\n    connection: Connection,\n    proposedName: string\n  ): Promise<IValidationResult> {\n    // short circuit if name has not changed\n    if (connection.name === proposedName) {\n      return {\n        isError: false,\n      };\n    }\n\n    const testConn = { name: proposedName };\n    const response = await callFetch({\n      body: testConn,\n      headers: this.props.headers,\n      method: 'POST',\n      url: `${this.props.apiUri}/connections/validation`,\n    });\n\n    if (response.ok) {\n      return {\n        isError: false,\n      };\n    }\n\n    // return the first error\n    const result = await response.json();\n    return {\n      isError: true,\n      ...result[0],\n    };\n  }\n\n  public render() {\n    return this.props.children({\n      createConnection: this.createConnection,\n      deleteConnection: this.deleteConnection,\n      saveConnection: this.saveConnection,\n      updateConnection: this.updateConnection,\n      validateConfiguration: this.validateConfiguration,\n      validateName: this.validateName,\n    });\n  }\n}\n\n/**\n * This component provides provides through a render propr a number of helper\n * functions useful when working with a connection.\n *\n * Methods that modify a connection return a immutable copy of the original\n * object, to reduce the risk of bugs.\n *\n * @see [saveConnection]{@link IWithConnectionHelpersChildrenProps#saveConnection}\n */\nexport const WithConnectionHelpers: React.FunctionComponent<\n  IWithConnectionHelpersProps\n> = props => (\n  <ApiContext.Consumer>\n    {apiContext => <WithConnectionHelpersWrapped {...props} {...apiContext} />}\n  </ApiContext.Consumer>\n);\n","import { Connector } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { SyndesisFetch } from './SyndesisFetch';\n\nexport interface IWithConnectorProps {\n  id: string;\n  initialValue?: Connector;\n  children(props: IFetchState<Connector>): any;\n}\n\nexport class WithConnector extends React.Component<IWithConnectorProps> {\n  public render() {\n    return (\n      <SyndesisFetch<Connector>\n        url={`/connectors/${this.props.id}`}\n        defaultValue={{\n          actions: [],\n          name: '',\n        }}\n        initialValue={this.props.initialValue}\n      >\n        {({ response }) => this.props.children(response)}\n      </SyndesisFetch>\n    );\n  }\n}\n","import { Connector } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IConnectorsFetchResponse {\n  readonly items: Connector[];\n  readonly totalCount: number;\n}\n\nexport interface IConnectorsResponse {\n  readonly connectorsForDisplay: Connector[];\n  readonly dangerouslyUnfilteredConnections: Connector[];\n  readonly totalCount: number;\n}\n\nexport interface IWithConnectorsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IConnectorsResponse>): any;\n}\n\nexport function getConnectorsForDisplay(connectors: Connector[]) {\n  return connectors.filter(\n    c => !c.metadata || !c.metadata['hide-from-connection-pages']\n  );\n}\n\nexport function transformConnectorsResponse(\n  response: IFetchState<IConnectorsFetchResponse>\n): IFetchState<IConnectorsResponse> {\n  return {\n    ...response,\n    data: {\n      connectorsForDisplay: getConnectorsForDisplay(response.data.items),\n      dangerouslyUnfilteredConnections: response.data.items,\n      totalCount: response.data.totalCount,\n    },\n  };\n}\n\nexport class WithConnectors extends React.Component<IWithConnectorsProps> {\n  public changeFilter(change: IChangeEvent) {\n    return change.kind.startsWith('connector');\n  }\n  public render() {\n    return (\n      <SyndesisFetch<IConnectorsFetchResponse>\n        url={'/connectors'}\n        defaultValue={{\n          items: [],\n          totalCount: 0,\n        }}\n      >\n        {({ read, response }) => {\n          if (this.props.disableUpdates) {\n            return this.props.children(transformConnectorsResponse(response));\n          }\n          return (\n            <ServerEventsContext.Consumer>\n              {({ registerChangeListener, unregisterChangeListener }) => (\n                <WithChangeListener\n                  read={read}\n                  registerChangeListener={registerChangeListener}\n                  unregisterChangeListener={unregisterChangeListener}\n                  filter={this.changeFilter}\n                >\n                  {() =>\n                    this.props.children(transformConnectorsResponse(response))\n                  }\n                </WithChangeListener>\n              )}\n            </ServerEventsContext.Consumer>\n          );\n        }}\n      </SyndesisFetch>\n    );\n  }\n}\n","/* tslint:disable:object-literal-sort-keys */\nimport { Step, StepKind } from '@syndesis/models';\nimport {\n  ADVANCED_FILTER,\n  AGGREGATE,\n  BASIC_FILTER,\n  DATA_MAPPER,\n  DataShapeKinds,\n  LOG,\n  SPLIT,\n  TEMPLATE,\n} from './constants';\n\nconst ALL_STEPS: StepKind[] = [\n  requiresInputOutputDataShapes(\n    {\n      id: undefined,\n      connection: undefined,\n      action: undefined,\n      name: 'Data Mapper',\n      description: 'Map fields from the input type to the output type.',\n      stepKind: DATA_MAPPER,\n      properties: {},\n      configuredProperties: undefined,\n    },\n    true,\n    false\n  ),\n  requiresOutputDataShape(\n    {\n      id: undefined,\n      connection: undefined,\n      action: undefined,\n      name: 'Basic Filter',\n      description:\n        'Continue the integration only if criteria you specify in simple input fields are met. Suitable for' +\n        ' most integrations.',\n      stepKind: BASIC_FILTER,\n      properties: undefined,\n      configuredProperties: undefined,\n    },\n    true\n  ),\n  requiresOutputDataShape({\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Template',\n    stepKind: TEMPLATE,\n    description:\n      'Upload or create a Freemarker, Mustache or Velocity template to define consistent output data.',\n    configuredProperties: undefined,\n    properties: undefined,\n  }),\n  noCollectionSupport({\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Advanced Filter',\n    description:\n      'Continue the integration only if criteria you define in scripting language expressions are met.',\n    stepKind: ADVANCED_FILTER,\n    properties: {\n      filter: {\n        type: 'textarea',\n        displayName: 'Only continue if',\n        placeholder: `Examples of Simple Language filter expressions:\n$\\{in.header.type\\} == 'widget' // Evaluates true when type = widget\n$\\{in.body.title\\} // Evaluates true when body contains title.\n`,\n        required: true,\n        rows: 10,\n      },\n    },\n    configuredProperties: undefined,\n  }),\n  {\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Log',\n    stepKind: LOG,\n    description: \"Send a message to the integration's log.\",\n    configuredProperties: undefined,\n    properties: {\n      contextLoggingEnabled: {\n        type: 'boolean',\n        displayName: 'Message Context',\n        required: false,\n      },\n      bodyLoggingEnabled: {\n        type: 'boolean',\n        displayName: 'Message Body',\n        required: false,\n      },\n      customText: {\n        type: 'string',\n        displayName: 'Custom Text',\n        required: false,\n      },\n      /*\n      loggingLevel: {\n        type: 'select',\n        displayName: 'Level',\n        value: 'INFO',\n        required: true,\n        enum: [\n          { value: 'INFO', label: 'INFO' },\n          { value: 'WARN', label: 'WARN' },\n          { value: 'ERROR', label: 'ERROR'},\n          {value: 'DEBUG', label: 'DEBUG'},\n          {value: 'TRACE', label: 'TRACE'}],\n      },\n      */\n    },\n  },\n  requiresOutputDataShape({\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Split',\n    description: 'Process each item in a set of data individually',\n    stepKind: SPLIT,\n    properties: {},\n    configuredProperties: undefined,\n  }),\n  requiresConsistentSplitAggregate({\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Aggregate',\n    description: 'End processing items in a foreach',\n    stepKind: AGGREGATE,\n    properties: {},\n    configuredProperties: undefined,\n  }),\n  /*\n  {\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Store Data',\n    stepKind: STORE_DATA,\n    description:\n      'Store data from an invocation to be used later in the integration',\n    properties: {},\n    configuredProperties: undefined,\n  },\n  {\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Set Data',\n    stepKind: SET_DATA,\n    description: 'Enrich data used within an integration',\n    properties: {},\n    configuredProperties: undefined,\n  },\n  {\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Call Route',\n    stepKind: CALL_ROUTE,\n    description:\n      'Call a child integration route from the main integration flow',\n    properties: {},\n    configuredProperties: undefined,\n  },\n  {\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Conditional Processing',\n    stepKind: CONDITIONAL_PROCESSING,\n    description: 'Add conditions and multiple paths for processing data',\n    properties: {},\n    configuredProperties: undefined,\n  }\n  */\n];\n\nfunction stepsHaveOutputDataShape(steps: Step[]): boolean {\n  return (\n    steps.filter(\n      s =>\n        s &&\n        s.action &&\n        s.action.descriptor &&\n        s.action.descriptor.outputDataShape &&\n        s.action.descriptor.outputDataShape.kind &&\n        s.action.descriptor.outputDataShape.kind.toLowerCase() !==\n          DataShapeKinds.NONE &&\n        s.action.descriptor.outputDataShape.kind.toLowerCase() !==\n          DataShapeKinds.ANY\n    ).length > 0\n  );\n}\n\nfunction stepsHaveInputDataShape(steps: Step[]): boolean {\n  return (\n    steps.filter(\n      s =>\n        s &&\n        s.action &&\n        s.action.descriptor &&\n        s.action.descriptor.inputDataShape &&\n        s.action.descriptor.inputDataShape.kind &&\n        s.action.descriptor.inputDataShape.kind.toLowerCase() !==\n          DataShapeKinds.NONE &&\n        s.action.descriptor.inputDataShape.kind.toLowerCase() !==\n          DataShapeKinds.ANY\n    ).length > 0\n  );\n}\n\nfunction requiresInputOutputDataShapes(\n  obj: StepKind,\n  anyPrevious = true,\n  anySubsequent = true\n): StepKind {\n  obj.visible = (\n    position: number,\n    previousSteps: Step[],\n    subsequentSteps: Step[]\n  ) => {\n    if (!anyPrevious) {\n      // only test the first previous step that has some kind of data shape\n      const previousStep = previousSteps\n        .reverse()\n        .find(s => dataShapeExists(s));\n      previousSteps = previousStep ? [previousStep] : [];\n    }\n    if (!anySubsequent) {\n      // only test the next subsequent step that has a data shape\n      const subsequentStep = previousSteps.find(s => dataShapeExists(s, true));\n      subsequentSteps = subsequentStep ? [subsequentStep] : [];\n    }\n    return (\n      stepsHaveOutputDataShape(previousSteps) &&\n      stepsHaveInputDataShape(subsequentSteps)\n    );\n  };\n  return obj;\n}\n\nfunction dataShapeExists(step: Step, input = false): boolean {\n  if (input) {\n    return !!(\n      step &&\n      step.action &&\n      step.action.descriptor &&\n      step.action.descriptor.inputDataShape\n    );\n  } else {\n    return !!(\n      step &&\n      step.action &&\n      step.action.descriptor &&\n      step.action.descriptor.outputDataShape\n    );\n  }\n}\n\nfunction hasPrecedingCollection(previousSteps: Step[]) {\n  const previousDataShape = previousSteps\n    .reverse()\n    .find(s => dataShapeExists(s));\n  return (\n    previousDataShape &&\n    previousDataShape.action &&\n    previousDataShape.action.descriptor &&\n    previousDataShape.action.descriptor.outputDataShape &&\n    previousDataShape.action.descriptor.outputDataShape.metadata &&\n    previousDataShape.action.descriptor.outputDataShape.metadata.variant ===\n      'collection'\n  );\n}\n\nfunction noCollectionSupport(obj: StepKind) {\n  obj.visible = (\n    position: number,\n    previousSteps: Step[],\n    subsequentSteps: Step[]\n  ) => {\n    return !hasPrecedingCollection(previousSteps);\n  };\n  return obj;\n}\n\nfunction requiresOutputDataShape(\n  obj: StepKind,\n  noCollectionSupportP = false\n): StepKind {\n  if (noCollectionSupportP) {\n    obj.visible = (\n      position: number,\n      previousSteps: Step[],\n      subsequentSteps: Step[]\n    ) => {\n      return (\n        stepsHaveOutputDataShape(previousSteps) &&\n        !hasPrecedingCollection(previousSteps)\n      );\n    };\n  } else {\n    obj.visible = (\n      position: number,\n      previousSteps: Step[],\n      subsequentSteps: Step[]\n    ) => {\n      return stepsHaveOutputDataShape(previousSteps);\n    };\n  }\n  return obj;\n}\n\nfunction requiresConsistentSplitAggregate(obj: StepKind): StepKind {\n  obj.visible = (\n    position: number,\n    previousSteps: Step[],\n    subsequentSteps: Step[]\n  ) => {\n    const countPreviousSplit = previousSteps.filter(s => s.stepKind === SPLIT)\n      .length;\n    const countPreviousAggregate = previousSteps.filter(\n      s => (s.stepKind || '').toLowerCase() === AGGREGATE\n    ).length;\n\n    if (countPreviousSplit <= countPreviousAggregate) {\n      return false;\n    }\n\n    const positionNextSplit = subsequentSteps.findIndex(\n      s => s.stepKind === SPLIT\n    );\n    const positionNextAggregate = subsequentSteps.findIndex(\n      s => s.stepKind === AGGREGATE\n    );\n\n    if (positionNextSplit === -1) {\n      return positionNextAggregate === -1;\n    }\n\n    return (\n      positionNextAggregate === -1 || positionNextSplit < positionNextAggregate\n    );\n  };\n  return obj;\n}\n\nexport interface IStepsResponse {\n  items: StepKind[];\n}\n\nexport interface IWithStepsProps {\n  disableUpdates?: boolean;\n  children(props: IStepsResponse): any;\n}\n\nexport const WithSteps: React.FunctionComponent<IWithStepsProps> = ({\n  children,\n}) => {\n  return children({\n    items: ALL_STEPS,\n  });\n};\n","import * as React from 'react';\nimport { callFetch, IFetchHeaders } from './callFetch';\n\nexport interface IChangeEvent {\n  action: string;\n  kind: string;\n  id: string;\n}\n\nexport interface IMessageEvent {\n  id: string;\n  data: string;\n  event: string;\n}\n\nexport interface IWithEventsProps {\n  apiUri: string;\n  headers: IFetchHeaders;\n  children(props: IWithEventsState): any;\n}\n\nexport interface IWithEventsState {\n  registerChangeListener: (listener: (event: IChangeEvent) => void) => void;\n  registerMessageListener: (listener: (event: IMessageEvent) => void) => void;\n  unregisterChangeListener: (listener: (event: IChangeEvent) => void) => void;\n  unregisterMessageListener: (listener: (event: IMessageEvent) => void) => void;\n}\n\nconst RECONNECT_TIME = 5000;\n\nexport class WithServerEvents extends React.Component<\n  IWithEventsProps,\n  IWithEventsState\n> {\n  private starting = false;\n  private started = false;\n  private unmounting = false;\n  private retries = 0;\n  private preferredProtocol: string = '';\n  private eventSource: EventSource | undefined;\n  private webSocket: WebSocket | undefined;\n  private changeListeners: Array<(event: IChangeEvent) => void>;\n  private messageListeners: Array<(event: IMessageEvent) => void>;\n\n  public constructor(props: IWithEventsProps) {\n    super(props);\n    this.changeListeners = [];\n    this.messageListeners = [];\n    this.registerChangeListener = this.registerChangeListener.bind(this);\n    this.registerMessageListener = this.registerMessageListener.bind(this);\n    this.unregisterChangeListener = this.unregisterChangeListener.bind(this);\n    this.unregisterMessageListener = this.unregisterMessageListener.bind(this);\n  }\n\n  public registerChangeListener(listener: (event: IChangeEvent) => void) {\n    this.changeListeners = [...this.changeListeners, listener];\n  }\n\n  public registerMessageListener(listener: (event: IMessageEvent) => void) {\n    this.messageListeners = [...this.messageListeners, listener];\n  }\n\n  public unregisterChangeListener(listener: (event: IChangeEvent) => void) {\n    this.changeListeners = this.changeListeners.filter(l => l !== listener);\n  }\n\n  public unregisterMessageListener(listener: (event: IMessageEvent) => void) {\n    this.messageListeners = this.messageListeners.filter(l => l !== listener);\n  }\n\n  public async componentDidMount() {\n    this.start();\n  }\n\n  public async componentWillUnmount() {\n    this.unmounting = true;\n    this.close();\n    this.changeListeners = [];\n    this.messageListeners = [];\n  }\n\n  public render() {\n    return this.props.children({\n      registerChangeListener: this.registerChangeListener,\n      registerMessageListener: this.registerMessageListener,\n      unregisterChangeListener: this.unregisterChangeListener,\n      unregisterMessageListener: this.unregisterMessageListener,\n    });\n  }\n\n  private close() {\n    this.started = false;\n    this.starting = false;\n    if (this.webSocket) {\n      this.webSocket.close();\n      this.webSocket = undefined;\n    }\n    if (this.eventSource) {\n      this.eventSource.close();\n      this.eventSource = undefined;\n    }\n  }\n\n  private start() {\n    this.startConnection(this.retries % 2 === 0);\n  }\n\n  private onFailure(error: any) {\n    this.close();\n    if (this.unmounting) {\n      return;\n    }\n    this.retries++;\n    // Initialy retry very quickly.\n    let reconnectIn = RECONNECT_TIME;\n    if (this.retries < 3) {\n      reconnectIn = 1;\n    }\n    setTimeout(() => {\n      // console.log('Reconnecting');\n      switch (this.preferredProtocol) {\n        // Once we find a protocol that works, keep using it.\n        case 'ws':\n          this.startConnection(true);\n          break;\n        case 'es':\n          this.startConnection(false);\n          break;\n        default:\n          // Keep flipping between WS and ES untill we find one that works.\n          this.startConnection(this.retries % 2 === 0);\n          break;\n      }\n    }, reconnectIn);\n  }\n\n  private async startConnection(connectUsingWebSockets: boolean) {\n    if (this.starting || this.started || this.unmounting) {\n      return;\n    }\n    this.starting = true;\n    try {\n      const response = await callFetch({\n        body: '',\n        headers: this.props.headers,\n        method: 'POST',\n        url: `${this.props.apiUri}/event/reservations`,\n      });\n      let reservation = await response.json();\n      reservation = reservation.data;\n      if (connectUsingWebSockets) {\n        let wsApiEndpoint = this.props.apiUri.replace(/^http/, 'ws');\n        wsApiEndpoint += '/event/streams.ws/' + reservation;\n        // console.log('Connecting using web socket');\n        this.starting = false;\n        this.started = true;\n        this.connectWebSocket(wsApiEndpoint);\n      } else {\n        this.starting = false;\n        this.started = true;\n        // console.log('Connecting using server side events');\n        this.connectEventSource(\n          this.props.apiUri + '/event/streams/' + reservation\n        );\n      }\n    } catch (error) {\n      this.onFailure(error);\n      throw error;\n    }\n  }\n\n  private postMessageEvent(messageEvent: IMessageEvent) {\n    this.messageListeners.forEach(listener => {\n      listener(messageEvent);\n    });\n  }\n\n  private postChangeEvent(changeEvent: IChangeEvent) {\n    this.changeListeners.forEach(listener => {\n      listener(changeEvent);\n    });\n  }\n\n  private connectEventSource(url: string) {\n    this.eventSource = new EventSource(url);\n    this.eventSource.addEventListener('message', (event: any) => {\n      this.started = true;\n      this.starting = false;\n      this.preferredProtocol = 'es';\n      // console.log('sse.message: ', event.data);\n      this.postMessageEvent(event);\n    });\n    this.eventSource.addEventListener('change-event', (event: any) => {\n      this.started = true;\n      const value = JSON.parse(event.data) as IChangeEvent;\n      // console.log('sse.change-event: ', value);\n      this.postChangeEvent(value);\n    });\n    const onError = (event: any) => {\n      // console.log('sse.close: ', event);\n      this.onFailure(event);\n    };\n    this.eventSource.addEventListener('close', onError);\n    this.eventSource.addEventListener('error', onError);\n    return this.eventSource;\n  }\n\n  private connectWebSocket(url: string) {\n    this.webSocket = new WebSocket(url);\n    this.webSocket.onmessage = event => {\n      this.started = true;\n      this.starting = false;\n      const messageEvent = JSON.parse(event.data) as IMessageEvent;\n      switch (messageEvent.event) {\n        case 'message':\n          this.preferredProtocol = 'ws';\n          // console.log('ws.message: ', messageEvent.data);\n          this.postMessageEvent(messageEvent);\n          break;\n        case 'change-event':\n          const value = JSON.parse(messageEvent.data) as IChangeEvent;\n          // console.log('ws.change-event: ', value);\n          this.postChangeEvent(value);\n          break;\n        default:\n        // I guess we don't care what happens here...\n        // console.log('ws.unknown-message: ', event);\n      }\n    };\n    this.webSocket.onclose = event => {\n      // console.log('ws.onclose: ', event);\n      this.onFailure(event);\n    };\n    return this.webSocket;\n  }\n}\n","import { RestViewDefinition } from '@syndesis/models';\nimport * as React from 'react';\nimport { DVFetch } from './DVFetch';\nimport { IFetchState } from './Fetch';\n\nexport interface IWithViewProps {\n  vdbId: string;\n  initialValue?: RestViewDefinition[];\n  children(props: IFetchState<RestViewDefinition[]>): any;\n}\n\n/**\n * A component that fetches the specified VDB views.\n * @see [vdbId]{@link IWithViewProps#vdbId}\n */\nexport class WithViews extends React.Component<IWithViewProps> {\n  public render() {\n    return (\n      <DVFetch<RestViewDefinition[]>\n        url={`workspace/vdbs/${this.props.vdbId}/Models/views/Views`}\n        defaultValue={[]}\n        initialValue={this.props.initialValue}\n      >\n        {({ read, response }) => this.props.children(response)}\n      </DVFetch>\n    );\n  }\n}\n","import { ViewEditorState } from '@syndesis/models';\nimport * as React from 'react';\nimport { DVFetch } from './DVFetch';\nimport { IFetchState } from './Fetch';\n\nexport interface IWithViewEditorStatesRenderProps\n  extends IFetchState<ViewEditorState[]> {\n  read(): Promise<void>;\n}\n\nexport interface IWithViewEditorStatesProps {\n  idPattern?: string;\n  children(props: IWithViewEditorStatesRenderProps): any;\n}\n\nexport class WithViewEditorStates extends React.Component<\n  IWithViewEditorStatesProps\n> {\n  public render() {\n    return (\n      <DVFetch<ViewEditorState[]>\n        url={\n          'service/userProfile/viewEditorState' +\n          (this.props.idPattern ? '?pattern=' + this.props.idPattern : '')\n        }\n        defaultValue={[]}\n      >\n        {({ read, response }) => this.props.children({ ...response, read })}\n      </DVFetch>\n    );\n  }\n}\n","import {\n  QueryResults,\n  RestDataService,\n  ViewEditorState,\n} from '@syndesis/models';\nimport * as React from 'react';\nimport { ApiContext, IApiContext } from './ApiContext';\nimport { callFetch } from './callFetch';\n\nconst WORKSPACE_ROOT = '/tko:komodo/tko:workspace/';\n\nexport interface IWithVirtualizationHelpersChildrenProps {\n  createVirtualization(\n    virtualizationName: string,\n    virtualizationDescription?: string\n  ): Promise<RestDataService>;\n  deleteView(virtualization: RestDataService, viewName: string): Promise<void>;\n  deleteViewEditorState(viewEditorStateId: string): Promise<void>;\n  deleteVirtualization(virtualizationName: string): Promise<void>;\n  publishVirtualization(virtualizationName: string): Promise<void>;\n  queryVirtualization(\n    virtualizationName: string,\n    query: string,\n    limit: number,\n    offset: number\n  ): Promise<QueryResults>;\n  refreshVirtualizationViews(\n    virtualizationName: string,\n    viewEditorStates: ViewEditorState[]\n  ): Promise<void>;\n  unpublishServiceVdb(vdbName: string): Promise<void>;\n  updateViewEditorStates(viewEditorStates: ViewEditorState[]): Promise<void>;\n}\n\nexport interface IWithVirtualizationHelpersProps {\n  username: string;\n  children(props: IWithVirtualizationHelpersChildrenProps): any;\n}\n\nexport class WithVirtualizationHelpersWrapped extends React.Component<\n  IWithVirtualizationHelpersProps & IApiContext\n> {\n  constructor(props: IWithVirtualizationHelpersProps & IApiContext) {\n    super(props);\n    this.createVirtualization = this.createVirtualization.bind(this);\n    this.updateViewEditorStates = this.updateViewEditorStates.bind(this);\n    this.deleteView = this.deleteView.bind(this);\n    this.deleteViewEditorState = this.deleteViewEditorState.bind(this);\n    this.deleteVirtualization = this.deleteVirtualization.bind(this);\n    this.publishVirtualization = this.publishVirtualization.bind(this);\n    this.queryVirtualization = this.queryVirtualization.bind(this);\n    this.refreshVirtualizationViews = this.refreshVirtualizationViews.bind(\n      this\n    );\n    this.unpublishServiceVdb = this.unpublishServiceVdb.bind(this);\n  }\n\n  /**\n   * Creates a virtualization with the specified name and description\n   * @param virtName the name of the virtualization to create\n   * @param virtDesc the description (optional) of the virtualization to create\n   */\n  public async createVirtualization(\n    virtName: string,\n    virtDesc?: string\n  ): Promise<RestDataService> {\n    const newVirtualization = {\n      keng__dataPath: `${WORKSPACE_ROOT}${this.props.username}/${virtName}`,\n      keng__id: `${virtName}`,\n      serviceVdbName: `${virtName}`.toLowerCase() + 'vdb',\n      tko__description: virtDesc ? `${virtDesc}` : '',\n    } as RestDataService;\n\n    const response = await callFetch({\n      body: newVirtualization,\n      headers: {},\n      method: 'POST',\n      url: `${this.props.dvApiUri}workspace/dataservices/${virtName}`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve(newVirtualization);\n  }\n\n  /**\n   * Deletes the specified virtualization view.\n   * @param virtualization the virtualization\n   * @param viewName the name of the view being deleted\n   */\n  public async deleteView(\n    virtualization: RestDataService,\n    viewName: string\n  ): Promise<void> {\n    const vdbName = virtualization.serviceVdbName;\n    const editorStateId = vdbName + '.' + viewName;\n    // Delete viewEditorState\n    await this.deleteViewEditorState(editorStateId);\n    // Delete virtualization view\n    const response = await callFetch({\n      headers: {},\n      method: 'DELETE',\n      url: `${\n        this.props.dvApiUri\n      }workspace/vdbs/${vdbName}/Models/views/Views/${viewName}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Deletes the virtualization with the specified name.\n   * @param virtualizationName the name of the virtualization being deleted\n   */\n  public async deleteVirtualization(virtualizationName: string): Promise<void> {\n    const response = await callFetch({\n      headers: {},\n      method: 'DELETE',\n      url: `${this.props.dvApiUri}workspace/dataservices/${virtualizationName}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Publish the virtualization with the specified name.\n   * @param virtualizationName the name of the virtualization being published\n   */\n  public async publishVirtualization(\n    virtualizationName: string\n  ): Promise<void> {\n    const pubVirtualization = {\n      name: `${virtualizationName}`,\n    };\n\n    const response = await callFetch({\n      body: pubVirtualization,\n      headers: {},\n      method: 'POST',\n      url: `${this.props.dvApiUri}metadata/publish`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Query the Service VDB with sql query and properties.\n   * @param virtualizationName the name of the virtualization associated with the service\n   * @param sqlQuery the sql query statement to execute against the virtualization\n   * @param rowlimit limit to number of rows to return\n   * @param rowOffset number of data rows to filter from the beginning of the result set\n   */\n  public async queryVirtualization(\n    virtualizationName: string,\n    sqlQuery: string,\n    rowlimit: number,\n    rowOffset: number\n  ): Promise<QueryResults> {\n    // The payload for the rest call\n    const queryBody = {\n      limit: rowlimit,\n      offset: rowOffset,\n      query: sqlQuery,\n      target: virtualizationName,\n    };\n\n    const response = await callFetch({\n      body: queryBody,\n      headers: {},\n      method: 'POST',\n      url: `${this.props.dvApiUri}metadata/query`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return (await response.json()) as QueryResults;\n  }\n\n  /**\n   * Unpublish the Service VDB with the specified name.\n   * @param vdbName the name of the vdb associated with the service\n   */\n  public async unpublishServiceVdb(vdbName: string): Promise<void> {\n    const response = await callFetch({\n      headers: {},\n      method: 'DELETE',\n      url: `${this.props.dvApiUri}metadata/publish/${vdbName}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Delete the specified ViewEditorState in the komodo user profile\n   * @param viewEditorState the view editor state\n   */\n  public async deleteViewEditorState(viewEditorStateId: string): Promise<void> {\n    const response = await callFetch({\n      headers: {},\n      method: 'DELETE',\n      url: `${\n        this.props.dvApiUri\n      }service/userProfile/viewEditorState/${viewEditorStateId}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Saves ViewEditorStates in the komodo user profile\n   * @param viewEditorStates the array of view editor states\n   */\n  public async updateViewEditorStates(\n    viewEditorStates: ViewEditorState[]\n  ): Promise<void> {\n    const response = await callFetch({\n      body: viewEditorStates,\n      headers: {},\n      method: 'PUT',\n      url: `${this.props.dvApiUri}service/userProfile/viewEditorStates`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Saves ViewEditorStates in the komodo user profile, then updates the virtualizations\n   * @param viewEditorStates the array of view editor states\n   */\n  public async refreshVirtualizationViews(\n    virtualizationName: string,\n    viewEditorStates: ViewEditorState[]\n  ): Promise<void> {\n    // Updates the view editor states\n    await this.updateViewEditorStates(viewEditorStates);\n    const response = await callFetch({\n      headers: {},\n      method: 'POST',\n      url: `${\n        this.props.dvApiUri\n      }workspace/dataservices/refreshViews/${virtualizationName}`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  public render() {\n    return this.props.children({\n      createVirtualization: this.createVirtualization,\n      deleteView: this.deleteView,\n      deleteViewEditorState: this.deleteViewEditorState,\n      deleteVirtualization: this.deleteVirtualization,\n      publishVirtualization: this.publishVirtualization,\n      queryVirtualization: this.queryVirtualization,\n      refreshVirtualizationViews: this.refreshVirtualizationViews,\n      unpublishServiceVdb: this.unpublishServiceVdb,\n      updateViewEditorStates: this.updateViewEditorStates,\n    });\n  }\n}\n\nexport const WithVirtualizationHelpers: React.FunctionComponent<\n  IWithVirtualizationHelpersProps\n> = props => (\n  <ApiContext.Consumer>\n    {apiContext => (\n      <WithVirtualizationHelpersWrapped {...props} {...apiContext} />\n    )}\n  </ApiContext.Consumer>\n);\n","import { RestDataService } from '@syndesis/models';\nimport * as React from 'react';\nimport { DVFetch } from './DVFetch';\nimport { IFetchState } from './Fetch';\n\nexport interface IWithVirtualizationProps {\n  virtualizationId: string;\n  initialValue?: RestDataService;\n  children(props: IFetchState<RestDataService>): any;\n}\n\n/**\n * A component that fetches the virtualization with the specified identifier.\n * @see [virtualizationId]{@link IWithVirtualizationProps#virtualizationId}\n */\nexport class WithVirtualization extends React.Component<\n  IWithVirtualizationProps\n> {\n  public render() {\n    return (\n      <DVFetch<RestDataService>\n        url={`workspace/dataservices/${this.props.virtualizationId}`}\n        defaultValue={{\n          connections: 0,\n          drivers: 0,\n          keng___links: [],\n          keng__baseUri: '',\n          keng__dataPath: '',\n          keng__hasChildren: false,\n          keng__id: '',\n          keng__kType: '',\n          publishedState: 'NOTFOUND',\n          serviceVdbName: '',\n          serviceVdbVersion: '',\n          serviceViewDefinitions: [],\n          serviceViewModel: '',\n          tko__description: '',\n        }}\n        initialValue={this.props.initialValue}\n      >\n        {({ response }) => this.props.children(response)}\n      </DVFetch>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport * as React from 'react';\nimport { DVFetch } from './DVFetch';\nimport { IFetchState } from './Fetch';\nimport { WithPolling } from './WithPolling';\n\nexport interface IWithVirtualizationsRenderProps\n  extends IFetchState<RestDataService[]> {\n  read(): Promise<void>;\n}\n\nexport interface IWithVirtualizationsProps {\n  children(props: IWithVirtualizationsRenderProps): any;\n}\n\nexport class WithVirtualizations extends React.Component<\n  IWithVirtualizationsProps\n> {\n  public render() {\n    return (\n      <DVFetch<RestDataService[]>\n        url={'workspace/dataservices'}\n        defaultValue={[]}\n      >\n        {({ read, response }) => {\n          return (\n            <WithPolling read={read} polling={5000}>\n              {() => this.props.children({ ...response, read })}\n            </WithPolling>\n          );\n        }}\n      </DVFetch>\n    );\n  }\n}\n","import { VirtualizationSourceStatus } from '@syndesis/models';\nimport * as React from 'react';\nimport { DVFetch } from './DVFetch';\nimport { IFetchState } from './Fetch';\n\nexport interface IWithVirtualizationConnectionStatusesProps {\n  children(props: IFetchState<VirtualizationSourceStatus[]>): any;\n}\n\nexport class WithVirtualizationConnectionStatuses extends React.Component<\n  IWithVirtualizationConnectionStatusesProps\n> {\n  public render() {\n    return (\n      <DVFetch<VirtualizationSourceStatus[]>\n        url={'metadata/syndesisSourceStatuses'}\n        defaultValue={[]}\n      >\n        {({ read, response }) => this.props.children(response)}\n      </DVFetch>\n    );\n  }\n}\n","import { SchemaNode } from '@syndesis/models';\nimport * as React from 'react';\nimport { DVFetch } from './DVFetch';\nimport { IFetchState } from './Fetch';\n\nexport interface IWithVirtualizationConnectionSchemaProps {\n  connectionId: string;\n  children(props: IFetchState<SchemaNode[]>): any;\n}\n\nexport class WithVirtualizationConnectionSchema extends React.Component<\n  IWithVirtualizationConnectionSchemaProps\n> {\n  public render() {\n    return (\n      <DVFetch<SchemaNode[]>\n        url={`metadata/${this.props.connectionId}/schema`}\n        defaultValue={[]}\n      >\n        {({ read, response }) => this.props.children(response)}\n      </DVFetch>\n    );\n  }\n}\n","import { Integration } from '@syndesis/models';\n\nexport const serializeIntegration = (i: Integration) =>\n  btoa(encodeURIComponent(JSON.stringify(i)));\n","import { Integration } from '@syndesis/models';\n\nexport const deserializeIntegration = (i: string) =>\n  JSON.parse(decodeURIComponent(atob(i))) as Integration;\n","/* tslint:disable:object-literal-sort-keys no-empty-interface */\nimport { RestDataService } from '@syndesis/models';\nimport { makeResolver, makeResolverNoParams } from '@syndesis/utils';\nimport routes from './routes';\n\n// TODO: unit test every single one of these resolvers 😫\nexport default {\n  virtualizations: {\n    views: {\n      root: makeResolver<{ virtualization: RestDataService }>(\n        routes.virtualizations.virtualization.views.root,\n        ({ virtualization }) => ({\n          params: {\n            virtualizationId: virtualization.keng__id,\n          },\n          state: {\n            virtualization,\n          },\n        })\n      ),\n      importSource: {\n        root: makeResolverNoParams(\n          routes.virtualizations.virtualization.views.importSource.root\n        ),\n        selectConnection: makeResolver<{ virtualization: RestDataService }>(\n          routes.virtualizations.virtualization.views.importSource\n            .selectConnection,\n          ({ virtualization }) => ({\n            params: {\n              virtualizationId: virtualization.keng__id,\n            },\n            state: {\n              virtualization,\n            },\n          })\n        ),\n        selectViews: makeResolver<{\n          connectionId: string;\n          virtualization: RestDataService;\n        }>(\n          routes.virtualizations.virtualization.views.importSource.selectViews,\n          ({ connectionId, virtualization }) => ({\n            params: {\n              virtualizationId: virtualization.keng__id,\n            },\n            state: {\n              connectionId,\n              virtualization,\n            },\n          })\n        ),\n      },\n    },\n    relationship: makeResolver<{ virtualization: RestDataService }>(\n      routes.virtualizations.virtualization.relationship,\n      ({ virtualization }) => ({\n        params: {\n          virtualizationId: virtualization.keng__id,\n        },\n        state: {\n          virtualization,\n        },\n      })\n    ),\n    sqlClient: makeResolver<{ virtualization: RestDataService }>(\n      routes.virtualizations.virtualization.sqlClient,\n      ({ virtualization }) => ({\n        params: {\n          virtualizationId: virtualization.keng__id,\n        },\n        state: {\n          virtualization,\n        },\n      })\n    ),\n    metrics: makeResolver<{ virtualization: RestDataService }>(\n      routes.virtualizations.virtualization.metrics,\n      ({ virtualization }) => ({\n        params: {\n          virtualizationId: virtualization.keng__id,\n        },\n        state: {\n          virtualization,\n        },\n      })\n    ),\n    create: makeResolverNoParams(routes.virtualizations.create),\n    import: makeResolverNoParams(routes.virtualizations.import),\n    list: makeResolverNoParams(routes.virtualizations.list),\n  },\n  root: makeResolverNoParams(routes.virtualizations.list),\n};\n"],"sourceRoot":""}