{"version":3,"sources":["../../src/ApiContext.tsx","../../../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../../src/callFetch.ts","../../src/Fetch.tsx","../../src/Stream.tsx","../../src/SyndesisFetch.tsx","../../src/DVFetch.tsx","../../src/constants.ts","../../src/ServerEventsContext.tsx","../../src/WithIntegrationHelpers.tsx","../../src/WithChangeListener.tsx","../../src/WithApiConnectors.tsx","../../src/WithPolling.tsx","../../src/WithEnvironments.tsx","../../src/WithEnvironmentHelpers.tsx","../../src/WithExtension.tsx","../../src/WithExtensionHelpers.tsx","../../src/WithExtensionIntegrations.tsx","../../src/WithExtensions.tsx","../../src/WithIntegration.tsx","../../src/WithIntegrations.tsx","../../src/WithIntegrationTags.tsx","../../src/WithMonitoredIntegrations.tsx","../../src/WithIntegrationsMetrics.tsx","../../src/WithConnections.tsx","../../src/helpers/connectionFunctions.ts","../../src/helpers/integrationFunctions.ts","../../src/WithConnection.tsx","../../src/WithConnectionHelpers.tsx","../../src/WithConnector.tsx","../../src/WithConnectors.tsx","../../src/WithSteps.tsx","../../src/WithServerEvents.tsx","../../src/WithViews.tsx","../../src/WithViewEditorStates.tsx","../../src/WithVirtualizationHelpers.tsx","../../src/WithVirtualization.tsx","../../src/WithVirtualizations.tsx","../../src/WithVirtualizationConnectionStatuses.tsx","../../src/WithVirtualizationConnectionSchema.tsx","../../src/helpers/serializeIntegration.ts","../../src/helpers/deserializeIntegration.ts","modules/customizations/resolvers.ts","../../src/DataMapperAdapter.tsx","i18n/locales/index.ts","i18n/index.ts","modules/integrations/resolvers.ts","shared/ApiError.tsx","shared/ModuleLoader.tsx","shared/PageNotFound.tsx","shared/PageTitle.tsx","shared/WithClosedNavigation.tsx","shared/WithErrorBoundary.tsx","shared/index.ts","modules/integrations/routes.ts","modules/integrations/components/IntegrationEditorStepAdder.tsx","modules/dashboard/routes.ts","modules/dashboard/resolvers.ts","modules/resolvers.ts","../../src/Shared/ConfirmationDialog.tsx","../../src/Shared/Dialog.tsx","../../src/Layout/Container.tsx","../../src/Shared/DndFileChooser.tsx","../../src/Layout/AppLayout.tsx","../../src/Layout/AppTopMenu.tsx","../../src/Layout/ButtonLink.tsx","../../src/Layout/Loader.tsx","../../src/Layout/PfNavLink.tsx","../../src/Layout/PfVerticalNavItem.tsx","../../src/Layout/TabBarItem.tsx","../../src/Layout/WizardSteps.tsx","../../src/Shared/InlineTextEdit.tsx","../../src/Shared/ListViewToolbar.tsx","../../src/Shared/LogViewer.tsx","../../src/Shared/Notifications.tsx","../../src/Shared/SimplePageHeader.tsx","../../src/Shared/ProgressWithLink.tsx","../../src/Shared/PfDropdownItem.tsx","../../src/Connection/ConnectionCard.tsx","../../src/Connection/ConnectionDetailsForm.tsx","../../src/Connection/ConnectionDetailsHeader.tsx","../../src/Connection/ConnectionsGrid.tsx","../../src/Connection/ConnectionsGridCell.tsx","../../src/Connection/ConnectionsListView.tsx","../../src/Connection/ConnectorConfigurationForm.tsx","../../src/Integration/CiCd/CiCdUIModels.ts","../../src/Customization/ApiConnectorDetailCard.tsx","../../src/Customization/ApiConnectorInfo.tsx","../../src/Customization/ApiConnectorReview.tsx","../../src/Customization/ApiConnectorDetail.tsx","../../src/Customization/ApiConnectorListItem.tsx","../../src/Customization/ApiConnectorListView.tsx","../../src/Customization/ExtensionDetail.tsx","../../src/Customization/ExtensionImportCard.tsx","../../src/Customization/ExtensionImportReview.tsx","../../src/Customization/ExtensionIntegrationsTable.tsx","../../src/Customization/ExtensionListItem.tsx","../../src/Customization/ExtensionListView.tsx","../../src/Customization/ExtensionOverview.tsx","../../src/Customization/ExtensionSupports.tsx","../../src/Shared/AggregatedMetricCard.tsx","../../src/Dashboard/ConnectionsMetric.tsx","../../src/Dashboard/Dashboard.tsx","../../src/Dashboard/IntegrationBoard.tsx","../../src/Dashboard/RecentUpdatesCard.tsx","../../src/Integration/CiCd/CiCdEditDialog.tsx","../../src/Integration/CiCd/CiCdList.tsx","../../src/Integration/CiCd/CiCdListEmptyState.tsx","../../src/Integration/CiCd/CiCdListItem.tsx","../../src/Integration/CiCd/CiCdListView.tsx","../../src/Integration/CiCd/CiCdManagePageUI.tsx","../../src/Integration/CiCd/CiCdListSkeleton.tsx","../../src/Integration/CiCd/TagIntegrationDialog.tsx","../../src/Integration/CiCd/TagIntegrationListItem.tsx","../../src/Integration/CiCd/TagIntegrationDialogEmptyState.tsx","../../src/Integration/CiCd/TagIntegrationDialogBody.tsx","../../src/Integration/Import/ImportPageUI.tsx","../../src/Integration/IntegrationActions.tsx","../../src/Integration/IntegrationDetailActivity.tsx","../../src/Integration/IntegrationDetailActivityItem.tsx","../../src/Integration/IntegrationDetailActivityItemSteps.tsx","../../src/Integration/IntegrationDetailDescription.tsx","../../src/Integration/IntegrationDetailEditableName.tsx","../../src/Integration/IntegrationDetailHistoryListView.tsx","../../src/Integration/IntegrationDetailHistoryListViewItem.tsx","../../src/Integration/IntegrationDetailInfo.tsx","../../src/Integration/IntegrationDetailMetrics.tsx","../../src/Integration/IntegrationEditorActionsListItem.tsx","../../src/Integration/IntegrationEditorChooseAction.tsx","../../src/Integration/IntegrationEditorChooseConnection.tsx","../../src/Integration/IntegrationEditorConnectionsListItem.tsx","../../src/Integration/IntegrationEditorForm.tsx","../../src/Integration/IntegrationEditorNothingToConfigure.tsx","../../src/Integration/IntegrationEditorStepsList.tsx","../../src/Integration/IntegrationEditorStepsListItem.tsx","../../src/Integration/IntegrationFlowAddStep.tsx","../../src/Integration/IntegrationFlowStep.tsx","../../src/Integration/IntegrationFlowStepDetails.tsx","../../src/Integration/IntegrationFlowStepGeneric.tsx","../../src/Integration/IntegrationIcon.tsx","../../src/Integration/IntegrationStatus.tsx","../../src/Integration/models.ts","../../src/Integration/IntegrationStatusDetail.tsx","../../src/Integration/IntegrationStepsHorizontalItem.tsx","../../src/Integration/IntegrationStepsHorizontalView.tsx","../../src/Integration/IntegrationVerticalFlow.tsx","../../src/Integration/IntegrationsList.tsx","../../src/Integration/IntegrationsListItem.tsx","../../src/Integration/IntegrationsListSkeleton.tsx","../../src/Data/DvConnection/DvConnectionCard.tsx","../../src/Integration/IntegrationsListView.tsx","../../src/Dashboard/TopIntegrationsCard.tsx","../../src/Dashboard/UptimeMetric.tsx","../../src/Data/Virtualizations/Views/ViewListItem.tsx","../../src/Data/Virtualizations/Views/ViewList.tsx","../../src/Data/DvConnection/DvConnectionsGrid.tsx","../../src/Data/DvConnection/DvConnectionsGridCell.tsx","../../src/Data/DvConnection/DvConnectionsListView.tsx","../../src/Data/Virtualizations/Views/ViewInfoListItem.tsx","../../src/Data/Virtualizations/Views/ViewInfoList.tsx","../../src/Data/Virtualizations/VirtualizationListItem.tsx","../../src/Data/Virtualizations/models.ts","../../src/Data/Virtualizations/VirtualizationList.tsx","../../src/Data/Virtualizations/VirtualizationPublishStatus.tsx","../../src/Data/Virtualizations/VirtualizationPublishStatusDetail.tsx","../../src/Connection/ConnectionCreatorLayout.tsx","../../src/Connection/ConnectionSkeleton.tsx","../../src/Customization/ApiConnectorListSkeleton.tsx","../../src/Customization/ExtensionListSkeleton.tsx","../../src/Dashboard/RecentUpdatesItem.tsx","../../src/Dashboard/RecentUpdatesSkeleton.tsx","../../src/Data/Virtualizations/Views/ViewListSkeleton.tsx","../../src/Data/DvConnection/DvConnectionSkeleton.tsx","../../src/Data/Virtualizations/Views/ViewInfoListSkeleton.tsx","../../src/Data/Virtualizations/Views/ViewsCreateLayout.tsx","../../src/Data/Virtualizations/VirtualizationListSkeleton.tsx","../../src/Integration/IntegrationActionSelectorCard.tsx","../../src/Integration/IntegrationEditorLayout.tsx","../../src/Integration/IntegrationFlowStepWithOverview.tsx","../../src/Integration/IntegrationsListItemUnreadable.tsx","../../src/Layout/Breadcrumb.tsx","../../src/Layout/TabBar.tsx","../../src/Layout/WizardStep.tsx","../../src/Shared/GenericTable.tsx","../../src/Shared/UnrecoverableError.tsx","modules/integrations/components/TagIntegrationDialogWrapper.tsx","modules/integrations/components/Integrations.tsx","modules/integrations/components/IntegrationCreatorBreadcrumbs.tsx","modules/integrations/components/IntegrationDetailHistory.tsx","modules/integrations/components/IntegrationDetailSteps.tsx","modules/integrations/components/IntegrationEditorBreadcrumbs.tsx","modules/integrations/components/IntegrationEditorSidebar.tsx","modules/integrations/components/index.ts","modules/customizations/routes.ts","app/syndesis_logo_full_darkbkg.svg","modules/data/routes.ts","modules/connections/resolvers.ts","app/AppContext.tsx","app/WithConfig.tsx","app/App.tsx","app/index.ts","modules/connections/routes.ts","../../src/widgets/helpers.ts","../../src/widgets/FormInputComponent.tsx","../../src/widgets/FormSelectComponent.tsx","../../src/widgets/FormTextAreaComponent.tsx","../../src/widgets/FormCheckboxComponent.tsx","../../src/widgets/FormHiddenComponent.tsx","../../src/widgets/FormDurationComponent.tsx","../../src/FormBuilder.tsx","../../src/AutoForm.tsx","../../src/autoformHelpers.ts","../../src/key.ts","../../src/WithListViewToolbarHelpers.tsx","../../src/WithLoader.tsx","../../src/WithRouteData.tsx","../../src/WithRouter.tsx","../../src/makeResolver.ts","../../src/OptionalIntUtil.ts","modules/connections/components/ConnectionCreatorBreadcrumbs.tsx","modules/connections/components/Connections.tsx","modules/connections/components/ConnectionsWithToolbar.tsx","modules/connections/components/WithConnectorForm.tsx","modules/connections/components/index.ts","../../packages/atlasmap-assembly/dist/atlasmap/runtime.js","../../packages/atlasmap-assembly/dist/atlasmap/polyfills.js","../../packages/atlasmap-assembly/dist/atlasmap/styles.js","../../packages/atlasmap-assembly/dist/atlasmap/scripts.js","../../packages/atlasmap-assembly/dist/atlasmap/vendor.js","../../packages/atlasmap-assembly/dist/atlasmap/main.js","modules/connections/pages/ConnectionDetailsPage.tsx","modules/connections/pages/ConnectionsPage.tsx","modules/connections/pages/create/ConfigurationPage.tsx","modules/connections/pages/create/ConnectorsPage.tsx","modules/connections/pages/create/index.ts","modules/connections/pages/create/ReviewPage.tsx","modules/connections/ConnectionsCreatorApp.tsx","modules/connections/index.tsx","modules/customizations/shared/CustomizationsNavBar.tsx","modules/customizations/pages/ApiConnectorsPage.tsx","modules/customizations/shared/ExtensionIntegrations.tsx","modules/customizations/pages/ExtensionDetailsPage.tsx","modules/customizations/customizationsUtils.ts","modules/customizations/pages/ExtensionImportPage.tsx","modules/customizations/pages/ExtensionsPage.tsx","modules/data/shared/VirtualizationUtils.ts","modules/customizations/CustomizationsApp.tsx","modules/customizations/index.tsx","modules/dashboard/index.tsx","modules/routes.ts","modules/data/shared/HeaderView.tsx","modules/data/shared/VirtualizationNavBar.tsx","modules/data/shared/ViewsCreateSteps.tsx","modules/data/shared/ViewInfosContent.tsx","modules/data/shared/ViewSqlForm.tsx","modules/data/shared/ViewSqlFormAndTable.tsx","modules/data/shared/DvConnections.tsx","modules/data/shared/DvConnectionsWithToolbar.tsx","modules/data/pages/views/SelectConnectionPage.tsx","modules/data/pages/views/SelectViewsPage.tsx","modules/data/CreateViewsApp.tsx","modules/data/pages/VirtualizationCreatePage.tsx","modules/data/pages/VirtualizationMetricsPage.tsx","modules/data/pages/VirtualizationRelationshipPage.tsx","modules/data/pages/VirtualizationsPage.tsx","modules/data/pages/VirtualizationSqlClientPage.tsx","modules/data/pages/VirtualizationViewsPage.tsx","modules/data/index.tsx","modules/integrations/components/editor/AddStepPage.tsx","modules/integrations/shared/IntegrationDetailNavBar.tsx","modules/integrations/shared/WithConfigurationForm.tsx","modules/integrations/components/editor/endpoint/ConfigureActionPage.tsx","modules/integrations/components/editor/endpoint/SelectActionPage.tsx","modules/integrations/components/editor/SaveIntegrationPage.tsx","modules/integrations/components/editor/SelectConnectionPage.tsx","modules/integrations/IntegrationCreatorApp.tsx","modules/integrations/IntegrationEditorApp.tsx","modules/integrations/pages/detail/ActivityPage.tsx","modules/integrations/pages/detail/DetailsPage.tsx","modules/integrations/pages/detail/MetricsPage.tsx","modules/integrations/pages/import/ImportPage.tsx","modules/integrations/pages/IntegrationsPage.tsx","modules/integrations/pages/TestAtlasmapPage.tsx","modules/integrations/pages/cicd/ManageCiCdPage.tsx","modules/integrations/index.tsx","registerServiceWorker.ts","index.tsx","modules/data/resolvers.ts"],"names":["ApiContextDefaultValue","apiUri","dvApiUri","headers","ApiContext","React","_Pact","onFulfilled","onRejected","result","state","this","s","callback","_settle","e","o","_this","value","v","pact","then","observer","_catch","body","recover","const","_earlyReturn","_AsyncGenerator","entry","_entry","_pact","_resolve","_return","_promise","_wrapReturnedValue","done","_wrapYieldedValue","Symbol","Promise","resolve","returnValue","error","reject","callFetch","ref","method","includeAccept","includeContentType","includeReferrerPolicy","fetch","url","contentType","JSON","cache","credentials","Object","assign","mode","redirect","Fetch","constructor","props","read","bind","data","initialValue","defaultValue","hasData","loading","componentDidMount","componentDidUpdate","prevProps","shouldComponentUpdate","nextProps","nextState","equal","render","children","response","setState","_this3","baseUrl","ok","Error","statusText","indexOf","text","_response$text","json","_response$json","deepmerge","errorMessage","message","Stream","reader","getReader","textDecoder","TextDecoder","pushData","concat","onSave","cancel","componentWillUnmount","SyndesisFetch","stream","FetchOrStream","createElement","Consumer","MessageLevel","DataShapeKinds","MessageCode","DVFetch","ServerEventsContextDefaultValue","ServerEventsContext","IntegrationType","ConsoleLinkType","DetailedStatus","HIDE_FROM_STEP_SELECT","ENDPOINT","DATA_MAPPER","BASIC_FILTER","ADVANCED_FILTER","SPLIT","AGGREGATE","TEMPLATE","WithIntegrationHelpersWrapped","addConnection","deleteIntegration","deployIntegration","exportIntegration","importIntegration","saveIntegration","undeployIntegration","updateConnection","updateOrAddConnection","tagIntegration","getActionDescriptor","connectionId","actionId","configuredProperties","integration","connection","action","flowId","position","id","actionDescriptor","produce","draft","step","flows","map","f","Array","Set","file","fileName","blob","_body$blob","saveAs","version","isIntegrationDeployment","targetState","integrationId","environments","WithChangeListener","changeListener","registerChangeListener","unregisterChangeListener","event","filter","WithApiConnectors","changeFilter","change","items","totalCount","disableUpdates","WithPolling","poller","startPolling","stopPolling","setPoller","func","polling","pollingTimer","setInterval","clearInterval","undefined","WithEnvironments","this$1","WithEnvironmentHelpersWrapped","createEnvironment","deleteEnvironment","renameEnvironment","name","stringifyBody","newName","WithExtension","extensionId","actions","extensionType","schemaVersion","WithExtensionHelpersWrapped","deleteExtension","importExtension","uploadExtension","FormData","WithExtensionIntegrations","WithExtensions","WithIntegration","isDraft","WithIntegrations","WithIntegrationTags","WithMonitoredIntegrations","getMonitoredIntegrations","integrations","i","monitoring","WithIntegrationsMetrics","errors","integrationDeploymentMetrics","lastProcessed","Date","now","messages","metricsProvider","start","topIntegrations","getConnectionsForDisplay","connections","c","metadata","getConnectionsWithFromAction","connector","some","getConnectionsWithToAction","transformResponse","connectionsForDisplay","connectionsWithFromAction","connectionsWithToAction","dangerouslyUnfilteredConnections","WithConnections","getActionsWithFrom","a","getActionsWithTo","getConnectionIcon","icon","iconFile","File","URL","NEW_INTEGRATION","tags","getStep","getFlow","flow","getExtensionIcon","extension","getStepKindIcon","stepKind","getStepIcon","stepIndex","getLastPosition","steps","filterStepsByPosition","atStart","atEnd","getPreviousSteps","getSubsequentSteps","WithConnection","actionsWithFrom","actionsWithTo","WithConnectionHelpersWrapped","createConnection","deleteConnection","validateConfiguration","saveConnection","validateName","description","connectorId","values","proposedName","isError","testConn","WithConnector","getConnectorsForDisplay","connectors","transformConnectorsResponse","connectorsForDisplay","obj","WithConnectors","WithServerEvents","starting","started","unmounting","retries","preferredProtocol","changeListeners","messageListeners","registerMessageListener","unregisterMessageListener","listener","l","close","webSocket","eventSource","startConnection","onFailure","reconnectIn","setTimeout","connectUsingWebSockets","reservation","wsApiEndpoint","replace","connectWebSocket","connectEventSource","postMessageEvent","messageEvent","forEach","postChangeEvent","changeEvent","EventSource","addEventListener","onError","WebSocket","onmessage","onclose","ALL_STEPS","anyPrevious","anySubsequent","previousSteps","subsequentSteps","previousStep","dataShapeExists","subsequentStep","stepsHaveOutputDataShape","ANY","requiresInputOutputDataShapes","properties","requiresOutputDataShape","type","displayName","placeholder","required","rows","hasPrecedingCollection","contextLoggingEnabled","bodyLoggingEnabled","customText","length","toLowerCase","positionNextSplit","positionNextAggregate","requiresConsistentSplitAggregate","input","inputDataShape","outputDataShape","previousDataShape","noCollectionSupportP","WithViews","vdbId","WithViewEditorStates","idPattern","WithVirtualizationHelpersWrapped","createVirtualization","updateViewEditorStates","deleteView","deleteViewEditorState","deleteVirtualization","publishVirtualization","queryVirtualization","refreshVirtualizationViews","unpublishServiceVdb","virtName","virtDesc","newVirtualization","keng__dataPath","username","keng__id","serviceVdbName","tko__description","virtualization","viewName","vdbName","editorStateId","_this2","virtualizationName","pubVirtualization","sqlQuery","rowlimit","rowOffset","queryBody","limit","offset","query","target","viewEditorStateId","viewEditorStates","_this9","WithVirtualization","virtualizationId","drivers","keng___links","keng__baseUri","keng__hasChildren","keng__kType","publishedState","serviceVdbVersion","serviceViewDefinitions","serviceViewModel","WithVirtualizations","WithVirtualizationConnectionStatuses","WithVirtualizationConnectionSchema","apiContext","descriptor","propertyDefinitionSteps","key","nextIntegration","visible","btoa","encodeURIComponent","decodeURIComponent","atob","_syndesis_utils__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_routes__WEBPACK_IMPORTED_MODULE_1__","__webpack_exports__","apiConnectors","apiConnector","makeResolver","routes","_ref","params","apiConnectorId","create","upload","makeResolverNoParams","review","security","save","list","extensions","details","_ref2","update","_ref3","import","root","DocumentType","InspectionType","runtime","require","polyfills","styles","scripts","vendor","main","DataMapperAdapter","iframe","messageChannel","MessageChannel","onIframeLoad","onMessages","componentWillReceiveProps","prevPayload","_","nextPayload","updateDataMapperApp","removeEventListener","messagePort","port1","contentWindow","postMessage","port2","payload","onMappings","mappings","documentId","inputDescription","inputDocumentType","inputInspectionType","inputName","outputDescription","outputDocumentType","outputInspectionType","outputName","srcDoc","style","width","height","frameBorder","allowtransparency","extraProps","el","en","app","appEn","it","appIt","modules","connectionsEn","connectionsIt","customizations","customizationsEn","customizationsIt","dashboard","dashboardEn","dashboardIt","dataEn","dataIt","integrationsEn","integrationsIt","options","interpolation","escapeValue","debug","resources","shared","defaultNS","fallbackLng","fallbackNS","keySeparator","ns","i18n","use","LanguageDetector","init","configureIndexMapper","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","configureSelectConnectionMapper","rest","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_configureIndexMapper","configureSelectActionMapper","_configureSelectConne","configureConfigureActionMapper","_ref4","updatedIntegration","_configureSelectActio","positionAsNumber","parseInt","stepObject","listResolver","manageCicdResolver","manageCicd","createRootResolver","createStartSelectStepResolver","makeResolverNoParamsWithDefaults","selectStep","getEmptyIntegration","createStartSelectActionResolver","selectAction","createStartConfigureActionResolver","configureAction","createFinishSelectStepResolver","finish","createFinishSelectActionResolver","createFinishConfigureActionResolver","createConfigureIndexResolver","configure","index","createConfigureAddStepSelectStepResolver","addStep","createConfigureAddStepSelectActionResolver","createConfigureAddStepConfigureActionResolver","createConfigureEditStepSelectActionResolver","editStep","createConfigureEditStepConfigureActionResolver","createConfigureEditStepSaveAndPublishResolver","saveAndPublish","_ref5","integrationActivityResolver","activity","_ref6","integrationDetailsResolver","_ref7","integrationEditIndexResolver","edit","integrationEditAddStepSelectStepResolver","integrationEditAddStepSelectActionResolver","integrationEditAddStepConfigureActionResolver","integrationEditEditStepSelectActionResolver","integrationEditEditStepConfigureActionResolver","integrationEditSaveAndPublish","metricsResolver","metrics","_ref8","ApiError","react","es","t","ui","i18nTitle","i18nInfo","i18nHelp","i18nRefreshLabel","i18nReportIssue","errorInfo","ModuleLoader","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","timedOut","console","i18nShowErrorInfoLabel","pastDelay","PageNotFound","PageTitle","_React$PureComponent","config","Helmet_default","title","WithClosedNavigation","context","AppContext","hideNavigation","showNavigation","WithErrorBoundary","_getPrototypeOf2","_len","args","_key","call","nextContext","errorComponent","d","ApiError_ApiError","ModuleLoader_ModuleLoader","PageNotFound_PageNotFound","PageTitle_PageTitle","WithClosedNavigation_WithClosedNavigation","WithErrorBoundary_WithErrorBoundary","named_urls__WEBPACK_IMPORTED_MODULE_0__","stepRoutes","apiProvider","include","specification","dataMapper","basicFilter","template","describeData","editorRoutes","IntegrationEditorStepAdder","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_6__","_syndesis_ui__WEBPACK_IMPORTED_MODULE_5__","idx","stepName","stepDescription","src","href","configureStepHref","as","className","active","showDetails","addStepHref","i18nAddStep","route","dashboard_resolvers","reverse","ConfirmationIconType","ConfirmationButtonStyle","ConfirmationDialog","MessageDialog","accessibleName","accessibleDescription","NONE","Icon","onHide","onCancel","primaryAction","onConfirm","primaryActionButtonContent","i18nConfirmButtonText","primaryActionButtonBsStyle","buttonStyle","primaryContent","i18nConfirmationMessage","secondaryAction","secondaryActionButtonContent","i18nCancelButtonText","secondaryContent","i18nDetailsMessage","show","showDialog","Dialog","footer","Container","classnames","DndFileChooser","files","notifications","handleAcceptedFiles","handleRejectedFiles","getSelectedFileMessage","i18nNoFileSelectedMessage","getUploadMessage","i18nUploadSuccessMessage","i18nUploadFailedMessage","i18nUploadSuccessMessages","i18nUploadFailedMessages","acceptedFiles","onUploadAccepted","rejectedFiles","Dropzone","accept","fileExtensions","disabled","disableDropzone","multiple","allowMultiple","onDropAccepted","onDropRejected","getInputProps","Grid","fluid","getRootProps","refKey","Row","Col","dangerouslySetInnerHTML","__html","i18nInstructions","xs","i18nSelectedFileLabel","AppLayout","isNavOpen","onNavToggle","Header","PageHeader","logo","pictograph","logoProps","toolbar","appNav","showNavToggle","Sidebar","PageSidebar","nav","Nav","NavList","Page","header","sidebar","PageSection","AppTopMenu","isOpen","onToggle","onSelect","Dropdown","isPlain","toggle","DropdownToggle","dropdownItems","ButtonLink","size","Link","to","onClick","Loader","inline","Spinner","inverse","PfNavLink","classNameProp","exact","isActiveProp","location","strict","styleProp","label","path","pathname","escapedPath","Route","match","isActive","childLocation","joinClassnames","activeClassName","activeStyle","PfVerticalNavItem","classNames","WizardSteps","mainSteps","altSteps","ReadWidget","allowEditing","onEdit","EditWidget","errorMsg","saving","asTextarea","onChange","Fragment","FormGroup","controlId","validationState","valid","FormControl","componentClass","InlineEdit","ConfirmButton","CancelButton","HelpBlock","InputGroup","Button","InlineTextEdit","i18nPlaceholder","isTextArea","onValidate","attrs","currentValue","setCurrentValue","editing","setEditing","setSaving","useState","ref$4_0","ref$4","setValidity","validate","valueToValidate","handleConfirm","success","handleChange","isEditing","renderValue","renderEdit","ListViewToolbar","renderInput","currentFilterType","Filter","ValueSelector","filterValues","onFilterValueSelected","filterType","onUpdateCurrentValue","onKeyPress","onValueKeyPress","Toolbar","TypeSelector","filterTypes","onFilterTypeSelected","onSelectFilterType","Sort","sortTypes","currentSortType","onSortTypeSelected","onUpdateCurrentSortType","DirectionSelector","isNumeric","isAscending","isSortAscending","onToggleCurrentSortDirection","Results","i18nResultsCount","activeFilters","List","item","Item","onRemove","onRemoveFilter","filterData","onClearFilters","LogViewer","count","followScroll","previousCount","renderRow","parent","CellMeasurer","cellMeasurerCache","columnIndex","rowIndex","toggleFollow","CellMeasurerCache","fixedWidth","minHeight","getDerivedStateFromProps","sm","AutoSizer","disableHeight","disableWidth","deferredMeasurementCache","rowCount","rowHeight","rowRenderer","scrollToLine","scrollToIndex","Switch","labelText","Notifications","ToastNotificationList","notification","TimedToastNotification","persistent","onDismiss","timerdelay","notificationTimerDelay","SimplePageHeader","i18nDescription","Title","headingLevel","TitleLevel","h2","Text","ProgressWithLink","currentStep","totalSteps","logUrl","i18nLogUrlText","ProgressBar","max","PfDropdownItem","superclass","DropdownItem","ConnectionCard","showDeleteDialog","menuProps","doCancel","doDelete","onDelete","DANGER","i18nCancelLabel","i18nDeleteLabel","i18nDeleteModalMessage","i18nDeleteModalTitle","Card","matchHeight","DropdownKebab","pullRight","i18nMenuTitle","role","tabIndex","i18nViewLabel","editHref","i18nEditLabel","isDeleteEnabled","alt","ConnectionDetailsForm","onSubmit","handleSubmit","validationResults","Alert","bsStyle","isWorking","isValid","i18nValidateLabel","onCancelEditing","i18nSaveLabel","onStartEditing","ConnectionDetailsHeader","connectionIcon","connectionName","i18nNamePlaceholder","onChangeName","i18nDescriptionLabel","connectionDescription","i18nDescriptionPlaceholder","onChangeDescription","i18nUsageMessage","ConnectionsGrid","CardGrid","ConnectionsGridCell","md","ConnectionsListView","linkToConnectionCreate","ConnectorConfigurationForm","i18nFormTitle","TagNameValidationError","ApiConnectorDetailCard","CardBody","ApiConnectorInfo","ApiConnectorReview","ApiConnectorDetail","CardHeading","CardTitle","ApiConnectorListItem","handleDelete","handleDetails","getDeleteTooltip","Tooltip","i18nDeleteTip","i18nDelete","getDetailsTooltip","i18nDetailsTip","i18nDetails","onDetails","ListViewItem","OverlayTrigger","overlay","placement","usedBy","additionalInfo","ListViewInfoItem","i18nUsedByMessage","apiConnectorDescription","heading","apiConnectorName","hideCloseIcon","leftContent","apiConnectorIcon","stacked","ApiConnectorListView","getCreateConnectorTooltip","linkCreateApiConnector","ListView","EmptyState","i18nEmptyStateTitle","i18nEmptyStateInfo","Action","i18nLinkCreateApiConnector","i18nLinkCreateApiConnectorTip","ExtensionDetail","getUpdateTooltip","i18nUpdateTip","i18nUpdate","i18nCancelText","extensionName","i18nIdMessage","linkUpdateExtension","extensionUses","h3","integrationsSection","ExtensionImportCard","Body","i18nImportInstructions","i18nAlertMessage","dndDisabled","i18nHelpMessage","i18nDndHelpMessage","i18nDndInstructions","i18nDndNoFileSelectedMessage","i18nDndSelectedFileLabel","i18nDndUploadFailedMessage","i18nDndUploadSuccessMessage","onDndUploadAccepted","onUploadRejected","onDndUploadRejected","ExtensionImportReview","handleImport","getActions","onImport","extensionUid","i18nNameLabel","extensionDescription","i18nTypeLabel","i18nExtensionTypeMessage","i18nActionsLabel","xsOffset","i18nImport","cancelLink","i18nCancel","ExtensionIntegrationsTable","getColumns","headerFormat","Table","cell","formatters","rowData","i18nName","property","onIntegrationSelected","onSelectIntegration","PfProvider","striped","bordered","hover","columns","rowKey","ExtensionListItem","detailsPageLink","i18nExtensionType","extensionIcon","ExtensionListView","getImportTooltip","i18nLinkImportExtensionTip","i18nLinkImportExtension","linkImportExtension","ExtensionOverview","i18nType","i18nLastUpdate","i18nLastUpdateDate","ExtensionSupports","extensionActions","AggregatedMetricCard","accented","aggregated","AggregateStatusCount","AggregateStatusNotifications","AggregateStatusNotification","ConnectionsMetric","Dashboard","linkToIntegrations","i18nLinkToIntegrations","linkToIntegrationCreation","integrationBoard","marginTop","i18nConnections","linkToConnections","i18nLinkToConnections","linkToConnectionCreation","IntegrationBoard","colors","Pending","patternfly","black200","Published","blue400","Stopped","black300","i18nIntegrationStateRunning","runningIntegrations","i18nIntegrationStateStopped","stoppedIntegrations","i18nIntegrationStatePending","pendingIntegrations","DonutChart","tooltip","contents","pfDonutTooltipContents","secondary","i18nIntegrations","i18nTotal","legend","RecentUpdatesCard","CiCdEditDialog","tagName","handleClick","trim","validationError","NoErrors","htmlFor","i18nInputLabel","NoName","i18nNoNameError","NameInUse","i18nNameInUseError","CiCdList","CiCdListEmptyState","bsSize","onAddNew","i18nAddNewButtonText","CiCdListItem","handleEditClicked","handleRemoveClicked","onEditClicked","onRemoveClicked","i18nUsesText","CiCdListView","resultsCount","CiCdManagePageUI","showAddDialog","showEditDialog","showRemoveDialog","openAddDialog","closeAddDialog","openEditDialog","closeEditDialog","openRemoveDialog","closeRemoveDialog","handleSave","handleRemoveConfirm","onEditItem","currentItemName","onAddItem","onRemoveItem","i18nPageTitle","i18nPageDescription","i18nAddTagDialogTitle","i18nAddTagDialogDescription","i18nTagInputLabel","i18nSaveButtonText","nameValidationError","onValidateItem","i18nEditTagDialogTitle","i18nEditTagDialogDescription","NORMAL","i18nConfirmCancelButtonText","i18nConfirmRemoveButtonText","i18nRemoveConfirmationMessage","i18nRemoveConfirmationTitle","i18nRemoveConfirmationDetailMessage","onFilterAdded","ItemSkeleton","ContentLoader","speed","primaryColor","secondaryColor","x","y","rx","ry","min","Math","CiCdListSkeleton","TagIntegrationDialog","disableSave","initialItems","selected","acc","current","itemsDraft","TagIntegrationListItem","checked","checkboxInput","defaultChecked","TagIntegrationDialogEmptyState","background","border","i18nGoToManageCiCdButtonText","TagIntegrationDialogBody","manageCiCdHref","i18nEmptyStateButtonText","ImportPageUI","IntegrationActions","detailsHref","IntegrationDetailActivity","linkToOpenShiftLog","i18nViewLogOpenShift","i18nLastRefresh","IntegrationDetailActivityItem","cellFormat","errorCount","i18nErrorsFound","date","time","i18nVersion","i18nNoSteps","IntegrationDetailActivityItemSteps","duration","output","status","IntegrationDetailDescription","i18nNoDescription","IntegrationDetailEditableName","IntegrationDetailHistoryListView","i18nTextDraft","hasHistory","IntegrationDetailHistoryListViewItem","i18nTextLastPublished","updatedAt","IntegrationDetailInfo","IntegrationDetailMetrics","startAsHuman","uptimeStart","toLocaleString","marginBottom","errorMessagesCount","okMessagesCount","IntegrationEditorActionsListItem","integrationName","integrationDescription","IntegrationEditorChooseAction","IntegrationEditorChooseConnection","IntegrationEditorConnectionsListItem","IntegrationEditorForm","IntegrationEditorNothingToConfigure","i18nAlert","IntegrationEditorStepsList","IntegrationEditorStepsListItem","IntegrationFlowAddStep","showTooltip","containerRef","createRef","hideTooltip","toggleTooltip","onMouseEnter","onMouseLeave","onTouchStart","IntegrationFlowStep","i18nTooltip","trigger","rootClose","GenericDescription","StepOverview","actionI18nLabel","dataTypeI18nLabel","dataType","nameI18nLabel","IntegrationFlowStepDetails","IntegrationIcon","finishConnectionIcon","startConnectionIcon","IntegrationStatus","labelType","currentState","Label","IntegrationStatusDetail","fallbackText","i18nProgressPending","IntegrationStepsHorizontalItem","isFirst","ListViewIcon","IntegrationStepsHorizontalView","IntegrationVerticalFlow","expanded","localStorage","toggleExpanded","IntegrationsList","IntegrationsListItem","isConfigurationRequired","i18nConfigurationRequired","InfoItem","monitoringValue","monitoringCurrentStep","monitoringTotalSteps","monitoringLogUrl","i18nProgressStarting","i18nProgressStopping","i18nPublished","i18nUnpublished","i18nError","getRandom$1","ConnectionStatus","cx","cy","r","getRandom","IntegrationsListSkeleton","IntegrationsListView","linkToManageCiCd","i18nManageCiCd","linkToIntegrationImport","TopIntegrationsCard","DropdownButton","i18nLast30Days","MenuItem","eventKey","i18nLast60Days","UptimeMetric","ViewListItem","handleEdit","handleCancel","getEditTooltip","i18nEdit","viewDescription","viewIcon","i18nEditTip","ViewList","getImportViewsTooltip","linkImportViewsHRef","i18nImportViews","getCreateViewTooltip","linkCreateViewHRef","hasListData","i18nCreateView","i18nCreateViewTip","i18nImportViewsTip","DvConnectionCard","toggleSelected","connName","ACTIVE","isSelected","onSelectionChanged","dvStatus","DvConnectionsGrid","DvConnectionsGridCell","DvConnectionsListView","ViewInfoListItem","handleCheckboxToggle","itemSelected","temp","getNodePathStr","nodePath","segment","isUpdateView","ViewInfoList","VirtualizationListItem","showConfirmationDialog","handleExport","handleUnpublish","handlePublish","onExport","onPublish","onUnpublish","handleAcceptConfirmation","currentPublishedState","isPublished","publishInProgress","WARNING","i18nUnpublish","i18nUnpublishModalMessage","i18nUnpublishModalTitle","VirtualizationPublishStatusDetail","publishingLogUrl","stepText","publishingStepText","publishingCurrentStep","publishingTotalSteps","i18nPublishInProgress","i18nPublishLogUrlText","VirtualizationPublishStatus","i18nDraft","i18nExport","i18nPublish","virtualizationDescription","VirtualizationList","getCreateVirtualizationTooltip","i18nLinkCreateVirtualizationTip","i18nLinkCreateVirtualization","getImportVirtualizationTooltip","i18nImportTip","linkCreateHRef","content","onBack","onNext","cancelHref","backHref","nextHref","isNextLoading","isNextDisabled","extraButtons","isLastStep","integrationCurrentState","integrationDate","onCreateViews","rawObject","window","PfBreadcrumb","Breadcrumb","margin","paddingLeft","bsClass","isDisabled","isAlt","subSteps","showErrorInfo","setShowErrorInfo","Help","textAlign","componentStack","TagIntegrationDialogWrapper","assertThisInitialized","newEnvironments","targetIntegrationId","api","hasTags","tagError","hasEnvironments","environmentsError","utils","loaderChildren","errorChildren","mappedItems","stringify","Integrations","showActionPromptDialog","showCiCdPromptDialog","handleAction","handleActionCancel","promptForAction","closeCiCdDialog","promptDialogButtonText","promptDialogIcon","promptDialogText","promptDialogTitle","getPodLogUrl","pushNotification","TagIntegrationDialogWrapper_TagIntegrationDialogWrapper","resolvers","mi","editAction","startAction","_handleAction","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","t0","stop","promptDialogButtonStyle","stopAction","_handleAction2","_callee2","_context2","err","deleteAction","_handleAction3","_callee3","_context3","exportAction","ciCdAction","promptForCiCd","canEdit","push","canActivate","canDeactivate","board","warnings","notices","detailedState","getStartIcon","apiEndpoint","getFinishIcon","IntegrationCreatorBreadcrumbs","toggleActive","activeSubstep","subStep","IntegrationDetailHistory","deployments","deployment","i18nTextVersion","IntegrationDetailSteps","IntegrationEditorBreadcrumbs","IntegrationEditorSidebar","activeIndex","hasAddStep","addAtIndex","activeAddStep","addIcon","addI18nTitle","addI18nTooltip","addI18nDescription","process","Integrations_Integrations","IntegrationCreatorBreadcrumbs_IntegrationCreatorBreadcrumbs","IntegrationDetailHistory_IntegrationDetailHistory","IntegrationDetailSteps_IntegrationDetailSteps","IntegrationEditorBreadcrumbs_IntegrationEditorBreadcrumbs","IntegrationEditorSidebar_IntegrationEditorSidebar","module","exports","p","virtualizations","relationship","sqlClient","views","importSource","selectConnection","selectViews","selectConnector","configureConnector","WithConfig","_componentDidMount","configResponse","_config","sent","App","logout","removeNotificationAction","notifToRemove","n","msg","toConsumableArray","toString","linkType","namespace","podName","consoleUrl","data-testid","WithConfig_WithConfig","minWait","Provider","apiBase","datavirt","dvUrl","SYNDESIS-XSRF-TOKEN","functions","appTitle","renderAppNav","verticalNav","renderVerticalNav","minWidth","logoHref","onNavigationCollapse","onNavigationExpand","component","App_App","getValidationState","field","form","FormInputComponent","ControlLabel","FieldLevelHelp","labelHint","fieldAttributes","controlHint","FormSelectComponent","isMultiple","onBlur","newValue","select","currentTarget","option","enum","opt","FormTextAreaComponent","FormCheckboxComponent","Checkbox","FormHiddenComponent","durations","calculateValue","FormDurationComponent","inputField","handleOnSelect","handleBlur","receiveInputRef","newDuration","setFieldValue","valueAsNumber","Form","isSubmitting","inputRef","FormBuilder","getField","componentTypemaps","checkbox","hidden","textarea","Field","i18nRequiredProperty","fields","enrichAndOrderProperties","definition","massagedValue","sanitizeValues","keys","reduce","prop","sort","b","massageType","secret","massageRequired","massageValue","String","AutoForm","Formik","initialValues","touched","dirty","isValidating","resetForm","validateForm","submitForm","toFormDefinitionProperty","controlTooltip","labelTooltip","formDefinitionProperty","cols","ALPHABET","RANDOMNESS","lastTimestamp","let","WithListViewToolbarHelpers","keyEvent","filterValue","updated","sortType","defaultFilterType","defaultSortType","filterCategory","WithLoader","loaded","waitTimeout","clearTimeout","WithRouteData","WithRouterBase","WithRouter","withRouter","answer","timestamp","getTime","remainingTimestamp","defaultRoute","mapper","present","asInt","optional","ConnectionCreatorBreadcrumbs","Connections","_x","_x2","fill","getConnectionHref","includeConnectionMenu","getConnectionEditHref","uses","filterByName","sortByName","ConnectionsWithToolbar","helpers","filteredAndSortedConnections","valueToLower","includes","miA","miB","right","localeCompare","getFilteredAndSortedConnections","i18nLinkCreateConnection","Connections_Connections","defaultProps","includeHidden","WithConnectorForm","def","objectSpread","shouldValidateAgainstBackend","validateFormAgainstBackend","find","scope","parameters","auto_form","toFormDefinition","enableValidationAgainstBackend","ConnectionCreatorBreadcrumbs_ConnectionCreatorBreadcrumbs","ConnectionsWithToolbar_ConnectionsWithToolbar","WithConnectorForm_WithConnectorForm","ConnectionDetailsPage","numUsedBy","history","dist_api","updatedConnection","abrupt","saveDescription","_ref9","saved","saveName","_ref10","validation","doValidateName","_x3","saveConnector","_ref11","_callee4","_context4","setSubmitting","_x4","_x5","_ref12","_callee5","_context5","_x6","cancelEditing","startEditing","components","_ref13","i18nUsageLabel","getUsedByMessage","ConnectionsPage","ConfigurationPage","ConnectorsPage","ReviewPage","ConnectionsCreatorApp","ConnectionsModule","ConnectionDetailsPage_ConnectionDetailsPage","CustomizationsNavBar","ApiConnectorsPage","optionalIntValue","alert","filteredAndSorted","thisApi","thatApi","getFilteredAndSortedApiConnectors","CustomizationsNavBar_CustomizationsNavBar","backgroundColor","filterUndefinedId","ExtensionIntegrations","getUsageMessage","ExtensionDetailsPage","handleSelectIntegration","selectedIntegrationId","i18nOverviewSectionTitle","i18nSupportsSectionTitle","i18nUsageSectionTitle","ExtensionIntegrations_ExtensionIntegrations","overviewSection","lastUpdated","i18nTypeMessage","getTypeMessage","supportsSection","getExtensionTypeName","ExtensionImportPage","actionDescription","actionName","onDndUploadRejectedHandler","failedFileName","onDndUploadAcceptedHandler","uploaded","dndUploadFailedMessage","dndUploadSuccessMessage","t1","importExtensionId","getActionsLabel","i18nIdLabel","i18nActionText","getActionText","DvConnectionStatus","DvConnectionSelection","ExtensionsPage","thisExtension","thatExtension","getFilteredAndSortedExtensions","i18nNameFilterPlaceholder","CustomizationApp","Redirect","CustomizationsModule","CustomizationsApp","LoadableDashboardPage","Loadable","loader","DashboardModule","baseurl","modules_routes","HeaderView","VirtualizationNavBar","ViewsCreateSteps","PREVIEW_VDB_NAME","SCHEMA_MODEL_SUFFIX","generateViewEditorStates","viewInfos","editorStates","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","iterator","viewInfo","srcPaths","viewSourceNode","projCols","viewDefn","compositions","isComplete","keng__description","projectedColumns","sourcePaths","editorState","viewDefinition","return","getDvConnectionStatus","conn","dvState","INACTIVE","isDvConnectionSelected","dvSelected","SELECTED","getPreviewSql","sourcePath","split","getConnectionName","segments","getNodeName","getPreviewTableName","getFilteredAndSortedViewInfos","schemaNodes","selectedViewNames","existingViewNames","generateViewInfos","schemaNode","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","seg","queryable","vwName","selectedState","findIndex","hasExistingView","view","isUpdate","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","thisViewInfo","thatViewInfo","ViewInfosContent","displayedViews","handleViewSelectionChange","onViewSelected","onViewDeselected","ViewSqlForm","queryResults","queryResultsEmpty","querySql","updateQueryResults","viewSelected","results","onQueryResultsChanged","viewSql","selectedView","formDefinition","rowLimit","componentProperty","deprecated","javaType","kind","order","sqlStatement","doSubmit","targetVdb","ViewSqlFormAndTable","setQueryResults","defaultCellFormat","Heading","defaultHeaderFormat","Cell","ViewSqlForm_ViewSqlForm","row","defineProperty","Info","DvConnections","handleConnSourceSelectionChanged","onConnectionSelectionChanged","dvSourceStatuses","selectedConn","conns","virtualizationsSourceStatuses","dvConns","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_loop","connStatus","virtSrcStatus","virtStatus","sourceName","vdbState","schemaState","selectionState","NOTSELECTED","_iterator4","generateDvConnections","DvConnectionsWithToolbar","selectedConnection","handleConnectionSelectionChanged","DvConnections_DvConnections","SelectConnectionPage","selConn","ViewsCreateSteps_ViewsCreateSteps","DvConnectionsWithToolbar_DvConnectionsWithToolbar","SelectViewsPage","selectedViews","hasSelectedTables","handleAddView","handleRemoveView","viewNames","splice","handleCreateViews","ViewInfosContent_ViewInfosContent","getExistingViewNames","CreateViewsApp","VirtualizationCreatePage","virtDescription","handleCreate","VirtualizationMetricsPage","HeaderView_HeaderView","VirtualizationNavBar_VirtualizationNavBar","VirtualizationRelationshipPage","VirtualizationsPage","thisVirtualization","thatVirtualization","getFilteredAndSortedVirtualizations","i18nCreateDataVirtualization","i18nCreateDataVirtualizationTip","handleImportVirt","publishingDetails","publishStepDetails","stepNumber","stepTotal","publishLogUrl","getPublishingDetails","handleExportVirtualization","VirtualizationSqlClientPage","ViewSqlFormAndTable_ViewSqlFormAndTable","VirtualizationViewsPage","handleDeleteView","viewDefinitions","thisView","thatView","getFilteredAndSortedViewDefns","onImportView","handleImportView","handleEditView","DataModule","AddStepPage","getSteps","getEditAddStepHref","stepIdx","getEditConfigureStepHrefCallback","IntegrationDetailNavBar","WithConfigurationForm","getActionSteps","getActionStep","configurationStep","getActionStepDefinition","moreConfigurationSteps","onUpdatedIntegration","i18nSubtitle","getActionById","getConnectorActions","getConnectionConnector","renderConfigurationForm","renderNoPropertiesInfo","ConfigureActionPage","_ref2$step","stepAsNumber","nextStepHref","postConfigureHref","WithConfigurationForm_WithConfigurationForm","SelectActionPage","selectHref","SaveIntegrationPage","setIntegrationName","postSaveHref","_state$integration","integrationSteps","connectionsData","hasConnectionsData","connectionsError","extensionsData","hasExtensionsData","extensionsError","visibleStepsByPosition","extentionsByAction","isArray","actionType","toStepKindCollection","connectionOrStep","stepOrConnection","apiProviderHref","connectionHref","onStepClick","addStepPage","AddStepPage_AddStepPage","integrations_components","saveIntegrationPage","SaveIntegrationPage_SaveIntegrationPage","startStepSelectConnectionPage","editor_SelectConnectionPage_SelectConnectionPage","startStepSelectActionPage","SelectActionPage_SelectActionPage","startStepConfigureActionPage","ConfigureActionPage_ConfigureActionPage","finishStepSelectConnectionPage","finishStepSelectActionPage","finishStepConfigureActionPage","addStepSelectConnectionPage","addStepSelectActionPage","addStepConfigureActionPage","_ref14","editStepSelectActionPage","_ref15","editStepConfigureActionPage","_ref16","IntegrationCreatorApp","selectConnectionPage","IntegrationEditorApp","ActivityPage","IntegrationDetailNavBar_IntegrationDetailNavBar","DetailsPage","showPromptDialog","i18nTextBtnEdit","i18nTextBtnPublish","i18nTextHistory","MetricsPage","ImportPage","handleUploadAccepted","uploadFails","uploadWins","uploadFailedMessages","uploadSuccessMessages","failed","filterByConnection","sortByStatus","IntegrationsPage","integrationsData","filteredAndSortedIntegrations","found","left","getFilteredAndSortedIntegrations","TestAtlasmapPage","onReset","display","flexFlow","atlasmap_adapter","SCHEMA","createConfirmRemoveString","tag","ManageCiCdPage","filteredAndSortedEnvironments","getFilteredAndSortedEnvironments","handleValidateItem","finally","listItem","i18nEditButtonText","i18nRemoveButtonText","IntegrationsModule","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","ReactDOM","BrowserRouter","document","getElementById","origin","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"8qKAQaA,EAAyB,CACpCC,OADoC,qBAEpCC,SAFoC,qBAGpCC,QAAS,IAGEC,EAAaC,gBAAnBL,GCbMM,EAAS,oBACrBA,YACAA,iBAAuB,SAAAC,EAAAC,OAChBC,EAAS,IAAfH,EACMI,EAAQC,KAAdC,KACAF,EAAW,KACJG,EAAWH,MAAjBF,KACAK,EAAc,KAEZC,EAAOL,EAAA,EAAYI,EAASF,KAA5BG,IACC,MAAAC,GACDD,EAAOL,EAAA,EAAPK,UAEDL,SAEAE,iBAGFK,EAAS,SAAAC,WAEDC,EAAQD,EAAdE,EACA,EAAIF,IACHH,EAAOL,EAAA,EAAYF,EAAcA,EAAHW,GAA9BJ,GACMN,EACNM,EAAOL,EAAA,EAAYD,EAAnBM,IAEAA,EAAOL,EAAA,EAAPK,GAEA,MAAAC,GACDD,EAAOL,EAAA,EAAPK,KAGFL,GAEDH,EAlCqB,GAsCf,SAAAQ,EAAAM,EAAAV,EAAAQ,OACDE,EAALR,EAAa,IACRM,aAAJZ,EAA4B,KACvBY,EAAJN,cAMCM,IAAUJ,cAAVI,IALA,EAAIR,IACHA,EAAQQ,EAARR,GAEDQ,EAAQA,EAARA,KAMEA,GAASA,EAAbG,iBACCH,OAAWJ,cAAXI,GAA4CJ,cAA5CI,IAGDE,MACAA,UACME,EAAWF,EAAjBJ,EACAM,GACCA,MAwfI,SAAAC,EAAAC,EAAAC,WAEDhB,EAASe,IACZ,MAAAT,UACMU,EAAPV,UAEGN,GAAUA,EAAdY,KACQZ,YAAY,EAAnBgB,GAEDhB,EAyCMiB,IAAMC,EAAND,IAayB,oBAC/BE,EAAAC,QACCC,OAAAD,OACAE,MAAA,UACAC,SAAA,UACAC,QAAA,UACAC,SAAA,cAGDC,EAAAjB,SACQ,CAAEA,MAAFA,EAAgBkB,MAAM,YAE9BC,EAAAnB,SACQ,CAAEA,MAAFA,EAAgBkB,MAAM,GAG9BR,YAA0BU,uBAAyBA,qBAAuBA,OAA1EV,0BAA6G,kBAC5GjB,MAEDiB,mBAAmC,SAAAV,eAElCc,SAAcd,GAASA,EAATA,KAAsBA,OAAtBA,GAAsDmB,EAFlBnB,IAI3CP,KAAAoB,MAAa,IAApBzB,GAEDsB,iBAAiC,SAAAV,OAE1BD,EAANN,YACOM,WAAiB,IAAAsB,QAAY,SAAAC,OAC7BT,EAAQd,EAAdc,SACA,OAAIA,EAAgB,KAUnBU,WAAAvB,GACCD,WAAeC,GAASA,EAATA,KAAsBA,OAAtBA,GAAuDiB,EAAtElB,IACAA,aACAA,iBAZKa,EAASb,EAAfa,UACA,OAAIA,SAGIU,EAAQvB,EAAfiB,UAGDjB,cACAA,aAMAa,YAAgC,SAAAY,MAC3BA,IAAJf,EACCc,EAAYxB,EAAZwB,aACM,KACArB,EAAO,IAAbd,EACAW,cACAA,aACAA,gBACAe,SAAQZ,EAAA,EAARY,WAKFf,aACAA,aACAH,EAAOiB,EAAA,EAAPjB,MAIHc,mBAAmC,SAAAV,OAE5BD,EAANN,YACOM,WAAiB,IAAAsB,QAAY,SAAAC,OAC7BT,EAAQd,EAAdc,SACA,OAAIA,SACH,OAAId,SAGIuB,EAAQvB,EAAfiB,WAGDjB,cACOuB,EAAQtB,GAASA,EAATA,KAAsBA,OAAtBA,GAAuDiB,EAAtEjB,KAGDD,YACAA,aACAA,aACAH,EAAOiB,EAAA,EAAPjB,MAGFc,kBAAkC,SAAAc,OAE3BzB,EAANN,YACOM,WAAiB,IAAAsB,QAAY,SAAAC,EAAAG,OAC7BZ,EAAQd,EAAdc,SACA,OAAIA,SACH,OAAId,SAGIuB,EAAQvB,EAAfiB,WAGDjB,cACO0B,EAAPD,IAGDzB,aACAA,aACAH,EAAOiB,EAAA,EAAPjB,MAxG6B,YCzkBhB8B,EAAUC,WAExBC,0CACU,wDAEW,sCACP,yEACE,iCACP,iFACe,4CACR,GAEhBC,EAAmB,CAEjB5C,EAAO,OAAPA,KAGF6C,EAAwB,CAEtB7C,EADA,gBACAA,KAGF8C,EAA2B,CAEzB9C,EAAO,eAAPA,qBAGK+C,MAAKC,EAAM,CAChB3B,KACE4B,kCACIC,eADJD,GAFc5B,EAKhB8B,MALgB,WAMhBC,YANgB,UAOhBpD,QAASqD,OAAAC,OAAA,GAPOtD,UAAA2C,EAWhBY,KAXgB,OAYhBC,SAAU,eCrDDC,cACXC,WAAmBC,eACjBA,QACAC,KAAYpD,KAAAoD,KAAAC,KAAZrD,WACAD,MAAa,CACXuD,KAAMtD,KAAAmD,MAAAI,cAA2BvD,KAAAmD,MADtBK,aAEXzB,OAFW,EAGX0B,UAAWzD,KAAAmD,MAHAI,aAIXG,SAAS,6GAIAC,iCACX3D,KAAAoD,uDAGWQ,4BAAmBC,OAC1BA,QAAkB7D,KAAAmD,MAAtBX,KAAsBxC,KACpBoD,uDAIGU,+BAAqBC,EAAAC,UAIlBC,EAAMjE,KAADmD,MAANY,KAAkCE,EAAMjE,KAADD,MAA9CiE,gBAGKE,yBACElE,KAAAmD,MAAAgB,SAAoB,CACzBf,KAAMpD,KADmBoD,KAEzBgB,SAAUpE,KAAKD,qBAINqD,0BAETpD,kCAAAqE,SAAc,CAAEX,SAAS,oBACFzB,EAAU,CAC/BQ,YAAa6B,EAAAnB,MADkBV,YAE/BjD,QAAS8E,EAAAnB,MAFsB3D,QAG/B2C,OAH+B,MAI/BK,IAAG,GAAK8B,EAAAnB,MAAWoB,QAAUD,EAAAnB,MAAWX,OANxC9B,KAAA,SAAA0D,kBAuBFC,SAAc,MAAAf,EAAQG,SAAR,EAAuBC,SAAS,QAfzCU,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,gBAEFpB,IAEGgB,EAAAnB,MAADV,aAbA,IAcA6B,EAAAnB,MAAAV,YAAAkC,QAAA,oCAOaP,EArBbQ,QAAAlE,KAAA,SAAAmE,GAqBAvB,sBALac,EAhBbU,QAAApE,KAAA,SAAAqE,GAgBAzB,IACIgB,EAAAnB,MAjBJK,eAkBEF,EAAO0B,EAAUV,EAAAnB,MAADK,aAAhBF,iDAMGlD,KACPiE,SAAc,CACZf,KAAMgB,EAAAnB,MADMK,aAEZzB,OAFY,EAGZkD,aAAc7E,EAHF8E,QAIZzB,SAJY,EAKZC,SAAS,4CAnEJT,CAAiBvD,aCzBjByF,cAAbjC,mBAoBMlD,kCAFGoD,KAAA,qBAEHiB,SAAc,CACZX,SAAS,IAGXzB,EAAU,CACRQ,YAAanC,EAAA6C,MADLV,YAERjD,QAASc,EAAA6C,MAFD3D,QAGR2C,OAHQ,MAIRK,IAAG,GAAKlC,EAAA6C,MAAWoB,QAAUjE,EAAA6C,MAAWX,MAJ1CP,cAMQmC,UAAYA,EAASvD,OAN7BoB,cAOQpB,KACJuE,OAAcvE,EAAdwE,gBACMC,EAAc,IAAAC,YAApB,WAqBAH,OAAAhC,OAAA1C,KApBc,SAAR8E,EAAWtD,WAEf3B,eAKAkB,IACE4C,SAAc,CACZX,SAAS,OAGXW,SAAc,CACZf,MAAWhD,EAAAP,MAAAuD,MAAJ,IAAAmC,OAAA,CAA4BH,SAA7B/E,SAGR6E,OAAAhC,OAAA1C,KAAA8E,QAMR,MAAApF,KACAiE,SAAc,CACZtC,OADY,EAEZkD,aAAc7E,EAFF8E,QAGZxB,SAAS,WA1CR,MAAAtD,mCA+CAsF,OAAA,qBACC,IAAAjB,MAAN,4BADK,MAAArE,wIA9DMwD,4BAAmBC,OAC1BA,QAAkB7D,KAAAmD,MAAtBX,MAAsBxC,KACpBoF,QADoBpF,KAElBoF,OAAAO,SAFkB3F,KAIpBoD,wDAIGwC,gCACD5F,KAAJoF,aACEA,OAAAO,YAdOR,CAAelC,GCH5B,IAea4C,6JACJ3B,wBAC6BlE,KAAKmD,MAA/BX,QAAKsD,WAAW3C,gJAElB4C,EAAgBD,EAAMX,EAA5BlC,SAGEvD,EAAAsG,cAACvG,EAADwG,SAAA,cACG/D,WAAW1C,0BACVE,iCACE6E,QAASjF,EACTkD,IAAKA,EACLhD,QAASA,GAHXE,SATGmG,CAAyBnG,aCftC,ICCAwG,EAOAC,EAYAC,EDNaC,6JACJnC,wBAC6BlE,KAAKmD,MAA/BX,QAAgBW,GAAX2C,+JAGXpG,EAAAsG,cAACvG,EAADwG,SAAA,cACG/D,KAAW3C,eAAUC,0BACpBE,iCAAO6E,QAAShF,EAAUiD,IAAKA,EAAKhD,QAAS,IAA7CE,SAPG2G,CAAmB3G,aEJnB4G,EAAN,GAEMC,EAAsB7G,gBAA5B4G,IDXP,SAAYJ,GACVA,cACAA,cACAA,gBAHF,CAAYA,MAAZ,KAOA,SAAYC,GACVA,YACAA,cACAA,4BACAA,gCACAA,0BACAA,8CACAA,8BACAA,cARF,CAAYA,MAAZ,KAYA,SAAYC,GACVA,4BACAA,4BACAA,4BACAA,4BACAA,4BACAA,4BACAA,4BACAA,4BACAA,4BATF,CAAYA,MAAZ,KAcOrF,IAUPyF,EAQAC,EAKAC,GAbA,SAAYF,GACVA,0BACAA,4BACAA,wBAHF,CAAYA,MAAZ,KAQA,SAAYC,GACVA,kBACAA,cAFF,CAAYA,MAAZ,KAKA,SAAYC,GACVA,0BACAA,sBACAA,wBACAA,sBAJF,CAAYA,MAAZ,KAQO3F,IAAM4F,EAAN5F,wBAKM6F,EAAN7F,WAEM8F,EAAN9F,SACM+F,EAAN/F,aACMgG,EAANhG,mBAKMiG,EAANjG,QACMkG,EAANlG,YAEMmG,EAANnG,WE+CMoG,cAGXjE,WAAYC,eACVA,QACAiE,cAAqBpH,KAAAoH,cAAA/D,KAArBrD,WACAqH,kBAAyBrH,KAAAqH,kBAAAhE,KAAzBrD,WACAsH,kBAAyBtH,KAAAsH,kBAAAjE,KAAzBrD,WACAuH,kBAAyBvH,KAAAuH,kBAAAlE,KAAzBrD,WACAwH,kBAAyBxH,KAAAwH,kBAAAnE,KAAzBrD,WACAyH,gBAAuBzH,KAAAyH,gBAAApE,KAAvBrD,WACA0H,oBAA2B1H,KAAA0H,oBAAArE,KAA3BrD,WACA2H,iBAAwB3H,KAAA2H,iBAAAtE,KAAxBrD,WACA4H,sBAA6B5H,KAAA4H,sBAAAvE,KAA7BrD,WACA6H,eAAsB7H,KAAA6H,eAAAxE,KAAtBrD,gHAGW8H,6BACXC,EACAC,EACAC,cAEAA,kBACyBhG,EAAU,CAC/BpB,KAD+BoH,EAE/BzI,QAASQ,KAAAmD,MAFsB3D,QAG/B2C,OAH+B,OAI/BK,IAFSxC,KAGPmD,MAAW7D,uBACGyI,cAAwBC,KAPlBtH,KAAA,SAAA0D,OASnBA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mCAEYN,EAZUU,UAcxB,qDAISsC,uBACXc,EACAC,EACAC,EACAC,EACAC,EACAL,8BAE+BjI,KAAA8H,oBAC7BK,EAD6BI,GAE7BH,EAF6BG,GAAAN,IAAAvH,KAAA,SAAzB8H,UAKCC,EAAOP,EAAA,SAAcQ,OACpBC,EAAa,QAAAP,uBAAAH,aAAAE,EAIjBI,GAAIF,GAENG,IACEG,uBAEFA,sBACAD,QAAcA,EAAAE,MAAAC,IAAA,SAAiBC,UACzBA,OAAJT,GACES,sBAEFA,IAEFJ,OAAaK,WAAW,IAAAC,KAAaN,QAAJ,IAAAjD,OAAA,CAAuB0C,EAAxDO,2DAISrB,2BAAkBkB,8BACNtG,EAAU,CAC/BzC,QAASQ,KAAAmD,MADsB3D,QAE/B2C,OAF+B,SAG/BK,IAFSxC,KAEDmD,MAAW7D,wBAAuBiJ,KAHZ7H,KAAA,SAA1B0D,OAKDA,EAASI,SACN,IAAAC,MAAUL,EAAhBM,8DAIS8C,2BAAkByB,8BACNhH,EAAU,CAC/BpB,KAD+BoI,EAE/BxG,YAF+B,kBAG/BjD,QAASQ,KAAAmD,MAHsB3D,QAI/B6C,oBAJ+B,EAK/BF,OAL+B,OAM/BK,IAHSxC,KAGDmD,MAAW7D,wCANWoB,KAAA,SAA1B0D,OAQDA,EAASI,SACN,IAAAC,MAAUL,EAAhBM,8DAIS6C,2BAAkBgB,EAAYW,cAClCjH,EAAU,CACfzC,QAASQ,KAAAmD,MADM3D,QAEf2C,OAFe,MAGfK,IAFSxC,KAEDmD,MAAW7D,6CAA4CiJ,IAH1D7H,KAAA,SAAAG,8BAI4BA,EAJ5BsI,QAAAzI,KAAA,SAAA0I,UAIeC,SAAMD,EAJrBF,0FAOI5B,2BACXiB,EACAe,EACAC,mBAA0B,8BAEHtH,EAAU,CAC/BpB,KAAM0I,EAA0B,CAAEC,YFhNjCzI,aE+M8B,GAE/BvB,QAASQ,KAAAmD,MAFsB3D,QAG/B2C,OAAQoH,EAAuB,OAHA,MAI/B/G,IAAK+G,EAFIvJ,KAIHmD,MAAW7D,wBACIiJ,kBAAkBe,iBAL9BtJ,KAMFmD,MAAW7D,wBAAuBiJ,oBARX7H,KAAA,SAA1B0D,OAUDA,EAASI,SACN,IAAAC,MAAUL,EAAhBM,8DAISgD,6BAAoBa,EAAYe,8BACpBrH,EAAU,CAC/BpB,KAAM,CAAE2I,YF/NPzI,eEgODvB,QAASQ,KAAAmD,MAFsB3D,QAG/B2C,OAH+B,OAI/BK,IAFSxC,KAGPmD,MAAW7D,wBACIiJ,kBAAkBe,oBANL5I,KAAA,SAA1B0D,OAQDA,EAASI,SACN,IAAAC,MAAUL,EAAhBM,8DAISiD,0BACXO,EACAC,EACAC,EACAC,EACAC,EACAL,8BAE+BjI,KAAA8H,oBAC7BK,EAD6BI,GAE7BH,EAF6BG,GAAAN,IAAAvH,KAAA,SAAzB8H,UAKCC,EAAOP,EAAA,SAAcQ,OACpBC,EAAa,QAAAP,uBAAAH,aAAAE,EAIjBI,GAAIF,GAENG,IACEG,uBAEFA,sBACAD,QAAcA,EAAAE,MAAAC,IAAA,SAAiBC,UACzBA,OAAJT,IACES,cAEFA,wDAIOlB,+BACXM,EACAC,EACAC,EACAC,EACAC,EACAL,8BAE+BjI,KAAA8H,oBAC7BK,EAD6BI,GAE7BH,EAF6BG,GAAAN,IAAAvH,KAAA,SAAzB8H,UAKCC,EAAOP,EAAA,SAAcQ,OACpBC,EAAa,QAAAP,uBAAAH,aAAAE,EAIjBI,GAAIF,GAENG,IACEG,uBAEFA,sBACAD,QAAcA,EAAAE,MAAAC,IAAA,SAAiBC,UACzBA,OAAJT,IACMS,QAAJR,GACEQ,cAEAA,sBACAJ,OAAaK,WACX,IAAAC,KAAaN,QAAJ,IAAAjD,OAAA,CAAuB0C,EADlCO,SAKJI,wDAKOrB,yBAAgBS,8BACJjG,EAAU,CAC/BpB,KAD+BqH,EAE/B1I,QAASQ,KAAAmD,MAFsB3D,QAG/B2C,OAAQ+F,WAHuB,OAI/B1F,IAAK0F,KAFIlI,KAGFmD,MAAW7D,wBAAuB4I,EAAYK,GAH5CvI,KAIFmD,MAAW7D,0BANYoB,KAAA,SAA1B0D,OAQDA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mBAEMwD,EAAYK,mBACRnE,UACRxC,qEAGOiG,wBAAe4B,EAAuBC,cAC1CzH,EAAU,CACfpB,KADe6I,EAEflK,QAASQ,KAAAmD,MAFM3D,QAGf2C,OAHe,MAIfK,IAFSxC,KAEDmD,MAAW7D,+BAA8BmK,4DAI9CvF,yBACElE,KAAAmD,MAAAgB,SAAoB,CACzBiD,cAAepH,KADUoH,cAEzBC,kBAAmBrH,KAFMqH,kBAGzBC,kBAAmBtH,KAHMsH,kBAIzBC,kBAAmBvH,KAJMuH,kBAKzBC,kBAAmBxH,KALMwH,kBAMzBC,gBAAiBzH,KANQyH,gBAOzBI,eAAgB7H,KAPS6H,eAQzBH,oBAAqB1H,KARI0H,oBASzBC,iBAAkB3H,KATO2H,iBAUzBC,sBAAuB5H,KAAK4H,2BA1PrBT,CAAsCzH,aCtHtCiK,cAGXzG,WAAmBC,eACjBA,QACAyG,eAAsB5J,KAAA4J,eAAAvG,KAAtBrD,gHAGKkE,yBACElE,KAAAmD,MAAPgB,wBAGWR,iCACX3D,KAAAmD,MAAA0G,uBAAA7J,KAAA4J,gEAGWhE,oCACX5F,KAAAmD,MAAA2G,yBAAA9J,KAAA4J,gEAGKA,wBAAcG,GACf/J,KAAAmD,MAAA6G,OAAJD,SACE5G,MAAAC,UAtBOuG,CAA2BjK,aCO3BuK,6JAGJC,sBAAYC,UACVA,kBAAP,0BAGKjG,oCAEHxE,EAAAsG,cAAAH,EAAA,CACErD,IAAK,kEACLgB,aAAc,CACZ4G,MADY,GAEZC,WAAY,IAJhB,SAOGnI,WAASkC,yBACJpE,QAAJsK,eACStK,iBAAPoE,GAGA1E,EAAAsG,cAACO,EAADN,SAAA,cACG/D,WAA2B4H,2DAC1BpK,EAAAsG,cAAA2D,EAAA,CACEvG,KAAMA,EACNyG,uBAAwBA,EACxBC,yBAA0BA,EAC1BE,OAAQhK,EAAKkK,cAJf,kBAMSlK,6BA7BZiK,CAA0BvK,aCV1B6K,cAGXrH,WAAmBC,eACjBA,QACAqH,OAAcxK,KAAAwK,OAAAnH,KAAdrD,gHAGW2D,iCACX3D,KAAAyK,+DAGW7E,oCACX5F,KAAA0K,8DAGKxG,yBACElE,KAAAmD,MAAPgB,wBAGKqG,uBACLrH,MAAAC,oBAGKuH,mBAASC,QACdJ,OAAAI,eAGMH,6BACNC,cACI1K,KAAAmD,MAAJ0H,eACEC,aAAoBC,YAAY/K,KAADwK,OAAcxK,KAAAmD,MAA7C0H,uBAIIH,uBACF1K,KAAJ8K,eACEE,cAAchL,KAAdgL,mBACAF,kBAAAG,MAtCOV,CAAoB7K,aCMpBwL,6JACJhH,oCAEHxE,EAAAsG,cAAAH,EAAA,CAAyBrD,IAAK,uBAAwBgB,aAAc,IAApE,SACGtB,WAASkC,yBACJpE,QAAJsK,eACStK,iBAAoB6C,OAAAC,OAAA,GAAAsB,QAA3BhB,KAGA1D,EAAAsG,cAAAuE,EAAA,CAAanH,KAAMA,EAAMyH,QAAS,KAAlC,kBACSM,EAAAhI,MAAAgB,SAAoBtB,OAAAC,OAAA,GAAAsB,QAApBhB,YAVR8H,CAAyBxL,aCGzB0L,cAGXlI,WAAYC,eACVA,QACAkI,kBAAyBrL,KAAAqL,kBAAAhI,KAAzBrD,WACAsL,kBAAyBtL,KAAAsL,kBAAAjI,KAAzBrD,WACAuL,kBAAyBvL,KAAAuL,kBAAAlI,KAAzBrD,gHAGWqL,2BAAkBG,8BACNvJ,EAAU,CAC/BpB,KAD+B2K,EAE/BhM,QAASQ,KAAAmD,MAFsB3D,QAG/B2C,OAAQ,MACRsJ,eAJ+B,EAK/BjJ,IAHSxC,KAGDmD,MAAW7D,+BAA8BkM,KALnB9K,KAAA,SAA1B0D,OAODA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mCAEWN,EAASvD,wDAGXyK,2BAAkBE,8BACNvJ,EAAU,CAC/BzC,QAASQ,KAAAmD,MADsB3D,QAE/B2C,OAF+B,SAG/BK,IAFSxC,KAEDmD,MAAW7D,+BAA8BkM,KAHnB9K,KAAA,SAA1B0D,OAKDA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mCAEWN,EAASvD,wDAGX0K,2BAAkBC,EAAcE,8BACpBzJ,EAAU,CAC/BpB,KAD+B6K,EAE/BlM,QAASQ,KAAAmD,MAFsB3D,QAG/B2C,OAH+B,MAI/BsJ,eAJ+B,EAK/BjJ,IAHSxC,KAGDmD,MAAW7D,+BAA8BkM,KALnB9K,KAAA,SAA1B0D,OAODA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mCAEWN,EAASvD,wDAGjBqD,yBACElE,KAAAmD,MAAAgB,SAAoB,CACzBkH,kBAAmBrL,KADMqL,kBAEzBC,kBAAmBtL,KAFMsL,kBAGzBC,kBAAmBvL,KAAKuL,uBAtDjBH,CAAsC1L,aCFtCiM,6JACJzH,oCAEHxE,EAAAsG,cAAAH,EAAA,CACErD,IAAG,eAAiBxC,KAAAmD,MAAWyI,YAC/BpI,aAAc,CACZqI,QADY,GAEZC,cAFY,QAGZN,KAHY,GAIZO,cAAe,IAEjBxI,aAAcvD,KAAAmD,MAAWI,cAR3B,SAUGrB,2BAAkBlC,yBAbd2L,CAAsBjM,aCAtBsM,cAGX9I,WAAYC,eACVA,QACA8I,gBAAuBjM,KAAAiM,gBAAA5I,KAAvBrD,WACAkM,gBAAuBlM,KAAAkM,gBAAA7I,KAAvBrD,WACAmM,gBAAuBnM,KAAAmM,gBAAA9I,KAAvBrD,gHAOWiM,yBAAgBL,8BACJ3J,EAAU,CAC/BzC,QAASQ,KAAAmD,MADsB3D,QAE/B2C,OAF+B,SAG/BK,IAFSxC,KAEDmD,MAAW7D,sBAAqBsM,KAHVlL,KAAA,SAA1B0D,OAMDA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mBAGK9C,QAAPC,4DAOWqK,yBAAgBN,8BACJ3J,EAAU,CAC/BzC,QAASQ,KAAAmD,MADsB3D,QAE/B2C,OAF+B,OAG/BK,IAFSxC,KAEDmD,MAAW7D,sBAAqBsM,gBAHVlL,KAAA,SAA1B0D,OAMDA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mBAGK9C,QAAPC,4DAOWsK,yBACXlD,EACA2C,WAEMtI,EAAO,IAAb8I,SACA9I,kBAA0B2F,EAA1B3F,UAEMd,EAASxC,KAAAmD,MAAW7D,OAA1B,qCAEuB2C,EAAU,CAC/BpB,KAD+ByC,EAE/Bb,YAF+B,sBAG/BjD,QALaQ,KAKJmD,MAHsB3D,QAI/B4C,eAJ+B,EAK/BC,oBAL+B,EAM/BC,uBAN+B,EAO/BH,OAP+B,OAQ/BK,IAAKoJ,EAAiBpJ,gBAAiBoJ,EAAgBpJ,KARzB9B,KAAA,SAA1B0D,OAWDA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mCAGYN,4DAGTF,yBACElE,KAAAmD,MAAAgB,SAAoB,CACzB8H,gBAAiBjM,KADQiM,gBAEzBC,gBAAiBlM,KAFQkM,gBAGzBC,gBAAiBnM,KAAKmM,qBAjFfH,CAAoCtM,aCGpC2M,6JAGJnC,sBAAYC,SAGfA,wBAAiD,2BAAhBA,oBAI9BjG,oCAEHxE,EAAAsG,cAAAH,EAAA,CACErD,IAAG,eAAiBxC,KAAAmD,MAAWyI,4BAC/BpI,aAAc,IAFhB,SAIGtB,WAASkC,yBACRpE,uBACEA,iBADFA,GAGEN,EAAAsG,cAACO,EAADN,SAAA,cACG/D,WAA2B4H,2DAC1BpK,EAAAsG,cAAA2D,EAAA,CACEvG,KAAMA,EACNyG,uBAAwBA,EACxBC,yBAA0BA,EAC1BE,OAAQhK,EAAKkK,cAJf,kBAMSlK,6BA5BZqM,CAAkC3M,aCGlC4M,6JACJpC,sBAAYC,SACjB,cAAOA,oBAGFjG,oCAEHxE,EAAAsG,cAAAH,EAAA,CACErD,IAAK,cACLgB,aAAc,CAAE4G,MAAF,GAAaC,WAAY,IAFzC,SAIGnI,WAASkC,yBACRpE,uBACEA,iBADFA,GAGEN,EAAAsG,cAACO,EAADN,SAAA,cACG/D,WAA2B4H,2DAC1BpK,EAAAsG,cAAA2D,EAAA,CACEvG,KAAMA,EACNyG,uBAAwBA,EACxBC,yBAA0BA,EAC1BE,OAAQhK,EAAKkK,cAJf,kBAMSlK,6BAvBZsM,CAAuB5M,aCNvB6M,6JACJrI,oCAEHxE,EAAAsG,cAAAH,EAAA,CACErD,IAAG,iBAAmBxC,KAAAmD,MAAWsG,cACjCjG,aAAc,CACZgJ,SADY,EAEZhB,KAAM,IAERjI,aAAcvD,KAAAmD,MAAWI,cAN3B,SAQGrB,2BAAkBlC,yBAXduM,CAAwB7M,aCGxB+M,6JACJvC,sBAAYC,SAEfA,wBADF,2BACmCA,oBAI9BjG,oCAEHxE,EAAAsG,cAAAH,EAAA,CACErD,IAAK,gBACLgB,aAAc,CAAE4G,MAAF,GAAaC,WAAY,IAFzC,SAIGnI,WAASkC,yBACRpE,uBACEA,iBADFA,GAGEN,EAAAsG,cAACO,EAADN,SAAA,cACG/D,WAA2B4H,2DAC1BpK,EAAAsG,cAAA2D,EAAA,CACEvG,KAAMA,EACNyG,uBAAwBA,EACxBC,yBAA0BA,EAC1BE,OAAQhK,EAAKkK,cAJf,kBAMSlK,6BAzBZyM,CAAyB/M,aCRzBgN,6JAGJxI,oCAEHxE,EAAAsG,cAAAH,EAAA,CACErD,IAAG,wBAA0BxC,KAAAmD,MAAWsG,sBACxCjG,aAAc,GACdD,aAAcvD,KAAAmD,MAAWI,cAH3B,SAKGrB,2BAAkBlC,yBAVd0M,CAA4BhN,aCLzC,IAkBaiN,6JAGJzC,sBAAYC,SAEfA,mCADF,yCAEEA,oBAGGyC,kCAAwBC,EAAAzI,SAItB,CACLgG,MAAOyC,EAAAzC,MAAAvB,IAAA,SACJiE,SAA+C,CAC9C5E,YAD8C4E,EAE9CC,WAAY3I,qBACT/D,UAA6BA,kBAAoByM,EAAEvE,QAI1D8B,WAAYwC,EAAaxC,yBAGtBnG,oCAEHxE,EAAAsG,cAAAyG,EAAA,CAAkBnC,eAAgBtK,KAAAmD,MAAWmH,gBAA7C,SACGpI,+IAA0BiB,gBACzBzD,EAAAsG,cAAAH,EAAA,CACErD,IAAK,2BACLgB,aAAc,IAFhB,SAIGtB,WAASkC,qBACJpE,QAAJsK,eAA+B,KACvBhH,EAAOtD,6BAAboE,UAIOpE,iBAAoB6C,OAAAC,OAAA,GAAAK,QAA3BG,YAGA5D,EAAAsG,cAACO,EAADN,SAAA,cACG/D,WAA2B4H,2DAC1BpK,EAAAsG,cAAA2D,EAAA,CACEvG,KAAMA,EACNyG,uBAAwBA,EACxBC,yBAA0BA,EAC1BE,OAAQhK,EAAKkK,cAJf,eAOU5G,EAAOtD,6BAAboE,UAIOpE,iBAAoB6C,OAAAC,OAAA,GAAAK,QAA3BG,gBAvDXqJ,CAAkCjN,aCZlCsN,6JAGJ9I,oCAEHxE,EAAAsG,cAAAH,EAAA,CACErD,IAAK,wBACLgB,aAAc,CACZyJ,OADY,EAEZ1E,GAFY,KAGZ2E,6BAHY,GAIZC,cAAa,GAAKC,KAJNC,MAKZC,SALY,EAMZC,gBANY,OAOZC,MAAK,GAAKJ,KAPEC,MAQZI,gBAAiB,KAVrB,SAaGvL,WAASkC,yBACJpE,QAAJsK,eACStK,iBAAPoE,GAGA1E,EAAAsG,cAAAuE,EAAA,CAAanH,KAAMA,EAAMyH,QAAS,KAAlC,kBACS7K,2BAxBRgN,CAAgCtN,sBCH7BgO,EAAyBC,UAChCA,kBACLC,UAAMA,EAADC,WAAgBD,2CAIzB,SAAgBE,EACdH,UAEOA,EAAA3D,OAAA,SAAmB7B,UACnBA,EAAL4F,WAIO5F,EAAA4F,UAAAlC,QAAAmC,KAAA,SAAkC5F,SACvC,SAAOA,cAKb,SAAgB6F,GAA2BN,UAClCA,EAAA3D,OAAA,SAAmB7B,UACnBA,EAAL4F,WAIA,iBAAI5F,eAIGA,EAAA4F,UAAAlC,QAAAmC,KAAA,SAAkC5F,SACvC,OAAOA,cAuBb,SAAgB8F,GACd9J,UAEOvB,OAAAC,OAAA,GAAAsB,GAELd,KAAM,CACJ6K,sBAAuBT,EAAyBtJ,OAD5CgG,OAEJgE,0BAA2BN,EACzB1J,OAHEgG,OAKJiE,wBAAyBJ,GAA2B7J,OALhDgG,OAMJkE,iCAAkClK,OAN9BgG,MAOJC,WAAYjG,OAAciG,cAKhC,IAAakE,8JACJrE,sBAAYC,UACVA,kBAAP,2BAGKjG,oCAEHxE,EAAAsG,cAAAH,EAAA,CACErD,IAAK,eACLgB,aAAc,CACZ4G,MADY,GAEZC,WAAY,IAJhB,SAOGnI,WAASkC,yBACJpE,QAAJsK,eACStK,iBAAoBkO,GAA3B9J,IAGA1E,EAAAsG,cAACO,EAADN,SAAA,cACG/D,WAA2B4H,2DAC1BpK,EAAAsG,cAAA2D,EAAA,CACEvG,KAAMA,EACNyG,uBAAwBA,EACxBC,yBAA0BA,EAC1BE,OAAQhK,EAAKkK,cAJf,kBAMSlK,iBAAoBkO,GAApBlO,aA3BZuO,CAAwB7O,sBCrErB8O,GAAmB3C,yBAAoB,IAC9CA,kBAAe4C,SAAmB,SAAdA,YAG7B,SAAgBC,GAAiB7C,yBAAoB,IAC5CA,kBAAe4C,SAAmB,OAAdA,YA6D7B,SAAgBE,GACdrP,EACA6I,MAGE,qBAAOA,EAAPyG,MADF,qBAESzG,EAAP0G,eAIA,MAGE1G,YAAuBA,kBAA3B2G,KAA4D,KACpD7F,EAAOd,YAAuBA,EAApCyG,YACyBG,oBAAzB9F,UAIEd,gCAAJ,SACSA,EAAPyG,KAIAzG,wCACAA,gCAFF,cAIY7I,iBAAqB6I,EAAWI,YAAWJ,EAAWyG,sBAG1CzG,EAAWyG,2BCpFxBI,GAAkB,CAC7BxD,KAD6B,GAE7ByD,KAAM,IA0GR,SAAgBC,GACdhH,EACAG,EACAM,cAGewG,GAAOjH,EAApBG,GACO+G,MAAPzG,GACA,MAAAvI,SACM,IAAAqE,MAAA,qBACiBkE,eAAiBN,qBACpCH,EAFJK,KA0BJ,SAAgB8G,GAAiBC,UACxBA,QAAP,GAGF,SAAgBC,GAAgBC,yBACPA,SAUzB,SAAgBC,GACdnQ,EACA4I,EACAG,EACAqH,OAEM/G,EAAOuG,GAAOhH,EAAAG,EAApBqH,UAEI/G,EAAJR,WAESwG,GAAiBrP,EADLqJ,EAAnBR,YAIEQ,EAAJ2G,UACSD,GAAiB1G,EAAxB2G,WAGKC,GAAgB5G,EAAvB6G,UAQF,SAAgBL,GAAQjH,EAA0BG,MAE5CH,GAAiBA,EAAjBU,OAAJP,SAGOH,sBAAuBkH,UAAQA,OAAY/G,IAQpD,SAAgBsH,GAAgBzH,EAA0BG,MACxDA,OAGM+G,EAAOD,GAAOjH,EAApBG,MACA+G,GAIKA,EAALQ,aAGIR,gBAAJ,EACE,EAEKA,eAAP,GAQF,SAAgBS,GACd3H,EACAG,EACAuH,EACAtH,MAEI,qBAAAA,IAAJsH,SAEEA,MAEIE,EAAN,IAAgBxH,EACVyH,EAAQJ,GAAezH,EAAfyH,KAAdrH,SACOsH,EAAA5F,OAAA,SAAarB,MAGf,qBAAOA,EAAPR,YAAA,qBACQQ,aAAPkF,UACAlF,sBAFFhC,IAGC,qBAAOgC,EAAPkF,UACClF,WAJFhC,IADF,QAMGgC,qBAED,KAGFmH,SAEMnH,EAAJ6G,YAGK7G,EAALoF,WACUpF,EAAAoF,UAAAlC,QAAAmC,KAAA,SACL5F,SACC,SAAOA,gBAQf2H,SAEWpH,EAAT6G,eACE3I,OACAC,OACAC,OACAC,OACAC,OACAC,SACE,QAIN,iBAAKyB,gBAKDA,aAAJ/B,KAIK+B,EAALoF,WACUpF,EAAAoF,UAAAlC,QAAAmC,KAAA,SACL5F,SACC,OAAOA,gBAqCjB,SAAgB4H,GACd9H,EACAG,EACAC,OAEM8G,EAAOD,GAAOjH,EAApBG,UACI+G,GAAUA,EAAdQ,MAIOR,gBAAP9G,GAFE,GAWJ,SAAgB2H,GACd/H,EACAG,EACAC,OAEM8G,EAAOD,GAAOjH,EAApBG,UACI+G,GAAUA,EAAdQ,MAIOR,cAAiB9G,EAAxB,GAFE,OClWS4H,8JACJhM,oCAEHxE,EAAAsG,cAAAH,EAAA,CACErD,IAAG,gBAAkBxC,KAAAmD,MAAWoF,GAChC/E,aAAc,CACZgI,KAAM,IAERjI,aAAcvD,KAAAmD,MAAWI,cAL3B,SAOGrB,2BACClC,iBAAoB6C,OAAAC,OAAA,GAAAsB,GAElBd,KAAMT,OAAAC,OAAA,GACDsB,EADCd,MAEJ6M,gBAAiB3B,GACfpK,iBAA0BA,iBAA1BA,QAHE,IAKJgM,cAAe1B,GACbtK,iBAA0BA,iBAA1BA,QARNpE,cAXGkQ,CAAuBxQ,aCiFvB2Q,eAGXnN,WAAYC,eACVA,QACAmN,iBAAwBtQ,KAAAsQ,iBAAAjN,KAAxBrD,WACAuQ,iBAAwBvQ,KAAAuQ,iBAAAlN,KAAxBrD,WACA2H,iBAAwB3H,KAAA2H,iBAAAtE,KAAxBrD,WACAwQ,sBAA6BxQ,KAAAwQ,sBAAAnN,KAA7BrD,WACAyQ,eAAsBzQ,KAAAyQ,eAAApN,KAAtBrD,WACA0Q,aAAoB1Q,KAAA0Q,aAAArN,KAApBrD,gHAGKsQ,0BAAgBvC,EAAAvC,EAAAmF,EAAA1I,OAMfE,EAAN,UACOM,EAAON,EAAA,SAAaO,GACzBP,SACAA,gBACAA,yBACAA,cACAA,cAAyB4F,EAAzB5F,GACAA,OAAkB4F,EAAlB5F,oBAISoI,0BAAiBxI,8BACL9F,EAAU,CAC/BzC,QAASQ,KAAAmD,MADsB3D,QAE/B2C,OAF+B,SAG/BK,IAFSxC,KAEDmD,MAAW7D,uBAAsByI,KAHXrH,KAAA,SAA1B0D,OAMDA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mBAGK9C,QAAPC,4DAGK8F,0BAAgBQ,EAAAqD,EAAAmF,EAAA1I,UAMdQ,EAAON,EAAA,SAAaO,GACzBP,OAAkBqD,GAAQrD,EAA1BA,KAEAA,mBACEwI,MAA4BxI,EAA5BwI,YADFxI,EAEAA,uBACEF,GAAwBE,EAD1BA,oCAKSqI,+BACXI,EACAC,8BAEuB5O,EAAU,CAC/BpB,KAD+BgQ,EAE/BrR,QAASQ,KAAAmD,MAFsB3D,QAG/B2C,OAH+B,OAI/BK,IAFSxC,KAEDmD,MAAW7D,sBAAqBsR,iBAJVlQ,KAAA,SAA1B0D,OAMDA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mCAEYN,4DAGHqM,wBAAetI,8BACHlG,EAAU,CAC/BpB,KAD+BsH,EAE/B3I,QAASQ,KAAAmD,MAFsB3D,QAG/B2C,OAAQgG,WAHuB,OAI/B3F,IAAK2F,KAFInI,KAGFmD,MAAW7D,uBAAsB6I,EAAWI,GAH1CvI,KAIFmD,MAAW7D,yBANYoB,KAAA,SAA1B0D,OAQDA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mBAEMyD,EAAWI,mBACPnE,UACRxC,qEAGO8O,sBACXvI,EACA2I,UAGI3I,SAAJ2I,QACS,CACLC,SAAS,OAIPC,EAAW,CAAExF,KAAMsF,0BACF7O,EAAU,CAC/BpB,KAD+BmQ,EAE/BxR,QAASQ,KAAAmD,MAFsB3D,QAG/B2C,OAH+B,OAI/BK,IAFSxC,KAEDmD,MAAW7D,oCAJWoB,KAAA,SAA1B0D,UAOFA,EAASI,GACJ,CACLuM,SAAS,mBAKQ3M,wBAAftE,UACC+C,OAAAC,OAAA,IACLiO,SADK,GAEFjR,EAFL,wDAMKoE,yBACElE,KAAAmD,MAAAgB,SAAoB,CACzBmM,iBAAkBtQ,KADOsQ,iBAEzBC,iBAAkBvQ,KAFOuQ,iBAGzBE,eAAgBzQ,KAHSyQ,eAIzB9I,iBAAkB3H,KAJO2H,iBAKzB6I,sBAAuBxQ,KALEwQ,sBAMzBE,aAAc1Q,KAAK0Q,kBArIZL,CAAqC3Q,aCvFrCuR,8JACJ/M,oCAEHxE,EAAAsG,cAAAH,EAAA,CACErD,IAAG,eAAiBxC,KAAAmD,MAAWoF,GAC/B/E,aAAc,CACZqI,QADY,GAEZL,KAAM,IAERjI,aAAcvD,KAAAmD,MAAWI,cAN3B,SAQGrB,2BAAkBlC,yBAXdiR,CAAsBvR,sBCanBwR,GAAwBC,UAC/BA,kBACLvD,UAAMA,EAADC,WAAgBD,2CAIzB,SAAgBwD,GACdhN,UAEOvB,OAAAC,OAAA,GAAAsB,GAELd,KAAM,CACJ+N,qBAAsBH,GAAwB9M,OAD1CgG,OAEJkE,iCAAkClK,OAF9BgG,MAGJC,WAAYjG,OAAciG,cAKhC,IC4OAiH,GD5OaC,8JACJrH,sBAAYC,UACVA,kBAAP,0BAEKjG,oCAEHxE,EAAAsG,cAAAH,EAAA,CACErD,IAAK,cACLgB,aAAc,CACZ4G,MADY,GAEZC,WAAY,IAJhB,SAOGnI,WAASkC,yBACJpE,QAAJsK,eACStK,iBAAoBoR,GAA3BhN,IAGA1E,EAAAsG,cAACO,EAADN,SAAA,cACG/D,WAA2B4H,2DAC1BpK,EAAAsG,cAAA2D,EAAA,CACEvG,KAAMA,EACNyG,uBAAwBA,EACxBC,yBAA0BA,EAC1BE,OAAQhK,EAAKkK,cAJf,kBAOIlK,iBAAoBoR,GAApBpR,aA3BPuR,CAAuB7R,aEbvB8R,eAcXtO,WAAmBC,eACjBA,QAXMsO,UAAA,OACAC,SAAA,OACAC,YAAA,OACAC,QAAA,OACAC,kBAAA,QAQNC,gBAAA,QACAC,iBAAA,QACAlI,uBAA8B7J,KAAA6J,uBAAAxG,KAA9BrD,WACAgS,wBAA+BhS,KAAAgS,wBAAA3O,KAA/BrD,WACA8J,yBAAgC9J,KAAA8J,yBAAAzG,KAAhCrD,WACAiS,0BAAiCjS,KAAAiS,0BAAA5O,KAAjCrD,gHAGK6J,gCAAsBqI,QAC3BJ,gBAAuB9R,KAAA8R,gBAAArM,OAAA,CAAvByM,iBAGKF,iCAAuBE,QAC5BH,iBAAwB/R,KAAA+R,iBAAAtM,OAAA,CAAxByM,iBAGKpI,kCAAwBoI,QAC7BJ,gBAAuB9R,KAAA8R,gBAAA9H,OAAA,SAA4BmI,UAAKA,IAAMD,iBAGzDD,mCAAyBC,QAC9BH,iBAAwB/R,KAAA+R,iBAAA/H,OAAA,SAA6BmI,UAAKA,IAAMD,iBAGrDvO,iCACX3D,KAAAwN,wDAGW5H,oCACX5F,KAAA2R,YAAA,EAAA3R,KACAoS,QADApS,KAEA8R,gBAAA,GAFA9R,KAGA+R,iBAAA,mDAGK7N,yBACElE,KAAAmD,MAAAgB,SAAoB,CACzB0F,uBAAwB7J,KADC6J,uBAEzBmI,wBAAyBhS,KAFAgS,wBAGzBlI,yBAA0B9J,KAHD8J,yBAIzBmI,0BAA2BjS,KAAKiS,yCAI5BG,sBACNV,SAAA,OACAD,UAAA,EACIzR,KAAJqS,iBACEA,UAAAD,aACAC,eAAApH,GAEEjL,KAAJsS,mBACEA,YAAAF,aACAE,iBAAArH,gBAIIuC,sBACN+E,gBAAqBvS,KAAA4R,QAAA,IAArB,gBAGMY,mBAASzQ,sBACfqQ,SACIpS,KAAJ2R,iBAGAC,cAEIa,EAtFR1R,IAuFQf,KAAA4R,QAAJ,IACEa,KAEFC,WAAU,kBAEA1S,EAAR6R,uBAEE,OACEU,iBAAA,aAEF,OACEA,iBAAA,mBAIAA,gBAAqBvS,cAArB,KAZN0S,iBAkBYH,yBAAgBI,aACxB3S,QAAAsE,EAAAmN,UAAiBnN,EAAjBoN,SAAiCpN,EAArCqN,2BAGAF,UAAA,sCAEyBxP,EAAU,CAC/BpB,KAD+B,GAE/BrB,QAAS8E,EAAAnB,MAFsB3D,QAG/B2C,OAH+B,OAI/BK,IAAQ8B,EAAAnB,MAAW7D,gCALnBoB,KAAA,SAAA0D,0BAOsBA,EAPtBU,QAAApE,KAAA,SAAAkS,MAQFA,EAAcA,EAAdA,KARED,EAAA,KAUIE,EAAgBvO,EAAAnB,MAAA7D,OAAAwT,QAAA,QAApB,MACAD,GAAiB,qBAXjBD,IAaAnB,UAAA,IACAC,SAAA,IACAqB,iBAAAF,UAEApB,UAAA,IACAC,SAlBA,IAoBAsB,mBACE1O,EAAAnB,MAAA7D,OAAA,kBADFsT,iBAIK7Q,WACPyQ,UAAAzQ,GACAA,oDAIIkR,0BAAgBC,QACtBnB,iBAAAoB,QAAA,SAA8BjB,GAC5BA,oBAIIkB,yBAAeC,QACrBvB,gBAAAqB,QAAA,SAA6BjB,GAC3BA,oBAIIc,4BAAkBxQ,mBACxB8P,YAAmB,IAAAgB,YAAnB9Q,QACA8P,YAAAiB,iBAAA,mBAA8CxJ,KAC5C2H,SAAA,IACAD,UAAA,IACAI,kBAAA,OAEAoB,iBAAAlJ,UAEFuI,YAAAiB,iBAAA,wBAAmDxJ,KACjD2H,SAAA,MACMnR,EAAQmC,WAAWqH,EAAzBzG,QAEA8P,gBAAA7S,SAEIiT,EAAO,SAAIzJ,KAEfyI,UAAAzI,gBAEFuI,YAAAiB,iBAAA,QAAAC,QACAlB,YAAAiB,iBAAA,QAAAC,GACOxT,KAAPsS,yBAGMS,0BAAgBvQ,0BACtB6P,UAAiB,IAAAoB,UAAjBjR,QACA6P,UAAAqB,UAAA,SAA2B3J,KACzB2H,SAAA,IACAD,UAAA,MACMyB,EAAexQ,WAAWqH,EAAhCzG,aACQ4P,EAARnJ,WACE,YACE8H,kBADF,OAGEoB,iBAAAC,aAEF,mBACQ3S,EAAQmC,WAAWwQ,EAD3B5P,QAGE8P,gBAAA7S,UAON8R,UAAAsB,QAAA,SAAyB5J,KAEvByI,UAAAzI,IAEK/J,KAAPqS,aA3MSb,CAAyB9R,aDjBhCkU,GAAwB,CA2M9B,SAAAtC,EAAAuC,EAAAC,mBAEgB,mBACE,UAEhBxC,mBAAchJ,EAAAyL,EAAAC,OAKZH,EAAkB,KAEVI,EAAeF,0BAEb9T,UAAKiU,GAAejU,KAC5B8T,EAAgBE,EAAe,CAAHA,GAA5BF,OAEFD,EAAoB,KAEZK,EAAiBJ,gBAAmB9T,UAAKiU,GAAejU,GAAA,KAC9D+T,EAAkBG,EAAiB,CAAHA,GAAhCH,UAGAI,OADFJ,EArCApE,gBACE3P,UACEA,GACAA,EADAA,QAEAA,SAFAA,YAGAA,oBAHAA,gBAIAA,mCAJAA,MAKAA,wDACEkG,EANFlG,MAOAA,wDACEkG,EAAekO,MAVrBzE,OADF,GA2CA0B,EArOAgD,CACE,CACE/L,QADF0C,EAEE9C,gBAFF8C,EAGE7C,YAHF6C,EAIEO,KAJF,cAKEmF,YALF,qDAMEnB,SANF3I,EAOE0N,WAPF,GAQEtM,0BAAsBgD,IATG,GADD,GAe5BuJ,GACE,CACEjM,QADF0C,EAEE9C,gBAFF8C,EAGE7C,YAHF6C,EAIEO,KAJF,eAKEmF,YACE,wHAEFnB,SARF1I,EASEyN,gBATFtJ,EAUEhD,0BAAsBgD,IA1BE,GA8B5BuJ,GAAwB,CACtBjM,QADsB0C,EAEtB9C,gBAFsB8C,EAGtB7C,YAHsB6C,EAItBO,KAJsB,WAKtBgE,SALsBtI,EAMtByJ,YANsB,iGAQtB1I,0BARsBgD,EAStBsJ,gBAAYtJ,KAmOhBqG,GAjOsB,CAClB/I,QADkB0C,EAElB9C,gBAFkB8C,EAGlB7C,YAHkB6C,EAIlBO,KAJkB,kBAKlBmF,YALkB,kGAOlBnB,SAPkBzI,EAQlBwN,WAAY,CACVvK,OAAQ,CACNyK,KADM,WAENC,YAFM,mBAGNC,YAHM,sLAONC,UAPM,EAQNC,KAAM,KAGV5M,0BAAsBgD,GA8MxBqG,oBAAchJ,EAAAyL,EAAAC,UAKJc,GAARf,IAEFzC,IAnNA,CACE/I,QADF0C,EAEE9C,gBAFF8C,EAGE7C,YAHF6C,EAIEO,KAJF,MAKEgE,SxBAGzO,MwBCH4P,YANF,2CAOE1I,0BAPFgD,EAQEsJ,WAAY,CACVQ,sBAAuB,CACrBN,KADqB,UAErBC,YAFqB,kBAGrBE,UAAU,GAEZI,mBAAoB,CAClBP,KADkB,UAElBC,YAFkB,eAGlBE,UAAU,GAEZK,WAAY,CACVR,KADU,SAEVC,YAFU,cAGVE,UAAU,KAkBhBJ,GAAwB,CACtBjM,QADsB0C,EAEtB9C,gBAFsB8C,EAGtB7C,YAHsB6C,EAItBO,KAJsB,QAKtBmF,YALsB,kDAMtBnB,SANsBxI,EAOtBuN,WAPsB,GAQtBtM,0BAAsBgD,IAiM1B,SAAAqG,UACEA,mBAAchJ,EAAAyL,EAAAC,MAKeD,kBAAqB9T,UAAKA,aAAe+G,IAApEkO,QAE+BnB,kBAC7B9T,UAAMA,YAAD,IAAAkV,gBAAqClO,IAD5CiO,cAKE,MAGIE,EAAoBpB,qBACxB/T,UAAKA,aAAe+G,IAEhBqO,EAAwBrB,qBAC5B/T,UAAKA,aAAegH,WAGtB,IAAImO,GACF,IAAOC,GAIPA,OAAgCD,EADlCC,GAIF/D,EA9NAgE,CAAiC,CAC/B/M,QAD+B0C,EAE/B9C,gBAF+B8C,EAG/B7C,YAH+B6C,EAI/BO,KAJ+B,YAK/BmF,YAL+B,oCAM/BnB,SAN+BvI,EAO/BsN,WAP+B,GAQ/BtM,0BAAsBgD,KAgD1B,SAAAmJ,GAAAxE,UAEIA,kBACE3P,UACEA,GACAA,EADAA,QAEAA,SAFAA,YAGAA,oBAHAA,iBAIAA,oCAJAA,MAKAA,yDACEkG,EANFlG,MAOAA,yDACEkG,EAAekO,MAVrBzE,OADF,EA+DF,SAAAsE,GAAAvL,EAAA4M,0BAA6C,GAC3CA,KAEI5M,GACAA,EADAA,QAEAA,SAFAA,YAGAA,oBAJF6M,mBAQE7M,GACAA,EADAA,QAEAA,SAFAA,YAGAA,oBAJF8M,iBASJ,SAAAX,GAAAf,OACQ2B,EAAoB3B,0BAElB9T,UAAKiU,GAAejU,YAE1ByV,GACAA,EADAA,QAEAA,SAFAA,YAGAA,oBAHAA,iBAIAA,oCAJAA,UADF,eAMEA,qDAgBJ,SAAAlB,GAAAlD,EAAAqE,0BAEyB,GAGrBrE,UADFqE,EACErE,SAAchJ,EAAAyL,EAAAC,UAMVI,QACCU,GAFHf,IAMFzC,SAAchJ,EAAAyL,EAAAC,UAKLI,GAAPL,IAGJzC,EA8CF,IEzVasE,8JACJ1R,oCAEHxE,EAAAsG,cAAAK,EAAA,CACE7D,IAAG,kBAAoBxC,KAAAmD,MAAW0S,4BAClCrS,aAAc,GACdD,aAAcvD,KAAAmD,MAAWI,cAH3B,SAKGrB,KAASkC,6BAAepE,yBARpB4V,CAAkBlW,aCAlBoW,8JAGJ5R,oCAEHxE,EAAAsG,cAAAK,EAAA,CACE7D,IACE,uCACCxC,KAAAmD,MAAA4S,UAAuB,YAAc/V,KAAAmD,MAArC4S,UADD,IAGFvS,aAAc,IALhB,SAOGtB,WAASkC,yBAAepE,iBAAoB6C,OAAAC,OAAA,GAAAsB,QAApBpE,UAZpB8V,CAA6BpW,aCwB7BsW,eAGX9S,WAAYC,eACVA,QACA8S,qBAA4BjW,KAAAiW,qBAAA5S,KAA5BrD,WACAkW,uBAA8BlW,KAAAkW,uBAAA7S,KAA9BrD,WACAmW,WAAkBnW,KAAAmW,WAAA9S,KAAlBrD,WACAoW,sBAA6BpW,KAAAoW,sBAAA/S,KAA7BrD,WACAqW,qBAA4BrW,KAAAqW,qBAAAhT,KAA5BrD,WACAsW,sBAA6BtW,KAAAsW,sBAAAjT,KAA7BrD,WACAuW,oBAA2BvW,KAAAuW,oBAAAlT,KAA3BrD,WACAwW,2BAAkCxW,KAAAwW,2BAAAnT,KAAlCrD,WAGAyW,oBAA2BzW,KAAAyW,oBAAApT,KAA3BrD,gHAQWiW,8BACXS,EACAC,WAEMC,EAAoB,CACxBC,eA1DN9V,6BA0D0Cf,KAAAmD,MAAW2T,aADvBJ,EAExBK,SAAQ,GAFgBL,EAGxBM,gBAAc,GAAKN,GAAHvB,cAHQ,MAIxB8B,iBAAkBN,EAAQ,GAAMA,EAAa,2BAGxB1U,EAAU,CAC/BpB,KAD+B+V,EAE/BpX,QAF+B,GAG/B2C,OAH+B,OAI/BK,IAVoCxC,KAU5BmD,MAAW5D,mCAAkCmX,KAJvBhW,KAAA,SAA1B0D,OAMDA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mBAGK9C,gBAAPgV,qDAQWT,oBACXe,EACAC,aAKMnX,KAHAoX,EAAUF,EAAhBF,eACMK,EAAgBD,MAAtBD,yBAEMG,EAAAlB,sBAAAiB,IAAA3W,KAAA,kCAEiBuB,EAAU,CAC/BzC,QAD+B,GAE/B2C,OAF+B,SAG/BK,IACE8U,EAAAnU,MAAW5D,2BACK6X,yBAA8BD,KALlBzW,KAAA,SAA1B0D,OAQDA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mBAGK9C,QAAPC,8DAOWwU,8BAAqBkB,8BACTtV,EAAU,CAC/BzC,QAD+B,GAE/B2C,OAF+B,SAG/BK,IAAQxC,KAAAmD,MAAW5D,mCAAkCgY,KAHvB7W,KAAA,SAA1B0D,OAMDA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mBAGK9C,QAAPC,4DAOWyU,+BACXiB,WAEMC,EAAoB,CACxBhM,KAAI,GAAK+L,0BAGYtV,EAAU,CAC/BpB,KAD+B2W,EAE/BhY,QAF+B,GAG/B2C,OAH+B,OAI/BK,IAAQxC,KAAAmD,MAAW5D,+BAJWmB,KAAA,SAA1B0D,OAODA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mBAGK9C,QAAPC,4DAUW0U,6BACXgB,EACAE,EACAC,EACAC,WAGMC,EAAY,CAChBC,MADgBH,EAEhBI,OAFgBH,EAGhBI,MAHgBN,EAIhBO,OAAQT,0BAGatV,EAAU,CAC/BpB,KAD+B+W,EAE/BpY,QAF+B,GAG/B2C,OAH+B,OAI/BK,IAAQxC,KAAAmD,MAAW5D,6BAJWmB,KAAA,SAA1B0D,OAODA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mCAGYN,4DAOHqS,6BAAoBW,8BACRnV,EAAU,CAC/BzC,QAD+B,GAE/B2C,OAF+B,SAG/BK,IAAQxC,KAAAmD,MAAW5D,6BAA4B6X,KAHjB1W,KAAA,SAA1B0D,OAMDA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mBAGK9C,QAAPC,4DAOWuU,+BAAsB6B,8BACVhW,EAAU,CAC/BzC,QAD+B,GAE/B2C,OAF+B,SAG/BK,IACExC,KAAAmD,MAAW5D,gDAC0B0Y,KALTvX,KAAA,SAA1B0D,OAQDA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mBAGK9C,QAAPC,4DAOWqU,gCACXgC,8BAEuBjW,EAAU,CAC/BpB,KAD+BqX,EAE/B1Y,QAF+B,GAG/B2C,OAH+B,MAI/BK,IAAQxC,KAAAmD,MAAW5D,mDAJWmB,KAAA,SAA1B0D,OAODA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mBAGK9C,QAAPC,4DAOW2U,oCACXe,EACAW,aAGMlY,4BAAAmY,EAAAjC,uBAAAgC,IAAAxX,KAAA,kCACiBuB,EAAU,CAC/BzC,QAD+B,GAE/B2C,OAF+B,OAG/BK,IACE2V,EAAAhV,MAAW5D,gDAC0BgY,KALT7W,KAAA,SAA1B0D,OAODA,EAALI,SACQ,IAAAC,MAAUL,EAAhBM,mBAGK9C,QAAPC,8DAGKqC,yBACElE,KAAAmD,MAAAgB,SAAoB,CACzB8R,qBAAsBjW,KADGiW,qBAEzBE,WAAYnW,KAFamW,WAGzBC,sBAAuBpW,KAHEoW,sBAIzBC,qBAAsBrW,KAJGqW,qBAKzBC,sBAAuBtW,KALEsW,sBAMzBC,oBAAqBvW,KANIuW,oBAOzBC,2BAA4BxW,KAPHwW,2BAQzBC,oBAAqBzW,KARIyW,oBASzBP,uBAAwBlW,KAAKkW,4BAvPtBF,CAAyCtW,aCxBzC0Y,8JAGJlU,oCAEHxE,EAAAsG,cAAAK,EAAA,CACE7D,IAAG,0BAA4BxC,KAAAmD,MAAWkV,iBAC1C7U,aAAc,CACZmK,YADY,EAEZ2K,QAFY,EAGZC,aAHY,GAIZC,cAJY,GAKZ3B,eALY,GAMZ4B,mBANY,EAOZ1B,SAPY,GAQZ2B,YARY,GASZC,eATY,WAUZ3B,eAVY,GAWZ4B,kBAXY,GAYZC,uBAZY,GAaZC,iBAbY,GAcZ7B,iBAAkB,IAEpB1T,aAAcvD,KAAAmD,MAAWI,cAlB3B,SAoBGrB,2BAAkBlC,yBAzBdoY,CAA2B1Y,aCA3BqZ,8JAGJ7U,oCAEHxE,EAAAsG,cAAAK,EAAA,CACE7D,IAAK,yBACLgB,aAAc,IAFhB,SAIGtB,WAASkC,yBAEN1E,EAAAsG,cAAAuE,EAAA,CAAanH,KAAMA,EAAMyH,QAAS,KAAlC,kBACSM,EAAAhI,MAAAgB,SAAoBtB,OAAAC,OAAA,GAAAsB,QAApBhB,YAZR2V,CAA4BrZ,aCN5BsZ,8JAGJ9U,oCAEHxE,EAAAsG,cAAAK,EAAA,CACE7D,IAAK,kCACLgB,aAAc,IAFhB,SAIGtB,KAASkC,6BAAepE,yBATpBgZ,CAA6CtZ,aCC7CuZ,8JAGJ/U,oCAEHxE,EAAAsG,cAAAK,EAAA,CACE7D,IAAG,YAAcxC,KAAAmD,MAAW4E,uBAC5BvE,aAAc,IAFhB,SAIGtB,KAASkC,6BAAepE,yBATpBiZ,CAA2CvZ,+O9BuYrB,SAE/ByD,UACFzD,gBAACD,EAADC,uBACGwZ,UAAcxZ,mCAAmCyD,EAAnCzD,6GKzUgB,SAE/ByD,UACFzD,gBAACD,EAADC,uBACGwZ,UAAcxZ,mCAAmCyD,EAAnCzD,gFEqBc,SAE7ByD,UACFzD,gBAACD,EAADC,uBACGwZ,UAAcxZ,mCAAiCyD,EAAjCzD,2YY4Ie,SAE9ByD,UACFzD,gBAACD,EAADC,uBACGwZ,UAAcxZ,oCAAkCyD,EAAlCzD,qLG+GG,SAA6CwC,UAG1DiC,cAAS,CACdiG,MAAOwJ,6EN1VX,SACEzL,OAEKA,EAAL4F,gBACQtJ,MAAK,qBAAsB0D,EAAWI,GAA5C,oCAEKJ,EAAP4F,iCAGF,SAAoCA,UAC3BA,EAAPlC,yBAGF,SAA8BA,EAAmB7D,OACzCI,EAASyD,gBAAa4C,UAAKA,OAASzG,QAC1CI,QACQ3D,MAAK,iBAAkBuD,EAA7B,qBAEFI,yBAGF,SAAoCA,OAC7BA,EAAL+Q,iBACQ1U,MAAK,iBAAkB2D,EAAOG,GAApC,uCAEKH,EAAP+Q,6BAGF,SACEA,OAEKA,EAALC,8BACQ3U,MAAN,wDAEK0U,EAAPC,yCAGF,SACExJ,EACAjH,MAEIA,EAAOiH,SAAX,QACQnL,MAAK,eAAgBkE,EAA3B,kDAEKiH,EAAPjH,8BAGF,SACEA,OAIKA,EAAL4L,iBACQ9P,MAAK,eAAgBkE,EAA3B,0CAEKA,EAAP4L,8ECzCF,kBACS9L,EAAOuG,GAAA,SAAkBtG,GAC9BA,QAAc,CACZ,CACEH,GAAI8Q,EADNA,MAEE7N,KAFF,GAGEoE,MAAO,6BAaf,SACE1H,EACAsD,UAEO/C,EAAOP,EAAA,SAAcoR,GAC1BA,yBAUJ,SAA2BpR,SACzB,YAAOA,8BAST,SAA4BA,SAExBA,4BADF,cAEEA,0BAUJ,SAAwBA,SACtB,YAAOA,gCAST,SAA8BA,SAC5B,gBAAOA,2BAWT,SAAyBA,EAA0BG,cAElC8G,GAAOjH,EAApBG,GACAuH,MACA,MAAAxP,SACA,iCAmCJ,SAA6Bd,EAAgB4I,UAEpCuH,GAAWnQ,EAAA4I,EADLA,QAAb,GACkBK,GAAlB,oBAOF,SAA8BjJ,EAAgB4I,OACtCkH,EAAOlH,QAAb,UACOuH,GAAWnQ,EAAA4I,EAAsBkH,EAAtB7G,GAAgC6G,eAAlD,sJA+JF,SACElH,EACAG,EACAuH,EACAtH,OAEMyL,EAAgB/D,GAAgB9H,EAAAG,EAAtCC,GACM0L,EAAkB/D,GAAkB/H,EAAAG,EAA1CC,UACOuH,GAAqB3H,EAAAG,EAAAuH,EAArBC,mBAAmE5P,UACxEA,YACI,oBAAOA,EAAPsZ,QACEtZ,cADF+T,GAEE/T,EAHNA,iFcxU6B,SAAI6M,UACnC0M,KAAKC,mBAAmB/W,eAApBoK,+BCD6B,SAAIA,UACrCpK,WAAWgX,mBAAmBC,KAA9BjX,iHNgSoC,SAElCS,UACFzD,gBAACD,EAADC,uBACGwZ,UACCxZ,oCAAsCyD,EAAtCzD,4KOxSN,IAAAka,EAAAC,EAAA,GAAAC,EAAAD,EAAA,IAKeE,EAAA,GACbC,cAAe,CACbC,aAAcC,uBACZC,IAAOH,cAAcC,aACrB,SAAAG,GAAA,IAAGH,EAAHG,EAAGH,aAAH,MAAuB,CACrBI,OAAQ,CACNC,eAAgBL,EAAa1R,IAE/BxI,MAAO,CACLka,mBAINM,OAAQ,CACNC,OAAQC,+BAAqBN,IAAOH,cAAcO,OAAOC,QACzDE,OAAQD,+BAAqBN,IAAOH,cAAcO,OAAOG,QACzDC,SAAUF,+BAAqBN,IAAOH,cAAcO,OAAOI,UAC3DC,KAAMH,+BAAqBN,IAAOH,cAAcO,OAAOK,OAEzDC,KAAMJ,+BAAqBN,IAAOH,cAAca,OAElDC,WAAY,CACVxL,UAAW,CACTyL,QAASb,uBACPC,IAAOW,WAAWxL,UAAUyL,QAC5B,SAAAC,GAAA,IAAG1L,EAAH0L,EAAG1L,UAAH,MAAoB,CAClB+K,OAAQ,CACNzO,YAAa0D,EAAU/G,IAEzBxI,MAAO,CACLuP,gBAIN2L,OAAQf,uBACNC,IAAOW,WAAWxL,UAAU2L,OAC5B,SAAAC,GAAA,IAAG5L,EAAH4L,EAAG5L,UAAH,MAAoB,CAClB+K,OAAQ,CACNzO,YAAa0D,EAAU/G,IAEzBxI,MAAO,CACLuP,iBAKR6L,OAAQV,+BAAqBN,IAAOW,WAAWK,QAC/CN,KAAMJ,+BAAqBN,IAAOW,WAAWD,OAE/CO,KAAMX,+BAAqBN,IAAOH,cAAca,iOC9ClD9Z,IAQYsa,EAUAC,EAlBNC,EAAUC,EAAhBza,KACM0a,EAAYD,EAAlBza,KACM2a,EAASF,EAAfza,KACM4a,EAAUH,EAAhBza,KACM6a,EAASJ,EAAfza,KACM8a,EAAOL,EAAbza,MAGYsa,kCAAZ,KACEA,YACAA,YACAA,YACAA,cACAA,cACAA,YACAA,uBACAA,uBAEUC,sCAAZ,KACEA,wBACAA,kBACAA,sBACAA,oBAOF,IAAaQ,cAOX5Y,WAAYC,eACVA,QAHQ4Y,OAAA,UAIRC,eAAsB,IAAtBC,oBACAC,aAAoBlc,KAAAkc,aAAA7Y,KAApBrD,WACAmc,WAAkBnc,KAAAmc,WAAA9Y,KAAlBrD,gHAGK2D,6BACD3D,KAAJ+b,aACEA,OAAAxI,iBAAA,OAAqCvT,KAArCkc,2BAIGE,mCAAyBrY,SACY/D,KAAKmD,MAArBkZ,GAANC,kCACOC,qCACtBtY,EAAKoY,EAAVE,SACEC,oBAAAD,gBAIGzY,wCACL,eAGK8B,gCACD5F,KAAJ+b,aACEA,OAAAU,oBAAA,OAAwCzc,KAAxCkc,2BAIGA,6BACLQ,YAAmB1c,KAAAgc,eAAnBW,WACAD,YAAAhJ,UAA6B1T,KAA7Bmc,gBACAJ,OAAAa,cAAAC,YAAA,WAAqD,CACnD7c,KAAAgc,eADFc,qBAKKX,oBAAUpS,UACPA,OAAR7E,aACE,cACqClF,KAAKmD,MAAjB4Z,GAAfC,uCACRR,oBAAAO,aAGF,eACQA,EAAmChT,OAAzCgT,aACA5Z,MAAA6Z,WAAsBD,EAAtBE,wBAMCT,6BAAmBrZ,MACpBnD,KAAJ0c,YAAsB,KACdxX,EAAU,CACdA,QADc,SAEd6X,QAAS,CACPG,WAAY/Z,EADL+Z,WAEP1H,eAAgBrS,EAFTqS,eAGP2H,iBAAkBha,EAHXga,iBAIPC,kBAAmBja,EAJZia,kBAKPC,oBAAqBla,EALdka,oBAMPC,UAAWna,EANJma,UAOPL,SAAU9Z,EAPH8Z,SAQPxH,gBAAiBtS,EARVsS,gBASP8H,kBAAmBpa,EATZoa,kBAUPC,mBAAoBra,EAVbqa,mBAWPC,qBAAsBta,EAXfsa,qBAYPC,WAAYva,EAAMua,kBAGtBhB,YAAAG,YAAA3X,iBAIGhB,6BACCyZ,EAAM,+WAYwBpC,yDACAE,yDACAC,yDACAC,yDACAC,yDACAC,EAjBpC,0CA2BEnc,EAAAsG,cAAA,SAAAnD,OAAAC,OAAA,CACE6a,OAAQA,EACRC,MAAO,CAAEC,MAAF,OAAiBC,OAAQ,QAChCC,YAAa,GAPE,CACjBC,kBAAmB,IAObC,CACJ/b,IAAG,SAAEgc,UAAOle,SAAcke,SArHrBpC,CAA0Bpc,iOCrBvCye,EAAGA,GAAGC,IAAMC,EACZC,EAAGA,GAAGF,IAAMG,EAGZJ,EAAGA,GAAGK,QAAQ7Q,YAAc8Q,EAC5BH,EAAGA,GAAGE,QAAQ7Q,YAAc+Q,EAG5BP,EAAGA,GAAGK,QAAQG,eAAiBC,EAC/BN,EAAGA,GAAGE,QAAQG,eAAiBE,EAG/BV,EAAGA,GAAGK,QAAQM,UAAYC,EAC1BT,EAAGA,GAAGE,QAAQM,UAAYE,EAG1Bb,EAAGA,GAAGK,QAAQlb,KAAO2b,EACrBX,EAAGA,GAAGE,QAAQlb,KAAO4b,EAGrBf,EAAGA,GAAGK,QAAQ3R,aAAesS,EAC7Bb,EAAGA,GAAGE,QAAQ3R,aAAeuS,ECjC7B,IAAMC,EAAU,CACdC,cAAe,CACbC,aAAa,GAGfC,OAAO,EAEPC,UAAW,CACTtB,GAAI,CACFC,IAAKD,EAAGA,GAAGC,IACXzQ,YAAawQ,EAAGA,GAAGK,QAAQ7Q,YAC3BgR,eAAgBR,EAAGA,GAAGK,QAAQG,eAC9BG,UAAWX,EAAGA,GAAGK,QAAQM,UACzBxb,KAAM6a,EAAGA,GAAGK,QAAQlb,KACpBuJ,aAAcsR,EAAGA,GAAGK,QAAQ3R,aAC5B6S,OAAQvB,EAAGA,GAAGuB,QAEhBpB,GAAI,CACFF,IAAKE,EAAGA,GAAGF,IACXzQ,YAAa2Q,EAAGA,GAAGE,QAAQ7Q,YAC3BgR,eAAgBL,EAAGA,GAAGE,QAAQG,eAC9BG,UAAWR,EAAGA,GAAGE,QAAQM,UACzBxb,KAAMgb,EAAGA,GAAGE,QAAQlb,KACpBuJ,aAAcyR,EAAGA,GAAGE,QAAQ3R,aAC5B6S,OAAQpB,EAAGA,GAAGoB,SAIlBC,UAAW,SACXC,YAAqD,KACrDC,WAAY,CAAC,UACbC,aAAc,IACdC,GAAI,CAAC,SAAU,MAAO,iBAAkB,YAAa,iBAGvDC,IAAKC,IAAIC,KAAkBC,KAAKd,GACjBW,MAAf,+ECQaI,EAAuB,SAAAhG,GAAA,IAClC/R,EADkC+R,EAClC/R,OACAH,EAFkCkS,EAElClS,YAFkC,MAGf,CACnBmS,OAAOxX,OAAAwd,EAAA,EAAAxd,CAAA,CACLwF,OAAQA,GAAkBH,EAAYU,MAAO,GAAGL,IAC5CL,GAAeA,EAAYK,GAAK,CAAEkB,cAAevB,EAAYK,IAAO,IAE1ExI,MAAO,CACLmI,iBAISoY,EAAkC,SAAAtF,GAGhB,IAF7B1S,EAE6B0S,EAF7B1S,SACGiY,EAC0B1d,OAAA2d,EAAA,EAAA3d,CAAAmY,EAAA,cAAAyF,EACHL,EAAqBG,GAAvClG,EADqBoG,EACrBpG,OAAQta,EADa0gB,EACb1gB,MAChB,MAAO,CACLsa,OAAOxX,OAAAwd,EAAA,EAAAxd,CAAA,GACFwX,EADC,CAEJ/R,aAEFvI,UAIS2gB,EAA8B,SAAAxF,GAGhB,IAFzB/S,EAEyB+S,EAFzB/S,WACGoY,EACsB1d,OAAA2d,EAAA,EAAA3d,CAAAqY,EAAA,gBAAAyF,EACCL,EAAgCC,GAAlDlG,EADiBsG,EACjBtG,OAAQta,EADS4gB,EACT5gB,MAChB,MAAO,CACLsa,OAAOxX,OAAAwd,EAAA,EAAAxd,CAAA,GACFwX,EADC,CAEJtS,aAAcI,EAAWI,KAE3BxI,MAAM8C,OAAAwd,EAAA,EAAAxd,CAAA,GACD9C,EADA,CAEHoI,iBAKOyY,EAAiC,SAAAC,GAQhB,IAP5B7Y,EAO4B6Y,EAP5B7Y,SACAK,EAM4BwY,EAN5BxY,OACAM,EAK4BkY,EAL5BlY,KACAT,EAI4B2Y,EAJ5B3Y,YACA4Y,EAG4BD,EAH5BC,mBACAxY,EAE4BuY,EAF5BvY,SACGiY,EACyB1d,OAAA2d,EAAA,EAAA3d,CAAAge,EAAA,4EAAAE,EACFL,EAA4B7d,OAAAwd,EAAA,EAAAxd,CAAA,GACjD0d,EADgD,CAEnDlY,SACAH,cACAI,cAJM+R,EADoB0G,EACpB1G,OAAQta,EADYghB,EACZhhB,MAMVihB,EAAmBC,SAAS3Y,EAAU,IACtC4Y,EAAahS,kBAAQhH,EAAaG,EAAQ2Y,IAAqB,GACrE,MAAO,CACL3G,OAAOxX,OAAAwd,EAAA,EAAAxd,CAAA,GACFwX,EADC,CAEJrS,WACAW,KAAI,GAAAlD,OAAKkD,GAAQ,KAEnB5I,MAAM8C,OAAAwd,EAAA,EAAAxd,CAAA,GACD9C,EADA,CAEH+gB,qBACA7Y,qBAAsBiZ,EAAWjZ,yBAO1BkZ,EAAe1G,+BAAqBN,IAAOU,MAE3CuG,EAAqB3G,+BAAqBN,IAAOkH,WAAWjG,MAE5DkG,EAAqB7G,+BAAqBN,IAAOI,OAAOa,MAExDmG,EAAgCC,2CAG3CrH,IAAOI,OAAO/M,MAAMiU,WAAY,WAChC,IAAMvZ,EAAcwZ,gCACpB,MAAO,CACLrH,OAAQ,CACNhS,OAAQH,EAAYU,MAAO,GAAGL,GAC9BD,SAAU,KAEZvI,MAAO,CACLmI,kBAKOyZ,EAAkCzH,uBAI7CC,IAAOI,OAAO/M,MAAMrF,WAAWyZ,aAAclB,GAElCmB,EAAqC3H,uBAKhDC,IAAOI,OAAO/M,MAAMrF,WAAW2Z,gBAC/BlB,GAGWmB,EAAiC7H,uBAI5CC,IAAOI,OAAOyH,OAAOP,WAAYnB,GAEtB2B,EAAmC/H,uBAI9CC,IAAOI,OAAOyH,OAAO7Z,WAAWyZ,aAAclB,GAEnCwB,EAAsChI,uBAKjDC,IAAOI,OAAOyH,OAAO7Z,WAAW2Z,gBAChClB,GAGWuB,EAA+BjI,uBAI1CC,IAAOI,OAAO6H,UAAUC,MAAOjC,GAEpBkC,EAA2CpI,uBAItDC,IAAOI,OAAO6H,UAAUG,QAAQd,WAAYnB,GAEjCkC,EAA6CtI,uBAKxDC,IAAOI,OAAO6H,UAAUG,QAAQpa,WAAWyZ,aAC3ClB,GAGW+B,EAAgDvI,uBAK3DC,IAAOI,OAAO6H,UAAUG,QAAQpa,WAAW2Z,gBAC3ClB,GAGW8B,EAA8CxI,uBAKzDC,IAAOI,OAAO6H,UAAUO,SAASxa,WAAWyZ,aAC5ClB,GAGWkC,EAAiD1I,uBAK5DC,IAAOI,OAAO6H,UAAUO,SAASxa,WAAW2Z,gBAC5ClB,GAGWiC,EAAgD3I,uBAI3DC,IAAOI,OAAO6H,UAAUU,eAAgB,SAAAC,GAAA,MAAsB,CAC9D1I,OAAQ,KACRta,MAAO,CACLmI,YAHsC6a,EAAG7a,gBAOhC8a,EAA8B9I,uBAIzCC,IAAOjS,YAAY+a,SAAU,SAAAC,GAAA,IAAGhb,EAAHgb,EAAGhb,YAAH,MAAsB,CACnDmS,OAAQ,CACN5Q,cAAevB,EAAYK,IAE7BxI,MAAO,CACLmI,kBAISib,EAA6BjJ,uBAIxCC,IAAOjS,YAAY6S,QAAS,SAAAqI,GAAA,MAAwB,CACpD/I,OAAQ,CACN5Q,cAF0B2Z,EAAG3Z,kBAMpB4Z,EAA+BnJ,uBAI1CC,IAAOjS,YAAYob,KAAKjB,MAAOjC,GAEpBmD,EAA2CrJ,uBAItDC,IAAOjS,YAAYob,KAAKf,QAAQd,WAAYnB,GAEjCkD,EAA6CtJ,uBAKxDC,IAAOjS,YAAYob,KAAKf,QAAQpa,WAAWyZ,aAC3ClB,GAGW+C,EAAgDvJ,uBAK3DC,IAAOjS,YAAYob,KAAKf,QAAQpa,WAAW2Z,gBAC3ClB,GAGW8C,EAA8CxJ,uBAKzDC,IAAOjS,YAAYob,KAAKX,SAASxa,WAAWyZ,aAC5ClB,GAGWiD,EAAiDzJ,uBAK5DC,IAAOjS,YAAYob,KAAKX,SAASxa,WAAW2Z,gBAC5ClB,GAGWgD,EAAgC1J,uBAI3CC,IAAOjS,YAAYob,KAAKR,eAAgB1C,GAE7ByD,EAAkB3J,uBAI7BC,IAAOjS,YAAY4b,QAAS,SAAAC,GAAA,IAAG7b,EAAH6b,EAAG7b,YAAH,MAAsB,CAClDmS,OAAQ,CACN5Q,cAAevB,EAAYK,IAE7BxI,MAAO,CACLmI,kBAIW6R,EAAA,GACbc,KAAMsG,EACNE,WAAY,CACVjG,KAAMgG,GAER7G,OAAQ,CACNa,KAAMkG,EACN9T,MAAO,CACLiU,WAAYF,EACZpZ,WAAY,CACVyZ,aAAcD,EACdG,gBAAiBD,IAGrBG,OAAQ,CACNP,WAAYM,EACZ5Z,WAAY,CACVyZ,aAAcK,EACdH,gBAAiBI,IAGrBE,UAAW,CACTC,MAAOF,EACPI,QAAS,CACPd,WAAYa,EACZna,WAAY,CACVyZ,aAAcY,EACdV,gBAAiBW,IAGrBE,SAAU,CACRN,MAAO,OACPla,WAAY,CACVyZ,aAAcc,EACdZ,gBAAiBc,IAGrBE,eAAgBD,IAGpB3a,YAAa,CACX+a,SAAUD,EACVjI,QAASoI,EACTG,KAAM,CACJjB,MAAOgB,EACPd,QAAS,CACPd,WAAY8B,EACZpb,WAAY,CACVyZ,aAAc4B,EACd1B,gBAAiB2B,IAGrBd,SAAU,CACRN,MAAO,OACPla,WAAY,CACVyZ,aAAc8B,EACd5B,gBAAiB6B,IAGrBb,eAAgBc,GAElBE,QAASD,+DChYAG,EAAsC,SAAA7gB,GAAK,OACtD8gB,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,WACf,SAAAoE,GAAC,OACAF,EAAA,cAACG,EAAA,mBAAD,CACEC,UAAWF,EAAE,eACbG,SAAU,aACVC,SAAU,aACVC,iBAAkB,sBAClBC,gBAAiB,0BACjB1iB,MAAOoB,EAAMpB,MACb2iB,UAAWvhB,EAAMuhB,sDCdZC,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAA9hB,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAA2kB,GAAA9hB,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAA8hB,GAAAK,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAA8hB,EAAAC,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAA8hB,EAAA,EAAAtL,IAAA,SAAA9Y,MAAA,WACkB,IAAAD,EAAAN,KACd,OAAIA,KAAKmD,MAAMpB,OAAS/B,KAAKmD,MAAMiiB,UACjCC,QAAQtjB,MAAM/B,KAAKmD,MAAMpB,OAEvBkiB,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,WACf,SAAAoE,GAAC,OACAF,EAAA,cAACG,EAAA,mBAAD,CACEC,UAAWF,EAAE,eACbG,SAAUH,EAAE,cACZI,SAAUJ,EAAE,cACZK,iBAAkBL,EAAE,uBACpBM,gBAAiBN,EAAE,kCACnBmB,uBAAwBnB,EAAE,6BAC1BpiB,MAAOzB,EAAK6C,MAAMpB,WAKjB/B,KAAKmD,MAAMoiB,UACbtB,EAAA,cAACG,EAAA,OAAD,MAEF,SAtBXO,EAAA,CAAkCjlB,aCDrB8lB,EAAyB,kBACpCvB,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,WACf,SAAAoE,GAAC,OACAF,EAAA,cAACG,EAAA,mBAAD,CACEC,UAAWF,EAAE,aACbG,SAAUH,EAAE,YACZI,SAAUJ,EAAE,YACZK,iBAAkBL,EAAE,qBACpBM,gBAAiBN,EAAE,wDCKdsB,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAA5iB,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAylB,GAAA5iB,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAA4iB,GAAAT,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAA4iB,EAAAC,GAAA7iB,OAAAsiB,EAAA,EAAAtiB,CAAA4iB,EAAA,EAAApM,IAAA,SAAA9Y,MAAA,WACkB,IAAAD,EAAAN,KACd,OACEikB,EAAA,cAAC7F,EAAA,EAAWnY,SAAZ,KACG,SAAAmU,GAAA,IAAGuL,EAAHvL,EAAGuL,OAAH,OACC1B,EAAA,cAAC2B,EAAAnX,EAAD,KACEwV,EAAA,8BAAAxe,OAAWnF,EAAK6C,MAAM0iB,MAAtB,OAAApgB,OAAiCkgB,EAAOE,OACtC,oBAPdJ,EAAA,CAA+B/lB,iBCLlBomB,EAAgD,SAAA1L,GAAkB,IAAfjW,EAAeiW,EAAfjW,SACxD4hB,EAAUrmB,aAAiBsmB,KAQjC,OAPAtmB,YAAgB,WAGd,OAFAqmB,EAAQE,iBAED,WACLF,EAAQG,mBAET,IACIjC,EAAA,cAAAA,EAAA,cAAG9f,ICRCgiB,EAAb,SAAAvB,GAAA,SAAAuB,IAAA,IAAAC,EAAA9lB,EAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAmmB,GAAA,QAAAE,EAAApB,UAAA/P,OAAAoR,EAAA,IAAAvd,MAAAsd,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtB,UAAAsB,GAAA,OAAAjmB,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,MAAAomB,EAAAvjB,OAAAkiB,EAAA,EAAAliB,CAAAsjB,IAAAK,KAAAxB,MAAAoB,EAAA,CAAApmB,MAAAyF,OAAA6gB,MAISvmB,MAAiC,GAJ1CO,EAAA,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAAsjB,EAAAvB,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAsjB,EAAA,EAAA9M,IAAA,oBAAA9Y,MAAA,SAM2BwB,EAAc2iB,GACrC1kB,KAAKqE,SAAS,CACZtC,QACA2iB,gBATN,CAAArL,IAAA,4BAAA9Y,MAAA,SAcIwD,EACA0iB,GAEAzmB,KAAKqE,SAAS,CACZtC,WAAOkJ,EACPyZ,eAAWzZ,MAnBjB,CAAAoO,IAAA,SAAA9Y,MAAA,WAuBkB,IAAA+W,EAAAtX,KACd,OAAOA,KAAKD,MAAMgC,OAAS/B,KAAKD,MAAM2kB,UACpC1kB,KAAKmD,MAAMujB,eACThnB,gBAAoBM,KAAKmD,MAAMujB,eAAgB,CAC7C3kB,MAAO/B,KAAKD,MAAMgC,MAClB2iB,UAAW1kB,KAAKD,MAAM2kB,YAGxBT,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,WACf,SAAAoE,GAAC,OACAF,EAAA,cAACG,EAAA,mBAAD,CACEC,UAAWF,EAAE,eACbG,SAAUH,EAAE,cACZI,SAAUJ,EAAE,cACZK,iBAAkBL,EAAE,uBACpBM,gBAAiBN,EAAE,kCACnBmB,uBAAwBnB,EAAE,6BAC1BpiB,MAAOuV,EAAKvX,MAAMgC,MAClB2iB,UAAWpN,EAAKvX,MAAM2kB,cAM9B1kB,KAAKmD,MAAMgB,aA/CjBgiB,EAAA,CAAuCzmB,aCbvCma,EAAA8M,EAAA5M,EAAA,sBAAA6M,IAAA/M,EAAA8M,EAAA5M,EAAA,sBAAA8M,IAAAhN,EAAA8M,EAAA5M,EAAA,sBAAA+M,IAAAjN,EAAA8M,EAAA5M,EAAA,sBAAAgN,IAAAlN,EAAA8M,EAAA5M,EAAA,sBAAAiN,IAAAnN,EAAA8M,EAAA5M,EAAA,sBAAAkN,qCCAA,IAAAC,EAAArN,EAAA,IAGMsN,EAAa,CAEjB1F,WAAY,GAEZ2F,YAAaC,kBAAQ,eAAgB,CACnCC,cAAe,gBACf5M,OAAQ,SACR4I,KAAM,OACN1I,KAAM,SAGR2M,WAAY,SAEZC,YAAa,SAEbC,SAAU,WAEV9e,KAAM,OAENR,WAAYkf,kBAAQ,2BAA4B,CAC9CzF,aAAc,SACdE,gBAAiB,8BAEjB4F,aAAc,sDAQZC,EAAeN,kBAAQ,eAAgB,CAC3ChF,MAAO,WACPE,QAAS8E,kBAAQ,gCAAiCF,GAClDxE,SAAU0E,kBAAQ,qCAAsCF,GACxDrE,eAAgB,OAChB1H,KAAM,KAGOiM,sBAAQ,gBAAiB,CACtCxM,KAAM,GACNwG,WAAYgG,kBAAQ,aAAc,CAAEjM,KAAM,KAC1CD,OAAQkM,kBAAQ,SAAU,CAAEjM,KAAM,KAClCb,OAAQ8M,kBAAQ,SAAU,CACxB7Z,MAAO6Z,kBAAQ,wCAAyCF,GACxDnF,OAAQqF,kBAAQ,yCAA0CF,GAC1D/E,UAAWiF,kBAAQ,YAAaM,GAChCvM,KAAM,KAERlT,YAAamf,kBAAQ,iBAAkB,CACrCtM,QAAS,UACTkI,SAAU,WACVa,QAAS,UACTR,KAAM+D,kBAAQ,OAAQM,GACtBvM,KAAM,kICdGwM,EAAb,SAAAhD,GAAA,SAAAgD,IAAA,OAAA/kB,OAAAglB,EAAA,EAAAhlB,CAAA7C,KAAA4nB,GAAA/kB,OAAAilB,EAAA,EAAAjlB,CAAA7C,KAAA6C,OAAAklB,EAAA,EAAAllB,CAAA+kB,GAAA5C,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAmlB,EAAA,EAAAnlB,CAAA+kB,EAAAhD,GAAA/hB,OAAAolB,EAAA,EAAAplB,CAAA+kB,EAAA,EAAAvO,IAAA,SAAA9Y,MAAA,WAGkB,IAAAD,EAAAN,KACd,OACEkoB,EAAA,cAACC,EAAA,2BAAD,KACGnoB,KAAKmD,MAAMyM,MAAM/G,IAAI,SAAC5I,EAAGmoB,GACxB,OACEF,EAAA,cAACA,EAAA,SAAD,CAAgB7O,IAAK+O,GACnBF,EAAA,cAACC,EAAA,+BAAD,CACEE,SAAUpoB,EAAEkI,WAAY4F,UAAWvC,KACnC8c,gBAAiBroB,EAAEmI,OAAQoD,KAC3BoD,KAAMsZ,EAAA,qBAAKK,IAAKtoB,EAAEkI,WAAYyG,KAAMiP,MAAO,GAAIC,OAAQ,KACvDjS,QACEqc,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACC,EAAA,WAAD,CAAYK,KAAMloB,EAAK6C,MAAMslB,kBAAkBL,EAAKnoB,IAApD,aAGAioB,EAAA,cAACC,EAAA,WAAD,CAAYK,KAAM,IAAKE,GAAI,UACzBR,EAAA,mBAAGS,UAAU,oBAKpBP,EAAM9nB,EAAK6C,MAAMyM,MAAMsF,OAAS,GAC/BgT,EAAA,cAACC,EAAA,uBAAD,CACES,QAAQ,EACRC,aAAa,EACbC,YAAaxoB,EAAK6C,MAAM2lB,YAAYV,EAAM,GAC1CW,YAAa,uBA7B/BnB,EAAA,CAAgDloB,+CC3ChD,IAAAwnB,EAAArN,EAAA,IAEewN,sBAAQ,IAAK,CAC1BjM,KAAM,4ECaO,IALe4N,EAKfC,EAAA,CACb7N,MAN4B4N,EAMD7O,IAAOiB,KAL3B,kBAAM8N,kBAAQF,sBCNRjP,EAAA,GACbpM,gBACAgR,mBACAG,YACAxb,SACAuJ,gHCLUsc,EAWAC,uFAXAD,kDAAZ,KACEA,wBACAA,+BACAA,cACAA,UACAA,eAMUC,wDAAZ,KACEA,iBACAA,oBACAA,kBACAA,oBACAA,cACAA,cA4DF,IAAaC,6JAGJnlB,yBAEHxE,EAAAsG,cAACsjB,EAADA,cAAA,CACEC,eAAe,2BACfC,sBAAsB,kCACtB5a,KACE5O,KAAAmD,MAAAyL,OAAoBua,uBAApBM,MACE/pB,EAAAsG,cAAC0jB,EAADA,KAAA,CAAMjV,KAAK,KAAKjJ,KAAMxL,KAAAmD,MAAWyL,OAGrC+a,OAAQ3pB,KAAAmD,MAAWymB,SACnBC,cAAe7pB,KAAAmD,MAAW2mB,UAC1BC,2BAA4B/pB,KAAAmD,MAAW6mB,sBACvCC,2BAA4BjqB,KAAAmD,MAAW+mB,YACvCC,eACEzqB,EAAAsG,cAAA,KAAG2iB,UAAU,QAAQ3oB,KAAAmD,MAArBinB,yBAEFC,gBAAiBrqB,KAAAmD,MAAWymB,SAC5BU,6BAA8BtqB,KAAAmD,MAAWonB,qBACzCC,iBACExqB,KAAAmD,MAAAsnB,mBACE/qB,yBAAIM,KAAAmD,MADNsnB,yBAGExf,EAGJyf,KAAM1qB,KAAAmD,MAAWwnB,WACjB9E,MAAO7lB,KAAAmD,MAAWkhB,eA9BbgF,CAA2B3pB,aCzE3BkrB,6JACJ1mB,yBAEHxE,EAAAsG,cAACsjB,EAADA,cAAA,CACEzD,MAAO7lB,KAAAmD,MAAW0iB,MAClBsE,eAAgBnqB,KAAAmD,MAAWtC,KAC3BgqB,OAAQ7qB,KAAAmD,MAAW0nB,OACnBH,MAAM,EACNf,OAAQ3pB,KAAAmD,MAAWwmB,YARdiB,CAAelrB,aCV5B,IAQaorB,EAAS,SAA6C5oB,WAEjEymB,iKACGxlB,qBAEHzD,qCAAKipB,UAAWoC,EAAU,kBAAApC,IAA1BjpB,OC2FWsrB,cASX9nB,WAAmBC,eACjBA,QAGApD,MAAa,CACXkrB,MADW,GAEXC,cAAe,SAGjBC,oBAA2BnrB,KAAAmrB,oBAAA9nB,KAA3BrD,WACAorB,oBAA2BprB,KAAAorB,oBAAA/nB,KAA3BrD,gHAMKqrB,yCAEL,IAAIrrB,KAAAD,MAAAkrB,MAAA/V,OACKxV,uBAAYM,KAAAD,MAAAkrB,MAAA,GAAnBzf,MAIExL,KAAAD,MAAAkrB,MAAA/V,OAAJ,EAEIxV,0BACGM,KAAAD,MAAAkrB,MAAApiB,IAAA,SAAqBI,EAAAoZ,GAAA,OACpB3iB,EAAAsG,cAAA,MAAIqT,IAAKgJ,GAAQpZ,EAAjBuC,SAOD9L,uBAAYM,KAAAmD,MAAnBmoB,wCAMKC,mCACDvrB,KAAAmD,MAAJqoB,yBAEI9rB,EAAAsG,cAAA,QAAM2iB,UAAU,mCACdjpB,EAAAsG,cAAC0jB,EAADA,KAAA,CAAMjV,KAAK,KAAKjJ,KAAK,OADvB,OAESxL,KAAAmD,MAHXqoB,0BAOExrB,KAAAmD,MAAJsoB,wBAEI/rB,EAAAsG,cAAA,QAAM2iB,UAAU,mCACdjpB,EAAAsG,cAAC0jB,EAADA,KAAA,CAAMjV,KAAK,KAAKjJ,KAAK,mBADvB,OAESxL,KAAAmD,MAHXsoB,yBAQAzrB,KAAAmD,MAAAuoB,2BACA1rB,KAAAmD,MAFFwoB,yBAKIjsB,0BACGM,KAAAmD,MAAAuoB,0BAAA7iB,IAAA,SAA0C3D,EAAAkjB,GAAA,OACzC1oB,EAAAsG,cAAA,MACEqT,IAAK,UAAY+O,EACjBO,UAAU,mCAEVjpB,EAAAsG,cAAC0jB,EAADA,KAAA,CAAMjV,KAAK,KAAKjJ,KAAK,OAJvB,OAAAtG,KAQDlF,KAAAmD,MAAAwoB,yBAAA9iB,IAAA,SAAyC3D,EAAAkjB,GAAA,OACxC1oB,EAAAsG,cAAA,MAAIqT,IAAK,OAAS+O,EAAKO,UAAU,mCAC/BjpB,EAAAsG,cAAC0jB,EAADA,KAAA,CAAMjV,KAAK,KAAKjJ,KAAK,mBADvB,OAAAtG,MASDxF,kBAAP,mBAOKyrB,6BAAmBS,QACxBvnB,SAAcxB,OAAAC,OAAA,GAAK9C,KAALD,OAAiBkrB,MAA/BW,UACAzoB,MAAA0oB,iBAAAD,gBAOKR,6BAAmBU,cAClBZ,EAAgBY,EAAAjjB,IAAA,SAAkBI,SAAS,CAC/CoQ,IAAKpQ,EAD0CuC,KAE/CtG,QAASlF,yBAA4BiJ,EAFUuC,MAG/CiJ,KAAM,gBAMRpQ,SAAcxB,OAAAC,OAAA,GACT9C,KADSD,OAEZkrB,MAFY,GAGZC,cAAmBlrB,KAAAD,MAAJmrB,cAAAzlB,OAHjBylB,mBAOKhnB,oCAEHxE,EAAAsG,cAAA+lB,EAAA,CACEC,OAAQhsB,KAAAmD,MAAW8oB,eACnBC,SAAUlsB,KAAAmD,MAAWgpB,gBACrBC,SAAUpsB,KAAAmD,MAAWkpB,cACrBC,eAAgBtsB,KAAKmrB,oBACrBoB,eAAgBvsB,KAAKorB,qBALvB,SAOGlpB,WAAiBsqB,sCAChB9sB,uBACEA,EAAAsG,cAACymB,EAADA,KAAA5pB,OAAAC,OAAA,CACEopB,SAAUlsB,QAAWmsB,gBACrBO,OAAO,EACP/D,UAAU,oBACNgE,EAAa,CAAEC,OAAQ,sBAE3BltB,EAAAsG,cAACymB,OAADI,IAAA,KACEntB,EAAAsG,cAACymB,OAADK,IAAA,CACEnE,UAAU,iCACVoE,wBAAyB,CACvBC,OAAQhtB,QAAWitB,qBAIzBvtB,gBAAC+sB,OAAD/sB,SACEA,gBAAC+sB,OAAD/sB,SACEA,yCAAW8sB,QAGf9sB,EAAAsG,cAACymB,OAADI,IAAA,KACEntB,EAAAsG,cAACymB,OAADK,IAAA,CACEnE,UAAU,sCACVuE,GAAI,GAEHltB,QALLmtB,uBAOEztB,EAAAsG,cAACymB,OAADK,IAAA,CAAUnE,UAAU,iCAAiCuE,GAAI,GACtDltB,EARLqrB,0BAUE3rB,EAAAsG,cAACymB,OAADK,IAAA,CAAUI,GAAI,GAAIltB,EA7BtBurB,qBA+BGvrB,wBACCN,EAAAsG,cAACymB,OAADI,IAAA,KACEntB,EAAAsG,cAACymB,OAADK,IAAA,CAAUnE,UAAU,8BACjB3oB,QAHNA,kBAhCLN,YAtIGsrB,CAAuBtrB,aAKpBsrB,eAAe,CAC3BqB,eAAe,OCrFNe,cAEXlqB,WAAYC,0BACVA,QACApD,MAAa,CACXstB,WAAW,QAEbC,YAAA,aACEjpB,SAAc,CACZgpB,WAAYrtB,QAAWqtB,uHAKtB1pB,kCACLU,SAAc,CACZgpB,UAAWrtB,KAAAmD,MAAW+iB,8BAInBhiB,sBACGmpB,EAAcrtB,KAAKD,MAAnBstB,UAEFE,EACJ7tB,EAAAsG,cAACwnB,EAADA,WAAA,CACEC,KAAMztB,KAAAmD,MAAWuqB,WACjBC,UAAW,CAAEnF,KAAM,KACnBoF,QAAS5tB,KAAAmD,MAAW0qB,OACpBC,eAAe,EACfT,UAAWA,EACXC,YAAattB,KAAKstB,cAGhBS,EACJruB,EAAAsG,cAACgoB,EAADA,YAAA,CACEC,IACEvuB,gBAACwuB,EAADxuB,SACEA,gBAACyuB,EAADzuB,aAAUM,KAAAmD,MADZzD,cAIF2tB,UAAWA,WAKb3tB,EAAAsG,cAACooB,EAADA,KAAA,CAAMC,OAAQd,EAAQe,QAASP,GAC7BruB,gBAAC6uB,EAAD7uB,iBAAcM,KAAAmD,MAFlBgB,cA5CSipB,CAAkB1tB,aCVlB8uB,cAAb,SAAAA,4CAISzuB,MAAQ,CACb0uB,QAAQ,QAEHC,SAAA,SAAYD,KACjBpqB,SAAc,QACZoqB,UAGGE,SAAA,SAAY5kB,KACjB1F,SAAc,CACZoqB,QAASzuB,QAAWyuB,oHAGjBvqB,wBAC0BlE,KAAKmD,MAA5BgB,aAAU2S,oBAEhBpX,EAAAsG,cAAC4oB,EAADA,SAAA,CACEC,SAAS,EACTF,SAAU3uB,KAAK2uB,SACfG,OACEpvB,EAAAsG,cAAC+oB,EAADA,eAAA,CAAgBL,SAAU1uB,KAAK0uB,UAA/B5X,GAEF2X,OAAQzuB,KAAAD,MAAW0uB,OACnBO,cAAetvB,2BA3BV8uB,CAAmB9uB,aCbhC,IAsBauvB,EAAU,SAA8C/sB,WAEnEsmB,YACAG,SACAuD,6CACK,mBAEL/nB,qMACGhB,oBAEHwlB,EAAYoC,EAAU,aAAerC,EAAfC,EAAgC,iBAC1CuG,WAD0C,OAE1CA,WACS,OAATA,IAEL1G,MACL9oB,EAAAsG,cAACmpB,EAADA,KAAAtsB,OAAAC,OAAA,CAAMssB,GAAI5G,EAAM6G,QAASA,EAAS1G,UAAWA,GAA7CxlB,GADKqlB,GAKL9oB,EAAAsG,cAAA,UACEqpB,QAASA,EACT1G,UAAWA,EACXuD,SAAUA,IAAamD,IAAa7G,GARxCrkB,IC1BWmrB,6JAQJprB,yBAEHxE,EAAAsG,cAAA,OACE2iB,UAAWoC,EAAU,SAAW,aACjB/qB,KAAAmD,MADiBosB,mBAEjBvvB,KAAAmD,MAAWosB,UAG1B7vB,EAAAsG,cAACwpB,EAADA,QAAA,CACE9rB,QAAS1D,KAAAmD,MAAWO,QACpBwrB,KAAMlvB,KAAAmD,MAAW+rB,KACjBK,OAAQvvB,KAAAmD,MAAWosB,OACnBE,QAASzvB,KAAAmD,MAAWssB,cApBjBH,CAAe5vB,iBACZ4vB,eAAe,CAC3BC,QAD2B,EAE3BE,SAF2B,EAG3B/rB,SAH2B,EAI3BwrB,KAAM,MCKV,IAAaQ,EAAS,SAAGxtB,0CACL,kBAEPytB,gBACXC,cACUC,UACVC,aACAC,aACOC,WACPZ,UACAa,OACA9rB,0PACGoc,aAEG2P,EAAO,kBAAAd,EAAyBA,EAAzBe,SAAbf,EAGMgB,EAAcF,GAAQA,uCAA5B,eA2BExwB,EAAAsG,cAACqqB,EAADA,MAAA,CACEH,KAAME,EACNR,MAAOA,EACPG,OAAQA,EACRD,SAAUA,EACV3rB,SA9BiB,SAAGjC,WAEtBouB,mBAKMC,KAAcV,EAChBA,EAAYS,EADgBE,GAAhCF,GAIM3H,EAAY4H,EAlCtB,yEACSxF,kBAAkBje,UAAKA,IAAvBie,KAAP,KAkCM0F,CAAcd,EADQe,GAA1Bf,EAGM/R,EAAQ2S,EAAW1tB,OAAAC,OAAA,GAAAktB,EAAHW,GAAtBX,SAGEtwB,EAAAsG,cAAA,MAAI2iB,UAAWA,GACbjpB,gBAACyvB,EAADzvB,oBAAMke,MAAOA,EAAOwR,GAAIA,EAAIjrB,SAAU8rB,GADxC1P,IADFpc,OCzCJ,SAAAysB,EAAA1uB,KAEE0tB,kBACUC,UACVjhB,cACAkhB,OACAC,cACAX,WACAa,OACA9rB,yNACGoc,aAEG2P,EAAO,kBAAAd,EAAyBA,EAAzBe,SAAbf,EAGMgB,EAAcF,GAAQA,uCAA5B,eA8BExwB,EAAAsG,cAACqqB,EAADA,MAAA,CACEH,KAAME,EACNR,MAAOA,EACPG,OAAQA,EACRD,SAAUA,EACV3rB,SAjCqB,SAAGjC,aAE1BouB,mBAKMC,KAAcV,EAChBA,EAAYS,EADgBE,GAAhCF,UAKE5wB,EAAAsG,cAAA,MAAI2iB,UAAW,kBACbjpB,gBAACyvB,EAADzvB,oBACE0vB,GAAIA,EACJzG,UAAWkI,EAAU,kBAAAvf,EAAmB,GAAAA,EACtC,gBAAkBif,qBAENA,EAAQ,YAAYtlB,EAClC9G,SAAUzE,oCAPd6gB,IADFpc,MA2BJysB,iCCrEA,ICSaE,6JACJ5sB,yBAEHxE,EAAAsG,cAAA,OAAK2iB,UAAW,mBACdjpB,EAAAsG,cAAA,MACE2iB,UAAS,4DACP3oB,KAAAmD,MAAAylB,OAAA,SAA+B,KAGhC5oB,KAAAmD,MANL4tB,WAQErxB,EAAAsG,cAAA,MACE2iB,UAAS,wBAAyB3oB,KAAAmD,MAAAylB,OAAA,GAAyB,WAE1D5oB,KAAAmD,MAZP6tB,cAFSF,CAAoBpxB,aCWjCqB,IAAMkwB,EAAU,SAAyC/uB,WAEvDgvB,cACA3wB,iBACA4wB,wBAEAzxB,EAAAsG,cAAA,OAAK2iB,UAAWoC,EAAU,yBAAApC,IAA1BpoB,EAEG2wB,EACCxxB,EAAAsG,cAAC0jB,EAADA,KAAA,CACEf,UAAU,uBACVnd,KAAK,OACL6jB,QAAS8B,EACT1c,KAAK,OAPX,OAwBI2c,EAAU,SAAyClvB,WAEvD3B,UACAoU,UACA0c,gBACAC,aACAC,WACAC,eACA1H,aACAF,8BAEAlqB,EAAAsG,cAAA,OAAK2iB,UAAW,0BACb4I,EACC7xB,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,EAAAsG,cAAC0rB,EAADA,UAAA,CACEC,UAAU,WACVC,gBAAiBC,EAAK,UAAe,SAErCnyB,EAAAsG,cAAC8rB,EAADA,YAAA,CACEC,eAAe,WACf7F,SAAUoF,EACVE,SAAUA,EACV7c,YAAaA,EACbpU,MAAOA,IAER+wB,EACC5xB,EAAAsG,cAAA,QAAM2iB,UAAU,OACdjpB,EAAAsG,cAAAspB,EAAA,CAAQC,QAAQ,EAAM7rB,QAAS4tB,EAAQpC,KAAM,QAG/CxvB,EAAAsG,cAACgsB,aAADC,cAAA,CACE/F,SAAUoF,IAAWO,EACrBxC,QAASvF,IAGbpqB,EAAAsG,cAACgsB,aAADE,aAAA,CAAyBhG,SAAUoF,EAAQjC,QAASzF,KAErDyH,GAAY3xB,gBAACyyB,EAADzyB,eAzBN2xB,IA4BT3xB,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,EAAAsG,cAAC0rB,EAADA,UAAA,CAAWE,gBAAiBC,EAAK,UAAe,SAC9CnyB,EAAAsG,cAACosB,EAADA,WAAA,KACE1yB,EAAAsG,cAAC8rB,EAADA,YAAA,CACE5F,SAAUoF,EACVE,SAAUA,EACV7c,YAAaA,EACbF,KAAK,OACLlU,MAAOA,IAETb,EAAAsG,cAACosB,aAADC,OAAA,KACGf,EACC5xB,EAAAsG,cAAA,QAAM2iB,UAAU,OACdjpB,EAAAsG,cAAAspB,EAAA,CAAQC,QAAQ,EAAM7rB,QAAS4tB,EAAQpC,KAAM,QAG/CxvB,EAAAsG,cAACgsB,aAADC,cAAA,CACE/F,SAAUoF,IAAWO,EACrBxC,QAASvF,KAIfpqB,EAAAsG,cAACosB,aAADC,OAAA,KACE3yB,EAAAsG,cAACgsB,aAADE,aAAA,CAAyBhG,SAAUoF,EAAQjC,QAASzF,MAGvDyH,GAAY3xB,gBAACyyB,EAADzyB,eAvDrB2xB,OAiGWiB,EAAc,SAAkDpwB,WAE3E3B,cACA2wB,UACAqB,iBACAC,oBACAhB,eACAiB,oOACGC,iBAEqChzB,cAAjCizB,OAAcC,SACSlzB,eAAvBmzB,OAASC,SACYpzB,eAArB4xB,OAAQyB,SAC4BrzB,EAAAszB,SAAe,CACxD3B,SADwD,GAExDQ,OAAO,IAFFoB,EAAAC,EAAA,GAAErB,UAAOR,aAAY8B,OAKtBC,EAAQ,SAAAC,2BACRZ,yBACmBA,EAAUY,IAAA3yB,KAAA,SAAzBZ,GAEJqzB,GADa,IAAXrzB,EACU,CACVuxB,SADU,GAEVQ,OAAO,GAGG,CACVR,SADUvxB,EAEV+xB,OAAO,MAIXsB,EAAY,CACV9B,SADU,GAEVQ,OAAO,qEAjBC,MAAAzxB,8BAsBRkzB,EAAa,mCACbzB,SACFkB,sBACsBvB,EAAQmB,IAAAjyB,KAAA,SAAxB6yB,GACNA,GACET,MAEFC,yEAPe,MAAA3yB,8BAWbozB,EAAY,SAAIpzB,GACpBwyB,EAAgBxyB,SAAhBwyB,OACAQ,EAAShzB,SAATgzB,QAGIjC,EAAM,WACV2B,MACAM,MAGIxJ,EAAQ,WACZkJ,MACAF,aA6BAlzB,EAAAsG,cAACgsB,EAADA,WAAA,CACErJ,UAAWA,EACXpoB,MAAOoyB,EACPc,UANW,kBAASZ,GAOpBa,YA9Ba,SAAIlzB,UACnBd,EAAAsG,cAAAirB,EAAA,CACEtI,UAAWA,EACXpoB,MAAOC,MAAwB,WAC/B0wB,aAAcA,EACdC,OAAQA,KA0BRwC,WAtBY,SAAInzB,UAClBd,EAAAsG,cAAAorB,EAAAvuB,OAAAC,OAAA,GACM4vB,GACJb,MAAOA,EACPP,OAAQA,EACR/wB,MAAOC,EACP6wB,SAAUA,EACVE,WAAYiB,EACZhB,SAAUgC,EACV1J,UAAWwJ,EACX1J,SAAUA,SC5LHgK,cAAb1wB,qDAiDS2wB,YAAA,iBACuC7zB,EAAKmD,MAAzC2wB,sBAAmBnB,wBAC3BmB,EAGA,WAAIA,aAEAp0B,EAAAsG,cAAC+tB,SAADC,cAAA,CACEC,aAAcH,EAAkBG,aAChCtB,aAAcA,EACduB,sBAAuBl0B,QAAWk0B,wBAKpCx0B,EAAAsG,cAAC8rB,EAADA,YAAA,CACErd,KAAMqf,EAAkBK,WACxB5zB,MAAOoyB,EACPhe,YAAamf,EAAkBnf,YAC/B6c,SAAUxxB,QAAWo0B,qBACrBC,WAAYr0B,QAAWs0B,kBAjB3B,gHAnDGpwB,oCAEHxE,EAAAsG,cAACuuB,EAADA,QAAA,KACE70B,EAAAsG,cAAC+tB,EAADA,OAAA,KACEr0B,EAAAsG,cAAC+tB,SAADS,aAAA,CACEC,YAAaz0B,KAAAmD,MAAWsxB,YACxBX,kBAAmB9zB,KAAAmD,MAAA2wB,kBAA6BjO,MAChD6O,qBAAsB10B,KAAAmD,MAAWwxB,qBAElC30B,KAPL6zB,eASEn0B,EAAAsG,cAAC4uB,EAADA,KAAA,KACEl1B,EAAAsG,cAAC4uB,OAADJ,aAAA,CACEK,UAAW70B,KAAAmD,MAAW0xB,UACtBC,gBAAiB90B,KAAAmD,MAAW2xB,gBAC5BC,mBAAoB/0B,KAAAmD,MAAW6xB,0BAEjCt1B,EAAAsG,cAAC4uB,OAADK,kBAAA,CACEC,WAAW,EACXC,YAAan1B,KAAAmD,MAAWiyB,gBACxB/F,QAASrvB,KAAAmD,MAAWkyB,gCAGxB31B,gBAAC60B,UAAD70B,kBAAuBM,KAAAmD,MArBzBgB,UAsBEzE,EAAAsG,cAACuuB,UAADe,QAAA,KACE51B,0BAAKM,KAAAmD,MADPoyB,kBAEGv1B,KAAAmD,MAAAqyB,eAA4Bx1B,KAAAmD,MAAAqyB,cAAAtgB,OAA5B,GACCxV,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,gBAACq0B,SAADr0B,iBADF,mBAEEA,EAAAsG,cAAC+tB,SAAD0B,KAAA,KACGz1B,KAAAmD,MAAAqyB,cAAA3sB,IAAA,SAA6B6sB,EAAArT,GAAA,OAC5B3iB,EAAAsG,cAAC+tB,SAAD4B,KAAA,CACEtc,IAAKgJ,EACLuT,SAAU51B,QAAW61B,eACrBC,WAAYJ,GAEXA,EALH7P,MAAA,IAKgB6P,EALhBn1B,UASJb,EAAAsG,cAAA,KAAGqpB,QAASrvB,KAAAmD,MAAW4yB,gBAvCjC,2BAFSnC,CAAwBl0B,aCnCxBs2B,cA2BX9yB,WAAmBC,0BACjBA,QATKpD,MAAQ,CACbk2B,MADa,EAEbC,cAFa,EAGbC,cAAe,QAqDVC,UAAA,SAA6Bl0B,WAAU0b,UAAOyY,wBACnD32B,EAAAsG,cAACswB,EAADA,aAAA,CACE3zB,MAAO3C,EAAKu2B,kBACZC,YAAa,EACbnd,IAAKgJ,EACLoU,SAAUpU,EACVgU,OAAQA,GAER32B,EAAAsG,cAAA,OAAK2iB,UAAW,eAAgB/K,MAAOA,GACrCle,EAAAsG,cAAA,QAAM2iB,UAAU,uBAAuBtG,EADzC,GAEE3iB,EAAAsG,cAAA,QAAM2iB,UAAU,wBAAwB3oB,aAT5CqiB,YAcKqU,aAAA,aACLryB,SAAc,CACZ6xB,cAAel2B,QAAWk2B,qBA/D5BK,kBAAyB,IAAII,EAAJA,kBAAsB,CAC7CC,YAD6C,EAE7CC,UAAW,qGAvBDC,kCAAP50B,EAAAnC,uBAIE8C,OAAAC,OAAA,GAAA/C,GAELk2B,MAAO3yB,EAFF4R,OAGLihB,cAAep2B,eAAqBA,EAArBA,MAAmCA,EAHpDo2B,6BAuBKjyB,oCAEHxE,EAAAsG,cAACtG,EAAD+xB,SAAA,KACE/xB,EAAAsG,cAAC6mB,EAADA,IAAA,CAAKlE,UAAW,aACdjpB,EAAAsG,cAAC8mB,EAADA,IAAA,CAAKiK,GAAI,IACPr3B,EAAAsG,cAACgxB,EAADA,UAAA,CACEC,gBAAiBj3B,KAAAmD,MAAW2a,OAC5BoZ,eAAgBl3B,KAAAmD,MAAW0a,OAF7B,SAIG3b,WAAU4b,wBACTpe,EAAAsG,cAACyvB,EAADA,KAAA,CACE0B,yBAA0Bn3B,EAAKu2B,kBAC/BzY,OAAQ9d,gBAAqB8d,EAC7BsZ,SAAUp3B,aAAgBkV,OAC1BmiB,UAAWr3B,oBAAuBq3B,UAClCC,YAAat3B,EAAKo2B,UAClBmB,aAAcv3B,QAAWi2B,MACzBuB,cACEx3B,qBAA0BA,cAA1BA,GAAkD,EAEpD6d,MAAO7d,eAAoB6d,QAMrCne,EAAAsG,cAAC6mB,EAADA,IAAA,KACEntB,EAAAsG,cAAC8mB,EAADA,IAAA,CAAKiK,GAAI,IACPr3B,EAAAsG,cAACyxB,EAADA,OAAA,CACElvB,GAAI,gBACJmvB,UAAW,cACXlG,SAAUxxB,KAAK02B,aACfn2B,MAAOP,KAAAD,MAAWm2B,qBAnEnBF,CAAkBt2B,aAIfs2B,eAAe,CAC3BlY,OAAQ,SCPC6Z,6JACJzzB,oCAEHxE,EAAAsG,cAAC4xB,EAADA,sBAAA,CAAuBjP,UAAU,yBAC9B3oB,KAAAmD,MAAA+nB,cAAAriB,IAAA,SAA6BgvB,UAC5Bn4B,EAAAsG,cAAC8xB,EAADA,uBAAA,CACEze,IAAKwe,EAAaxe,IAClB5E,KAAMojB,EAAapjB,KACnBsjB,YAAY,EACZC,UAAWh4B,2CAIXi4B,WAAYj4B,QAAWk4B,wBAEvBx4B,EAAAsG,cAAA8kB,EAAA,CACEiC,wBAAyB,CACvBC,OAAQ6K,EAAa3yB,kBAjBxByyB,CAAsBj4B,aCrBnC,IAWay4B,EAAgB,SAEzBj2B,WAEFk2B,cACAzP,2LACGpI,qBAGD7gB,iCAAWipB,UAAWoC,EAAU,GAAApC,IAAhCjpB,GACEA,EAAAsG,cAACqyB,EAADA,MAAA,CAAOnJ,KAAK,MAAMoJ,aAAcC,aAAWC,IAD7C94B,GAIEA,gBAAC+4B,EAAD/4B,UALJ04B,KCNWM,6JAGJx0B,yBAEHxE,EAAAsG,cAAA,OAAK2iB,UAAU,iBACbjpB,2BACEA,EAAAsG,cAAA,mBAAe,uBACZhG,KAAAmD,MADH5C,MAAA,MACwBP,KAAAmD,MADxBw1B,YAAA,SAEG34B,KAAAmD,MAFHy1B,WADFl5B,MAKGM,KAAAmD,MAAA01B,QACCn5B,EAAAsG,cAAA,sBAAkB,oBAAoB2iB,UAAU,cAC9CjpB,EAAAsG,cAAA,KAAGgS,OAAO,SAASwQ,KAAMxoB,KAAAmD,MAAW01B,QACjC74B,KAAAmD,MADH21B,eAAA,IAC8Bp5B,EAAAsG,cAAC0jB,EAADA,KAAA,CAAMle,KAAM,qBAKhD9L,EAAAsG,cAAC+yB,EAADA,YAAA,CACE1rB,IAAKrN,KAAAmD,MAAWw1B,YAChBK,IAAKh5B,KAAAmD,MAAWy1B,WAChBhb,MAAO,CACLE,OAAQ,SAvBP4a,CAAyBh5B,iBCPhCu5B,EAAN,SAAAC,kJACSh1B,yBACExE,gBAACy5B,EAADz5B,kBAAeM,KAAAmD,MAAtBgB,aAFJ,CAA6BzE,aCgChB05B,cAIXl2B,WAAmBC,eACjBA,QAEApD,MAAa,CACXs5B,kBAAkB,GAGhBr5B,KAAAmD,MAAJm2B,iBACEC,SAAgBv5B,KAAAu5B,SAAAl2B,KAAhBrD,WACAw5B,SAAgBx5B,KAAAw5B,SAAAn2B,KAAhBrD,WACAq5B,iBAAwBr5B,KAAAq5B,iBAAAh2B,KAAxBrD,iHAIGu5B,yBACLl1B,SAAc,CACZg1B,kBAAkB,iBAIfG,yBACLn1B,SAAc,CACZg1B,kBAAkB,IAGhBr5B,KAAAmD,MAAJm2B,gBACEn2B,MAAAm2B,UAAAG,wBAIGJ,iCACLh1B,SAAc,CACZg1B,kBAAkB,iBAIfn1B,yBAEHxE,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACGzxB,KAAAmD,MAAAm2B,WACC55B,EAAAsG,cAAAqjB,EAAA,CACEa,YAAad,0BAAwBsQ,OACrCnP,qBAAsBvqB,KAAAmD,MAAAm2B,UAAqBK,gBAC3C3P,sBAAuBhqB,KAAAmD,MAAAm2B,UAAqBM,gBAC5CxP,wBACEpqB,KAAAmD,MAAAm2B,UAAqBO,uBAEvBxV,UAAWrkB,KAAAmD,MAAAm2B,UAAqBQ,qBAChClrB,KAAMua,uBAAqBuQ,OAC3B/O,WAAY3qB,KAAAD,MAAWs5B,iBACvBzP,SAAU5pB,KAAKu5B,SACfzP,UAAW9pB,KAAKw5B,WAGpB95B,EAAAsG,cAAC+zB,EAADA,KAAA,CAAMC,aAAa,GAChBh6B,KAAAmD,MAAAm2B,WACC55B,EAAAsG,cAAA,OAAK2iB,UAAU,cACbjpB,EAAAsG,cAACi0B,EAADA,cAAA,CACE1xB,GAAE,cAAgBvI,KAAAmD,MAAWqI,aAC7B0uB,WAAW,EACXrU,MAAO7lB,KAAAmD,MAAAm2B,UAAqBa,eAE5Bz6B,EAAAsG,cAAA,MAAIo0B,KAAM,eAAgB/gB,IAAK,GAC7B3Z,EAAAsG,cAACmpB,EAADA,KAAA,CAAMC,GAAIpvB,KAAAmD,MAAWqlB,KAAM4R,KAAM,WAAYC,SAAU,GACpDr6B,KAAAmD,MAAAm2B,UAPPgB,gBAUE56B,EAAAsG,cAAA,MAAIo0B,KAAM,eAAgB/gB,IAAK,GAC7B3Z,EAAAsG,cAACmpB,EAADA,KAAA,CACEC,GAAIpvB,KAAAmD,MAAAm2B,UAAqBiB,SACzBH,KAAM,WACNC,SAAU,GAETr6B,KAAAmD,MAAAm2B,UAhBPkB,gBAmBE96B,EAAAsG,cAAA,MACE2iB,UACG3oB,KAAAmD,MAAAm2B,UAADmB,gBAAqD,GAArD,WAEFL,KAAM,eACN/gB,IAAK,GAEL3Z,EAAAsG,cAAA,KACEwiB,KAAM,qBACN6G,QAASrvB,KAAKq5B,iBACde,KAAM,WACNC,SAAU,GAETr6B,KAAAmD,MAAAm2B,UAnCbM,oBAyCEl6B,EAAAsG,cAACmpB,EAADA,KAAA,CAAMC,GAAIpvB,KAAAmD,MAAWqlB,KAAMG,UAAW,mBACpCjpB,gBAACq6B,OAADr6B,UACEA,EAAAsG,cAAA,OAAK2iB,UAAW,4BACdjpB,EAAAsG,cAAA,OAAK2iB,UAAU,yBACbjpB,EAAAsG,cAAA,OAAKuiB,IAAKvoB,KAAAmD,MAAWyL,KAAM8rB,IAAK16B,KAAAmD,MAAWqI,KAAMqS,MAAO,MAE1Dne,EAAAsG,cAACqyB,EAADA,MAAA,CACEnJ,KAAK,KACLvG,UAAU,0CACE,yBAEX3oB,KAAAmD,MATLqI,MAWE9L,EAAAsG,cAACyyB,EAADA,KAAA,CAAM9P,UAAU,gCACb3oB,KAAAmD,MAxEfwN,qBAzCSyoB,CAAuB15B,iBCwCvBi7B,6JAOJz2B,yBAEHxE,uBACEA,EAAAsG,cAAA,QACE2iB,UAAU,8BACVyR,KAAK,OACLQ,SAAU56B,KAAAmD,MAAW03B,cAErBn7B,EAAAsG,cAAA,OAAK2iB,UAAU,oBACbjpB,EAAAsG,cAAA,OAAK2iB,UAAU,WACZ3oB,KAAAmD,MAAA23B,kBAAAjyB,IAAA,SAAiCzI,EAAAgoB,GAAA,OAChC1oB,EAAAsG,cAAC+0B,EAADA,MAAA,CAAO1hB,IAAK+O,EAAK3T,KAAMrU,EAAEqU,MACtBrU,EADH8E,WAIFxF,EAAAsG,cAAA,OAAK2iB,UAAU,iBAAiB3oB,KAAAmD,MANlCkhB,WAOE3kB,EAAAsG,cAAA,OAAK2iB,UAAU,oDACbjpB,uBAAYM,KAAAmD,MADdgB,UAEGnE,KAAAmD,MAAAswB,UACC/zB,EAAAsG,cAAA8kB,EAAA,KACEprB,EAAAsG,cAAC6mB,EAADA,IAAA,KACEntB,EAAAsG,cAACqsB,EAADA,OAAA,CACE2I,QAAQ,UACRrS,UAAU,sCACVuD,SAAUlsB,KAAAmD,MAAA83B,YAAyBj7B,KAAAmD,MAAW+3B,QAC9C7L,QAASrvB,KAAAmD,MAAWsvB,YAEnBzyB,KAAAmD,MAAA83B,UACCv7B,EAAAsG,cAAAspB,EAAA,CAAQJ,KAAM,KAAMK,QAAQ,IAPhC,KASGvvB,KAAAmD,MAXPg4B,oBAcEz7B,EAAAsG,cAAC6mB,EAADA,IAAA,KACEntB,EAAAsG,cAACqsB,EAADA,OAAA,CACE2I,QAAQ,UACRrS,UAAU,sCACVuD,SAAUlsB,KAAAmD,MAAW83B,UACrB5L,QAASrvB,KAAAmD,MAAWi4B,iBAEnBp7B,KAAAmD,MAPLw2B,iBASEj6B,EAAAsG,cAACqsB,EAADA,OAAA,CACE2I,QAAQ,UACRrS,UAAU,sCACVuD,SAAUlsB,KAAAmD,MAAA83B,YAAyBj7B,KAAAmD,MAAW+3B,QAC9C7L,QAASrvB,KAAAmD,MAAW03B,cAEnB76B,KAAAmD,MA9BRk4B,iBAmCC37B,EAAAsG,cAACqsB,EAADA,OAAA,CAAQ2I,QAAQ,UAAU3L,QAASrvB,KAAAmD,MAAWm4B,gBAC3Ct7B,KAAAmD,MArDjBq3B,uBARSG,CAA8Bj7B,aAG3Bi7B,eAAe,CAC3BG,kBAAmB,ICLvB,IAAaS,6JAGJr3B,yBAEHxE,EAAAsG,cAACymB,EAADA,KAAA,CAAMC,OAAO,GACXhtB,EAAAsG,cAACymB,OAADI,IAAA,CAAUlE,UAAW,kCAClB3oB,KAAAmD,MAAAq4B,eACC97B,EAAAsG,cAACymB,OAADK,IAAA,CAAUI,GAAI,GACZxtB,EAAAsG,cAAA8kB,EAAA,CAAWnC,UAAU,uBACnBjpB,EAAAsG,cAAA,OACE2iB,UAAU,4CACVJ,IAAKvoB,KAAAmD,MAAWq4B,eAChBd,IAAK16B,KAAAmD,MAAWs4B,eAChB5d,MAAO,OARjB,KAaEne,EAAAsG,cAACymB,OAADK,IAAA,CAAUI,GAAI,IACZxtB,EAAAsG,cAAAssB,EAAA,CACE3J,UAAU,4CACVpoB,MAAOP,KAAAmD,MAAWs4B,eAClBvK,aAAclxB,KAAAmD,MAAA+tB,eAA4BlxB,KAAAmD,MAAW83B,UACrDtmB,YAAa3U,KAAAmD,MAAWu4B,oBACxBlJ,YAAY,EACZhB,SAAUxxB,KAAAmD,MAAWw4B,iBAI3Bj8B,EAAAsG,cAACymB,OAADI,IAAA,CAAUlE,UAAW,kCACnBjpB,EAAAsG,cAACymB,OAADK,IAAA,CAAUI,GAAI,EAAGvE,UAAU,4CACxB3oB,KAAAmD,MAFLy4B,sBAIEl8B,EAAAsG,cAACymB,OAADK,IAAA,CAAUI,GAAI,IACZxtB,EAAAsG,cAAAssB,EAAA,CACE/xB,MAAOP,KAAAmD,MAAA04B,uBAAoC,GAC3C3K,aAAclxB,KAAAmD,MAAA+tB,eAA4BlxB,KAAAmD,MAAW83B,UACrD1I,gBAAiBvyB,KAAAmD,MAAW24B,2BAC5BtJ,YAAY,EACZhB,SAAUxxB,KAAAmD,MAAW44B,wBAI3Br8B,gBAAC+sB,OAAD/sB,SACEA,EAAAsG,cAACymB,OAADK,IAAA,CAAUI,GAAI,EAAGvE,UAAU,4CACxB3oB,KAAAmD,MAFLzD,gBAIEA,EAAAsG,cAACymB,OAADK,IAAA,CACEI,GAAI,GACJvE,UAAU,4CAET3oB,KAAAmD,MAhDT64B,uBAJST,CAAgC77B,aC1EhCu8B,6JACJ/3B,yBAEHxE,EAAAsG,cAACk2B,EAADA,SAAA,CAAUxP,OAAO,EAAMsN,aAAa,GAClCt6B,gBAACw8B,WAADx8B,SAAeM,KAAAmD,MAFnBgB,cAFS83B,CAAwBv8B,aCAxBy8B,6JACJj4B,yBAEHxE,EAAAsG,cAACk2B,WAADpP,IAAA,CAAcI,GAAI,EAAGkP,GAAI,GACtBp8B,KAAAmD,MAFLgB,aAFSg4B,CAA4Bz8B,aCO5B28B,6JAGJn4B,yBAEHxE,gCACEA,EAAAsG,cAAA4tB,EAAA/wB,OAAAC,OAAA,GAAqB9C,KAArBmD,OACEzD,EAAAsG,cAAA,OAAK2iB,UAAU,cACbjpB,EAAAsG,cAAAipB,EAAA,CAAYzG,KAAMxoB,KAAAmD,MAAWm5B,uBAAwB5T,GAAI,WACtD1oB,KAAAmD,MAJTzD,4BAQEA,uBAAYM,KAAAmD,MAThBgB,cAJSk4B,CAA4B38B,aCsB5B68B,6JAOJr4B,yBAEHxE,uBACEA,EAAAsG,cAAA,QACE2iB,UAAU,8BACVyR,KAAK,OACLQ,SAAU56B,KAAAmD,MAAW03B,cAErBn7B,EAAAsG,cAAA,OAAK2iB,UAAU,oBACbjpB,EAAAsG,cAAA,OAAK2iB,UAAU,WACZ3oB,KAAAmD,MAAAq5B,eACC98B,EAAAsG,cAAA,OAAK2iB,UAAU,iBAAiB3oB,KAAAmD,MAFpCq5B,eAIE98B,EAAAsG,cAAA,OAAK2iB,UAAU,gBACZ3oB,KAAAmD,MAAA23B,kBAAAjyB,IAAA,SAAkCzI,EAAAgoB,GAAA,OACjC1oB,EAAAsG,cAAC+0B,EAADA,MAAA,CAAO1hB,IAAK+O,EAAK3T,KAAMrU,EAAEqU,MACtBrU,EADH8E,WAIFxF,uBAAYM,KAAAmD,MAlBxBgB,kBARSo4B,CAAmC78B,aAGhC68B,eAAe,CAC3BzB,kBAAmB,QC1BX2B,ECCCC,6JAGJx4B,yBAEHxE,EAAAsG,cAAC+zB,EAADA,KAAA,CAAMpR,UAAU,sBACdjpB,gBAACi9B,EAADj9B,cACEA,EAAAsG,cAAA,OAAK2iB,UAAW,+BACdjpB,EAAAsG,cAAA,WACEtG,EAAAsG,cAAA,OACE2iB,UAAU,2BACVJ,IAAKvoB,KAAAmD,MAAWyL,KAChB8rB,IAAK16B,KAAAmD,MAAWqI,QAGpB9L,EAAAsG,cAAA,OACE2iB,UAAU,wCACE,4BAEX3oB,KAAAmD,MAZLqI,MAcE9L,EAAAsG,cAACyyB,EAADA,KAAA,CAAM9P,UAAU,mCACb3oB,KAAAmD,MAlBXwN,mBAJS+rB,CAA+Bh9B,aCT/Bk9B,6JACJ14B,yBACExE,2BAAP,yCAFSk9B,CAAyBl9B,aCAzBm9B,6JACJ34B,yBACExE,2BAAP,2CAFSm9B,CAA2Bn9B,aCgB3Bo9B,6JAGJ54B,yBAEHxE,EAAAsG,cAACk2B,EAADA,SAAA,CAAUxP,OAAO,GACfhtB,gBAACw8B,WAADx8B,SACEA,EAAAsG,cAACk2B,WAADpP,IAAA,CAAcI,GAAI,GAAIkP,GAAI,GACxB18B,EAAAsG,cAAA02B,EAAA,CACE/rB,YAAa3Q,KAAAmD,MAAWwN,YACxB/B,KAAM5O,KAAAmD,MAAWyL,KACjBpD,KAAMxL,KAAAmD,MAAWqI,QAGrB9L,EAAAsG,cAACk2B,WAADpP,IAAA,CAAcI,GAAI,GAAIkP,GAAI,GACxB18B,gBAACq6B,EAADr6B,UACEA,gBAACq9B,EAADr9B,iBACEA,gBAACs9B,EAADt9B,eAAYM,KAAAmD,MAFhBzD,OAIEA,gBAACi9B,EAADj9B,cACEA,kBADFA,MAEEA,kBAjBZ,cAJSo9B,CAA2Bp9B,aCM3Bu9B,cAGX/5B,WAAmBC,eACjBA,QACA+5B,aAAoBl9B,KAAAk9B,aAAA75B,KAApBrD,WACAm9B,cAAqBn9B,KAAAm9B,cAAA95B,KAArBrD,gHAGKo9B,mCAEH19B,EAAAsG,cAACq3B,EAADA,QAAA,CAAS90B,GAAG,aACTvI,KAAAmD,MAAAm6B,cACGt9B,KAAAmD,MADHm6B,cAEGt9B,KAAAmD,MAJRo6B,yBASKC,oCAEH99B,EAAAsG,cAACq3B,EAADA,QAAA,CAAS90B,GAAG,cACTvI,KAAAmD,MAAAs6B,eACGz9B,KAAAmD,MADHs6B,eAEGz9B,KAAAmD,MAJRu6B,0BASKR,6BACL/5B,MAAAs2B,SAAoBz5B,KAAAmD,MAApBmX,6BAGK6iB,8BACLh6B,MAAAw6B,UAAqB39B,KAAAmD,MAArBmX,6BAGKpW,yBAEHxE,EAAAsG,cAAC43B,EAADA,aAAA,CACE/xB,QACEnM,EAAAsG,cAAA,OAAK2iB,UAAU,cACbjpB,EAAAsG,cAAC63B,EAADA,eAAA,CAAgBC,QAAS99B,KAAAw9B,oBAA0BO,UAAU,OAC3Dr+B,EAAAsG,cAACqsB,EAADA,OAAA,CAAQ2I,QAAQ,UAAU3L,QAASrvB,KAAKm9B,eACrCn9B,KAAAmD,MAHPu6B,cAMEh+B,EAAAsG,cAAC63B,EAADA,eAAA,CAAgBC,QAAS99B,KAAAo9B,mBAAyBW,UAAU,OAC1Dr+B,EAAAsG,cAACqsB,EAADA,OAAA,CACE2I,QAAQ,UACR9O,SAAgC,IAAtBlsB,KAAAmD,MAAA66B,OACV3O,QAASrvB,KAAKk9B,cAEbl9B,KAAAmD,MAZPo6B,cAiBFU,eAAgB,CACdv+B,EAAAsG,cAACk4B,EAADA,iBAAA,CAAkB7kB,IAAK,GACpBrZ,KAAAmD,MAFWg7B,oBAKhBxtB,YACE3Q,KAAAmD,MAAAi7B,wBACIp+B,KAAAmD,MADJi7B,wBAEI,GAENC,QAASr+B,KAAAmD,MAAWm7B,iBACpBC,eAAe,EACfC,YACEx+B,KAAAmD,MAAAs7B,iBACE/+B,EAAAsG,cAAA,OAAK2iB,UAAU,uBACbjpB,EAAAsG,cAAA,OACEuiB,IAAKvoB,KAAAmD,MAAWs7B,iBAChB/D,IAAK16B,KAAAmD,MAAWm7B,iBAChBzgB,MAAO,MAGT,KAEN6gB,SAAS,OAjFJzB,CAA6Bv9B,aCF7Bi/B,6JAGJz6B,yBAEHxE,gCACEA,EAAAsG,cAAA4tB,EAAA/wB,OAAAC,OAAA,GAAqB9C,KAArBmD,OACEzD,EAAAsG,cAAA,OAAK2iB,UAAU,cACbjpB,EAAAsG,cAAC63B,EAADA,eAAA,CACEC,QAAS99B,KAAA4+B,4BACTb,UAAU,OAEVr+B,EAAAsG,cAAAipB,EAAA,CACEzG,KAAMxoB,KAAAmD,MAAW07B,uBACjBnW,GAAI,WAEH1oB,KAAAmD,MAXXzD,+BAgBEA,EAAAsG,cAAA8kB,EAAA,KACG,KAAA9qB,KAAAmD,MAAAkhB,WACC3kB,EAAAsG,cAACqyB,EAADA,MAAA,CAAOnJ,KAAK,MAAMlvB,KAAAmD,MAFtBkhB,WAIG,KAAArkB,KAAAmD,MAAAi1B,iBACC14B,EAAAsG,cAACyyB,EAADA,KAAA,CACE1L,wBAAyB,CAAEC,OAAQhtB,KAAAmD,MAAWi1B,mBAGjDp4B,KAAAmD,MAAAgB,SACCzE,gBAACo/B,EAADp/B,cAAWM,KAAAmD,MADZgB,UAGCzE,EAAAsG,cAAC+4B,EAADA,WAAA,KACEr/B,gBAACq/B,aAADr/B,KADF,MAEEA,gBAACq/B,aAADr/B,WACGM,KAAAmD,MAHL67B,qBAKEt/B,gBAACq/B,aAADr/B,UAAkBM,KAAAmD,MALpB87B,oBAMEv/B,EAAAsG,cAAC+4B,aAADG,OAAA,KACEx/B,EAAAsG,cAAC63B,EAADA,eAAA,CACEC,QAAS99B,KAAA4+B,4BACTb,UAAU,OAEVr+B,EAAAsG,cAAAipB,EAAA,CACEzG,KAAMxoB,KAAAmD,MAAW07B,uBACjBnW,GAAI,WAEH1oB,KAAAmD,MA5CjBg8B,8CAuDMP,4CAEJl/B,EAAAsG,cAACq3B,EAADA,QAAA,CAAS90B,GAAG,aACTvI,KAAAmD,MAAAi8B,8BACGp/B,KAAAmD,MADHi8B,8BAEGp/B,KAAAmD,MAJRg8B,+BA5DSR,CAA6Bj/B,aC+F7B2/B,cAIXn8B,WAAmBC,eACjBA,QAEApD,MAAa,CACXs5B,kBAAkB,QAGpBE,SAAgBv5B,KAAAu5B,SAAAl2B,KAAhBrD,WACAw5B,SAAgBx5B,KAAAw5B,SAAAn2B,KAAhBrD,WACAq5B,iBAAwBr5B,KAAAq5B,iBAAAh2B,KAAxBrD,gHAGKu5B,yBACLl1B,SAAc,CACZg1B,kBAAkB,iBAIfG,yBACLn1B,SAAc,CACZg1B,kBAAkB,SAIpBl2B,MAAAs2B,wBAGK2D,mCAEH19B,EAAAsG,cAACq3B,EAADA,QAAA,CAAS90B,GAAG,aACTvI,KAAAmD,MAAAm6B,cACGt9B,KAAAmD,MADHm6B,cAEGt9B,KAAAmD,MAJRo6B,yBASK+B,mCAEH5/B,EAAAsG,cAACq3B,EAADA,QAAA,CAAS90B,GAAG,aACTvI,KAAAmD,MAAAo8B,cACGv/B,KAAAmD,MADHo8B,cAEGv/B,KAAAmD,MAJRq8B,yBASKnG,iCACLh1B,SAAc,CACZg1B,kBAAkB,iBAIfn1B,yBAEHxE,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,EAAAsG,cAAAqjB,EAAA,CACEa,YAAad,0BAAwBsQ,OACrCnP,qBAAsBvqB,KAAAmD,MAAWs8B,eACjCzV,sBAAuBhqB,KAAAmD,MAAWo6B,WAClCnT,wBAAyBpqB,KAAAmD,MAAW02B,uBACpCxV,UAAWrkB,KAAAmD,MAAW22B,qBACtBlrB,KAAMua,uBAAqBuQ,OAC3B/O,WAAY3qB,KAAAD,MAAWs5B,iBACvBzP,SAAU5pB,KAAKu5B,SACfzP,UAAW9pB,KAAKw5B,WAElB95B,EAAAsG,cAAC+zB,EAADA,KAAA,CAAMC,aAAa,GACjBt6B,gBAACq9B,EAADr9B,iBACEA,EAAAsG,cAACg3B,EAADA,UAAA,KACEt9B,EAAAsG,cAAC6mB,EAADA,IAAA,KACEntB,EAAAsG,cAACqyB,EAADA,MAAA,CACEnJ,KAAK,KACLvG,UAAW,6CAEV3oB,KAAAmD,MAJHu8B,cAKEhgC,EAAAsG,cAAA,QAAM2iB,UAAW,iCACd3oB,KAAAmD,MAPPw8B,gBAUEjgC,EAAAsG,cAAA,OAAK2iB,UAAU,sDACbjpB,EAAAsG,cAAC63B,EAADA,eAAA,CACEC,QAAS99B,KAAAs/B,mBACTvB,UAAU,OAEVr+B,EAAAsG,cAAAipB,EAAA,CACEzG,KAAMxoB,KAAAmD,MAAWy8B,oBACjBlX,GAAI,WAEH1oB,KAAAmD,MATPq8B,aAYE9/B,EAAAsG,cAAC63B,EAADA,eAAA,CACEC,QAAS99B,KAAAo9B,mBACTW,UAAU,OAEVr+B,EAAAsG,cAACqsB,EAADA,OAAA,CACE2I,QAAQ,UACR9O,SAAuC,IAA7BlsB,KAAAmD,MAAA08B,cACVxQ,QAASrvB,KAAKq5B,kBAEbr5B,KAAAmD,MAlCfo6B,iBAyCE79B,gBAACi9B,EAADj9B,cACEA,EAAAsG,cAACqyB,EAADA,MAAA,CACEnJ,KAAK,KACLoJ,aAAcC,aAAWuH,GACzBnX,UAAU,oCAET3oB,KAAAmD,MANLzD,0BAQGM,KAAAmD,MARHzD,gBASEA,EAAAsG,cAACqyB,EAADA,MAAA,CACEnJ,KAAK,KACLoJ,aAAcC,aAAWuH,GACzBnX,UAAU,oCAET3oB,KAAAmD,MAdLzD,0BAgBGM,KAAAmD,MAhBHzD,gBAiBEA,EAAAsG,cAACqyB,EAADA,MAAA,CACEnJ,KAAK,KACLoJ,aAAcC,aAAWuH,GACzBnX,UAAU,oCAET3oB,KAAAmD,MAtBLzD,uBAwBGM,KAAAmD,MA9ET48B,0BA1DSV,CAAwB3/B,aC5CxBsgC,6JAGJ97B,yBAEHxE,EAAAsG,cAAC+zB,EAADA,KAAA,KACEr6B,gBAACq6B,OAADr6B,aACEA,gBAACq6B,OAADr6B,WAAaM,KAAAmD,MAFjBkhB,YAIE3kB,EAAAsG,cAAC+zB,OAADkG,KAAA,KACEvgC,gBAAC+4B,EAAD/4B,UAAOM,KAAAmD,MADT+8B,wBAEGlgC,KAAAmD,MAAAg9B,iBACCzgC,EAAAsG,cAAC+0B,EAADA,MAAA,CAAOtmB,KAAM,SACX/U,4BAAOM,KAAAmD,MAFVg9B,mBAFH,KAOEzgC,EAAAsG,cAAAglB,EAAA,CACEmB,gBAAiBnsB,KAAAmD,MAAWi9B,YAC5BnU,eAAgB,OAChBoU,gBAAiBrgC,KAAAmD,MAAWm9B,mBAC5BrT,iBAAkBjtB,KAAAmD,MAAWo9B,oBAC7BjV,0BAA2BtrB,KAAAmD,MAAWq9B,6BACtCrT,sBAAuBntB,KAAAmD,MAAWs9B,yBAClChV,wBAAyBzrB,KAAAmD,MAAWu9B,2BACpClV,yBAA0BxrB,KAAAmD,MAAWw9B,4BACrC9U,iBAAkB7rB,KAAAmD,MAAWy9B,oBAC7BC,iBAAkB7gC,KAAAmD,MAAW29B,2BA1B5Bd,CAA4BtgC,aC+B5BqhC,cAGX79B,WAAmBC,eACjBA,QACA69B,aAAoBhhC,KAAAghC,aAAA39B,KAApBrD,gHAGKihC,wCACAjhC,KAAAmD,MAAL0I,QAKEnM,uBACGM,KAAAmD,MAAA0I,QACG7L,KAAAmD,MAAA0I,QAAAhD,IAAA,SAAuBT,EAAAia,GAAA,OACrB,IAAAA,EACE3iB,EAAAsG,cAACymB,OAADK,IAAA,CACEzT,IAAK,EACL0T,wBAAyB,CACvBC,OAAQhtB,uBACNoI,EADMpI,KAENoI,EAFMpI,gBAOZN,EAAAsG,cAACymB,OAADI,IAAA,CAAUxT,IAAKgJ,GACb3iB,EAAAsG,cAACymB,OAADK,IAAA,CAAUzT,IAAK,EAAG6T,GAAI,IACtBxtB,EAAAsG,cAACymB,OAADK,IAAA,CACEzT,IAAK,EACL0T,wBAAyB,CACvBC,OAAQhtB,uBACNoI,EADMpI,KAENoI,EAFMpI,mBApB1B,MAHSN,gBAAC+sB,OAAD/sB,IAAP,mBAqCGshC,+BACEhhC,KAAAmD,MAAA+9B,SAAoBlhC,KAAAmD,MAA3Bg+B,2BAGKj9B,yBAEHxE,EAAAsG,cAACymB,EAADA,KAAA,CAAM9D,UAAU,sCACdjpB,EAAAsG,cAACymB,OAADI,IAAA,CAAUlE,UAAU,kCACjB3oB,KAAAmD,MAFLkhB,WAIE3kB,gBAAC+sB,OAAD/sB,SACEA,EAAAsG,cAACymB,OAADK,IAAA,CAAUI,GAAI,EAAGvE,UAAU,0CACxB3oB,KAAAmD,MAFLzD,aAIEA,EAAAsG,cAACymB,OAADK,IAAA,CAAUnE,UAAU,0CACjB3oB,KAAAmD,MATPyI,cAYElM,EAAAsG,cAACymB,OAADI,IAAA,KACEntB,EAAAsG,cAACymB,OAADK,IAAA,CAAUI,GAAI,EAAGvE,UAAU,0CACxB3oB,KAAAmD,MAFLi+B,eAIE1hC,EAAAsG,cAACymB,OAADK,IAAA,CAAUnE,UAAU,0CACjB3oB,KAAAmD,MAjBPu8B,gBAoBEhgC,gBAAC+sB,OAAD/sB,SACEA,EAAAsG,cAACymB,OAADK,IAAA,CAAUI,GAAI,EAAGvE,UAAU,0CACxB3oB,KAAAmD,MAFLzD,sBAIEA,EAAAsG,cAACymB,OAADK,IAAA,CAAUnE,UAAU,0CACjB3oB,KAAAmD,MAAAk+B,qBACGrhC,KAAAmD,MADHk+B,qBAzBP,OA8BE3hC,EAAAsG,cAACymB,OAADI,IAAA,KACEntB,EAAAsG,cAACymB,OAADK,IAAA,CAAUI,GAAI,EAAGvE,UAAU,0CACxB3oB,KAAAmD,MAFLm+B,eAIE5hC,EAAAsG,cAACymB,OAADK,IAAA,CAAUnE,UAAU,0CACjB3oB,KAAAmD,MAnCPo+B,2BAsCE7hC,EAAAsG,cAACymB,OAADI,IAAA,KACEntB,EAAAsG,cAACymB,OAADK,IAAA,CAAUI,GAAI,EAAGvE,UAAU,0CACxB3oB,KAAAmD,MAFLq+B,kBAIGxhC,KA1CLihC,cA4CEvhC,EAAAsG,cAACymB,OAADI,IAAA,KACEntB,EAAAsG,cAACymB,OAADK,IAAA,CAAU2U,SAAU,GAClB/hC,gBAAC+sB,OAAD/sB,SACEA,EAAAsG,cAACymB,OAADK,IAAA,KACEptB,EAAAsG,cAAA8kB,EAAA,CAAWnC,UAAU,sCACnBjpB,EAAAsG,cAACqsB,EAADA,OAAA,CAAQ2I,QAAQ,UAAU3L,QAASrvB,KAAKghC,cACrChhC,KAAAmD,MAFLu+B,YAIEhiC,EAAAsG,cAAAipB,EAAA,CACEtG,UAAU,wCACVH,KAAMxoB,KAAAmD,MAAWw+B,WACjBjZ,GAAI,WAEH1oB,KAAAmD,MA1DjBy+B,qBApDSb,CAA8BrhC,aCtF9BmiC,6JAGJC,iCACCC,EAAY,SAAIxhC,UACpBb,gBAACsiC,QAADtiC,uBAqBK,CACL,CACEuiC,KAAM,CACJC,WAAY,CArBQ,SAAG3hC,EAAA2B,0BAOzBxC,gBAACsiC,QAADtiC,UACEA,EAAAsG,cAAA,KAAGwiB,KAAK,qBAAqB6G,QAHpB,kBAASrvB,wBAA2BmiC,EAA3BniC,MACtBO,OAiBE8tB,OAAQ,CACN6T,WAAY,CADNH,GAEN9R,MAAOjwB,KAAAmD,MAAWi/B,UAEpBC,SAAU,QAEZ,CACEJ,KAAM,CACJC,WAAY,UAAE3hC,UAAkBb,gBAACsiC,QAADtiC,gBAElC2uB,OAAQ,CACN6T,WAAY,CADNH,GAEN9R,MAAOjwB,KAAAmD,MAAWi1B,iBAEpBiK,SAAU,6BAKTC,+BAAqB74B,QAC1BtG,MAAAo/B,oBAAA94B,gBAGKvF,yBAEHxE,EAAAsG,cAAA,OAAK2iB,UAAU,mBACbjpB,gBAACmtB,EAADntB,SACEA,EAAAsG,cAAA,OAAK2iB,UAAU,6BACbjpB,gBAAC+4B,EAAD/4B,UAAOM,KAAAmD,MADT64B,kBAEG,IAAAh8B,KAAAmD,MAAAG,KAAA4R,OACCxV,EAAAsG,cAACg8B,QAADQ,WAAA,CACEC,SAAS,EACTC,UAAU,EACVC,OAAO,EACPC,QAAS5iC,KAAA8hC,cAETpiC,gBAACsiC,QAADtiC,OANF,MAOEA,EAAAsG,cAACg8B,QAAD/B,KAAA,CAAYprB,KAAM7U,KAAAmD,MAAWG,KAAMu/B,OAAO,UAbtD,WAvDShB,CAAmCniC,aC6BnCojC,cAIX5/B,WAAmBC,eACjBA,QAEApD,MAAa,CACXs5B,kBAAkB,QAGpBE,SAAgBv5B,KAAAu5B,SAAAl2B,KAAhBrD,WACAw5B,SAAgBx5B,KAAAw5B,SAAAn2B,KAAhBrD,WACAq5B,iBAAwBr5B,KAAAq5B,iBAAAh2B,KAAxBrD,gHAGKu5B,yBACLl1B,SAAc,CACZg1B,kBAAkB,iBAIfG,yBACLn1B,SAAc,CACZg1B,kBAAkB,SAIpBl2B,MAAAs2B,SAAoBz5B,KAAAmD,MAApByI,0BAGKwxB,mCAEH19B,EAAAsG,cAACq3B,EAADA,QAAA,CAAS90B,GAAG,aACTvI,KAAAmD,MAAAm6B,cACGt9B,KAAAmD,MADHm6B,cAEGt9B,KAAAmD,MAJRo6B,yBASKC,oCAEH99B,EAAAsG,cAACq3B,EAADA,QAAA,CAAS90B,GAAG,cACTvI,KAAAmD,MAAAs6B,eACGz9B,KAAAmD,MADHs6B,eAEGz9B,KAAAmD,MAJRu6B,0BASK4B,mCAEH5/B,EAAAsG,cAACq3B,EAADA,QAAA,CAAS90B,GAAG,aACTvI,KAAAmD,MAAAo8B,cACGv/B,KAAAmD,MADHo8B,cAEGv/B,KAAAmD,MAJRq8B,yBASKnG,iCACLh1B,SAAc,CACZg1B,kBAAkB,iBAIfn1B,yBAEHxE,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,EAAAsG,cAAAqjB,GAEEa,YAAad,0BAAwBsQ,OACrCnP,qBAAsBvqB,KAAAmD,MAAWs8B,eACjCzV,sBAAuBhqB,KAAAmD,MAAWo6B,WAClCnT,wBAAyBpqB,KAAAmD,MAAW02B,uBACpCxV,UAAWrkB,KAAAmD,MAAW22B,qBACtBlrB,KAAMua,uBAAqBuQ,OAC3B/O,WAAY3qB,KAAAD,MAAWs5B,iBACvBzP,SAAU5pB,KAAKu5B,SACfzP,UAAW9pB,KAAKw5B,WAElB95B,EAAAsG,cAAC43B,EAADA,aAAA,CACE/xB,QACEnM,EAAAsG,cAAA,OAAK2iB,UAAU,cACbjpB,EAAAsG,cAAC63B,EAADA,eAAA,CACEC,QAAS99B,KAAAw9B,oBACTO,UAAU,OAEVr+B,EAAAsG,cAAAipB,EAAA,CAAYzG,KAAMxoB,KAAAmD,MAAW4/B,gBAAiBra,GAAI,WAC/C1oB,KAAAmD,MANPu6B,cASEh+B,EAAAsG,cAAC63B,EAADA,eAAA,CAAgBC,QAAS99B,KAAAs/B,mBAAyBvB,UAAU,OAC1Dr+B,EAAAsG,cAAAipB,EAAA,CACEzG,KAAMxoB,KAAAmD,MAAWy8B,oBACjBlX,GAAI,WAEH1oB,KAAAmD,MAdPq8B,aAiBE9/B,EAAAsG,cAAC63B,EAADA,eAAA,CAAgBC,QAAS99B,KAAAo9B,mBAAyBW,UAAU,OAC1Dr+B,EAAAsG,cAACqsB,EAADA,OAAA,CACE2I,QAAQ,UACR9O,SAAgC,IAAtBlsB,KAAAmD,MAAA66B,OACV3O,QAASrvB,KAAKq5B,kBAEbr5B,KAAAmD,MAvBPo6B,cA4BFU,eAAgB,CACdv+B,EAAAsG,cAACk4B,EAADA,iBAAA,CAAkB7kB,IAAK,GACpBrZ,KAAAmD,MAFW6/B,mBAIdtjC,EAAAsG,cAACk4B,EAADA,iBAAA,CAAkB7kB,IAAK,GACpBrZ,KAAAmD,MALWg7B,oBAQhBxtB,YACE3Q,KAAAmD,MAAAk+B,qBACIrhC,KAAAmD,MADJk+B,qBAEI,GAENhD,QAASr+B,KAAAmD,MAAWu8B,cACpBnB,eAAe,EACfC,YACEx+B,KAAAmD,MAAA8/B,cACEvjC,EAAAsG,cAAA,OAAK2iB,UAAU,uBACbjpB,EAAAsG,cAAA,OACEuiB,IAAKvoB,KAAAmD,MAAW8/B,cAChBvI,IAAK16B,KAAAmD,MAAWu8B,cAChB7hB,MAAO,MAGT,KAEN6gB,SAAS,QA1INoE,CAA0BpjC,aCvB1BwjC,8JAGJC,mCAEHzjC,EAAAsG,cAACq3B,EAADA,QAAA,CAAS90B,GAAG,aACTvI,KAAAmD,MAAAigC,2BACGpjC,KAAAmD,MADHigC,2BAEGpjC,KAAAmD,MAJRkgC,sCASKn/B,yBAEHxE,gCACEA,EAAAsG,cAAA4tB,EAAA/wB,OAAAC,OAAA,GAAqB9C,KAArBmD,OACEzD,EAAAsG,cAAA,OAAK2iB,UAAU,cACbjpB,EAAAsG,cAAC63B,EAADA,eAAA,CAAgBC,QAAS99B,KAAAmjC,mBAAyBpF,UAAU,OAC1Dr+B,EAAAsG,cAAAipB,EAAA,CAAYzG,KAAMxoB,KAAAmD,MAAWmgC,oBAAqB5a,GAAI,WACnD1oB,KAAAmD,MALXzD,4BAUEA,EAAAsG,cAAA8kB,EAAA,KACG,KAAA9qB,KAAAmD,MAAAkhB,WACC3kB,EAAAsG,cAACqyB,EAADA,MAAA,CAAOnJ,KAAK,MAAMlvB,KAAAmD,MAFtBkhB,WAIG,KAAArkB,KAAAmD,MAAAi1B,iBACC14B,EAAAsG,cAACyyB,EAADA,KAAA,CACE1L,wBAAyB,CAAEC,OAAQhtB,KAAAmD,MAAWi1B,mBAGjDp4B,KAAAmD,MAAAgB,SACCzE,gBAACo/B,EAADp/B,cAAWM,KAAAmD,MADZgB,UAGCzE,EAAAsG,cAAC+4B,EAADA,WAAA,KACEr/B,gBAACq/B,aAADr/B,KADF,MAEEA,gBAACq/B,aAADr/B,WACGM,KAAAmD,MAHL67B,qBAKEt/B,gBAACq/B,aAADr/B,UAAkBM,KAAAmD,MALpB87B,oBAMEv/B,EAAAsG,cAAC+4B,aAADG,OAAA,KACEx/B,EAAAsG,cAAC63B,EAADA,eAAA,CACEC,QAAS99B,KAAAmjC,mBACTpF,UAAU,OAEVr+B,EAAAsG,cAAAipB,EAAA,CACEzG,KAAMxoB,KAAAmD,MAAWmgC,oBACjB5a,GAAI,WAEH1oB,KAAAmD,MAtCjBkgC,iCAdSH,CAA0BxjC,aCyB1B6jC,8JAGJr/B,yBAEHxE,gBAAC+sB,EAAD/sB,UACEA,EAAAsG,cAACymB,OAADI,IAAA,KACEntB,EAAAsG,cAACymB,OAADK,IAAA,CAAUI,GAAI,EAAGvE,UAAU,qCACxB3oB,KAAAmD,MAFLi/B,UAIE1iC,EAAAsG,cAACymB,OAADK,IAAA,CAAUnE,UAAU,qCACjB3oB,KAAAmD,MANPzD,gBASEA,EAAAsG,cAACymB,OAADI,IAAA,KACEntB,EAAAsG,cAACymB,OAADK,IAAA,CAAUI,GAAI,EAAGvE,UAAU,qCACxB3oB,KAAAmD,MAFLi1B,iBAIE14B,EAAAsG,cAACymB,OAADK,IAAA,CAAUnE,UAAU,qCACjB3oB,KAAAmD,MAAAk+B,qBACGrhC,KAAAmD,MADHk+B,qBAdP3hC,OAmBEA,EAAAsG,cAACymB,OAADI,IAAA,KACEntB,EAAAsG,cAACymB,OAADK,IAAA,CAAUI,GAAI,EAAGvE,UAAU,qCACxB3oB,KAAAmD,MAFLqgC,UAIE9jC,EAAAsG,cAACymB,OAADK,IAAA,CAAUnE,UAAU,qCACjB3oB,KAAAmD,MAxBPzD,kBA2BEA,EAAAsG,cAACymB,OAADI,IAAA,KACEntB,EAAAsG,cAACymB,OAADK,IAAA,CAAUI,GAAI,EAAGvE,UAAU,qCACxB3oB,KAAAmD,MAFLsgC,gBAIE/jC,EAAAsG,cAACymB,OAADK,IAAA,CAAUnE,UAAU,qCACjB3oB,KAAAmD,MAAAugC,mBACG1jC,KAAAmD,MADHugC,mBAjCT,WAJSH,CAA0B7jC,aClC1BikC,8JAGJz/B,yBAEHxE,EAAAsG,cAAA,OAAK2iB,UAAU,mBACZ,IAAA3oB,KAAAmD,MAAAygC,iBAAA1uB,OACCxV,gBAACmtB,EAADntB,SACEA,EAAAsG,cAAA,OAAK2iB,UAAU,6BACZ3oB,KAAAmD,MAAAygC,iBAAA/6B,IAAA,SACCT,EAAAia,GAAA,OACE3iB,EAAAsG,cAAA,OAAKqT,IAAKgJ,GACR3iB,8BAAS0I,EADXoD,MAAA,MACoCpD,EADpCuI,iBAPd,SAJSgzB,CAA0BjkC,aCA1BmkC,8JAGJ3/B,yBAEHxE,EAAAsG,cAAC+zB,EAADA,KAAA,CAAM+J,UAAU,EAAMC,YAAY,EAAM/J,aAAa,GACnDt6B,gBAACq6B,OAADr6B,WACEA,EAAAsG,cAACg+B,EAADA,qBAAA,KACEtkC,EAAAsG,cAAA,sBAAkB,mBAAmBhG,KAAAmD,MAH3C0iB,SAMEnmB,EAAAsG,cAAC+zB,OAADkG,KAAA,KACEvgC,EAAAsG,cAACi+B,EAADA,6BAAA,KACEvkC,EAAAsG,cAACk+B,EAADA,4BAAA,KACExkC,EAAAsG,cAAC0jB,EAADA,KAAA,CAAMjV,KAAK,KAAKjJ,KAAK,OACrB9L,EAAAsG,cAAA,sBAAkB,sBAAsBhG,KAAAmD,MAF1CqB,IADF,KAKE9E,EAAAsG,cAACk+B,EAADA,4BAAA,KACExkC,EAAAsG,cAAC0jB,EAADA,KAAA,CAAMjV,KAAK,KAAKjJ,KAAK,mBACrB9L,EAAAsG,cAAA,sBAAkB,yBACfhG,KAAAmD,MAhBbpB,cAJS8hC,CAA6BnkC,iBCR7BykC,8JAGJjgC,yBAEHxE,EAAAsG,cAAC+zB,EAADA,KAAA,CAAM+J,UAAU,EAAMC,YAAY,EAAM/J,aAAa,GACnDt6B,gBAACq6B,OAADr6B,WAAaM,KAAAmD,MAFjBkhB,eAJS8f,CAA0BzkC,iBCsB1B0kC,8JACJlgC,yBAEHxE,uBACEA,EAAAsG,cAACymB,EAADA,KAAA,CAAMC,OAAO,GACXhtB,gBAAC+sB,OAAD/sB,SACEA,EAAAsG,cAACymB,OAADK,IAAA,CAAUiK,GAAI,IACZr3B,EAAAsG,cAAA,OAAK2iB,UAAW,oBACdjpB,EAAAsG,cAACqyB,EAADA,MAAA,CAAOnJ,KAAK,KAAKvG,UAAW,2BACzB3oB,KAAAmD,MAFLkhB,WAIE3kB,EAAAsG,cAAA,OAAK2iB,UAAU,6BACbjpB,EAAAsG,cAAAipB,EAAA,CAAYzG,KAAMxoB,KAAAmD,MAAWkhC,oBAC1BrkC,KAAAmD,MAFLmhC,wBAIE5kC,EAAAsG,cAAAipB,EAAA,CACEzG,KAAMxoB,KAAAmD,MAAWohC,0BACjB7b,GAAI,WAEH1oB,KAAAmD,MAhBfzD,gCAuBEA,EAAAsG,cAACk2B,EAADA,SAAA,CAAUxP,OAAO,EAAMsN,aAAa,GAClCt6B,gBAACw8B,WAADx8B,SACEA,EAAAsG,cAACk2B,WAADpP,IAAA,CAAciK,GAAI,EAAGqF,GAAI,GACtBp8B,KAAAmD,MAFLzD,sBAIEA,EAAAsG,cAACk2B,WAADpP,IAAA,CAAciK,GAAI,EAAGqF,GAAI,GACtBp8B,KAAAmD,MALLzD,qBAOEA,EAAAsG,cAACk2B,WAADpP,IAAA,CAAciK,GAAI,EAAGqF,GAAI,GACtBp8B,KAAAmD,MARLzD,kBAUEA,EAAAsG,cAACk2B,WAADpP,IAAA,CAAciK,GAAI,EAAGqF,GAAI,GACtBp8B,KAAAmD,MAnCTzD,kBAuCEA,EAAAsG,cAACymB,EAADA,KAAA,CAAMC,OAAO,GACXhtB,gBAAC+sB,OAAD/sB,SACEA,EAAAsG,cAACymB,OAADK,IAAA,CAAUiK,GAAI,IAAK/2B,KAAAmD,MAFvBsK,kBAIE/N,EAAAsG,cAACymB,OAADI,IAAA,KACEntB,EAAAsG,cAACymB,OAADK,IAAA,CAAUiK,GAAI,GAAIqF,GAAI,GACnBp8B,KAAAmD,MAFLqhC,kBAIE9kC,EAAAsG,cAACymB,OAADK,IAAA,CAAUiK,GAAI,GAAIqF,GAAI,GACnBp8B,KAAAmD,MAhDTzD,sBAoDEA,EAAAsG,cAACymB,EAADA,KAAA,CAAMC,OAAO,EAAM9O,MAAO,CAAE6mB,UAAW,SACrC/kC,gBAAC+sB,OAAD/sB,SACEA,EAAAsG,cAACymB,OAADK,IAAA,CAAUiK,GAAI,IACZr3B,EAAAsG,cAAA,OAAK2iB,UAAW,oBACdjpB,EAAAsG,cAACqyB,EAADA,MAAA,CAAOnJ,KAAK,KAAKvG,UAAW,2BACzB3oB,KAAAmD,MAFLuhC,iBAIEhlC,EAAAsG,cAAA,OAAK2iB,UAAU,6BACbjpB,EAAAsG,cAACmpB,EAADA,KAAA,CAAMC,GAAIpvB,KAAAmD,MAAWwhC,mBAClB3kC,KAAAmD,MAFLyhC,uBAIEllC,EAAAsG,cAAAipB,EAAA,CACEzG,KAAMxoB,KAAAmD,MAAW0hC,yBACjBnc,GAAI,WAEH1oB,KAAAmD,MAnEfzD,+BA0EEA,EAAAsG,cAACk2B,EAADA,SAAA,CAAUxP,OAAO,EAAMsN,aAAa,GAClCt6B,gBAACw8B,WAADx8B,SAAeM,KAAAmD,MA5ErBwK,kBAFSy2B,CAAkB1kC,iBCdlBolC,8JAGJ5gC,sBACCZ,EAAO,CACXyhC,OAAQ,CACNC,QAASC,6BADHC,SAENC,UAAWF,6BAFLG,QAGNC,QAASJ,6BAA2BK,UAEtC1C,QAAS,CACP,CACE5iC,KAAAmD,MADFoiC,4BAEEvlC,KAAAmD,MAHKqiC,qBAKP,CACExlC,KAAAmD,MADFsiC,4BAEEzlC,KAAAmD,MAPKuiC,qBASP,CACE1lC,KAAAmD,MADFwiC,4BAEE3lC,KAAAmD,MAjBOyiC,sBAoBXnxB,KAAM,gBAIN/U,EAAAsG,cAAC+zB,EAADA,KAAA,KACEr6B,gBAACq6B,OAADr6B,aACEA,gBAACq6B,OAADr6B,WAAaM,KAAAmD,MAFjBkhB,YAIE3kB,EAAAsG,cAAC+zB,OAADkG,KAAA,KACEvgC,EAAAsG,cAAC6/B,EAADA,WAAA,CACEt9B,GAAG,oBACH2mB,KAAM,CAAEpR,OAAQ,KAChBxa,KAAMA,EACNwiC,QAAS,CACPC,SAAUd,aADHe,uBAEPtb,MAAM,GAER7E,MAAO,CACLogB,UAAWjmC,KAAAmD,MADN+iC,iBAELzxB,KAAMzU,KAAAmD,MAAWgjC,WAEnBC,OAAQ,CAAE1b,MAAF,EAAcpiB,SAAU,gBA7C/Bw8B,CAAyBplC,iBCRzB2mC,8JACJniC,yBAEHxE,EAAAsG,cAAC+zB,EAADA,KAAA,CAAM+J,UAAU,GACdpkC,gBAACq6B,OAADr6B,aACEA,gBAACq6B,OAADr6B,WAAaM,KAAAmD,MAFjBkhB,YAIE3kB,gBAACq6B,OAADr6B,UAAYM,KAAAmD,MALhBgB,cAFSkiC,CAA0B3mC,cnBG3B+8B,sDAAZ,KACEA,oBACAA,kBACAA,4BoBWW6J,eAIXpjC,WAAYC,eACVA,QACApD,MAAa,CACXwmC,QAASvmC,KAAAmD,MAAWojC,cAEtBC,YAAmBxmC,KAAAwmC,YAAAnjC,KAAnBrD,WACAwzB,aAAoBxzB,KAAAwzB,aAAAnwB,KAApBrD,gHAEKwzB,sBAAYzpB,cACXyB,EAAOzB,eAAb08B,YACApiC,SAAc,CAAEkiC,QAAS/6B,GAAzB,kBAAuCxL,qCAElCwmC,4BACLrjC,MAAAuC,OAAkB1F,KAAAD,MAAlBwmC,sBAEKriC,yBAEHxE,EAAAsG,cAAA4kB,EAAA,CACE/pB,KACEnB,EAAAsG,cAAA,QAAM2iB,UAAU,mBACdjpB,yBAAIM,KAAAmD,MADNi1B,iBAEE14B,EAAAsG,cAAA,OACE2iB,UACE3oB,KAAAmD,MAAAujC,kBAA+BjK,yBAA/BkK,SAAA,aAEI,wBAGNjnC,EAAAsG,cAAA,SAAO2iB,UAAU,yBAAyBie,QAAQ,gBAC/C5mC,KAAAmD,MARL0jC,gBAUEnnC,EAAAsG,cAAA,OAAK2iB,UAAU,YACbjpB,EAAAsG,cAAA,SACEuC,GAAG,eACHogB,UAAU,eACVlU,KAAK,OACLjR,aAAcxD,KAAAmD,MAAWojC,QACzB/U,SAAUxxB,KAAKwzB,eAEhBxzB,KAAAmD,MAAAujC,kBACCjK,yBADDkK,UAECjnC,EAAAsG,cAAA,QAAM2iB,UAAU,cAVpB,QAcG3oB,KAAAmD,MAAAujC,kBACCjK,yBADDqK,QAECpnC,EAAAsG,cAAA,QAAM2iB,UAAU,cACb3oB,KAAAmD,MAjBP4jC,iBAoBG/mC,KAAAmD,MAAAujC,kBACCjK,yBADDuK,WAECtnC,EAAAsG,cAAA,QAAM2iB,UAAU,cACb3oB,KAAAmD,MAnCX8jC,uBA0CFpc,OACEnrB,gCACEA,EAAAsG,cAACqsB,EAADA,OAAA,CAAQhD,QAASrvB,KAAAmD,MAAWwmB,QACzB3pB,KAAAmD,MAFLzD,sBAIEA,EAAAsG,cAACqsB,EAADA,OAAA,CACE2I,QAAS,UACT3L,QAASrvB,KAAKwmC,YACdta,SACE,KAAAlsB,KAAAD,MAAAwmC,SACAvmC,KAAAmD,MAAAujC,kBAA+BjK,yBAAuBkK,UAGvD3mC,KAAAmD,MAZLzD,qBAgBFiqB,OAAQ3pB,KAAAmD,MAAWwmB,OACnB9D,MAAO7lB,KAAAmD,MAAWkhB,eAnFbiiB,CAAuB5mC,aCjBvBwnC,8JACJhjC,yBACExE,gBAACo/B,EAADp/B,cAAWM,KAAAmD,MAAlBgB,aAFS+iC,CAAiBxnC,aCGjBynC,8JACJjjC,yBAEHxE,gBAACq/B,EAADr/B,gBACEA,gBAACq/B,aAADr/B,KADFA,MAEEA,gBAACq/B,aAADr/B,WAAmBM,KAAAmD,MAFrBzD,WAGEA,gBAACq/B,aAADr/B,UAAkBM,KAAAmD,MAHpBzD,UAIEA,EAAAsG,cAAC+4B,aAADG,OAAA,KACEx/B,EAAAsG,cAACqsB,EAADA,OAAA,CACE2I,QAAQ,UACRoM,OAAO,QACP/X,QAASrvB,KAAAmD,MAAWkkC,UAEnBrnC,KAAAmD,MAXTmkC,2BAFSH,CAA2BznC,aCS3B6nC,eACXrkC,WAAYC,eACVA,QACAqkC,kBAAyBxnC,KAAAwnC,kBAAAnkC,KAAzBrD,WACAynC,oBAA2BznC,KAAAynC,oBAAApkC,KAA3BrD,gHAEKwnC,kCACLrkC,MAAAukC,cAAyB1nC,KAAAmD,MAAzBqI,mBAEKi8B,oCACLtkC,MAAAwkC,gBAA2B3nC,KAAAmD,MAA3BqI,mBAEKtH,yBAEHxE,EAAAsG,cAAC43B,EAADA,aAAA,CACES,QAASr+B,KAAAmD,MAAWqI,KACpBmF,YAAa3Q,KAAAmD,MAAWykC,aACxB3J,eAAgB,GAChBpyB,QACEnM,2BACEA,EAAAsG,cAACqsB,EAADA,OAAA,CAAQhD,QAASrvB,KAAKwnC,mBACnBxnC,KAAAmD,MAFLzD,oBAIEA,EAAAsG,cAACqsB,EAADA,OAAA,CAAQhD,QAASrvB,KAAKynC,qBACnBznC,KAAAmD,MALLzD,4BAnBG6nC,CAAqB7nC,aCTrBmoC,8JACJ3jC,yBAEHxE,gCACEA,EAAAsG,cAAA4tB,EAAA/wB,OAAAC,OAAA,GAAqB9C,KAArBmD,OACEzD,EAAAsG,cAAA,OAAK2iB,UAAU,cACZ,IAAA3oB,KAAAmD,MAAA2kC,cACCpoC,EAAAsG,cAACqsB,EAADA,OAAA,CAAQ1J,UAAU,kBAAkB0G,QAASrvB,KAAAmD,MAAWkkC,UACrDrnC,KAAAmD,MALXzD,wBAUEA,uBAAYM,KAAAmD,MAXhBgB,cAFS0jC,CAAqBnoC,aCyCrBqoC,eAIX7kC,WAAmBC,eACjBA,QACApD,MAAa,CACXioC,eADW,EAEXC,gBAFW,EAGXC,kBAAkB,QAEpBC,cAAqBnoC,KAAAmoC,cAAA9kC,KAArBrD,WACAooC,eAAsBpoC,KAAAooC,eAAA/kC,KAAtBrD,WACAqoC,eAAsBroC,KAAAqoC,eAAAhlC,KAAtBrD,WACAsoC,gBAAuBtoC,KAAAsoC,gBAAAjlC,KAAvBrD,WACAuoC,iBAAwBvoC,KAAAuoC,iBAAAllC,KAAxBrD,WACAwoC,kBAAyBxoC,KAAAwoC,kBAAAnlC,KAAzBrD,WACAyoC,WAAkBzoC,KAAAyoC,WAAAplC,KAAlBrD,WACA0oC,oBAA2B1oC,KAAA0oC,oBAAArlC,KAA3BrD,gHAEKyoC,oBAAUj9B,GACXxL,KAAAD,MAAJkoC,sBACEK,uBACAnlC,MAAAwlC,WAAsB3oC,KAAAD,MAAtB6oC,gBAAAp9B,IAEExL,KAAAD,MAAJioC,qBACEI,sBACAjlC,MAAA0lC,UAAAr9B,IAEExL,KAAAD,MAAJmoC,wBACEM,yBACArlC,MAAA2lC,aAAAt9B,iBAGGk9B,oCACLD,WAAgBzoC,KAAAD,MAAhB6oC,8BAEKL,0BAAgB/8B,QACrBnH,SAAc,CAAEukC,gBAAFp9B,EAAyB08B,kBAAkB,iBAEpDM,kCACLnkC,SAAc,CAAE6jC,kBAAkB,iBAE7BC,8BACL9jC,SAAc,CAAE2jC,eAAe,iBAE1BI,+BACL/jC,SAAc,CAAE2jC,eAAe,iBAE1BK,wBAAc78B,QACnBnH,SAAc,CAAEukC,gBAAFp9B,EAAyBy8B,gBAAgB,iBAElDK,gCACLjkC,SAAc,CAAE4jC,gBAAgB,iBAE3B/jC,yBAEHxE,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,EAAAsG,cAAAmyB,EAAA,CACExP,UAAU,aACVtE,UAAWrkB,KAAAmD,MAAW4lC,cACtB3Q,gBAAiBp4B,KAAAmD,MAAW6lC,sBAE7BhpC,KAAAD,MAAAioC,eACCtoC,EAAAsG,cAAAsgC,GAAA,CACEjiB,UAAWrkB,KAAAmD,MAAW8lC,sBACtB7Q,gBAAiBp4B,KAAAmD,MAAW+lC,4BAC5B3C,QAAS,GACTM,eAAgB7mC,KAAAmD,MAAWgmC,kBAC3BC,mBAAoBppC,KAAAmD,MAAWimC,mBAC/B7e,qBAAsBvqB,KAAAmD,MAAWonB,qBACjCwc,gBAAiB/mC,KAAAmD,MAAW4jC,gBAC5BE,mBAAoBjnC,KAAAmD,MAAW8jC,mBAC/BP,gBAAiB1mC,KAAAmD,MAAWkmC,oBAC5B1f,OAAQ3pB,KAAKooC,eACb1iC,OAAQ1F,KAAKyoC,WACbhW,WAAYzyB,KAAAmD,MAAWmmC,iBAG1BtpC,KAAAD,MAAAkoC,gBACCvoC,EAAAsG,cAAAsgC,GAAA,CACEjiB,UAAWrkB,KAAAmD,MAAWomC,uBACtBnR,gBAAiBp4B,KAAAmD,MAAWqmC,6BAC5BjD,QAASvmC,KAAAD,MAAW6oC,gBACpB/B,eAAgB7mC,KAAAmD,MAAWgmC,kBAC3BC,mBAAoBppC,KAAAmD,MAAWimC,mBAC/B7e,qBAAsBvqB,KAAAmD,MAAWonB,qBACjCwc,gBAAiB/mC,KAAAmD,MAAW4jC,gBAC5BE,mBAAoBjnC,KAAAmD,MAAW8jC,mBAC/BP,gBAAiB1mC,KAAAmD,MAAWkmC,oBAC5B1f,OAAQ3pB,KAAKsoC,gBACb5iC,OAAQ1F,KAAKyoC,WACbhW,WAAYzyB,KAAAmD,MAAWmmC,iBAG1BtpC,KAAAD,MAAAmoC,kBACCxoC,EAAAsG,cAAAqjB,EAAA,CACEa,YAAad,0BAAwBqgB,OACrC76B,KAAMua,uBAAqBuQ,OAC3BnP,qBAAsBvqB,KAAAmD,MAAWumC,4BACjC1f,sBAAuBhqB,KAAAmD,MAAWwmC,4BAClCvf,wBAAyBpqB,KAAAmD,MAAAymC,8BACvB5pC,KAAAD,MADuB6oC,iBAGzBvkB,UAAWrkB,KAAAmD,MAAW0mC,4BACtBpf,mBAAoBzqB,KAAAmD,MAAW2mC,oCAC/Bnf,WAAY3qB,KAAAD,MAAWmoC,iBACvBte,SAAU5pB,KAAKwoC,kBACf1e,UAAW9pB,KAAK0oC,sBAGpBhpC,EAAAsG,cAAA6hC,GAAA,CACErS,cAAex1B,KAAAmD,MAAWqyB,cAC1B1B,kBAAmB9zB,KAAAmD,MAAW2wB,kBAC9BgB,gBAAiB90B,KAAAmD,MAAW2xB,gBAC5BnC,aAAc3yB,KAAAmD,MAAWwvB,aACzB8B,YAAaz0B,KAAAmD,MAAWsxB,YACxBW,gBAAiBp1B,KAAAmD,MAAWiyB,gBAC5B0S,aAAc9nC,KAAAmD,MAAW2kC,aACzBjT,UAAW70B,KAAAmD,MAAW0xB,UACtBT,qBAAsBp0B,KAAAmD,MAAWixB,qBACjCE,gBAAiBt0B,KAAAmD,MAAWmxB,gBAC5ByV,cAAe/pC,KAAAmD,MAAW4mC,cAC1BpV,mBAAoB30B,KAAAmD,MAAWwxB,mBAC/BT,sBAAuBl0B,KAAAmD,MAAW+wB,sBAClC2B,eAAgB71B,KAAAmD,MAAW0yB,eAC3BE,eAAgB/1B,KAAAmD,MAAW4yB,eAC3BV,6BAA8Br1B,KAAAmD,MAAWkyB,6BACzCL,wBAAyBh1B,KAAAmD,MAAW6xB,wBACpCO,iBAAkBv1B,KAAAmD,MAAWoyB,iBAC7B+R,qBAAsBtnC,KAAAmD,MAAWmkC,qBACjCD,SAAUrnC,KAAKmoC,eAEdnoC,KAAAmD,MAAAgB,SAAoB,CACnBgkC,cAAenoC,KADImoC,cAEnBE,eAAgBroC,KAFGqoC,eAGnBE,iBAAkBvoC,KAAKuoC,wBAxItBR,CAAyBroC,aC5CtCqB,IAAMipC,GAAY,kBAChBtqC,EAAAsG,cAAAikC,EAAA,CACEnsB,OAAQ,GACRD,MAAO,IACPqsB,MAAO,EACPC,aAAa,UACbC,eAAe,UACfxsB,MAAO,CACLE,OADK,GAELD,MAAO,SAGTne,EAAAsG,cAAA,QACEqkC,EAAE,KACFC,EAAE,KACFC,GAAG,IACHC,GAAG,IACH3sB,MAAO,KArBb4sB,EAqB4B,GArB5BzR,EAqB4B,EApBnB0R,eAAiB1R,EAAjB0R,GAAPD,GAqBI3sB,OAAO,QAtBb,IAAA2sB,EAAAzR,GA2Ba2R,8JACJzmC,yBAEHxE,gCACEA,EAAAsG,cAAA,OACE2iB,UAAW,gCACC,8BAEZjpB,2BACEA,mBANNA,QASEA,EAAAsG,cAAA,OACE2iB,UAAW,gCACC,8BAEZjpB,2BACEA,mBAdNA,QAiBEA,EAAAsG,cAAA,OACE2iB,UAAW,gCACC,8BAEZjpB,2BACEA,mBAvBR,YAFSirC,CAAyBjrC,iBCNzBkrC,eAKX1nC,WAAYC,eACVA,QACApD,MAAa,CACX8qC,aAAa,QAEfrE,YAAmBxmC,KAAAwmC,YAAAnjC,KAAnBrD,WACAwzB,aAAoBxzB,KAAAwzB,aAAAnwB,KAApBrD,gHAEKwzB,sBAAYppB,EAAA0gC,OAIXD,EAAcC,eAEhBpV,EAAArT,GAAA,OACEqT,SAActrB,KAAdsrB,MACAA,aAAkBtrB,KAAa2gC,WAJjBD,gBAMVE,EAAAC,GAAA,OAAkBD,GAAOC,IANnC,QAOAC,WAAA9gC,OACA/F,SAAc,aAAEwmC,iBAEXrE,4BACLrjC,MAAAuC,OAAkB1F,KAAlBkrC,yBAEKhnC,yBAEHxE,EAAAsG,cAAA4kB,EAAA,CACE/pB,KAAMb,KAAAmD,MAAAgB,SAAoB,CACxBqvB,aAAcxzB,KAAKwzB,eAErB3I,OACEnrB,gCACEA,EAAAsG,cAACqsB,EAADA,OAAA,CAAQhD,QAASrvB,KAAAmD,MAAWwmB,QACzB3pB,KAAAmD,MAFLzD,sBAIEA,EAAAsG,cAACqsB,EAADA,OAAA,CACE2I,QAAS,UACT3L,QAASrvB,KAAKwmC,YACdta,SAAUlsB,KAAAD,MAAW8qC,aAEpB7qC,KAAAmD,MATLzD,qBAaFmmB,MAAO7lB,KAAAmD,MAAWkhB,UAClBsF,OAAQ3pB,KAAAmD,MAAWwmB,YAnDdihB,CAA6BlrC,aCf7ByrC,eAGXjoC,WAAYC,eACVA,QACAqwB,aAAoBxzB,KAAAwzB,aAAAnwB,KAApBrD,gHAEKwzB,sBAAYzpB,QACjB5G,MAAAquB,SAAoBxxB,KAAAmD,MAApBqI,KAAqCzB,SAArCqhC,sBAEKlnC,yBAEHxE,EAAAsG,cAAC43B,EAADA,aAAA,CACEyN,cACE3rC,EAAAsG,cAAA,SACEyO,KAAK,WACL62B,eAAgBtrC,KAAAmD,MAAW4nC,SAC3BvZ,SAAUxxB,KAAKwzB,eAGnB6K,QAASr+B,KAAAmD,MAAWqI,KACpBmF,YAAa,GACbstB,eAAgB,QAtBXkN,CAA+BzrC,aCG/B6rC,8JAGJrnC,yBAEHxE,EAAAsG,cAAC+4B,EAADA,WAAA,CACEnhB,MACE,CACE4tB,WADF,UAEEC,OAAQ,SAIZ/rC,gBAACq/B,aAADr/B,KARF,MASEA,gBAACq/B,aAADr/B,WAAmBM,KAAAmD,MATrBkhB,WAUE3kB,gBAACq/B,aAADr/B,UAAkBM,KAAAmD,MAVpBmhB,UAWE5kB,EAAAsG,cAAC+4B,aAADG,OAAA,KACEx/B,EAAAsG,cAAAipB,EAAA,CAAYvG,GAAG,UAAUwG,KAAK,KAAK1G,KAAMxoB,KAAAmD,MAAWqlB,MACjDxoB,KAAAmD,MAdTuoC,mCAJSH,CAAuC7rC,aCWvCisC,eAIXzoC,WAAYC,eACVA,QACApD,MAAa,CACXqK,MAAOpK,KAAAmD,MAAW2nC,mBAEpBtX,aAAoBxzB,KAAAwzB,aAAAnwB,KAApBrD,gHAEKwzB,sBAAYhoB,EAAAu/B,OACX3gC,EAAQpK,KAAAmD,MAAA2nC,aAAAjiC,IAAA,SAA4B6sB,UACxCA,EAAAlqB,SAAqB,MAAAA,WAAQu/B,GAAarV,SAE5CvyB,MAAAquB,SAAApnB,EAA2BpK,KAAAmD,MAA3B2nC,2BAEK5mC,oCAEHxE,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACGzxB,KAAAD,MAAAqK,MAAA8K,OAAA,GACCxV,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,EAAAsG,cAAAkhC,GAAA,KACGlnC,KAAAD,MAAAqK,MAAAvB,IAAA,SAAqB6sB,EAAArT,GAAA,OACpB3iB,EAAAsG,cAAAmlC,GAAA,CACE9xB,IAAKgJ,EACL7W,KAAMkqB,EAAKlqB,KACXu/B,SAAUrV,EAAKqV,SACfvZ,SAAUxxB,EAAKwzB,mBAMxB,IAAAxzB,KAAAD,MAAAqK,MAAA8K,QACCxV,EAAAsG,cAAAulC,GAAA,CACE/iB,KAAMxoB,KAAAmD,MAAWyoC,eACjBvnB,UAAWrkB,KAAAmD,MAAW67B,oBACtB1a,SAAUtkB,KAAAmD,MAAW87B,mBACrByM,6BAA8B1rC,KAAAmD,MAAW0oC,+BAvCxCF,CAAiCjsC,aCPjCosC,8JACJ5nC,yBAEHxE,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,EAAAsG,cAAAmyB,EAAA,CACE9T,UAAWrkB,KAAAmD,MAAW4lC,cACtB3Q,gBAAiBp4B,KAAAmD,MAAW6lC,sBAE9BtpC,EAAAsG,cAAAglB,EAAA,CACEqB,eAAe,EACfJ,eAAgB,OAChB4U,iBAAkB7gC,KAAAmD,MAAW09B,iBAC7B1U,iBAAiB,EACjBN,iBAAkB7rB,KAAAmD,MAAW0oB,iBAC7BP,0BAA2BtrB,KAAAmD,MAAWmoB,0BACtC6B,sBAAuBntB,KAAAmD,MAAWgqB,sBAClCF,iBAAkBjtB,KAAAmD,MAAW8pB,iBAC7BtB,yBAA0B3rB,KAAAmD,MAAWwoB,yBACrCD,0BAA2B1rB,KAAAmD,MAAWuoB,0BACtC2U,gBAAiBrgC,KAAAmD,MAAWk9B,sBAnBzByL,CAAqBpsC,aCErBqsC,8JAGJ7nC,yBAEHxE,gCACEA,EAAAsG,cAAAipB,EAAA,CAAYzG,KAAMxoB,KAAAmD,MAAW6oC,YAAatjB,GAAI,WADhDhpB,QAIEA,EAAAsG,cAACi0B,EAADA,cAAA,CACE1xB,GAAE,eAAiBvI,KAAAmD,MAAWsG,6BAC9BywB,WAAW,GAEVl6B,KAAAmD,MAAA0I,QAAAhD,IAAA,SAAuB4F,EAAA2Z,GAAA,OACtB1oB,EAAAsG,cAAA,MAAIo0B,KAAM,eAAgB/gB,IAAK+O,GAC5B3Z,OACC/O,EAAAsG,cAACmpB,EAADA,KAAA,CACEC,GAAI3gB,EAAE+Z,KACN6G,QAAS5gB,EAAE4gB,QACX+K,KAAM,WACNC,SAAUjS,EAAM,GAEf3Z,EAPJA,OAUC/O,EAAAsG,cAAA,KACEwiB,KAAM,qBACN6G,QAAS5gB,EAAE4gB,QACX+K,KAAM,WACNC,SAAUjS,EAAM,GAEf3Z,EAjBPwhB,eAdC8b,CAA2BrsC,aCN3BusC,8JAGJ/nC,yBAEHxE,gCACEA,uBACEA,EAAAsG,cAAA,OAAK2iB,UAAU,cACbjpB,EAAAsG,cAACmpB,EAADA,KAAA,CAAMC,GAAIpvB,KAAAmD,MAAW+oC,oBAClBlsC,KAAAmD,MAFLgpC,sBAAA,QAKGnsC,KAAAmD,MALHipC,gBAAA,KAOE1sC,gBAAC2yB,EAAD3yB,YAASM,KAAAmD,MATfzD,kBAYGM,KAAAmD,MAAAgB,SACCzE,gBAACo/B,EAADp/B,cAAWM,KAAAmD,MADZgB,UAbL,SAJS8nC,CAAkCvsC,aCUlC2sC,8JAGJnoC,sBACC69B,EAAY,SAAIxhC,UACpBb,gBAACsiC,QAADtiC,iBAGI4sC,EAAU,SAAI/rC,UAAkBb,gBAACsiC,QAADtiC,qBAGpCA,EAAAsG,cAAC84B,WAADnJ,KAAA,CACEtc,IAAK,EACLxN,QACEnM,gCACGM,KAAAmD,MAAAopC,WAAA,EACC7sC,EAAAsG,cAAA,YACEtG,EAAAsG,cAAC0jB,EAADA,KAAA,CAAMjV,KAAK,KAAKjJ,KAAK,mBADvB,KAGGxL,KAAAmD,MAJJqpC,iBAOC9sC,EAAAsG,cAAA,YACEtG,EAAAsG,cAAC0jB,EAADA,KAAA,CAAMjV,KAAK,KAAKjJ,KAAK,OADvB,KAGGxL,KAAAmD,MAXPzD,eAgBF2+B,QAASr+B,KAAAmD,MAAWspC,KACpB97B,YAAa3Q,KAAAmD,MAAWupC,KACxBzO,eAAgB,CACdv+B,EAAAsG,cAACtG,EAAD+xB,SAAA,CAAgBpY,IAAK,qBAClBrZ,KAAAmD,MADHwpC,YAAA,KAGG3sC,KAAAmD,MAJWmG,WAQhB5J,gBAACmtB,EAADntB,SACGM,KAAAmD,MAAAyM,MACClQ,EAAAsG,cAAC8mB,EAADA,IAAA,CAAKiK,GAAI,IACPr3B,EAAAsG,cAACg8B,QAADQ,WAAA,CACEC,SAAS,EACTC,UAAU,EACVC,OAAO,EACPC,QAAS,CACP,CACEX,KAAM,CACJC,WAAY,CADRoK,GAEJjK,SAAU,QAEZhU,OAAQ,CACN6T,WAAY,CADNH,GAEN9R,MAAO,SAGX,CACEgS,KAAM,CACJC,WAAY,CADRoK,GAEJjK,SAAU,QAEZhU,OAAQ,CACN6T,WAAY,CADNH,GAEN9R,MAAO,SAGX,CACEgS,KAAM,CACJC,WAAY,CADRoK,GAEJjK,SAAU,YAEZhU,OAAQ,CACN6T,WAAY,CADNH,GAEN9R,MAAO,aAGX,CACEgS,KAAM,CACJC,WAAY,CADRoK,GAEJjK,SAAU,UAEZhU,OAAQ,CACN6T,WAAY,CADNH,GAEN9R,MAAO,WAGX,CACEgS,KAAM,CACJC,WAAY,CADRoK,GAEJjK,SAAU,UAEZhU,OAAQ,CACN6T,WAAY,CADNH,GAEN9R,MAAO,aAKbvwB,gBAACsiC,QAADtiC,OAzDF,MA0DGM,KAAAmD,MA5DNyM,QAgEClQ,EAAAsG,cAAC8mB,EAADA,IAAA,CAAKiK,GAAI,IACPr3B,4BAAOM,KAAAmD,MAhGjBypC,mBAVSP,CAAsC3sC,aCXtCmtC,8JAGJ3oC,yBAEHxE,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,EAAAsG,cAACg8B,QAAD/B,KAAA,CACEprB,KAAM,CACJ,CACEi4B,SAAU9sC,KAAAmD,MADZ2pC,SAEEC,OAAQ/sC,KAAAmD,MAFV4pC,OAGEC,OAAQhtC,KAAAmD,MAHV6pC,OAIErkC,KAAM3I,KAAAmD,MAJRqI,KAKEkhC,KAAM1sC,KAAAmD,MAAWupC,OAGrB7J,OAAQ7iC,KAAAmD,MAAWqI,WAhBhBqhC,CAA2CntC,aCF3CutC,8JAGJ/oC,yBAEHxE,EAAAsG,cAAA,WACEtG,EAAAsG,cAACyyB,EAADA,KAAA,KACGz4B,KAAAmD,MAAAwN,YACG3Q,KAAAmD,MADHwN,YAEG3Q,KAAAmD,MAHN+pC,kBAAA,OAKExtC,EAAAsG,cAAC0jB,EAADA,KAAA,CAAMle,KAAM,gBAXTyhC,CAAqCvtC,iBCDrCytC,8JAGJjpC,yBAEHxE,gCACGM,KAAAmD,MAAAqI,KACC9L,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,EAAAsG,cAACqyB,EAADA,MAAA,CAAOnJ,KAAK,MAAMlvB,KAAAmD,MAAlBqI,KADF,QAEE9L,EAAAsG,cAAC0jB,EAADA,KAAA,CAAMle,KAAM,YALpB,SAJS2hC,CAAsCztC,iBCMtC0tC,8JAGJlpC,yBAEHxE,EAAAsG,cAACymB,EAADA,KAAA,CACEC,OAAO,EACPrT,IAAK,EACLsP,UAAU,wCAET3oB,KAAAmD,MAAAqJ,QACC9M,EAAAsG,cAACymB,OAADI,IAAA,CAAUlE,UAAU,aAClBjpB,EAAAsG,cAACymB,OAADK,IAAA,CACEI,GAAI,EACJkP,GAAI,EACJzT,UAAU,qDAET3oB,KAAAmD,MALHkqC,cADF,KAQE3tC,EAAAsG,cAACymB,OAADK,IAAA,CAAUI,GAAI,GAAIkP,GAAI,IACpB18B,EAAAsG,cAAC43B,EAADA,aAAA,CACEvkB,IAAK,EACLglB,QAASr+B,KAAAmD,MAAWkqC,cACpBxhC,QACEnM,gCACEA,gBAAC2yB,EAAD3yB,YAASM,KAAAmD,MADXzD,oBAEEA,gBAAC2yB,EAAD3yB,YAASM,KAAAmD,MAFXzD,kBAKFg/B,SAAS,MAxBnB,KA8BG1+B,KAAAmD,MAAAgB,WAAA,IAAuBnE,KAAAmD,MAAAmqC,WACtB5tC,EAAAsG,cAACymB,OAADI,IAAA,CAAUlE,UAAU,aAClBjpB,EAAAsG,cAACymB,OAADK,IAAA,CACEI,GAAI,EACJkP,GAAI,EACJzT,UAAU,qDAETjpB,4BAAOM,KAAAmD,MAAPzD,gBANL,MAQEA,EAAAsG,cAACymB,OAADK,IAAA,CAAUI,GAAI,GAAIkP,GAAI,IACnBp8B,KAAAmD,MAAAgB,SACCzE,gBAACo/B,EAADp/B,cAAWM,KAAAmD,MADZgB,UAVN,OA/BL,SAJSipC,CAAyC1tC,aCYzC6tC,8JAGJrpC,yBAEHxE,EAAAsG,cAAC43B,EAADA,aAAA,CACE/xB,QAAS7L,KAAAmD,MAAW0I,QACpBwyB,QACE3+B,4BACGA,4BAAOM,KAAAmD,MAAPzD,gBADHA,SACgDM,KAAAmD,MADhDzD,SAIFu+B,eAAgB,CACdv+B,EAAAsG,cAACk4B,EAADA,iBAAA,CAAkB7kB,IAAK,GACpBrZ,KAAAmD,MADHqqC,sBAEGxtC,KAAAmD,MAHWsqC,YAMhBjP,YAEE9+B,gBAACo/B,WAADp/B,MACE+U,KAAK,KACLjJ,KAAK,KACL0jB,KAAK,KACLvG,UAAU,8BAGd+V,SAAS,OA3BJ6O,CAA6C7tC,aCf7CguC,8JAGJxpC,yBAEHxE,EAAAsG,cAAA,OAAK2iB,UAAU,2BACbjpB,EAAAsG,cAAAmnC,GAAA,CAA+B3hC,KAAMxL,KAAAmD,MAAWqI,OAC/CxL,KAAAmD,MAAAmG,QACC5J,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,EAAAsG,cAAA,QAAM2iB,UAAU,qBADlB,yBAE2B3oB,KAAAmD,MAH5BmG,SAHL,cAJSokC,CAA8BhuC,iBCU9BiuC,8JAGJzpC,sBAEC0pC,EADc,IAAAxgC,KAASpN,KAAAmD,MAA7B0qC,aACAC,wBAGEpuC,gBAACw8B,EAADx8B,cACEA,EAAAsG,cAAC6mB,EAADA,IAAA,CAAKjP,MAAO,CAAEmwB,aAAF,OAAwBtJ,UAAW,SAC7C/kC,EAAAsG,cAAC8mB,EAADA,IAAA,CAAKI,GAAI,EAAG6J,GAAI,EAAGqF,GAAI,GACrB18B,EAAAsG,cAAC+zB,EAADA,KAAA,CAAM+J,UAAU,EAAMC,YAAY,EAAM/J,aAAa,GACnDt6B,EAAAsG,cAACg3B,EAADA,UAAA,KACEt9B,EAAAsG,cAAC0jB,EAADA,KAAA,CAAMjV,KAAK,KAAKjJ,KAAK,mBACpBxL,KAAAmD,MAHL6qC,oBAKEtuC,gBAACi9B,EAADj9B,cAPN,kBAUEA,EAAAsG,cAAC8mB,EAADA,IAAA,CAAKI,GAAI,EAAG6J,GAAI,EAAGqF,GAAI,GACrB18B,EAAAsG,cAAC+zB,EAADA,KAAA,CAAM+J,UAAU,EAAMC,YAAY,EAAM/J,aAAa,GACnDt6B,EAAAsG,cAACg3B,EAADA,UAAA,KACEt9B,EAAAsG,cAAC0jB,EAADA,KAAA,CAAMle,KAAK,WAFf,kBAKE9L,gBAACi9B,EAADj9B,cACEA,0BAjBR,UAqBEA,EAAAsG,cAAC8mB,EAADA,IAAA,CAAKI,GAAI,EAAG6J,GAAI,EAAGqF,GAAI,GACrB18B,EAAAsG,cAAC+zB,EAADA,KAAA,CAAM+J,UAAU,EAAMC,YAAY,EAAM/J,aAAa,GACnDt6B,gBAACs9B,EAADt9B,eACEA,gBAACskC,EAADtkC,0BACGM,KAAAmD,MADHzD,cADFA,QADF,kBAOEA,EAAAsG,cAAC22B,EAADA,SAAA,KACEj9B,EAAAsG,cAACi+B,EAADA,6BAAA,KACEvkC,EAAAsG,cAACk+B,EAADA,4BAAA,KACExkC,EAAAsG,cAAC0jB,EAADA,KAAA,CAAMjV,KAAK,KAAKjJ,KAAK,OACpBxL,KAAAmD,MAFH8qC,gBADF,QAKEvuC,EAAAsG,cAACk+B,EAADA,4BAAA,KACExkC,EAAAsG,cAAC0jB,EAADA,KAAA,CAAMjV,KAAK,KAAKjJ,KAAK,mBACpBxL,KAAAmD,MArCb6qC,wBA2CEtuC,EAAAsG,cAAC8mB,EAADA,IAAA,CAAKI,GAAI,EAAG6J,GAAI,EAAGqF,GAAI,GACrB18B,EAAAsG,cAAC+zB,EAADA,KAAA,CAAM+J,UAAU,EAAMC,YAAY,EAAM/J,aAAa,GACnDt6B,EAAAsG,cAAC+zB,OAAD1B,MAAA,CAAY1P,UAAW,aACrBjpB,EAAAsG,cAAA,SAAO2iB,UAAW,cAAlB,SADFilB,GAEEluC,2BAHJ,WAKEA,gBAACq6B,OAADr6B,UACEA,2BApDZ,cAPSiuC,CAAiCjuC,aCZjCwuC,8JAGJhqC,yBAEHxE,EAAAsG,cAAC84B,WAADnJ,KAAA,CACE9pB,QAAS7L,KAAAmD,MAAW0I,QACpBwyB,QAASr+B,KAAAmD,MAAWgrC,gBACpBx9B,YAAa3Q,KAAAmD,MAAWirC,uBACxB1P,SAAS,OATJwP,CAAyCxuC,aCazC2uC,8JAGJnqC,yBAEHxE,gCACEA,EAAAsG,cAAA8kB,EAAA,CAAWnC,UAAU,cACnBjpB,EAAAsG,cAACqyB,EAADA,MAAA,CAAOnJ,KAAK,MAAMlvB,KAAAmD,MAAlBkhB,UADF,oBAEE3kB,gBAAC+4B,EAAD/4B,UAAOM,KAAAmD,MAHXzD,eAKEA,uBACEA,gBAACo/B,EAADp/B,cAAWM,KAAAmD,MAPjBgB,eAJSkqC,CAAsC3uC,aCCtC4uC,8JAGJpqC,yBAEHxE,gCACEA,EAAAsG,cAAA8kB,EAAA,CAAWnC,UAAU,cACnBjpB,EAAAsG,cAACqyB,EAADA,MAAA,CAAOnJ,KAAK,MAAMlvB,KAAAmD,MADpBkhB,WAEE3kB,gBAAC+4B,EAAD/4B,UAAOM,KAAAmD,MAHXzD,eAKEA,uBACEA,gBAACo/B,EAADp/B,cAAWM,KAAAmD,MAPjBgB,eAJSmqC,CAA0C5uC,aCb1C6uC,8JAGJrqC,yBAEHxE,EAAAsG,cAAC84B,WAADnJ,KAAA,CACE9pB,QAAS7L,KAAAmD,MAAW0I,QACpBwyB,QAASr+B,KAAAmD,MAAWgrC,gBACpBx9B,YAAa3Q,KAAAmD,MAAWirC,uBACxB5P,YAAax+B,KAAAmD,MAAWyL,KACxB8vB,SAAS,OAVJ6P,CAA6C7uC,aCqB7C8uC,8JAGJtqC,yBAEHxE,gCACEA,EAAAsG,cAAA8kB,EAAA,CAAWnC,UAAU,cACnBjpB,EAAAsG,cAACqyB,EAADA,MAAA,CAAOnJ,KAAK,MAAMlvB,KAAAmD,MAAlBkhB,UADF,oBAEE3kB,gBAAC+4B,EAAD/4B,UAAOM,KAAAmD,MAHXzD,eAKEA,EAAAsG,cAAA8kB,EAAA,KACEprB,EAAAsG,cAAA,QACE2iB,UAAU,8BACVyR,KAAK,OACLQ,SAAU56B,KAAAmD,MAAW03B,cAErBn7B,EAAAsG,cAAA,OAAK2iB,UAAU,oBACbjpB,EAAAsG,cAAA,OAAK2iB,UAAU,WACZ3oB,KAAAmD,MAAAq5B,eACC98B,EAAAsG,cAAA,OAAK2iB,UAAU,iBACZ3oB,KAAAmD,MAHPq5B,eAME98B,EAAAsG,cAAA,OAAK2iB,UAAU,gBACbjpB,uBAAYM,KAAAmD,MApB1BgB,mBAJSqqC,CAA8B9uC,aCN9B+uC,8JAGJvqC,yBAEHxE,uBACEA,EAAAsG,cAACqyB,EAADA,MAAA,CAAOnJ,KAAK,MAAMlvB,KAAAmD,MAAlBkhB,UADF3kB,oBAEEA,gBAAC+4B,EAAD/4B,UAAOM,KAAAmD,MAFTzD,cAGEA,EAAAsG,cAAA8kB,EAAA,KACEprB,EAAAsG,cAAA,OAAK2iB,UAAU,oBACbjpB,EAAAsG,cAAA,OAAK2iB,UAAU,WACbjpB,EAAAsG,cAAA,OAAK2iB,UAAU,gBACbjpB,uBACEA,EAAAsG,cAACyyB,EAADA,KAAA,CAAM9P,UAAU,oBACdjpB,EAAAsG,cAAA,QAAM2iB,UAAU,uBACf3oB,KAAAmD,MAXjBurC,oBAJSD,CAA4C/uC,aCtB5CivC,8JACJzqC,yBAEHxE,EAAAsG,cAAC84B,EAADA,SAAA,CAAUlhB,MAAO,CAAE4tB,WAAY,gBAC5BxrC,KAAAmD,MAFLgB,aAFSwqC,CAAmCjvC,aCOnCkvC,8JAGJ1qC,yBAEHxE,EAAAsG,cAAC84B,WAADnJ,KAAA,CACE9pB,QAAS7L,KAAAmD,MAAW0I,QACpBwyB,QAASr+B,KAAAmD,MAAWklB,SACpB1X,YAAa3Q,KAAAmD,MAAWmlB,gBACxBkW,YAAax+B,KAAAmD,MAAWyL,KACxB8vB,SAAS,EACTH,eAAe,OAXVqQ,CAAuClvC,aCKvCmvC,eAcX3rC,WAAYC,eACVA,QAPKpD,MAAQ,CACb+uC,aAAa,QAGRC,aAAervC,EAAfsvC,iBAILF,YAAmB9uC,KAAA8uC,YAAAzrC,KAAnBrD,WACAivC,YAAmBjvC,KAAAivC,YAAA5rC,KAAnBrD,WACAkvC,cAAqBlvC,KAAAkvC,cAAA7rC,KAArBrD,gHAGK8uC,4BACLzqC,SAAc,CACZyqC,aAAa,iBAIVG,4BACL5qC,SAAc,CACZyqC,aAAa,iBAIVI,8BACL7qC,SAAc,CACZyqC,aAAc9uC,KAAAD,MAAW+uC,2BAItB5qC,yBAEHxE,EAAAsG,cAAA,OACE2iB,UAAW,4BACXwmB,aAAcnvC,KAAK8uC,YACnBM,aAAcpvC,KAAKivC,YACnBI,aAAcrvC,KAAKkvC,eAElBlvC,KAAAmD,MAAA2lB,aACCppB,EAAAsG,cAAA,OACE2iB,UAAW,yCACXzmB,IAAKlC,KAAK+uC,cAEVrvC,EAAAsG,cAACmpB,EAADA,KAAA,CAAMC,GAAIpvB,KAAAmD,MAAW2lB,aACnBppB,EAAAsG,cAAA,OAAK2iB,UAAW,mCACdjpB,EAAAsG,cAAA,KACE2iB,UAAU,oBACV9C,MAAO7lB,KAAAmD,MAAW4lB,iBAM3B/oB,KAAAmD,MAAA0lB,aAA0B7oB,KAAAmD,MAtB/BgB,aAxCS0qC,CAA+BnvC,aAI5BmvC,gBAAe,CAC3BjmB,QAAQ,OCMC0mB,8JAOJprC,sBACC4hC,EACJpmC,EAAAsG,cAACq3B,EAADA,QAAA,CAAS90B,GAAI,yBAA0BvI,KAAAmD,MADzCosC,aAGM3gC,EACJlP,EAAAsG,cAAA,OAAK2iB,UAAW,+BAAgC3oB,KAAAmD,MADlDyL,aAIElP,EAAAsG,cAAA,OACE2iB,UAAWoC,EAAU,wBAA0B,aAChC/qB,KAAAmD,MADgCylB,qBAE9B5oB,KAAAmD,MAAW0lB,eAG3B7oB,KAAAmD,MAAA0lB,YACCnpB,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,EAAAsG,cAAA,OAAK2iB,UAAW,sCADlB/Z,GAEG5O,KAAAmD,MAHJgB,UAMCzE,EAAAsG,cAAA,OAAK2iB,UAAW,sCACdjpB,EAAAsG,cAAC63B,EAADA,eAAA,CACEC,QAASgI,EACT/H,UAAU,QACVyR,QAAS,kBACTC,WAAW,GAlBrB7gC,QAdS0gC,CAA4B5vC,aAGzB4vC,gBAAe,CAC3B1mB,QAAQ,GC1BZ7nB,IAAMs3B,GAAK,SAA4Bn2B,2BACrCxC,EAAAsG,cAAA,OAAK2iB,UAAW,wCAAhBxkB,IAGIurC,GAAkB,SAA4BxtC,2BAClDxC,EAAAsG,cAAA,OAAK2iB,UAAW,uCAAhBxkB,IAYIwrC,GAAY,SAAgDztC,WAEhEsJ,kBACAokC,SACAxnC,oBACAynC,WACAC,sCAEApwC,EAAAsG,cAAA,OAAK2iB,UAAW,uCACdjpB,EAAAsG,cAAA,MAAI2iB,UAAW,2CACbjpB,0BADFqwC,GAEErwC,0BAHJ8L,IAKE9L,EAAAsG,cAAA,MAAI2iB,UAAW,2CACbjpB,0BADFkwC,GAEElwC,0BAPJ0I,IASE1I,EAAAsG,cAAA,MAAI2iB,UAAW,2CACbjpB,0BADFmwC,GAEEnwC,0BAXJowC,MA+BWE,8JAOJ9rC,yBAEHxE,EAAAsG,cAAA,OACE2iB,UAAWoC,EAAU,gCAAkC,aACxC/qB,KAAAmD,MAAWylB,UAGzB5oB,KAAAmD,MAAAgB,SAAoB,oBAAAurC,gBAAAC,SAGnBtX,SAjBG2X,CAAmCtwC,aAGhCswC,gBAAe,CAC3BpnB,QAAQ,GC/BZ,ICxBaqnB,GAAe,SAExB/tC,WAAwBguC,oDAC1BxwC,EAAAsG,cAAA,OAAK2iB,UAAW,oBACdjpB,EAAAsG,cAAA,OAAKuiB,IAAK4nB,EAAqBxnB,UAAW,2BAC1CjpB,EAAAsG,cAAA,KAAG2iB,UAAU,gDACbjpB,EAAAsG,cAAA,OAAKuiB,IAAK2nB,EAAsBvnB,UAAW,6BCElCynB,8JAGJlsC,sBACCmsC,ECjBHtvC,UDkBDf,KAAAmD,MAAAmtC,aAAA,SCrBCvvC,cDuBGf,KAAAmD,MAAAmtC,cCrBHvvC,YDsBGf,KAAAmD,MAAAmtC,aADA,UAHN,UAOIrgB,ECzBDlvB,iBD0BKf,KAAAmD,MAARmtC,kBC5BGvvC,YD8BCkvB,EAAQjwB,KAAAmD,MAAR8sB,wBC7BDlvB,cDgCCkvB,EAAQjwB,KAAAmD,MAAR8sB,0BC9BDlvB,QDiCCkvB,EAAQjwB,KAAAmD,MAAR8sB,iBAGGvwB,EAAAsG,cAACuqC,EAADA,MAAA,CAAO97B,KAAM47B,GAApBpgB,MAvBSmgB,CAA0B1wC,aEE1B8wC,8JAGJtsC,sBACDusC,EAAezwC,KAAAmD,MAAnButC,2BACQ1wC,KAAAmD,MAARqG,iBDvBGzI,YCyBC0vC,EAAezwC,KAAAmD,MAAfstC,+BDxBD1vC,cC2BC0vC,EAAezwC,KAAAmD,MAAfstC,4BAIF/wC,EAAAsG,cAAA,qBACc,4BACZ2iB,UAAW,6BAEV3oB,KAAAmD,MAAA5C,OAAoBP,KAAAmD,MAApBw1B,aAA8C34B,KAAAmD,MAA9Cy1B,WACCl5B,EAAAsG,cAAA0yB,EAAA,CACEC,YAAa34B,KAAAmD,MAAWw1B,YACxBC,WAAY54B,KAAAmD,MAAWy1B,WACvBr4B,MAAOP,KAAAmD,MAAW5C,MAClBs4B,OAAQ74B,KAAAmD,MAAW01B,OACnBC,eAAgB94B,KAAAmD,MAAW21B,iBAG7Bp5B,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,EAAAsG,cAACwpB,EAADA,QAAA,CAAS9rB,SAAS,EAAM6rB,QAAQ,IAfxCkhB,OAbSD,CAAgC9wC,aCFhCixC,8JAGJzsC,yBAEHxE,EAAAsG,cAAA,OAAK2iB,UAAU,sCACZ,IAAA3oB,KAAAmD,MAAAytC,QACClxC,EAAAsG,cAACymB,OAADK,IAAA,CACEiK,GAAI,EACJqF,GAAI,EACJzT,UAAU,4CAEVjpB,EAAAsG,cAAC0jB,EAADA,KAAA,CAAMle,KAAM,cAAemd,UAAU,gBAP3C,KAUEjpB,EAAAsG,cAACymB,OAADK,IAAA,CACEiK,GAAI,EACJqF,GAAI,EACJzT,UAAU,2CAEVjpB,EAAAsG,cAAC6qC,EAADA,aAAA,CAAcrlC,KAAM,OAAQmd,UAAU,cACtCjpB,yBAAIM,KAAAmD,MAjBVqI,WAJSmlC,CAAuCjxC,aCdvCoxC,8JACJ5sC,yBAEHxE,EAAAsG,cAACymB,EAADA,KAAA,CAAMC,OAAO,EAAMQ,GAAI,GACrBxtB,EAAAsG,cAACymB,OAADI,IAAA,CAAUlE,UAAU,aAAa3oB,KAAAmD,MAFrCgB,cAFS2sC,CAAuCpxC,aCsBvCqxC,eAYX7tC,WAAYC,eACVA,QALKpD,MAAQ,CACbixC,SAAiE,MAAvDC,yDAKVC,eAAsBlxC,KAAAkxC,eAAA7tC,KAAtBrD,gHAGKkxC,8BACCF,GAAYhxC,KAAAD,MAAlBixC,SACAC,kDAAmDD,EAAQ,IAA3DC,UACA5sC,SAAc,UACZ2sC,iBAIG9sC,yBAEHxE,EAAAsG,cAAA,OACE2iB,UAAWoC,EAAU,4BAA8B,eAClC/qB,KAAAD,MAAWixC,YAG5BtxC,EAAAsG,cAAA,OAAK2iB,UAAU,mCACZ3oB,KAAAmD,MAAAgB,SAAoBnE,KANzBD,QAQEL,EAAAsG,cAAA,OAAK2iB,UAAU,qCACbjpB,EAAAsG,cAAAipB,EAAA,CAAYI,QAASrvB,KAAKkxC,sBApCvBH,CAAgCrxC,aAI7BqxC,gBAAe,CAC3B7kB,UAAU,OC3BDilB,8JACJjtC,yBACExE,gBAACo/B,EAADp/B,cAAWM,KAAAmD,MAAlBgB,aAFSgtC,CAAyBzxC,aC0BzB0xC,8JAGJltC,yBAEHxE,EAAAsG,cAAC84B,WAADnJ,KAAA,CACE9pB,QAAS7L,KAAAmD,MAAW0I,QACpBwyB,QAASr+B,KAAAmD,MAAWgrC,gBACpBx9B,YACE3Q,KAAAmD,MAAAkuC,wBACE3xC,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,EAAAsG,cAAC0jB,EAADA,KAAA,CAAMjV,KAAM,KAAMjJ,KAAM,uBACvBxL,KAAAmD,MAHLmuC,2BAME,GAGJrT,eAAgB,CACdv+B,EAAAsG,cAAC84B,WAADyS,SAAA,CAAmBl4B,IAAK,GACrB,YAAArZ,KAAAmD,MAAAmtC,aACC5wC,EAAAsG,cAAAwqC,GAAA,CACEhnC,YAAaxJ,KAAAmD,MAAWqG,YACxBjJ,MAAOP,KAAAmD,MAAWquC,gBAClB7Y,YAAa34B,KAAAmD,MAAWsuC,sBACxB7Y,WAAY54B,KAAAmD,MAAWuuC,qBACvB7Y,OAAQ74B,KAAAmD,MAAWwuC,iBACnBjB,oBAAqB1wC,KAAAmD,MAAWutC,oBAChCkB,qBAAsB5xC,KAAAmD,MAAWyuC,qBACjCC,qBAAsB7xC,KAAAmD,MAAW0uC,qBACjC/Y,eAAgB94B,KAAAmD,MAAW21B,iBAG7Bp5B,EAAAsG,cAAAoqC,GAAA,CACEE,aAActwC,KAAAmD,MAAWmtC,aACzBwB,cAAe9xC,KAAAmD,MAAW2uC,cAC1BC,gBAAiB/xC,KAAAmD,MAAW4uC,gBAC5BC,UAAWhyC,KAAAmD,MAAW6uC,cAK9BxT,YACE9+B,EAAAsG,cAAAiqC,GAAA,CACEE,oBAAqBnwC,KAAAmD,MAAWgtC,oBAChCD,qBAAsBlwC,KAAAmD,MAAW+sC,uBAGrCxR,SAAS,OAhDJ0S,CAA6B1xC,aC1B1C,SAAAuyC,GAAAxH,EAAAzR,UACS0R,eAAiB1R,EAAjB0R,GAAPD,EAGF1pC,ICDYmxC,GDCNlI,GAAY,kBAChBtqC,EAAAsG,cAAAikC,EAAA,CACEnsB,OAAQ,GACRD,MAAO,IACPqsB,MAAO,EACPC,aAAa,UACbC,eAAe,UACfxsB,MAAO,CACLE,OADK,GAELD,MAAO,SAGTne,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B3yC,EAAAsG,cAAA,UAAQmsC,GAAG,MAAMC,GAAG,KAAKC,EAAE,OAC3B3yC,EAAAsG,cAAA,QACEqkC,EAAE,MACFC,EAAE,KACFC,GAAG,IACHC,GAAG,IACH3sB,MAAO,IAAMy0B,GAAS,MACtBx0B,OAAO,OAETpe,EAAAsG,cAAA,QACEqkC,EAAE,MACFC,EAAE,KACFC,GAAG,IACHC,GAAG,IACH3sB,MAAO,IAAMy0B,GAAS,MACtBx0B,OAAO,SAKAy0B,8JACJruC,yBAEHxE,gCACEA,EAAAsG,cAAA,OACE2iB,UAAW,gCACC,6BAEZjpB,2BACEA,mBANNA,QASEA,EAAAsG,cAAA,OACE2iB,UAAW,gCACC,6BAEZjpB,2BACEA,mBAdNA,QAiBEA,EAAAsG,cAAA,OACE2iB,UAAW,gCACC,6BAEZjpB,2BACEA,mBAvBR,YAFS6yC,CAAiC7yC,iBE1BjC8yC,8JAGJtuC,yBAEHxE,gCACEA,EAAAsG,cAAA4tB,EAAA/wB,OAAAC,OAAA,GAAqB9C,KAArBmD,OACEzD,EAAAsG,cAAA,OAAK2iB,UAAU,cACbjpB,EAAAsG,cAAAipB,EAAA,CAAYzG,KAAMxoB,KAAAmD,MAAWsvC,kBAC1BzyC,KAAAmD,MAFLuvC,gBAIEhzC,EAAAsG,cAAAipB,EAAA,CAAYzG,KAAMxoB,KAAAmD,MAAWwvC,yBAC1B3yC,KAAAmD,MALLu+B,YAOEhiC,EAAAsG,cAAAipB,EAAA,CACEzG,KAAMxoB,KAAAmD,MAAWohC,0BACjB7b,GAAI,WAEH1oB,KAAAmD,MAbTzD,4BAiBEA,uBAAYM,KAAAmD,MAlBhBgB,cAJSquC,CAA6B9yC,aCF7BkzC,8JAGJ1uC,yBAEHxE,EAAAsG,cAAC+zB,EAADA,KAAA,CAAM+J,UAAU,EAAOnb,UAAW,uBAChCjpB,gBAACq6B,OAADr6B,aACEA,EAAAsG,cAAC+zB,OAAD8Y,eAAA,CACEtqC,GAAG,sBACHsd,MAAO7lB,KAAAmD,MAAW2vC,gBAElBpzC,EAAAsG,cAAC+sC,EAADA,SAAA,CAAUC,SAAS,IAAIpqB,QAAQ,GAC5B5oB,KAAAmD,MALL2vC,gBAOEpzC,EAAAsG,cAAC+sC,EAADA,SAAA,CAAUC,SAAS,KAAKhzC,KAAAmD,MAP1B8vC,gBAQEvzC,EAAAsG,cAAC+sC,EAADA,SAAA,CAAUC,SAAS,KAAKhzC,KAAAmD,MAT5BzD,iBAWEA,gBAACq6B,OAADr6B,WAAaM,KAAAmD,MAZjBkhB,YAcE3kB,gBAACq6B,OAADr6B,UAAYM,KAAAmD,MAfhBgB,cAJSyuC,CAA4BlzC,aCJ5BwzC,8JACJhvC,sBAEC0pC,EADc,IAAAxgC,KAASpN,KAAAmD,MAA7BqK,OACAsgC,wBAEEpuC,EAAAsG,cAAC+zB,EAADA,KAAA,CAAM+J,UAAU,EAAMC,YAAY,EAAM/J,aAAa,GACnDt6B,EAAAsG,cAAC+zB,OAAD1B,MAAA,CAAY1P,UAAW,aACrBjpB,EAAAsG,cAAA,SAAO2iB,UAAW,cAAlB,SADFilB,GAEEluC,2BAAMM,KAAAmD,MAHVkhB,YAKE3kB,gBAACq6B,OAADr6B,UANJ,YAJSwzC,CAAqBxzC,iBC2BrByzC,eAIXjwC,WAAmBC,0BACjBA,QA8FMiwC,WAAA,WACFpzC,QAAJmX,YACEhU,MAAAguB,OAAkBnxB,QAAlBmX,gBA/FFpX,MAAa,CACXs5B,kBAAkB,QAEpBga,aAAoBrzC,KAAAqzC,aAAAhwC,KAApBrD,WACAk9B,aAAoBl9B,KAAAk9B,aAAA75B,KAApBrD,WACAq5B,iBAAwBr5B,KAAAq5B,iBAAAh2B,KAAxBrD,gHAGKkE,yBAEHxE,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,EAAAsG,cAAAqjB,EAAA,CACEa,YAAad,0BAAwBsQ,OACrCnP,qBAAsBvqB,KAAAmD,MAAWs8B,eACjCzV,sBAAuBhqB,KAAAmD,MAAWo6B,WAClCnT,wBAAyBpqB,KAAAmD,MAAW02B,uBACpCxV,UAAWrkB,KAAAmD,MAAW22B,qBACtBlrB,KAAMua,uBAAqBuQ,OAC3B/O,WAAY3qB,KAAAD,MAAWs5B,iBACvBzP,SAAU5pB,KAAKqzC,aACfvpB,UAAW9pB,KAAKk9B,eAElBx9B,EAAAsG,cAAC43B,EAADA,aAAA,CACE/xB,QACEnM,EAAAsG,cAAA,OAAK2iB,UAAU,cACbjpB,EAAAsG,cAAC63B,EAADA,eAAA,CAAgBC,QAAS99B,KAAAszC,iBAAuBvV,UAAU,OACxDr+B,EAAAsG,cAACqsB,EAADA,OAAA,CAAQ2I,QAAQ,UAAU3L,QAASrvB,KAAKozC,YACrCpzC,KAAAmD,MAHPowC,WAME7zC,EAAAsG,cAACi0B,EAADA,cAAA,CACE1xB,GAAE,QAAUvI,KAAAmD,MAAWgU,wBACvB+iB,WAAW,GAEXx6B,EAAAsG,cAAC63B,EAADA,eAAA,CACEC,QAAS99B,KAAAo9B,mBACTW,UAAU,QAEVr+B,EAAAsG,cAAC+sC,EAADA,SAAA,CAAU1jB,QAASrvB,KAAKq5B,kBACrBr5B,KAAAmD,MAfTo6B,eAqBFc,QAASr+B,KAAAmD,MAAWgU,SACpBxG,YACE3Q,KAAAmD,MAAAqwC,gBAA6BxzC,KAAAmD,MAA7BqwC,gBAA0D,GAE5DjV,eAAe,EACfC,YACEx+B,KAAAmD,MAAAswC,SACE/zC,EAAAsG,cAAA,OAAK2iB,UAAU,uBACbjpB,EAAAsG,cAAA,OACEuiB,IAAKvoB,KAAAmD,MAAWswC,SAChB/Y,IAAK16B,KAAAmD,MAAWgU,SAChB0G,MAAO,MAIXne,EAAAsG,cAAC6qC,EAADA,aAAA,CAAcrlC,KAAM,SAGxBkzB,SAAS,kBAMTtB,mCAEJ19B,EAAAsG,cAACq3B,EAADA,QAAA,CAAS90B,GAAG,aACTvI,KAAAmD,MAAAm6B,cACGt9B,KAAAmD,MADHm6B,cAEGt9B,KAAAmD,MAJRo6B,yBASM+V,iCAEJ5zC,EAAAsG,cAACq3B,EAADA,QAAA,CAAS90B,GAAG,WACTvI,KAAAmD,MAAAuwC,YAAyB1zC,KAAAmD,MAAzBuwC,YAAkD1zC,KAAAmD,MAFvDowC,uBAOMF,6BACNhvC,SAAc,CACZg1B,kBAAkB,iBAUdA,iCACNh1B,SAAc,CACZg1B,kBAAkB,iBAId6D,6BACN74B,SAAc,CACZg1B,kBAAkB,IAIhBr5B,KAAAmD,MAAJgU,eACEhU,MAAAs2B,SAAoBz5B,KAAAmD,MAApBgU,aAtHOg8B,CAAqBzzC,aCPrBi0C,eACXzwC,WAAmBC,eACjBA,6GAGKe,yBAEHxE,gCACEA,EAAAsG,cAAA4tB,EAAA/wB,OAAAC,OAAA,GAAqB9C,KAArBmD,OACEzD,EAAAsG,cAAA,OAAK2iB,UAAU,cACbjpB,EAAAsG,cAAC63B,EAADA,eAAA,CACEC,QAAS99B,KAAA4zC,wBACT7V,UAAU,OAEVr+B,EAAAsG,cAAAipB,EAAA,CAAYzG,KAAMxoB,KAAAmD,MAAW0wC,oBAAqBnrB,GAAI,WACnD1oB,KAAAmD,MANP2wC,kBASEp0C,EAAAsG,cAAC63B,EAADA,eAAA,CACEC,QAAS99B,KAAA+zC,uBACThW,UAAU,OAEVr+B,EAAAsG,cAAAipB,EAAA,CAAYzG,KAAMxoB,KAAAmD,MAAW6wC,mBAAoBtrB,GAAI,WAClD1oB,KAAAmD,MAhBXzD,mBAqBGM,KAAAmD,MAAA8wC,YACCv0C,gBAACo/B,EAADp/B,cAAWM,KAAAmD,MADZgB,UAGCzE,EAAAsG,cAAC+4B,EAADA,WAAA,KACEr/B,gBAACq/B,aAADr/B,KADF,MAEEA,gBAACq/B,aAADr/B,WACGM,KAAAmD,MAHL67B,qBAKEt/B,gBAACq/B,aAADr/B,UAAkBM,KAAAmD,MALpB87B,oBAMEv/B,EAAAsG,cAAC+4B,aAADG,OAAA,KACEx/B,EAAAsG,cAAC63B,EAADA,eAAA,CACEC,QAAS99B,KAAA4zC,wBACT7V,UAAU,OAEVr+B,EAAAsG,cAAAipB,EAAA,CACEzG,KAAMxoB,KAAAmD,MAAW0wC,oBACjBnrB,GAAI,UACJC,UAAW,gCAEV3oB,KAAAmD,MAVP2wC,kBAaEp0C,EAAAsG,cAAC63B,EAADA,eAAA,CACEC,QAAS99B,KAAA+zC,uBACThW,UAAU,OAEVr+B,EAAAsG,cAAAipB,EAAA,CAAYzG,KAAMxoB,KAAAmD,MAAW6wC,mBAAoBtrB,GAAI,WAClD1oB,KAAAmD,MAjDf+wC,iCA2DMH,uCAEJr0C,EAAAsG,cAACq3B,EAADA,QAAA,CAAS90B,GAAG,aACTvI,KAAAmD,MAAAgxC,kBACGn0C,KAAAmD,MADHgxC,kBAEGn0C,KAAAmD,MAJR+wC,6BASMN,wCAEJl0C,EAAAsG,cAACq3B,EAADA,QAAA,CAAS90B,GAAG,kBACTvI,KAAAmD,MAAAixC,mBACGp0C,KAAAmD,MADHixC,mBAEGp0C,KAAAmD,MAJR2wC,oBA5ESH,CAAiBj0C,cLtBlBwyC,2CAAZ,KACEA,gBACAA,uBAeF,IAAamC,eAIXnxC,WAAmBC,0BACjBA,QAOKmxC,eAAA,SAAkBC,mBAAsBxqC,GAEzC/J,mBAAwBkyC,mBAA5BsC,WACEnwC,SAAc,CACZowC,YAAaz0C,QAAWy0C,eAE1BtxC,MAAAuxC,mBAAAH,GAAyCv0C,QAAzCy0C,oBAZF10C,MAAa,CACX00C,WAAYtxC,EAAM4nC,eAEpBuJ,eAAsBt0C,KAAAs0C,eAAAjxC,KAAtBrD,gHAaKkE,yBAEHxE,EAAAsG,cAAA,OACE2iB,UAAW,qBACX0G,QAASrvB,KAAAs0C,eAAoBt0C,KAAAmD,MAApBqI,OAET9L,EAAAsG,cAAC+zB,EAADA,KAAA,CAAMC,aAAa,EAAM8J,SAAU9jC,KAAAD,MAAW00C,YAC5C/0C,gBAACq6B,OAADr6B,UACEA,EAAAsG,cAAA,OAAK2iB,UAAU,8BACbjpB,EAAAsG,cAACuqC,EAADA,MAAA,CACE97B,KACEzU,KAAAmD,MAAAwxC,WAAwBzC,mBAAxBsC,OAAA,UAEI,UAGLx0C,KAAAmD,MATPzD,WAYEA,EAAAsG,cAAA,OAAK2iB,UAAW,+BACdjpB,EAAAsG,cAAA,OAAK2iB,UAAU,4BACbjpB,EAAAsG,cAAA,OAAKuiB,IAAKvoB,KAAAmD,MAAWyL,KAAM8rB,IAAK16B,KAAAmD,MAAWqI,KAAMqS,MAAO,MAE1Dne,EAAAsG,cAAA,OACE2iB,UAAU,6CACE,4BAEX3oB,KAAAmD,MARLqI,MAUE9L,EAAAsG,cAACyyB,EAADA,KAAA,CAAM9P,UAAU,mCACb3oB,KAAAmD,MA7BbwN,oBAvBS0jC,CAAyB30C,iBMpBzBk1C,8JACJ1wC,yBAEHxE,EAAAsG,cAACk2B,EAADA,SAAA,CAAUxP,OAAO,EAAMsN,aAAa,GAClCt6B,gBAACw8B,WAADx8B,SAAeM,KAAAmD,MAFnBgB,cAFSywC,CAA0Bl1C,aCA1Bm1C,8JACJ3wC,yBAEHxE,EAAAsG,cAACk2B,WAADpP,IAAA,CAAcI,GAAI,EAAGkP,GAAI,GACtBp8B,KAAAmD,MAFLgB,aAFS0wC,CAA8Bn1C,aCO9Bo1C,8JAGJ5wC,yBAEHxE,gCACEA,EAAAsG,cAAA4tB,EAAA/wB,OAAAC,OAAA,GAAqB9C,KAArBmD,OACEzD,EAAAsG,cAAA,OAAK2iB,UAAU,cACbjpB,EAAAsG,cAAAipB,EAAA,CAAYzG,KAAMxoB,KAAAmD,MAAWm5B,uBAAwB5T,GAAI,WACtD1oB,KAAAmD,MAJTzD,4BAQEA,uBAAYM,KAAAmD,MAThBgB,cAJS2wC,CAA8Bp1C,aCQ9Bq1C,eAIX7xC,WAAmBC,0BACjBA,QAqBK6xC,qBAAA,SAAwB79B,mBAAsBpN,KACnD1F,SAAc,CACZ4wC,cAAej1C,QAAWi1C,iBAE5B9xC,MAAAuxC,mBAAAv9B,GAAyCnX,QAAzCi1C,qBAxBAl1C,MAAa,CACXk1C,aAAc9xC,EAAM4nC,eAEtBiK,qBAA4Bh1C,KAAAg1C,qBAAA3xC,KAA5BrD,gHAGKk1C,uBACgBl1C,KAAAmD,MAArBwN,YACwB3Q,KAAAmD,MAAxBs4B,4BAIK0Z,kCACDjlB,EAAJ,GACKnvB,MAAiBf,KAAAmD,MAAWiyC,uBAAjC,EAA2C,CACzCllB,GAAQ,IADCmlB,YAGXnlB,eAUKhsB,yBAEHxE,EAAAsG,cAAC43B,EAADA,aAAA,CACES,QAASr+B,KAAAmD,MAAWqI,KACpBmF,YAAa3Q,KAAAm1C,iBACb9J,cACE3rC,EAAAsG,cAAA,SACEyO,KAAK,WACLlU,MAAM,GACN+qC,eAAgBtrC,KAAAmD,MAAW4nC,SAC3BvZ,SAAUxxB,KAAAg1C,qBAA0Bh1C,KAAAmD,MAA1BqI,QAGdyyB,eAAgB,CACdv+B,EAAAsG,cAACk4B,EAADA,iBAAA,CAAkB7kB,IAAK,IACpB,IAAArZ,KAAAmD,MAAAmyC,aACC51C,EAAAsG,cAACuqC,EAADA,MAAA,CAAO97B,KAAK,WAAWzU,KAAAmD,MADxBq8B,YAFW,KAShBjB,eAAe,EACfG,SAAS,OAxDJqW,CAAyBr1C,aCPzB61C,8JACJrxC,yBAEHxE,gCACEA,mCAAqBM,KAArBN,OACEA,sBAFJA,OAIGM,KAAAmD,MAAAgB,SACCzE,gBAACo/B,EAADp/B,cAAWM,KAAAmD,MADZgB,UAGCzE,gBAACq/B,EAADr/B,gBACEA,gBAACq/B,aAADr/B,KADFA,MAEEA,gBAACq/B,aAADr/B,WACGM,KAAAmD,MAHLzD,qBAKEA,gBAACq/B,aAADr/B,UAAkBM,KAAAmD,MAb1B87B,yBAFSsW,CAAqB71C,aCyDrB81C,eAIXtyC,WAAmBC,eACjBA,QACApD,MAAa,CACX01C,wBAAwB,QAE1BpC,aAAoBrzC,KAAAqzC,aAAAhwC,KAApBrD,WACAk9B,aAAoBl9B,KAAAk9B,aAAA75B,KAApBrD,WACA01C,aAAoB11C,KAAA01C,aAAAryC,KAApBrD,WACA21C,gBAAuB31C,KAAA21C,gBAAAtyC,KAAvBrD,WACA41C,cAAqB51C,KAAA41C,cAAAvyC,KAArBrD,WACAy1C,uBAA8Bz1C,KAAAy1C,uBAAApyC,KAA9BrD,gHAGKszC,iCAEH5zC,EAAAsG,cAACq3B,EAADA,QAAA,CAAS90B,GAAG,cACTvI,KAAAmD,MAAAuwC,YAAyB1zC,KAAAmD,MAAzBuwC,YAAkD1zC,KAAAmD,MAFvDowC,uBAOKF,6BACLhvC,SAAc,CACZoxC,wBAAwB,iBAIrBvY,6BACL74B,SAAc,CACZoxC,wBAAwB,IAItBz1C,KAAAmD,MAAJoU,yBACEpU,MAAAs2B,SAAoBz5B,KAAAmD,MAApBoU,iCAIGm+B,wBACD11C,KAAAmD,MAAJoU,yBACEpU,MAAA0yC,SAAoB71C,KAAAmD,MAApBoU,iCAIGq+B,yBACD51C,KAAAmD,MAAJoU,yBACEpU,MAAA2yC,UAAqB91C,KAAAmD,MAArBoU,iCAIGo+B,gCACLtxC,SAAc,CACZoxC,wBAAwB,IAGtBz1C,KAAAmD,MAAJ6T,qBACE7T,MAAA4yC,YAAuB/1C,KAAAmD,MAAvB6T,6BAIGy+B,uCACLpxC,SAAc,CACZoxC,wBAAwB,iBAIrBO,oCCrIFj1C,YDuIDf,KAAAmD,MAAA8yC,2BAEAN,uBAEAzY,4BAIGh5B,sBAECgyC,ECjJHn1C,YDkJDf,KAAAmD,MAAA8yC,sBACIE,ECrJHp1C,aDsJDf,KAAAmD,MAAA8yC,uBCvJCl1C,gBDwJDf,KAAAmD,MAAA8yC,uBCtJCl1C,cDuJDf,KAAAmD,MAAA8yC,uBC1JCl1C,cD2JDf,KAAAmD,MAAA8yC,6BAKAv2C,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,EAAAsG,cAAAqjB,EAAA,CACEa,YACEgsB,EACI9sB,0BADOgtB,QAEPhtB,0BAAwBsQ,OAE9BnP,qBAAsBvqB,KAAAmD,MAAWs8B,eACjCzV,sBACEksB,EAAcl2C,KAAAmD,MAAHkzC,cAA8Br2C,KAAAmD,MAAWo6B,WAEtDnT,wBACE8rB,EACIl2C,KAAAmD,MADOmzC,0BAEPt2C,KAAAmD,MAAW02B,uBAEjBxV,UACE6xB,EACIl2C,KAAAmD,MADOozC,wBAEPv2C,KAAAmD,MAAW22B,qBAEjBlrB,KACEsnC,EACI/sB,uBADOitB,QAEPjtB,uBAAqBuQ,OAE3B/O,WAAY3qB,KAAAD,MAAW01C,uBACvB7rB,SAAU5pB,KAAKqzC,aACfvpB,UAAW9pB,KAAKk9B,eAElBx9B,EAAAsG,cAAC43B,EAADA,aAAA,CACE/xB,QACEnM,EAAAsG,cAAA,OAAK2iB,UAAU,cACZwtB,EACCz2C,EAAAsG,cAAAwwC,GAAA,CACE3d,OAAQ74B,KAAAmD,MAAWszC,iBACnBC,SAAU12C,KAAAmD,MAAWwzC,mBACrBhe,YAAa34B,KAAAmD,MAAWyzC,sBACxBhe,WAAY54B,KAAAmD,MAAW0zC,qBACvBC,sBAAuB92C,KAAAmD,MAAW2zC,sBAClChe,eAAgB94B,KAAAmD,MAAW4zC,wBAG7Br3C,EAAAsG,cAAAgxC,GAAA,CACE1G,aAActwC,KAAAmD,MAAW8yC,sBACzBnE,cAAe9xC,KAAAmD,MAAW2uC,cAC1BC,gBAAiB/xC,KAAAmD,MAAW8zC,UAC5BjF,UAAWhyC,KAAAmD,MAAW6uC,YAG1BtyC,EAAAsG,cAAC63B,EAADA,eAAA,CAAgBC,QAAS99B,KAAAszC,iBAAuBvV,UAAU,OACxDr+B,EAAAsG,cAAAipB,EAAA,CAAYzG,KAAMxoB,KAAAmD,MAAW4/B,gBAAiBra,GAAI,WAC/C1oB,KAAAmD,MApBPowC,WAuBE7zC,EAAAsG,cAACi0B,EAADA,cAAA,CACE1xB,GAAE,kBACAvI,KAAAmD,MAAWoU,kCAEb2iB,WAAW,GAEXx6B,EAAAsG,cAAC+sC,EAADA,SAAA,CAAU1jB,QAASrvB,KAAKy1C,wBACrBz1C,KAAAmD,MAPLo6B,YASE79B,EAAAsG,cAAC+sC,EAADA,SAAA,CAAU1jB,QAASrvB,KAAK01C,cACrB11C,KAAAmD,MAVL+zC,YAYEx3C,EAAAsG,cAAC+sC,EAADA,SAAA,CACE1jB,QACE6mB,KACIl2C,KADJk2C,gBAEIl2C,KAAK41C,eAGVM,KACGl2C,KAAAmD,MADH+yC,cAEGl2C,KAAAmD,MA5CVg0C,eAiDF9Y,QAASr+B,KAAAmD,MAAWoU,mBACpB5G,YACE3Q,KAAAmD,MAAAi0C,0BACIp3C,KAAAmD,MADJi0C,0BAEI,GAEN7Y,eAAe,EACfC,YACEx+B,KAAAmD,MAAAyL,KACElP,EAAAsG,cAAA,OAAK2iB,UAAU,uBACbjpB,EAAAsG,cAAA,OACEuiB,IAAKvoB,KAAAmD,MAAWyL,KAChB8rB,IAAK16B,KAAAmD,MAAWoU,mBAChBsG,MAAO,MAIXne,EAAAsG,cAAC6qC,EAADA,aAAA,CAAcrlC,KAAM,aAGxBkzB,SAAS,GAER1+B,KAAAmD,MAAAgB,SACCzE,gBAACo/B,EAADp/B,cAAWM,KAAAmD,MADZgB,UAxGP,UA5FSqxC,CAA+B91C,aElC/B23C,eAGXn0C,WAAmBC,eACjBA,QACA69B,aAAoBhhC,KAAAghC,aAAA39B,KAApBrD,gHAGKs3C,iDAEH53C,EAAAsG,cAACq3B,EAADA,QAAA,CAAS90B,GAAG,aACTvI,KAAAmD,MAAAo0C,gCACGv3C,KAAAmD,MADHo0C,gCAEGv3C,KAAAmD,MAJRq0C,2CASKC,iDAEH/3C,EAAAsG,cAACq3B,EAADA,QAAA,CAAS90B,GAAG,aACTvI,KAAAmD,MAAAu0C,cACG13C,KAAAmD,MADHu0C,cAEG13C,KAAAmD,MAJRu+B,yBASKV,6BACL79B,MAAA+9B,SAAA,iBAGKh9B,yBAEHxE,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,EAAAsG,cAAAmyB,EAAA,CACExP,UAAU,6BACVtE,UAAWrkB,KAAAmD,MAAWkhB,UACtB+T,gBAAiBp4B,KAAAmD,MAAWi1B,kBAE9B14B,mCAAqBM,KAArBN,OACEA,EAAAsG,cAAA,OAAK2iB,UAAU,cACbjpB,EAAAsG,cAAC63B,EAADA,eAAA,CACEC,QAAS99B,KAAAy3C,iCACT1Z,UAAU,OAEVr+B,EAAAsG,cAACqsB,EAADA,OAAA,CACE2I,QAAQ,UACR5L,GAAIpvB,KAAAmD,MAAWu+B,WACfrS,QAASrvB,KAAKghC,cAEbhhC,KAAAmD,MAVPu+B,aAaEhiC,EAAAsG,cAAC63B,EAADA,eAAA,CACEC,QAAS99B,KAAAs3C,iCACTvZ,UAAU,OAEVr+B,EAAAsG,cAAAipB,EAAA,CAAYzG,KAAMxoB,KAAAmD,MAAWw0C,eAAgBjvB,GAAI,WAC9C1oB,KAAAmD,MAzBXq0C,iCA8BGx3C,KAAAmD,MAAA8wC,YACCv0C,gBAACo/B,EAADp/B,cAAWM,KAAAmD,MADZgB,UAGCzE,EAAAsG,cAAC+4B,EAADA,WAAA,KACEr/B,gBAACq/B,aAADr/B,KADF,MAEEA,gBAACq/B,aAADr/B,WACGM,KAAAmD,MAHL67B,qBAKEt/B,gBAACq/B,aAADr/B,UAAkBM,KAAAmD,MALpB87B,oBAMEv/B,EAAAsG,cAAC+4B,aAADG,OAAA,KACEx/B,EAAAsG,cAAC63B,EAADA,eAAA,CACEC,QAAS99B,KAAAs3C,iCACTvZ,UAAU,OAEVr+B,EAAAsG,cAAAipB,EAAA,CAAYzG,KAAMxoB,KAAAmD,MAAWw0C,eAAgBjvB,GAAI,WAC9C1oB,KAAAmD,MA9Cfq0C,qCAjCSH,CAA2B33C,aCZ3Bs3C,8JAGJ9yC,sBACCmsC,EFpBHtvC,WEqBDf,KAAAmD,MAAAmtC,aAAA,SFtBCvvC,YEwBGf,KAAAmD,MAAAmtC,aAAA,UAHN,UAMIrgB,EFhCDlvB,kBEiCKf,KAAAmD,MAARmtC,kBF5BGvvC,UE8BCkvB,EAAQjwB,KAAAmD,MAAR8sB,wBF5BDlvB,gBAPAA,WEuCCkvB,EAAQjwB,KAAAmD,MAAR8sB,0BFjCDlvB,SEoCCkvB,EAAQjwB,KAAAmD,MAAR8sB,oBFzCDlvB,gBACAA,kBACAA,WE4CCkvB,EF3CDlvB,mBE+CDrB,EAAAsG,cAACuqC,EAADA,MAAA,CAAO5nB,UAAW,sCAAuClU,KAAM47B,GADjEpgB,MA5BS+mB,CAAoCt3C,aCPpC82C,8JAGJtyC,yBAEHxE,EAAAsG,cAAA,qBACc,uCACZ2iB,UAAW,wCAEV3oB,KAAAmD,MAAAuzC,UACD12C,KAAAmD,MADCw1B,aAED34B,KAAAmD,MAFCy1B,WAGCl5B,EAAAsG,cAAA0yB,EAAA,CACEC,YAAa34B,KAAAmD,MAAWw1B,YACxBC,WAAY54B,KAAAmD,MAAWy1B,WACvBr4B,MAAOP,KAAAmD,MAAWuzC,SAClB7d,OAAQ74B,KAAAmD,MAAW01B,OACnBC,eAAgB94B,KAAAmD,MAAW21B,iBAG7Bp5B,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,EAAAsG,cAACwpB,EAADA,QAAA,CAAS9rB,SAAS,EAAM6rB,QAAQ,IAC/BvvB,KAAAmD,MAlBT2zC,2BAJSN,CAA0C92C,0DC4CnB,SAEhCwC,WAEF01C,WACAhuB,YACAiuB,aACAC,WACAC,WACAC,eACAC,aACAC,aACAC,gEACa,+BAIXz4C,EAAAsG,cAAA,OACE2iB,UAAWoC,EAAU,0DAEnB,eACgB,KAJpBsD,EASE3uB,EAAAsG,cAAA,OAAK2iB,UAAU,sEACbjpB,EAAAsG,cAAA,OACE2iB,UACE,qEAGFjpB,EAAAsG,cAAA,OAAK2iB,UAAU,sCAfrBivB,KAkBEl4C,EAAAsG,cAAA,OAAK2iB,UAAU,sDACbjpB,EAAAsG,cAAAipB,EAAA,CACEI,QAASwoB,EACTrvB,KAAMwvB,EACNrvB,UAAW,kBAEXjpB,EAAAsG,cAAA,KAAG2iB,UAAU,qBANjB,SAQGyvB,GACC14C,EAAAsG,cAAA,OAAK2iB,UAAW,0BATpByvB,GAWE14C,EAAAsG,cAAAipB,EAAA,CACEI,QAASyoB,EACTtvB,KAAMyvB,EACNvvB,GAAI,UACJC,UAAW,iBACXuD,SAAUgsB,GAAiBC,GAE1BD,EAAgBx4C,EAAAsG,cAAAspB,EAAA,CAAQJ,KAAM,KAAMK,QAAQ,IAP/C,KAQG8oB,EAAU,OAGT34C,EAAAsG,cAAAtG,EAAA+xB,SAAA,aACO/xB,EAAAsG,cAAA,KAAG2iB,UAAU,wBAIxBjpB,EAAAsG,cAAAipB,EAAA,CACEI,QAASzF,EACTpB,KAAMuvB,EACNpvB,UAAW,oBAjDnB,oICvE6B,SAAIxlB,UACjCzD,EAAAsG,cAAC+zB,EAADA,KAAA,CAAMC,aAAa,GACjBt6B,gBAACq6B,OAADr6B,UACEA,EAAAsG,cAAC+4B,EAADA,WAAA,KACEr/B,EAAAsG,cAAAikC,EAAApnC,OAAAC,OAAA,CACEgb,OAAQ,IACRD,MAAO,IACPqsB,MAAO,EACPC,aAAa,UACbC,eAAe,WALjBjnC,GAQEzD,EAAAsG,cAAA,UAAQmsC,GAAG,MAAMC,GAAG,KAAKC,EAAE,OAC3B3yC,EAAAsG,cAAA,QAAMqkC,EAAE,IAAIC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACrDpe,EAAAsG,cAAA,QAAMqkC,EAAE,KAAKC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACtDpe,EAAAsG,cAAA,QAAMqkC,EAAE,KAAKC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,qNCT3B,SAEjC5b,WAAU0b,uBACZle,EAAAsG,cAAAikC,EAAA,CACEnsB,OAAQ,IACRD,MAAOA,EACPqsB,MAAO,EACPC,aAAa,UACbC,eAAe,UACfxsB,MAAOA,GAEPle,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B3yC,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B3yC,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACtDpe,EAAAsG,cAAA,QAAMqkC,EAAGxsB,EAAQ,IAAKysB,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OAE7Dpe,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACvDpe,EAAAsG,cAAA,QAAMqkC,EAAGxsB,EAAQ,IAAKysB,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OAE9Dpe,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACvDpe,EAAAsG,cAAA,QAAMqkC,EAAGxsB,EAAQ,IAAKysB,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,qLCxBhC,SAE9B5b,WAAU0b,uBACZle,EAAAsG,cAAAikC,EAAA,CACEnsB,OAAQ,IACRD,MAAOA,EACPqsB,MAAO,EACPC,aAAa,UACbC,eAAe,UACfxsB,MAAOA,GAEPle,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B3yC,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B3yC,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACtDpe,EAAAsG,cAAA,QAAMqkC,EAAGxsB,EAAQ,IAAKysB,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OAE7Dpe,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACvDpe,EAAAsG,cAAA,QAAMqkC,EAAGxsB,EAAQ,IAAKysB,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OAE9Dpe,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACvDpe,EAAAsG,cAAA,QAAMqkC,EAAGxsB,EAAQ,IAAKysB,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,+MCpBpC,SAAgD5b,WAE5Eo2C,oBACAC,4BACAvG,oBACAF,cACAC,yCAEAryC,EAAAsG,cAACymB,OAADI,IAAA,KACEntB,EAAAsG,cAACymB,OAADK,IAAA,CAAUiK,GAAI,GADhBoX,GAEEzuC,EAAAsG,cAACymB,OAADK,IAAA,CAAUiK,GAAI,GACZr3B,EAAAsG,cAAAoqC,GAAA,CACEE,aAAcgI,EACdtG,UAAWA,EACXF,cAAeA,EACfC,gBAAiBA,KAGrBryC,EAAAsG,cAACymB,OAADK,IAAA,CAAUiK,GAAI,GAAI,IAAA3pB,KAAAmrC,GAVpBzK,4CCnBgC,SAAI3qC,UACpCzD,EAAAsG,cAAAikC,EAAApnC,OAAAC,OAAA,CACEgb,OAAQ,IACRD,MAAO,IACPqsB,MAAO,EACPC,aAAa,UACbC,eAAe,WALjBjnC,GAQEzD,EAAAsG,cAAA,QAAMqkC,EAAE,KAAKC,EAAE,IAAIC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACpDpe,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,IAAIC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OACpDpe,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,IAAIC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OAEpDpe,EAAAsG,cAAA,QAAMqkC,EAAE,KAAKC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OACpDpe,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OACrDpe,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OAErDpe,EAAAsG,cAAA,QAAMqkC,EAAE,KAAKC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OACpDpe,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OACrDpe,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OAErDpe,EAAAsG,cAAA,QAAMqkC,EAAE,KAAKC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACrDpe,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OACrDpe,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OAErDpe,EAAAsG,cAAA,QAAMqkC,EAAE,KAAKC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OACrDpe,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OACtDpe,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,uGCpB7B,SAEzB5b,WAAU0b,uBACZle,EAAAsG,cAAAikC,EAAA,CACEnsB,OAAQ,IACRD,MAAOA,EACPqsB,MAAO,EACPC,aAAa,UACbC,eAAe,UACfxsB,MAAOA,GAEPle,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B3yC,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B3yC,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACtDpe,EAAAsG,cAAA,QAAMqkC,EAAGxsB,EAAQ,IAAKysB,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OAE7Dpe,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACvDpe,EAAAsG,cAAA,QAAMqkC,EAAGxsB,EAAQ,IAAKysB,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OAE9Dpe,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACvDpe,EAAAsG,cAAA,QAAMqkC,EAAGxsB,EAAQ,IAAKysB,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,wGC9BjC,SAAI3a,UACnCzD,EAAAsG,cAAC+zB,EAADA,KAAA,CAAMC,aAAa,GACjBt6B,gBAACq6B,OAADr6B,UACEA,EAAAsG,cAAC+4B,EAADA,WAAA,KACEr/B,EAAAsG,cAAAikC,EAAApnC,OAAAC,OAAA,CACEgb,OAAQ,IACRD,MAAO,IACPqsB,MAAO,EACPC,aAAa,UACbC,eAAe,WALjBjnC,GAQEzD,EAAAsG,cAAA,UAAQmsC,GAAG,MAAMC,GAAG,KAAKC,EAAE,OAC3B3yC,EAAAsG,cAAA,QAAMqkC,EAAE,IAAIC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACrDpe,EAAAsG,cAAA,QAAMqkC,EAAE,KAAKC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACtDpe,EAAAsG,cAAA,QAAMqkC,EAAE,KAAKC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,sGCT/B,SAE7B5b,WAAU0b,uBACZle,EAAAsG,cAAAikC,EAAA,CACEnsB,OAAQ,IACRD,MAAOA,EACPqsB,MAAO,EACPC,aAAa,UACbC,eAAe,UACfxsB,MAAOA,GAEPle,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B3yC,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B3yC,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACtDpe,EAAAsG,cAAA,QAAMqkC,EAAGxsB,EAAQ,IAAKysB,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OAE7Dpe,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACvDpe,EAAAsG,cAAA,QAAMqkC,EAAGxsB,EAAQ,IAAKysB,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OAE9Dpe,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACvDpe,EAAAsG,cAAA,QAAMqkC,EAAGxsB,EAAQ,IAAKysB,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,6BCuBpC,SAE1B5b,WAEF01C,WACAhuB,YACAiuB,aACAC,WACAU,WACAT,kBACAC,eACAC,aACAC,aACAC,uEACa,GAGXz4C,EAAAsG,cAAA,OACE2iB,UAAWoC,EAAU,qCAAuC,eAC5C,KAFlBsD,EAME3uB,EAAAsG,cAAA,OAAK2iB,UAAU,2CACbjpB,EAAAsG,cAAA,OACE2iB,UACE,+DAGFjpB,EAAAsG,cAAA,OAAK2iB,UAAU,gCAZrBivB,KAeEl4C,EAAAsG,cAAA,OAAK2iB,UAAU,gDACbjpB,EAAAsG,cAAAipB,EAAA,CACEI,QAASwoB,EACTrvB,KAAMwvB,EACNrvB,UAAW,kBAEXjpB,EAAAsG,cAAA,KAAG2iB,UAAU,qBANjB,SAQEjpB,EAAAsG,cAAAipB,EAAA,CACEI,QAASgpB,EAAUG,EAAmBV,EACtCtvB,KAAMyvB,EACNvvB,GAAI,UACJC,UAAW,iBACXuD,SAAUgsB,GAAiBC,GAE1BD,EAAgBx4C,EAAAsG,cAAAspB,EAAA,CAAQJ,KAAM,KAAMK,QAAQ,IAP/C,KAQG8oB,EAAU,OAGT34C,EAAAsG,cAAAtG,EAAA+xB,SAAA,aACO/xB,EAAAsG,cAAA,KAAG2iB,UAAU,wBAIxBjpB,EAAAsG,cAAAipB,EAAA,CACEI,QAASzF,EACTpB,KAAMuvB,EACNpvB,UAAW,oBA3CnB,8FC/DqC,SAEnCzmB,WAAU0b,uBACZle,EAAAsG,cAAAikC,EAAA,CACEnsB,OAAQ,IACRD,MAAOA,EACPqsB,MAAO,EACPC,aAAa,UACbC,eAAe,UACfxsB,MAAOA,GAEPle,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B3yC,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B3yC,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACtDpe,EAAAsG,cAAA,QAAMqkC,EAAGxsB,EAAQ,IAAKysB,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OAE7Dpe,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACvDpe,EAAAsG,cAAA,QAAMqkC,EAAGxsB,EAAQ,IAAKysB,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,OAE9Dpe,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,UAAQmsC,GAAG,KAAKC,GAAG,MAAMC,EAAE,OAC3B3yC,EAAAsG,cAAA,QAAMqkC,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,MAAMC,OAAO,OACvDpe,EAAAsG,cAAA,QAAMqkC,EAAGxsB,EAAQ,IAAKysB,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAI3sB,MAAM,KAAKC,OAAO,6ZCzBxB,SAEtC5b,WAAY2jB,yBACdnmB,EAAAsG,cAAA,OAAK2iB,UAAU,WACbjpB,EAAAsG,cAAA,OAAK2iB,UAAU,iBADjB9C,GAEEnmB,EAAAsG,cAAA,OAAK2iB,UAAU,gBAFjBivB,4gBC+CkC,SAEhC11C,WAEFosB,WACAspB,YACAhuB,YACAiuB,aACAC,WACAC,WACAC,eACAC,aACAC,aACAC,uEACa,GAGXz4C,EAAAsG,cAAA,OACE2iB,UAAWoC,EAAU,0DAEnB,eACgB,KAJpBsD,EASE3uB,EAAAsG,cAAA,OAAK2iB,UAAU,sEACbjpB,EAAAsG,cAAA,OAAK2iB,UAAU,qBADjB2F,GAEE5uB,EAAAsG,cAAA,OACE2iB,UACE,qEAGFjpB,EAAAsG,cAAA,OAAK2iB,UAAU,sCAhBrBivB,KAmBEl4C,EAAAsG,cAAA,OAAK2iB,UAAU,sDACbjpB,EAAAsG,cAAAipB,EAAA,CACEI,QAASwoB,EACTrvB,KAAMwvB,EACNrvB,UAAW,kBAEXjpB,EAAAsG,cAAA,KAAG2iB,UAAU,qBANjB,SAQEjpB,EAAAsG,cAAAipB,EAAA,CACEI,QAASyoB,EACTtvB,KAAMyvB,EACNvvB,GAAI,UACJC,UAAW,iBACXuD,SAAUgsB,GAAiBC,GAE1BD,EAAgBx4C,EAAAsG,cAAAspB,EAAA,CAAQJ,KAAM,KAAMK,QAAQ,IAP/C,KAQG8oB,EAAU,OAGT34C,EAAAsG,cAAAtG,EAAA+xB,SAAA,aACO/xB,EAAAsG,cAAA,KAAG2iB,UAAU,wBAIxBjpB,EAAAsG,cAAAipB,EAAA,CACEI,QAASzF,EACTpB,KAAMuvB,EACNpvB,UAAW,oBA/CnB,4OvC1CqC,SAEnCzmB,2CAEO,WAETqtC,cACA1mB,gBACAlY,mCAEAjR,EAAAsG,cAAAspC,GAAA,CACE1gC,KAAMA,EACNga,OAAQA,EACR2mB,YAAaA,EACb1mB,YAAaA,GAEbnpB,EAAAsG,cAAAgqC,GAAA,CAA4BpnB,OAAQA,GAApC,SACG1mB,WAAUwtC,oCACThwC,gCACEA,uBADFA,GAEEA,uBAFFA,0CwCRoC,SAExCwC,WAEFqtC,cACA3gC,gDACS,WAETpD,gBACApD,SACA0nC,2BAEApwC,EAAAsG,cAAAspC,GAAA,CACE1gC,KAAMA,EACNga,OAAQA,EACR2mB,YAAaA,EACb1mB,YAAaA,GAEbnpB,EAAAsG,cAAAgqC,GAAA,CAA4BpnB,OAAQA,GAApC,SACG1mB,WAAUytC,8BACTjwC,EAAAsG,cAAAtG,EAAA+xB,SAAA,KACE/xB,uBADF2kB,GAEE3kB,EAAAsG,cAAA2pC,EAAA,CACEI,cAAe,QACfvkC,KAAMA,EACNokC,gBAAiB,UACjBxnC,OAAQA,EACRynC,kBAAmB,aACnBC,SAAUA,wQC7DqB,SAEvC5tC,WAAoBk2B,oBAAiBqgB,qCAGrC/4C,EAAAsG,cAAC84B,WAADnJ,KAAA,CACE0I,QAAS8P,EACTtiC,QAASnM,EAAAsG,cAAAipB,EAAA,CAAYI,QAJZ,kBAASqpB,kBAIT,oBACT/nC,YAAaynB,EACbsG,SAAS,sHCPQ,SAA4Bx8B,2BACjDxC,EAAAsG,cAAC2yC,EAADC,WAAA,CACEh7B,MAAO,CACL4tB,WADK,OAELqN,OAFK,EAGLC,YAAa,SAGdp5C,0BAA6BkO,EAAAwa,GAAA,OAC5B1oB,EAAAsG,cAAA,MACE2iB,UAAWjpB,mCAAwD,GACnE2Z,IAAK+O,GAFPxa,6ECda,SAA0C1L,mJAExDiB,oBAEHzD,gBAACwuB,EAADxuB,mBAAKq5C,QAAQ,4BAAbr5C,oBhHCqB,SAA8CwC,WAEnEktB,oJACGjsB,cACCzD,iCAAWuwB,MAAOA,EAAOb,GAAIA,GAA7B1vB,kBiHDiB,SAA8CwC,WAEnE82C,kDACQ,WAERrwC,YACAkd,2CACW,gDACK,GAEhBnmB,EAAAsG,cAAA,MACE2iB,WAAcswB,EAAK,qBAA0B,uBAC3C1oB,EAAQ,SAAc,SACpByoB,EAAU,WAAgB,IAC9B3pB,QAASA,GAET3vB,yBACEA,EAAAsG,cAAA,QAAM2iB,UAAS,kBAAmBswB,EAAK,OAAY,eADrDv5C,GAIEA,EAAAsG,cAAA,QAAM2iB,UAAS,kBAAmBswB,EAAK,OAAY,cAJrDv5C,IAOGu5C,GACCC,EAAArwC,IAAA,SAAa5I,EAAAmoB,GAAA,OACX1oB,EAAAsG,cAAA,QACE2iB,UAAS,iCACPP,eAAmC,IAErC/O,IAAK+O,GAJPnoB,MAULg5C,MACCv5C,0BACGw5C,EAAArwC,IAAA,SAAa5I,EAAAmoB,GAAA,OACZ1oB,EAAAsG,cAAA,MACE2iB,UAAS,+BACPP,eAAmC,YAErC/O,IAAK+O,GAEL1oB,yBANFO,oGCnBsB,SAAIM,UAClCb,gBAACsiC,QAADtiC,qCAE4B,SAAIa,UAChCb,gBAACsiC,QAADtiC,6BAGuB,SAAqDwC,mCAClE,oCACC,iCACH,WAER2S,YACAguB,uBAEAnjC,EAAAsG,cAACg8B,QAADQ,WAAA,CACEC,QAASA,EACTC,SAAUA,EACVC,MAAOA,EACPC,QAASA,GAETljC,gBAACsiC,QAADtiC,OANF,MAOEA,EAAAsG,cAACg8B,QAAD/B,KAAA,CAAYprB,KAAMA,EAAMguB,OAAQA,+JCvCL,SAAuC3gC,WAEpEoiB,cACAC,aACAC,aACAC,qBACAa,oBACAvjB,2BACA2iB,sBAE0CsO,YAAQ,GAA3CmmB,OAAeC,cAGpB15C,uBACEA,EAAAsG,cAAC+4B,EAADA,WAAA,KACEr/B,EAAAsG,cAAC+4B,aAADrV,KAAA,CAAiBle,KAAM,mBACvB9L,gBAACq/B,aAADr/B,WAFF2kB,GAGE3kB,gBAACq/B,aAADr/B,UAHF4kB,GAIE5kB,gBAACq/B,aAADr/B,UAJF6kB,GAKE7kB,EAAAsG,cAAC+4B,aAADG,OAAA,KACEx/B,EAAAsG,cAAAipB,EAAA,CAAYzG,KAAM,IAAKE,GAAI,UAAWwG,KAAM,MANhD1K,IAUE9kB,EAAAsG,cAAC+4B,aAADG,OAAA,CAAmB+G,WAAW,GAC3BlkC,GACCrC,EAAAsG,cAAAipB,EAAA,CAAYI,QAfD,kBAAS+pB,GAAgBD,KAaxC7zB,GAME5lB,EAAAsG,cAAA,KACE2iB,UAAW,kBACXH,KACE,4GAnBR/D,IAyBG00B,MACCz5C,EAAAsG,cAAC+4B,aAADsa,KAAA,CAAiBz7B,MAAO,CAAE07B,UAAW,SACnC55C,gBAAC+4B,EAAD/4B,UACGqC,EADHrC,UACiBqC,EAFnBmD,SAIGwf,GAAahlB,2BAAMglB,EAhC9B60B,sMCJWC,EAAb,SAAA50B,GAGE,SAAA40B,EAAmBr2C,GAA0C,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAw5C,IAC3Dl5C,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAA22C,GAAAhzB,KAAAxmB,KAAMmD,KACDslC,WAAanoC,EAAKmoC,WAAWplC,KAAhBR,OAAA42C,EAAA,EAAA52C,CAAAvC,IAFyCA,EAH/D,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAA22C,EAAA50B,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAA22C,EAAA,EAAAngC,IAAA,aAAA9Y,MAAA,SAOoB6J,GAChBpK,KAAKmD,MAAMuC,SACX,IAAMg0C,EAAkBtvC,EACrBJ,OAAO,SAAA0rB,GAAI,OAAIA,EAAKqV,WACpBliC,IAAI,SAAA6sB,GAAI,OAAIA,EAAKlqB,OACpBxL,KAAKmD,MAAM0E,eAAe7H,KAAKmD,MAAMw2C,oBAAqBD,KAZ9D,CAAArgC,IAAA,SAAA9Y,MAAA,WAckB,IAAA+W,EAAAtX,KACd,OACEikB,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,eAAgB,WAC/B,SAAAoE,GAAC,OACAF,EAAA,cAACG,EAAA,qBAAD,CACEC,UAAWF,EAAE,uCACboG,qBAAsBpG,EAAE,iBACxBilB,mBAAoBjlB,EAAE,eACtBwF,OAAQrS,EAAKnU,MAAMwmB,OACnBjkB,OAAQ4R,EAAKmxB,YAEZ,SAAAruB,GAAA,IAAGoZ,EAAHpZ,EAAGoZ,aAAH,OACCvP,EAAA,cAAC21B,EAAA,oBAAD,CACEnwC,cAAe6N,EAAKnU,MAAMw2C,qBAEzB,SAAA3+B,GAAA,IAAS/L,EAAT+L,EAAG1X,KAAqBu2C,EAAxB7+B,EAAevX,QAAyBq2C,EAAxC9+B,EAAiCjZ,MAAjC,OACCkiB,EAAA,cAAC21B,EAAA,iBAAD,CAAkBtvC,gBAAgB,GAC/B,SAAA4Q,GAIK,IAHExR,EAGFwR,EAHJ5X,KACSy2C,EAEL7+B,EAFJzX,QACOu2C,EACH9+B,EADJnZ,MAEA,OACEkiB,EAAA,cAAAA,EAAA,cACEA,EAAA,uBACGE,EAAE,8CAELF,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAO+3C,GAAYE,EACnBt2C,SAAUm2C,IAAYE,EACtBG,eACEj2B,EAAA,cAACG,EAAA,SAAD,KACEH,EAAA,cAACG,EAAA,iBAAD,OAGJ+1B,cAAel2B,EAAA,cAACvE,EAAA,EAAD,OAEd,WACC,IAAM06B,EAAc1wC,EAAab,IAAI,SAAA6sB,GAAI,MAAK,CAC5ClqB,KAAMkqB,EACNqV,SAAgC,qBAAf97B,EAAKymB,MAExB,OACEzR,EAAA,cAACG,EAAA,yBAAD,CACE/K,IAAK3W,KAAK23C,UAAUprC,GACpB67B,aAAcsP,EACd5oB,SAAUgC,EACVoY,eAAgBt0B,EAAKnU,MAAMyoC,eAC3B5M,oBAAqB7a,EACnB,wCAEF8a,mBAAoB9a,EAClB,4CAEF0nB,yBAA0B1nB,EACxB,gDArEpCq1B,EAAA,CAAiD95C,aC6BpC46C,EAAb,SAAA11B,GAIE,SAAA01B,EAAmBn3C,GAA2B,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAs6C,IAC5Ch6C,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAy3C,GAAA9zB,KAAAxmB,KAAMmD,KACDpD,MAAQ,CACXw6C,wBAAwB,EACxBC,sBAAsB,GAExBl6C,EAAKm6C,aAAen6C,EAAKm6C,aAAap3C,KAAlBR,OAAA42C,EAAA,EAAA52C,CAAAvC,IACpBA,EAAKo6C,mBAAqBp6C,EAAKo6C,mBAAmBr3C,KAAxBR,OAAA42C,EAAA,EAAA52C,CAAAvC,IAC1BA,EAAKq6C,gBAAkBr6C,EAAKq6C,gBAAgBt3C,KAArBR,OAAA42C,EAAA,EAAA52C,CAAAvC,IACvBA,EAAKs6C,gBAAkBt6C,EAAKs6C,gBAAgBv3C,KAArBR,OAAA42C,EAAA,EAAA52C,CAAAvC,IATqBA,EAJhD,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAAy3C,EAAA11B,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAy3C,EAAA,EAAAjhC,IAAA,kBAAA9Y,MAAA,WAgBIP,KAAKqE,SAAS,CACZm2C,sBAAsB,MAjB5B,CAAAnhC,IAAA,qBAAA9Y,MAAA,WAqBIP,KAAKqE,SAAS,CACZk2C,wBAAwB,MAtB9B,CAAAlhC,IAAA,eAAA9Y,MAAA,WA0BI,IAAM6H,EAASpI,KAAKD,MAAM06C,aAI1B,GAHAz6C,KAAKqE,SAAS,CACZk2C,wBAAwB,IAEJ,oBAAXnyC,EAGT,MAAM3D,MAAM,gDAFZ2D,EAAO4c,MAAMhlB,QA/BnB,CAAAqZ,IAAA,kBAAA9Y,MAAA,SAoCyB8e,GACrBrf,KAAKqE,SAAS,CACZo2C,aAAcp7B,EAAQo7B,aACtBI,uBAAwBx7B,EAAQw7B,uBAChCC,iBAAkBz7B,EAAQy7B,iBAC1BC,iBAAkB17B,EAAQ07B,iBAC1BC,kBAAmB37B,EAAQ27B,kBAC3BT,wBAAwB,MA3C9B,CAAAlhC,IAAA,gBAAA9Y,MAAA,SA8CuBo5C,GACnB35C,KAAKqE,SAAS,CACZm2C,sBAAsB,EACtBb,0BAjDN,CAAAtgC,IAAA,SAAA9Y,MAAA,WAoDkB,IAAA+W,EAAAtX,KACd,OACEikB,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,eAAgB,WAC/B,SAAAoE,GAAC,OACAF,EAAA,cAAC7F,EAAA,EAAWnY,SAAZ,KACG,SAAAmU,GAAA,IAAGuL,EAAHvL,EAAGuL,OAAQs1B,EAAX7gC,EAAW6gC,aAAcC,EAAzB9gC,EAAyB8gC,iBAAzB,OACCj3B,EAAA,cAAC21B,EAAA,uBAAD,KACG,SAAA5+B,GAAA,IACC3T,EADD2T,EACC3T,kBACAC,EAFD0T,EAEC1T,kBACAC,EAHDyT,EAGCzT,kBACAG,EAJDsT,EAICtT,oBACAG,EALDmT,EAKCnT,eALD,OAOCoc,EAAA,cAAAA,EAAA,cACG3M,EAAKvX,MAAMy6C,sBACVv2B,EAAA,cAACk3B,EAAD,CACEvP,eAAgBwP,IAAU/5B,WAAWjG,OACrCvT,eAAgBA,EAChB8xC,oBAAqBriC,EAAKvX,MAAM45C,oBAChCj0C,OAAQ4R,EAAKsjC,gBACbjxB,OAAQrS,EAAKsjC,kBAGhBtjC,EAAKvX,MAAMw6C,wBACVt2B,EAAA,cAACG,EAAA,mBAAD,CACE8F,YAAad,0BAAwBqgB,OACrClf,qBAAsBpG,EAAE,iBACxB6F,sBACE1S,EAAKvX,MAAM86C,uBAEbzwB,wBAAyB9S,EAAKvX,MAAMg7C,iBACpC12B,UAAW/M,EAAKvX,MAAMi7C,kBACtBpsC,KAAM0I,EAAKvX,MAAM+6C,iBACjBnwB,WAAYrT,EAAKvX,MAAMw6C,uBACvB3wB,SAAUtS,EAAKojC,mBACf5wB,UAAWxS,EAAKmjC,eAGpBx2B,EAAA,cAACG,EAAA,iBAAD,KACEH,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAOuV,EAAKnU,MAAMpB,MAClB2B,QAAS4T,EAAKnU,MAAMO,QACpBw2C,eAAgBj2B,EAAA,cAACG,EAAA,yBAAD,MAChB+1B,cAAel2B,EAAA,cAACvE,EAAA,EAAD,OAEd,kBACCpI,EAAKnU,MAAM0J,aAAahE,IACtB,SAACwyC,GACC,IACE,IAAMC,EAAiC,CACrC9yB,KAAM4yB,IAAUlzC,YAAYob,KAAKjB,MAAM,CACrCha,OAAQgzC,EAAGnzC,YAAYU,MAAO,GAAGL,GACjCL,YAAamzC,EAAGnzC,cAElB+nB,MAAO,QAEHsrB,EAAkC,CACtCtrB,MAAO,QACPZ,QAAS,kBACP/X,EAAKqjC,gBAAgB,CACnBF,aAAY,eAAAe,EAAA34C,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAE,SAAAC,IAAA,OAAAF,EAAAjtC,EAAAotC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACZd,EACEl7B,IAAKmE,EACH,6CAEF,QALU23B,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAQJ10C,EACJ+zC,EAAGnzC,YAAYK,GACf8yC,EAAGnzC,YAAYoB,SACf,GAXQ,OAAAwyC,EAAAE,KAAA,eAAAF,EAAAC,KAAA,EAAAD,EAAAG,GAAAH,EAAA,SAcVZ,EACEl7B,IAAKmE,EACH,kDACA,CAAEpiB,MAAK+5C,EAAAG,KAET,WAnBQ,wBAAAH,EAAAI,SAAAN,EAAA,iBAAF,yBAAAJ,EAAAx2B,MAAAhlB,KAAAilB,YAAA,GAuBZk3B,wBACE/yB,0BAAwBqgB,OAC1BoR,uBAAwB12B,EAAE,gBAC1B22B,iBACE3xB,uBAAqBM,KACvBsxB,iBAAkB52B,EAChB,uCACA,CAAE3Y,KAAM6vC,EAAGnzC,YAAYsD,OAEzBwvC,kBAAmB72B,EACjB,iDAIFi4B,EAAiC,CACrCnsB,MAAO,OACPZ,QAAS,kBACP/X,EAAKqjC,gBAAgB,CACnBF,aAAY,eAAA4B,EAAAx5C,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAE,SAAAW,IAAA,OAAAZ,EAAAjtC,EAAAotC,KAAA,SAAAU,GAAA,cAAAA,EAAAR,KAAAQ,EAAAP,MAAA,OACZd,EACEl7B,IAAKmE,EACH,+CAEF,QAEF,IACEzc,EACE2zC,EAAGnzC,YAAYK,GACf8yC,EAAGnzC,YAAYoB,SAEjB,MAAOkzC,GACPtB,EACEl7B,IAAKmE,EACH,oDACA,CAAEpiB,MAAOy6C,IAEX,WAlBQ,wBAAAD,EAAAL,SAAAI,MAAF,yBAAAD,EAAAr3B,MAAAhlB,KAAAilB,YAAA,GAsBZk3B,wBACE/yB,0BAAwBqgB,OAC1BoR,uBAAwB12B,EAAE,eAC1B22B,iBACE3xB,uBAAqBM,KACvBsxB,iBAAkB52B,EAChB,yCACA,CAAE3Y,KAAM6vC,EAAGnzC,YAAYsD,OAEzBwvC,kBAAmB72B,EACjB,mDAIFs4B,EAAmC,CACvCxsB,MAAO,SACPZ,QAAS,kBACP/X,EAAKqjC,gBAAgB,CACnBF,aAAY,eAAAiC,EAAA75C,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAE,SAAAgB,IAAA,OAAAjB,EAAAjtC,EAAAotC,KAAA,SAAAe,GAAA,cAAAA,EAAAb,KAAAa,EAAAZ,MAAA,cACZd,EACEl7B,IAAKmE,EACH,2CAEF,QALUy4B,EAAAb,KAAA,EAAAa,EAAAZ,KAAA,EAQJ30C,EACJg0C,EAAGnzC,YAAYK,IATP,OAAAq0C,EAAAZ,KAAA,eAAAY,EAAAb,KAAA,EAAAa,EAAAX,GAAAW,EAAA,SAYV1B,EACEl7B,IAAKmE,EACH,gDACA,CAAEpiB,MAAK66C,EAAAX,KAET,WAjBQ,wBAAAW,EAAAV,SAAAS,EAAA,iBAAF,yBAAAD,EAAA13B,MAAAhlB,KAAAilB,YAAA,GAqBZk3B,wBACE/yB,0BAAwBsQ,OAC1BmhB,uBAAwB12B,EACtB,iBAEF22B,iBACE3xB,uBAAqBuQ,OACvBqhB,iBAAkB52B,EAChB,sCACA,CAAE3Y,KAAM6vC,EAAGnzC,YAAYsD,OAEzBwvC,kBAAmB72B,EACjB,gDAIF04B,EAAmC,CACvC5sB,MAAO,SACPZ,QAAS,kBACP9nB,EACE8zC,EAAGnzC,YAAYK,GADA,GAAA9C,OAEZ41C,EAAGnzC,YAAYsD,KAFH,kBAKfsxC,EAAiC,CACrC7sB,MAAO,eACPZ,QAAS,WACP/X,EAAKylC,cAAc1B,EAAGnzC,YAAYK,MAGhCsD,EAAgC,GAatC,OAZImxC,kBAAQ3B,EAAGnzC,cACb2D,EAAQoxC,KAAK3B,GAEX4B,sBAAY7B,EAAGnzC,cACjB2D,EAAQoxC,KAAK1B,GAEX4B,wBAAc9B,EAAGnzC,cACnB2D,EAAQoxC,KAAKb,GAEfvwC,EAAQoxC,KAAKR,GACb5wC,EAAQoxC,KAAKJ,GACbhxC,EAAQoxC,KAAKH,GAEX74B,EAAA,cAACG,EAAA,qBAAD,CACE/K,IAAKgiC,EAAGnzC,YAAYK,GACpB4lC,gBAAiBkN,EAAGnzC,YAAYsD,KAChC8kC,aAAc+K,EAAGnzC,YAAaooC,aAC9B9mC,YAAa6xC,EAAGnzC,YAAasB,YAC7B6nC,2BAEIgK,EAAGnzC,YAAak1C,MAAOC,UACvBhC,EAAGnzC,YAAak1C,MAAOnwC,QACvBouC,EAAGnzC,YAAak1C,MAAOE,SAG3B9L,gBACE6J,EAAGtuC,YACHoX,EACE,gBACEk3B,EAAGtuC,WAAWwwC,cAAch9C,OAGlCkxC,sBACE4J,EAAGtuC,YACHsuC,EAAGtuC,WAAWwwC,cAAc5kB,YAE9B+Y,qBACE2J,EAAGtuC,YACHsuC,EAAGtuC,WAAWwwC,cAAc3kB,WAE9B+Y,iBAAkBsJ,EAChBt1B,EACA01B,EAAGtuC,YAELojC,oBAAqBqN,uBACnB73B,EAAO83B,YACPpC,EAAGnzC,aAELgoC,qBAAsBwN,wBACpB/3B,EAAO83B,YACPpC,EAAGnzC,aAEL2D,QACEoY,EAAA,cAACG,EAAA,mBAAD,CACE3a,cAAe4xC,EAAGnzC,YAAaK,GAC/BsD,QAASA,EACTmgC,YAAaoP,IAAUlzC,YAAY6S,QACjC,CAAEtR,cAAe4xC,EAAGnzC,YAAYK,OAItC+oC,0BAA2BntB,EACzB,sCAEF6tB,UAAW7tB,EAAE,gBACb2tB,cAAe3tB,EAAE,oBACjB4tB,gBAAiB5tB,EAAE,sBACnBusB,oBAAqBvsB,EAAE,kBACvBytB,qBAAsBztB,EACpB,iCAEF0tB,qBAAsB1tB,EACpB,iCAEF2U,eAAgB3U,EAAE,qBAGtB,MAAO/jB,GACP,OACE6jB,EAAA,cAACG,EAAA,+BAAD,CACE/K,IAAKgiC,EAAGnzC,YAAYK,GACpB4lC,gBACGkN,GACCA,EAAGnzC,aACHmzC,EAAGnzC,YAAYsD,MACjB,iBAEF4sB,gBACE,6EAEFqgB,UAAW/1C,KAAK23C,UACdgB,EAAGnzC,YACH,KACA,sBAnVtCoyC,EAAA,CAAkC56C,aC1BrBi+C,EAAb,SAAA/4B,GAQE,SAAA+4B,EAAYx6C,GAA4C,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAA29C,IACtDr9C,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAA86C,GAAAn3B,KAAAxmB,KAAMmD,KALDpD,MAAQ,CACb6oB,QAAQ,GAKRtoB,EAAKs9C,aAAet9C,EAAKs9C,aAAav6C,KAAlBR,OAAA42C,EAAA,EAAA52C,CAAAvC,IAFkCA,EAR1D,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAA86C,EAAA/4B,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAA86C,EAAA,EAAAtkC,IAAA,eAAA9Y,MAAA,WAcIP,KAAKqE,SAAS,CACZukB,QAAS5oB,KAAKD,MAAM6oB,WAf1B,CAAAvP,IAAA,SAAA9Y,MAAA,WAoBI,OACE0jB,EAAA,cAACG,EAAA,YAAD,CACEwE,OAAQ5oB,KAAKD,MAAM6oB,OACnBmI,UACE9M,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9B0mB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO,mBACPqzB,SAAU,CACR,oBACA,gBACA,oBAEF2E,cAAe79C,KAAKmD,MAAM26C,UAE5B75B,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9B0mB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO,oBACPqzB,SAAU,CACR,oBACA,gBACA,oBAEF2E,cAAe79C,KAAKmD,MAAM26C,UAE5B75B,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9B0mB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO,uBAET5B,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9B0mB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO,2BAIbmL,SACE/M,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9BswC,OAAO,EACP5pB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO,mBACPqzB,SAAU,CACR,wBACA,oBACA,wBAEF2E,cAAe79C,KAAKmD,MAAM26C,UAE5B75B,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9BswC,OAAO,EACP5pB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO,oBACPqzB,SAAU,CACR,wBACA,oBACA,wBAEF2E,cAAe79C,KAAKmD,MAAM26C,UAE5B75B,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9BswC,OAAO,EACP5pB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO,uBAET5B,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9BswC,OAAO,EACP5pB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO,iCA/GrB83B,EAAA,CAAmDj+C,aCZtCq+C,EAAb,SAAAn5B,GAAA,SAAAm5B,IAAA,OAAAl7C,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAA+9C,GAAAl7C,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAk7C,GAAA/4B,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAk7C,EAAAn5B,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAk7C,EAAA,EAAA1kC,IAAA,SAAA9Y,MAAA,WAGkB,IAAAD,EAAAN,KACRg+C,EAAch+C,KAAKmD,MAAM66C,YAAch+C,KAAKmD,MAAM66C,YAAc,GACtE,OACE/5B,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,eAAgB,WAC/B,SAAAoE,GAAC,OACA65B,EAAYn1C,IAAI,SAACo1C,EAAY71B,GAC3B,OACEnE,EAAA,cAACG,EAAA,qCAAD,CACE/K,IAAK+O,EACLvc,QACEoY,EAAA,cAACG,EAAA,mBAAD,CACE3a,cAAenJ,EAAK6C,MAAMsG,cAC1BoC,QAASvL,EAAK6C,MAAM0I,UAGxB2hC,sBAAuBrpB,EAAE,qCACzB+5B,gBAAiB/5B,EAAE,kBACnBspB,UAAWwQ,EAAWxQ,UACtBnkC,QAAS20C,EAAW30C,kBArBpCy0C,EAAA,CAA8Cr+C,aCLjCy+C,EAAb,SAAAv5B,GAAA,SAAAu5B,IAAA,OAAAt7C,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAm+C,GAAAt7C,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAs7C,GAAAn5B,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAs7C,EAAAv5B,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAs7C,EAAA,EAAA9kC,IAAA,SAAA9Y,MAAA,WAII,IAAMqP,EAAQ5P,KAAKmD,MAAMyM,MAAQ5P,KAAKmD,MAAMyM,MAAQ,GAEpD,OACEqU,EAAA,cAACG,EAAA,+BAAD,KACGxU,EAAM/G,IAAI,SAAC5I,EAAGmoB,GACb,IAAMwoB,EAAkB,IAARxoB,EACVC,EAAWpoB,EAAEkI,WACflI,EAAEkI,WAAY4F,UAAWvC,KACzBvL,EAAEuL,KAEN,OACEyY,EAAA,cAACA,EAAA,SAAD,CAAgB5K,IAAK+O,GACnBnE,EAAA,cAACG,EAAA,+BAAD,CACE5Y,KAAM6c,EACNuoB,QAASA,YAlBzBuN,EAAA,CAA4Cz+C,aCY/B0+C,EAAb,SAAAx5B,GAQE,SAAAw5B,EAAYj7C,GAA2C,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAo+C,IACrD99C,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAu7C,GAAA53B,KAAAxmB,KAAMmD,KALDpD,MAAQ,CACb6oB,QAAQ,GAKRtoB,EAAKs9C,aAAet9C,EAAKs9C,aAAav6C,KAAlBR,OAAA42C,EAAA,EAAA52C,CAAAvC,IAFiCA,EARzD,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAAu7C,EAAAx5B,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAu7C,EAAA,EAAA/kC,IAAA,eAAA9Y,MAAA,WAcIP,KAAKqE,SAAS,CACZukB,QAAS5oB,KAAKD,MAAM6oB,WAf1B,CAAAvP,IAAA,SAAA9Y,MAAA,WAoBI,OACE0jB,EAAA,cAACG,EAAA,YAAD,CACEwE,OAAQ5oB,KAAKD,MAAM6oB,OACnBmI,UACE9M,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9B0mB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO,uBAET5B,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9B0mB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO,0BAIbmL,SACE/M,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9BswC,OAAO,EACP5pB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO,uBAET5B,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9BswC,OAAO,EACP5pB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO,gCAzDrBu4B,EAAA,CAAkD1+C,aC2CrC2+C,EAAb,SAAAz5B,GAAA,SAAAy5B,IAAA,OAAAx7C,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAq+C,GAAAx7C,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAw7C,GAAAr5B,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAw7C,EAAAz5B,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAw7C,EAAA,EAAAhlC,IAAA,SAAA9Y,MAAA,WAGkB,IAAAD,EAAAN,KACd,OACEikB,EAAA,cAACG,EAAA,wBAAD,KACG,SAAAhK,GAAA,IAAG42B,EAAH52B,EAAG42B,SAAH,OACC1wC,EAAK6C,MAAMyM,MAAM/G,IAAI,SAAC5I,EAAGmoB,GACvB,IAAMmI,EAAWnI,IAAQ9nB,EAAK6C,MAAMm7C,YAC9BC,EAAaj+C,EAAK6C,MAAMq7C,aAAep2B,EAAM,EAE7C9f,EADuBhI,EAAK6C,MAAMq7C,WAAc,EAAIp2B,EAClBA,EAAM,EAAIA,EAAM,EAElDq2B,EACJx6B,EAAA,cAACG,EAAA,2BAAD,CACExV,KAAMtO,EAAK6C,MAAMu7C,SAAWz6B,EAAA,mBAAG0E,UAAW,eAC1CtE,UAAW/jB,EAAK6C,MAAMw7C,aACtBpP,YAAajvC,EAAK6C,MAAMy7C,eACxBh2B,QAAQ,EACRC,YAAamoB,EACbrgC,YAAarQ,EAAK6C,MAAM07C,qBAG5B,OACE56B,EAAA,cAACA,EAAA,SAAD,CAAgB5K,IAAK+O,GACH,aAAfnoB,EAAEuP,UACDyU,EAAA,cAACG,EAAA,gCAAD,CACExV,KACEqV,EAAA,qBACEsE,IAAK5Z,4BACHmwC,kDACA7+C,EAAEkI,YAEJ0V,MAAO,GACPC,OAAQ,KAGZuG,UAAS,GAAA5e,OAAK6C,EAAL,MAAA7C,OAAkBxF,EAAEmI,OAAQoD,MACrC+jC,YAAW,GAAA9pC,OAAK6C,EAAL,MAAA7C,OAAkBxF,EAAEmI,OAAQoD,MACvCod,OAAQ2H,EACR1H,YAAamoB,EACbxlC,KAAMvL,EAAEkI,WAAY4F,UAAWvC,KAC/BpD,OAAQnI,EAAEmI,OAAQoD,KAClBskC,SAAU,SAGbyO,EAAaE,EAAgB,cA9C9CJ,EAAA,CAA8C3+C,oBClE9Cma,EAAA8M,EAAA5M,EAAA,sBAAAglC,IAAAllC,EAAA8M,EAAA5M,EAAA,sBAAAilC,IAAAnlC,EAAA8M,EAAA5M,EAAA,sBAAAklC,IAAAplC,EAAA8M,EAAA5M,EAAA,sBAAAmlC,IAAArlC,EAAA8M,EAAA5M,EAAA,sBAAAolC,IAAAtlC,EAAA8M,EAAA5M,EAAA,sBAAAqlC,qCCAA,IAAAl4B,EAAArN,EAAA,IAEewN,sBAAQ,kBAAmB,CACxCrN,cAAeqN,kBAAQ,gBAAiB,CACtCpN,aAAc,kBACdM,OAAQ8M,kBAAQ,2BAA4B,CAC1C3M,OAAQ,SACRE,KAAM,OACND,SAAU,WACVH,OAAQ,WAEVK,KAAM,KAERC,WAAYuM,kBAAQ,aAAc,CAChC/X,UAAW+X,kBAAQ,eAAgB,CACjCtM,QAAS,GACTE,OAAQ,WAEVE,OAAQ,SACRN,KAAM,KAERO,KAAM,0BCrBRikC,EAAAC,QAAiBzlC,EAAA0lC,EAAuB,ovkBCAxC,IAAAr4B,EAAArN,EAAA,IAEewN,sBAAQ,QAAS,CAC9BjM,KAAM,GACNokC,gBAAiBn4B,kBAAQ,kBAAmB,CAC1C9M,OAAQ,SACRY,OAAQ,SACRN,KAAM,GACN3D,eAAgBmQ,kBAAQ,oBAAqB,CAC3CvD,QAAS,UACT27B,aAAc,eACdrkC,KAAM,GACNskC,UAAW,YACXC,MAAOt4B,kBAAQ,QAAS,CACtBu4B,aAAcv4B,kBAAQ,eAAgB,CACpCjM,KAAM,GACNykC,iBAAkB,mBAClBC,YAAa,gBAEf1kC,KAAM,4CCnBd,IAAAxB,EAAAC,EAAA,GAAAC,EAAAD,EAAA,IAKeE,EAAA,GACbpM,YAAa8M,+BAAqBN,IAAOxM,aACzCxF,WAAY,CACV4S,QAASb,uBACPC,IAAOhS,WAAW4S,QAClB,SAAAX,GAAA,IAAGjS,EAAHiS,EAAGjS,WAAH,MAAqB,CACnBkS,OAAQ,CACNtS,aAAcI,EAAWI,IAE3BxI,MAAO,CACLoI,iBAINmb,KAAMpJ,uBACJC,IAAOhS,WAAWmb,KAClB,SAAAtI,GAAA,IAAG7S,EAAH6S,EAAG7S,WAAH,MAAqB,CACnBkS,OAAQ,CACNtS,aAAcI,EAAWI,IAE3BxI,MAAO,CACLoI,kBAKRoS,OAAQ,CACNwlC,gBAAiBtlC,+BAAqBN,IAAOI,OAAOwlC,iBACpDC,mBAAoB9lC,uBAEjBC,IAAOI,OAAOylC,mBAAoB,SAAA9kC,GAAA,IAAGnN,EAAHmN,EAAGnN,UAAH,MAAoB,CACvDsM,OAAQ,CACNzJ,YAAa7C,EAAUxF,IAEzBxI,MAAO,CACLgO,gBAGJ2M,OAAQR,uBAGLC,IAAOI,OAAOG,OAAQ,SAAAmG,GAAA,MAA0C,CACjE9gB,MAAO,CACLgO,UAFqB8S,EAAG9S,UAGxB9F,qBAHqB4Y,EAAc5Y,gMC3B9B+d,UAAatmB,gBAFY,8BCyBzBugD,EAAb,SAAAr7B,GAAA,SAAAq7B,IAAA,IAAA75B,EAAA9lB,EAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAigD,GAAA,QAAA55B,EAAApB,UAAA/P,OAAAoR,EAAA,IAAAvd,MAAAsd,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtB,UAAAsB,GAAA,OAAAjmB,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,MAAAomB,EAAAvjB,OAAAkiB,EAAA,EAAAliB,CAAAo9C,IAAAz5B,KAAAxB,MAAAoB,EAAA,CAAApmB,MAAAyF,OAAA6gB,MAISvmB,MAAQ,CACbgC,OAAO,EACP2B,SAAS,GANbpD,EAAA,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAAo9C,EAAAr7B,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAo9C,EAAA,EAAA5mC,IAAA,oBAAA9Y,MAAA,eAAA2/C,EAAAr9C,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAA,SAAAC,IAAA,IAAAuE,EAAAC,EAAA,OAAA1E,EAAAjtC,EAAAotC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAWmCz5C,MAAK,GAAAkD,OAC7Bq5C,kDAD6B,iBAXxC,cAWYqB,EAXZrE,EAAAuE,KAAAvE,EAAAE,KAAA,EAc2BmE,EAAer7C,OAd1C,OAcY6gB,EAdZm2B,EAAAuE,KAeMrgD,KAAKqE,SAAS,CACZshB,SACAjiB,SAAS,IAjBjBo4C,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAG,GAAAH,EAAA,SAoBM97C,KAAKqE,SAAS,CACZtC,OAAO,EACP2B,SAAS,IAtBjB,yBAAAo4C,EAAAI,SAAAN,EAAA57C,KAAA,sCAAAkgD,EAAAl7B,MAAAhlB,KAAAilB,YAAA,KAAA5L,IAAA,SAAA9Y,MAAA,WA4BI,OAAOP,KAAKmD,MAAMgB,SAASnE,KAAKD,WA5BpCkgD,EAAA,CAAgCvgD,+BCMnB4gD,EAAb,SAAA17B,GAME,SAAA07B,EAAYn9C,GAAsB,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAsgD,IAChChgD,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAy9C,GAAA95B,KAAAxmB,KAAMmD,KANDpD,MAAQ,CACbmrB,cAAe,GACfhF,gBAAgB,GAKhB5lB,EAAKigD,OAASjgD,EAAKigD,OAAOl9C,KAAZR,OAAA42C,EAAA,EAAA52C,CAAAvC,IACdA,EAAK26C,aAAe36C,EAAK26C,aAAa53C,KAAlBR,OAAA42C,EAAA,EAAA52C,CAAAvC,IACpBA,EAAK2lB,eAAiB3lB,EAAK2lB,eAAe5iB,KAApBR,OAAA42C,EAAA,EAAA52C,CAAAvC,IACtBA,EAAK4lB,eAAiB5lB,EAAK4lB,eAAe7iB,KAApBR,OAAA42C,EAAA,EAAA52C,CAAAvC,IACtBA,EAAK46C,iBAAmB56C,EAAK46C,iBAAiB73C,KAAtBR,OAAA42C,EAAA,EAAA52C,CAAAvC,IACxBA,EAAKkgD,yBAA2BlgD,EAAKkgD,yBAAyBn9C,KAA9BR,OAAA42C,EAAA,EAAA52C,CAAAvC,IAPAA,EANpC,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAAy9C,EAAA17B,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAy9C,EAAA,EAAAjnC,IAAA,2BAAA9Y,MAAA,SAgBkCkgD,GAC9B,IAAMv1B,EAAgBlrB,KAAKD,MAAMmrB,cAAclhB,OAC7C,SAAC02C,GAAD,OAAsBA,EAAErnC,MAAQonC,EAAcpnC,MAGhDrZ,KAAKqE,SAAS,CACZ6mB,oBAtBN,CAAA7R,IAAA,mBAAA9Y,MAAA,SA0B0BogD,EAAalsC,GACnCzU,KAAKqE,SAAS,CACZ6mB,cAAa,GAAAzlB,OAAA5C,OAAA+9C,EAAA,EAAA/9C,CACR7C,KAAKD,MAAMmrB,eADH,CAEX,CACE7R,IAAKjM,KAAKC,MAAMwzC,WAChB37C,QAASy7C,EACTlsC,cAjCV,CAAA4E,IAAA,SAAA9Y,MAAA,eAAA8Y,IAAA,eAAA9Y,MAAA,SA4CIolB,EACA5Y,GAEA,GACG4Y,GACA5Y,GACAA,EAAW+zC,UACX/zC,EAAWg0C,WACXh0C,EAAWi0C,QALd,CASA,IAAMz8C,EAAO,GAAAkB,OAAMkgB,EAAOs7B,WAAb,aAAAx7C,OACXsH,EAAWg0C,UADA,iBAAAt7C,OAEGsH,EAAWi0C,QAFd,SAGb,OAAQj0C,EAAW+zC,UACjB,IAAK,OACH,OAAOv8C,EAAU,OACnB,IAAK,SACH,OAAOA,EAAU,SACnB,QACE,WAjER,CAAA8U,IAAA,iBAAA9Y,MAAA,WAsEIP,KAAKqE,SAAS,CACZ6hB,gBAAgB,MAvEtB,CAAA7M,IAAA,iBAAA9Y,MAAA,WA4EIP,KAAKqE,SAAS,CACZ6hB,gBAAgB,MA7EtB,CAAA7M,IAAA,eAAA9Y,MAAA,SAiFsB4jB,GAClB,OACEF,EAAA,cAACG,EAAA,WAAD,CAAYtN,SAAU,aACpBmN,EAAA,cAACG,EAAA,eAAD,KACEH,EAAA,cAACkL,EAAA,EAAD,CACEC,GAAI,UACJzG,UAAU,2BACVxkB,SAAUggB,EAAE,gBAxFxB,CAAA9K,IAAA,oBAAA9Y,MAAA,WAgGI,OAAOP,KAAKmD,MAAMgX,OAAOtR,IAAI,SAAAuR,EAA6BiI,GAA7B,IAAGuN,EAAHxV,EAAGwV,MAAOhhB,EAAVwL,EAAUxL,KAAMqhB,EAAhB7V,EAAgB6V,MAAOb,EAAvBhV,EAAuBgV,GAAvB,OAC3BnL,EAAA,cAACG,EAAA,kBAAD,CACEwL,MAAOA,EACPhhB,KAAMA,EACNqhB,MAAOA,EACPb,GAAIA,EACJ/V,IAAKgJ,EACL6+B,cAAA,eAAAz7C,OAA4B2pB,SAvGpC,CAAA/V,IAAA,SAAA9Y,MAAA,WA4GkB,IAAA+W,EAAAtX,KACd,OACEikB,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,MAAO,WACtB,SAAAoE,GAAC,OACAF,EAAA,cAACk9B,EAAD,KACG,SAAAnmC,GAAA,IAAG2K,EAAH3K,EAAG2K,OAAQjiB,EAAXsX,EAAWtX,QAAS3B,EAApBiZ,EAAoBjZ,MAApB,OACCkiB,EAAA,cAACg2B,EAAA,WAAD,CACEv2C,QAASA,EACT3B,MAAOA,EACPm4C,eAAgBj2B,EAAA,cAACG,EAAA,OAAD,MAChB+1B,cACEl2B,EAAA,cAACG,EAAA,mBAAD,CACEC,UAAWF,EAAE,sBACbG,SAAUH,EAAE,qBACZI,SAAUJ,EAAE,qBACZK,iBAAkBL,EAAE,8BACpBM,gBAAiBN,EAAE,kCACnBmB,uBAAwBnB,EACtB,sCAINi9B,QAAS,KAER,kBACCn9B,EAAA,cAAC+B,EAAWq7B,SAAZ,CACE9gD,MAAO,CACLolB,OAAQA,EACRs1B,aAAc3jC,EAAK2jC,aACnBh1B,eAAgB3O,EAAK2O,eACrBs6B,OAAQjpC,EAAKipC,OACbrF,iBAAkB5jC,EAAK4jC,iBACvBh1B,eAAgB5O,EAAK4O,iBAGvBjC,EAAA,cAAC21B,EAAA,WAAWyH,SAAZ,CACE9gD,MAAO,CACLjB,OAAM,GAAAmG,OAAKkgB,EAAQ27B,SAAb77C,OAAuBkgB,EAAQ83B,aACrCl+C,SAAQ,GAAAkG,OAAKkgB,EAAQ27B,SAAb77C,OAAuBkgB,EAAQ47B,SAASC,OAChDhiD,QAAS,CAAEiiD,sBAAuB,aAGpCx9B,EAAA,cAAC21B,EAAA,WAAW3zC,SAAZ,KACG,SAAAiV,GAAA,IAAG5b,EAAH4b,EAAG5b,OAAQE,EAAX0b,EAAW1b,QAAX,OACCykB,EAAA,cAAC21B,EAAA,iBAAD,CAAkBt6C,OAAQA,EAAQE,QAASA,GACxC,SAAAkiD,GAAS,OACRz9B,EAAA,cAAC21B,EAAA,oBAAoByH,SAArB,CAA8B9gD,MAAOmhD,GACnCz9B,EAAA,cAACG,EAAA,UAAD,CACEu9B,SAAU,WACV9zB,OAAQvW,EAAKsqC,aAAaz9B,GAC1B09B,YAAavqC,EAAKwqC,oBAClBp0B,WACEzJ,EAAA,qBACEsE,IAAKkF,IACLiN,IAAI,WACJ9c,MAAO,CAAEmkC,SAAU,WAGvBC,SAAU,IACV97B,eAAgB5O,EAAKvX,MAAMmmB,eAC3B+7B,qBAAsB3qC,EAAK2O,eAC3Bi8B,mBAAoB5qC,EAAK4O,gBAEzBjC,EAAA,cAACG,EAAA,cAAD,CACE8G,cAAe5T,EAAKvX,MAAMmrB,cAC1BgN,uBAAwB,IACxBsoB,yBACElpC,EAAKkpC,2BAGTv8B,EAAA,cAACg2B,EAAA,WAAD,KACG,SAAAp5B,GAAA,IAAGyP,EAAHzP,EAAGyP,MAAH,OACCrM,EAAA,cAACvE,EAAA,EAAD,CAAmBrG,IAAKiX,EAAM9tB,KAC5ByhB,EAAA,cAACwT,EAAA,EAAD,KACGngB,EAAKnU,MAAMgX,OAAOtR,IACjB,SAAAka,EAEEV,GAFF,IACI+M,EADJrM,EACIqM,GAAIQ,EADR7M,EACQ6M,MAAOuyB,EADfp/B,EACeo/B,UADf,OAIEl+B,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAMd,EACNQ,MAAOA,EACPuyB,UAAWA,EACX9oC,IAAKgJ,MAIX4B,EAAA,cAACoM,EAAA,EAAD,CAAO8xB,UAAW38B,4BAnM5D86B,EAAA,CAAyB5gD,aChDzBma,EAAA8M,EAAA5M,EAAA,sBAAAqoC,IAAAvoC,EAAA8M,EAAA5M,EAAA,sBAAAiM,qCCAA,IAAAkB,EAAArN,EAAA,IAGewN,sBAAQ,eAAgB,CACrC1Z,YAAa,GACbxF,WAAYkf,kBAAQ,gBAAiB,CACnC/D,KAAM,OACNvI,QAAS,KAEXR,OAAQ8M,kBAAQ,SAAU,CACxB04B,gBAAiB,oBACjBC,mBAAoB,gCACpBtlC,OAAQ,SACRU,KAAM,iECXMinC,EAAmBngD,WAAQogD,sBAClCC,UAAaD,EAAbC,OAA4BA,SAAYD,EAAxCC,cAEHA,UAAaD,EAAbC,gBAFJ,KCQKxhD,IAAMyhD,EAAkB,SAE3Br/C,UACFzD,EAAAsG,cAAC0rB,EAADA,UAAA,CACEC,UAAWxuB,QAAYqI,KACvBomB,gBAAiBywB,EAAkBl/C,IAEnCzD,gBAAC+iD,EAAD/iD,kBAAeyD,WAJjBuR,aAKGvR,sBACCzD,EAAAsG,cAACy8C,EAADA,aAAA,KACE/iD,EAAAsG,cAAC08C,EAADA,eAAA,CAAgB9K,QAASz0C,WAAew/C,aAG5CjjD,EAAAsG,cAAC8rB,EAADA,YAAAjvB,OAAAC,OAAA,GACMK,WAAey/C,gBACfz/C,EAAMm/C,qBACGn/C,QAAYqI,KACzB0gB,SAAU/oB,qBAA2BA,WAAe+oB,SACpDvX,YAAaxR,WAAewR,YAC5BF,KAAMtR,QAAc,OACpBquB,SAAUruB,QAAYquB,SACtB3L,MAAO1iB,WAAe0/C,eAExBnjD,gBAACyyB,EAADzyB,eACGyD,WADHzD,YAEGyD,cAAkBA,QAtBvBqI,SCCKzK,IAAM+hD,EAAmB,SAE5B3/C,OACI4/C,EACJ5/C,4BAAkCA,2BADpCipB,WAEuCjpB,EAAMm/C,MAArC9wB,aAAqB8wB,GAAXU,6JACZxvB,EAAY,SAAIzpB,MACpBg5C,EAAgB,KACRE,GAZZC,EAYyCn5C,EAAnCo5C,cAXGp6C,WAAWm6C,EAAXn6C,8BAAuCq6C,UAAUA,EAAO7iD,SAY3D4C,qBAAyBA,QAAzBA,aAEAquB,KAfN,IAAA0xB,UAmBIxjD,EAAAsG,cAAC0rB,EAADA,UAAA,CACEC,UAAW2wB,EAAM92C,KACjBomB,gBAAiBywB,EAAkBl/C,IAEnCzD,gBAAC+iD,EAAD/iD,kBAAeyD,WAJjBuR,aAKGvR,sBACCzD,EAAAsG,cAACy8C,EAADA,aAAA,KACE/iD,EAAAsG,cAAC08C,EAADA,eAAA,CAAgB9K,QAASz0C,WAAew/C,aAG5CjjD,EAAAsG,cAAC8rB,EAADA,YAAAjvB,OAAAC,OAAA,GACMK,WAAey/C,gBACfz/C,EAAMm/C,OACV9wB,SAAUgC,EACVwvB,OAAQxvB,gBACKrwB,QAAYqI,KACzB0gB,SAAU/oB,qBAA2BA,WAAe+oB,SACpD6F,eAAe,SACflM,MAAO1iB,WAAe0/C,cAErB1/C,iBACCA,EAAAk/B,SAAAghB,KAAAx6C,IAAA,SAAyBy6C,UACvB5jD,EAAAsG,cAAA,UAAQqT,IAAKiqC,EAAI/iD,MAAOA,MAAO+iD,EAAI/iD,OAChC+iD,EADHrzB,UAKNvwB,gBAACyyB,EAADzyB,eACGyD,WADHzD,YAEGyD,cAAkBA,QA9BzBqI,SClBW+3C,EAAqB,SAE9BpgD,UACFzD,EAAAsG,cAAC0rB,EAADA,UAAA,CACEC,UAAWxuB,QAAYqI,KACvBomB,gBAAiBywB,EAAkBl/C,IAEnCzD,gBAAC+iD,EAAD/iD,kBAAeyD,WAJjBuR,aAKGvR,sBACCzD,EAAAsG,cAACy8C,EAADA,aAAA,KACE/iD,EAAAsG,cAAC08C,EAADA,eAAA,CAAgB9K,QAASz0C,WAAew/C,aAG5CjjD,EAAAsG,cAAC8rB,EAADA,YAAAjvB,OAAAC,OAAA,GACMK,WAAey/C,gBACfz/C,EAAMm/C,qBACGn/C,QAAYqI,KACzB0gB,SAAU/oB,qBAA2BA,WAAe+oB,SACpD6F,eAAe,WACflM,MAAO1iB,WAAe0/C,eAExBnjD,gBAACyyB,EAADzyB,eACGyD,WADHzD,YAEGyD,cAAkBA,QApBvBqI,SCJWg4C,EAAqB,SAE9BrgD,UACFzD,EAAAsG,cAAC0rB,EAADA,UAAA,CACEC,UAAWxuB,QAAYqI,KACvBomB,gBAAiBywB,EAAkBl/C,IAEnCzD,EAAAsG,cAACy9C,EAADA,SAAA5gD,OAAAC,OAAA,GACMK,WAAey/C,gBACfz/C,EAAMm/C,OACV/5C,GAAIpF,QAAYqI,KAChB4/B,QAASjoC,QAAY5C,oBACR4C,QAAYqI,KACzB0gB,SAAU/oB,qBAA2BA,WAAe+oB,SACpDrG,MAAO1iB,WAAe0/C,cAErB1/C,WATHuR,YAUGvR,sBACCzD,EAAAsG,cAAC08C,EAADA,eAAA,CACE/5B,UAAW,eACXivB,QAASz0C,WAAew/C,aAI9BjjD,gBAACyyB,EAADzyB,eACGyD,WADHzD,YAEGyD,cAAkBA,QAvBvBqI,SCVWk4C,EAAmB,SAE5BvgD,UACFzD,EAAAsG,cAAA,WACEtG,EAAAsG,cAAA,QAAAnD,OAAAC,OAAA,GACMK,WAAey/C,gBACfz/C,EAAMm/C,OACV7tC,KAAMtR,EAAMsR,KACZlM,GAAIpF,EAAMqI,mBACGrI,EAAMqI,QAEpBrI,eAAmBA,QAAnBA,OACCA,cAAkBA,QADnBA,OAEGzD,EAAAsG,cAAA,OAAK2iB,UAAU,SAASxlB,cAAkBA,QAVhDqI,SCYIm4C,EAAY,CAChB,CACE1zB,MADF,eAEE1vB,MAAO,GAET,CACE0vB,MADF,UAEE1vB,MAAO,KAET,CACE0vB,MADF,UAEE1vB,MAAO,KAET,CACE0vB,MADF,QAEE1vB,MAAO,MAET,CACE0vB,MADF,OAEE1vB,MAAO,QAQX,SAAAqjD,EAAA9W,EAAAvsC,UACSA,EAAQusC,EAAfvsC,MAOF,IAAasjD,cAKX3gD,WAAYC,0BACVA,QAFM2gD,gBAAA74C,MAIAoX,EACJshC,qBAAoBh9B,WAAO3mB,oBAAyB2mB,EAAzB3mB,OAAF,KAD3B,EAGM8sC,EAAW6W,MAAoBA,EAAUA,SAA/C,QACA5jD,MAAa,UACX+sC,QAEFiX,eAAsB/jD,KAAA+jD,eAAA1gD,KAAtBrD,WACAwzB,aAAoBxzB,KAAAwzB,aAAAnwB,KAApBrD,WACAgkD,WAAkBhkD,KAAAgkD,WAAA3gD,KAAlBrD,WACAikD,gBAAuBjkD,KAAAikD,gBAAA5gD,KAAvBrD,gHAEKikD,yBAAe/hD,QACpB4hD,WAAA5hD,eAEK6hD,wBAAc/Q,EAAAjpC,OACbm6C,EACJP,gBAAe7W,UAAYA,UAAmBkG,KAAa2Q,EAD7D,QAEAt/C,SAAc,CACZyoC,SAAUoX,SAEZ/gD,MAAAo/C,KAAA4B,cACEnkD,KAAAmD,MAAAm/C,MADF92C,KAEEo4C,EAAcM,EAAclkD,KAAA8jD,WAF9BM,gBAAA,gBAMK5wB,sBAAYzpB,QACjB5G,MAAAo/C,KAAA4B,cACEnkD,KAAAmD,MAAAm/C,MADF92C,KAEEo4C,EAAe5jD,KAAAD,MAAD+sC,SAAsB/iC,SAFtCq6C,gBAAA,gBAMKJ,oBAAUj6C,QACf5G,MAAAo/C,KAAA4B,cACEnkD,KAAAmD,MAAAm/C,MADF92C,KAEEo4C,EAAe5jD,KAAAD,MAAD+sC,SAAsB/iC,SAFtCq6C,gBAAA,gBAMKlgD,yBAEHxE,EAAAsG,cAAC0rB,EAADA,UAAA,CACEC,UAAW3xB,KAAAmD,MAAAm/C,MAAiB92C,KAC5BomB,gBAAiBywB,EAAmBriD,KAADmD,QAEnCzD,gBAAC+iD,EAAD/iD,kBAAeM,KAAAmD,MAAAk/B,SAJjB3tB,aAKG1U,KAAAmD,MAAAk/B,SAAAsgB,WACCjjD,EAAAsG,cAACy8C,EAADA,aAAA,KACE/iD,EAAAsG,cAAC08C,EAADA,eAAA,CAAgB9K,QAAS53C,KAAAmD,MAAAk/B,SAAoBsgB,aAGjDjjD,EAAAsG,cAACq+C,OAADjyB,WAAA,KACE1yB,EAAAsG,cAACq+C,OAADvyB,YAAAjvB,OAAAC,OAAA,CACE2nC,IAAK,GACDzqC,KAAAmD,MAAAk/B,SAAoBugB,+BACX5iD,KAAAmD,MAAAm/C,MAAiB92C,KAC9BiJ,KAAM,SACNjR,cA/EZspC,EAgFc9sC,KAAAD,MAD6B+sC,SA/E3CvpC,EAiFcvD,KAAAmD,MAAAm/C,MAF6B/hD,MA9ElCgD,EAAeupC,EAAtBvsC,OAkFU2rB,SACElsB,KAAAmD,MAAAo/C,KAAA+B,cAAgCtkD,KAAAmD,MAAAk/B,SAAoBnW,SAEtDsF,SAAUxxB,KAAKwzB,aACfwvB,OAAQhjD,KAAKgkD,WACbO,SAAUvkD,KAAKikD,gBACfp+B,MAAO7lB,KAAAmD,MAAAk/B,SAAoBwgB,eAE7BnjD,EAAAsG,cAAC6sC,EAADA,eAAA,CACEtqC,GAAIvI,KAAAmD,MAAAm/C,MAAA92C,KAAwB,YAC5BumB,eAAgBsyB,kBAAgBhyB,OAChCxM,MAAO7lB,KAAAD,MAAA+sC,SAAoB7c,MAC3BtB,SAAU3uB,KAAK+jD,eACf73B,SACElsB,KAAAmD,MAAAo/C,KAAA+B,cAAgCtkD,KAAAmD,MAAAk/B,SAAoBnW,UAGrDy3B,eAAc7W,EAAAzqB,GAAA,OACb3iB,EAAAsG,cAAC+sC,EAADA,SAAA,CAAU15B,IAAKgJ,EAAO2wB,SAAUlG,EAASvsC,OACtCusC,EADH7c,WAMNvwB,gBAACyyB,EAADzyB,eACGM,KAAAmD,MAAAk/B,SADH3iC,YAEGM,KAAAmD,MAAAo/C,KAAAt1C,OAAuBjN,KAAAmD,MAAAm/C,MA/C9B92C,QA9DJ,IAAAshC,EAAAvpC,KAYasgD,CAA8BnkD,aChB9B8kD,cAAbthD,qDAKSuhD,SAAA,SAAYthD,OAEXsR,EAAOzU,cAAiBmD,EAA9Bk/B,UACMqiB,EAAoB,CACxBC,SADwBnB,EAExB1W,SAFwB+W,EAGxBe,OAHwBlB,EAIxBR,OAJwBJ,EAKxB+B,SAAUtB,UASV7jD,EAAAsG,cAAC8+C,EAADA,MAAAjiD,OAAAC,OAAA,CACEuW,IAAKlW,WAAeqI,KACpBA,KAAMrI,WAAeqI,KACrBiJ,KAAMA,EACN2e,SAXU,SAAI7yB,MACZ4C,sBAAJ5C,SACSP,QAAP+kD,uBAUI5hD,GACJg/C,UAAWuC,MAA2BlC,gHAKrCt+C,sBACC8gD,EAAShlD,KAAAilD,yBAA8BjlD,KAAAmD,MAA7C+hD,YACMC,EAAgBnlD,KAAAolD,eACpBplD,KAAAmD,MADoB+hD,WAEpBllD,KAAAmD,MAFFI,qBAIOvD,KAAAmD,MAAAgB,SAAoB,QAAA6gD,EAEzBP,SAAUzkD,KAFeykD,SAGzBlhD,aAHyB4hD,EAIzBz/C,OAAQ1F,KAAAmD,MAAWuC,sBAOf0/C,wBAAcF,EAAA3hD,qBACbV,OAAAwiD,KAAAH,GAAAI,OAAA,SAA+BxlD,EAAAuZ,SAC9BksC,EAAOL,EAAb7rC,GACI9Y,EAAQP,iBAAwBuD,EAApC8V,WACA,MAAI9Y,IACFA,EAAQP,iBAAwBulD,EAAhChlD,eAEKsC,OAAAC,OAAA,GAAAhD,UAAauZ,GAAO9Y,EAA3B+Q,KANF,iBAaM2zC,kCAAwBC,qBACvBriD,OAAAwiD,KAAAH,GAAAr8C,IAAA,SACAwQ,UAAQxW,OAAAC,OAAA,GACRoiD,EADQ7rC,IAEX7N,KAFW6N,EAGXzE,SAAU5U,kBAAqBklD,EAHpB7rC,IAIX5E,KAAMzU,cAAiBklD,EAJjB7rC,QADHmsC,KAAA,SAOC/2C,EAAAg3C,UACYh3C,SAAhB,IACgBg3C,SAAhB,kBAUEC,qBAAWrjB,OACb5tB,EAAO4tB,QAAX,cACA5tB,OACE,UACA,cACA,OACEA,qBAEF,SACEA,mBAEF,UACEA,oBAEA4tB,QAAiBA,OAArBntB,SACET,YAEE4tB,EAAJsjB,SACElxC,cAEFA,eAUMmxC,yBAAevjB,UACbA,EAAR5tB,UACE,cACA,eACA,gBACE,iBAEO4tB,EAAPztB,uBAYEixC,sBAAYxjB,EAAA9hC,WACdA,OAAJ,OAA2BA,SACzBA,SAEM8hC,EAAR5tB,UACE,gBACSwM,SAAQ1gB,EAAf,QACF,cACA,iBACE,SAAOulD,6CAEPvlD,MAhJKikD,CAAuB9kD,aCevBqmD,6JACJ7hD,oCAEHxE,EAAAsG,cAAAw+C,EAAA,CACEU,WAAYllD,KAAAmD,MAAW+hD,WACvB3hD,aAAcvD,KAAAmD,MAAWI,aACzBmC,OAAQ1F,KAAAmD,MAAWuC,OACnBq/C,qBAAsB/kD,KAAAmD,MAAW4hD,sBAJnC,SAMG7iD,WAAiB8iD,iBAAQt/C,WAAQ++C,2BAChC/kD,EAAAsG,cAACggD,EAADA,OAAA,CACEC,cAAe1iD,EACfq3B,SAAUl1B,EACV0tB,SAAUpzB,QAAWozB,UAHvB,SAKGlxB,WAEC2O,iBACAq1C,WACAC,YACAl5C,UACAiuB,WACAkrB,YACA9B,iBACA+B,iBACAC,cACAC,mCAEAp7C,EAAAhI,MAAAgB,SAAoB,OAAAgiD,SAAAl5C,EAGlB+3C,OACEtlD,EAAAsG,cAACtG,EAAD+xB,SAAA,KACGuzB,EAAAn8C,IAAA,SAAWw5B,UACVoiB,EAAS,QAAAx3C,WAAAo1B,UAAA6jB,EAIP3lD,OAAQsQ,GAAD,IAAewxB,EAAf72B,wBAVGqvB,eAAAypB,UAAAppB,eAAAkrB,YAAAC,aAAAE,eAAAD,SAsBlBz1C,WAlDHk1C,CAAoBrmD,wECvBjC,SAAgB8mD,EAAyBnkB,gBAGrCrJ,QACAyR,QACAre,aACAvX,SACAguC,gBACA4D,mBACA9D,cACA+D,iBACGC,uOAEE9jD,OAAAC,OAAA,GAAA6jD,GAEL9D,YAAaA,GAFR4D,EAGL7D,gBAAiB,MAAAgE,MAAA5tB,MAAAyR,WAAAre,OAKfvX,GAEF8tC,UAAWA,GAVb+D,IC1CF3lD,IAAM8lD,EAAN9lD,mEAEM+lD,EAAN/lD,GACIgmD,EAAJC,MC4BaC,cAIX/jD,WAAYC,0BACVA,QAWKixB,qBAAA,SAAwBrqB,KAC7B1F,SAAc,CAAEsuB,aAAe5oB,SAAkCxJ,cAG5D+zB,gBAAA,SAAmB4yB,SACoBlnD,EAAKD,MAAzC4yB,iBAAcmB,sBAElBozB,oBAA4Cv0B,SAAhD,MACEtuB,SAAc,CAAEsuB,aAAc,OAC9BoX,cAAmBjW,EAAnBjO,MAAA8M,GACAu0B,oBACAA,0BAIGnd,cAAA,SAAgBlkB,EAAAtlB,OACbi1B,EAAkBx1B,EAAKD,MAAvBy1B,gBACRnxB,SAAc,CACZmxB,cAAeA,EAAA/vB,OAAA,CAEb,OAAAogB,QAEEtlB,aAMDo0B,mBAAA,SAAsBR,GACGn0B,EAAKD,MAA3B+zB,oBACRK,KACE9vB,SAAc,CAAEsuB,aAAF,GAAoBmB,kBAAmBK,UAIlDD,sBAAA,SAAyBizB,OAItBrzB,EAAsB9zB,EAAKD,MAA3B+zB,oBAERzvB,SAAc,CAAEsuB,aAAcw0B,EAAYthC,QAC1CshC,KACEpd,cAAmBjW,EAAnBjO,MAA4CshC,EAA5CthC,aAIGgQ,eAAA,SAAkB7rB,OACfwrB,EAAkBx1B,EAAKD,MAAvBy1B,cAEFnT,EAAQmT,UAAdxrB,MACIqY,GAAJ,EAAgB,KACR+kC,EACD5xB,UADWnT,GAAA5c,OAEX+vB,QAAoBnT,EAFzB,MAIAhe,SAAc,CAAEmxB,cAAe4xB,WAI5BrxB,eAAA,SAAkBhsB,GACvBA,qBACA1F,SAAc,CAAEmxB,cAAe,WAG1BH,6BAAA,eACGD,EAAoBp1B,EAAKD,MAAzBq1B,kBAER/wB,SAAc,CAAE+wB,iBAAkBA,UAG7BJ,wBAAA,SAA2BqyB,GACJrnD,EAAKD,MAAzB+0B,kBAERuyB,KACEhjD,SAAc,CACZywB,gBADYuyB,EAEZjyB,iBAAiB,UAvFrBr1B,MAAa,CACXy1B,cADW,GAEX1B,kBAAmB9zB,KAAAmD,MAFRmkD,kBAGXxyB,gBAAiB90B,KAAAmD,MAAAokD,gBAHN1hC,MAIX8M,aAJW,GAKX60B,eALW,KAMXpyB,iBAAiB,6GAsFdlxB,yBACElE,KAAAmD,MAAAgB,SAAoBtB,OAAAC,OAAA,IACzBizB,eAAgB/1B,KADS+1B,eAEzBgU,cAAe/pC,KAFU+pC,cAGzB7V,sBAAuBl0B,KAHEk0B,sBAIzB2B,eAAgB71B,KAJS61B,eAKzBlB,mBAAoB30B,KALK20B,mBAMzBU,6BAA8Br1B,KANLq1B,6BAOzBL,wBAAyBh1B,KAPAg1B,wBAQzBZ,qBAAsBp0B,KARGo0B,qBASzBE,gBAAiBt0B,KATQs0B,iBAUtBt0B,KAVLD,WAnGSknD,CAAmCvnD,aCsBhD,IAAa+nD,cAUXvkD,WAAYC,eACVA,QACApD,MAAa,CACX2nD,QAAS1nD,KAAAmD,MAAWO,mHAIjB0Y,mCAAyBrY,QAC9BM,SAAc,CACZqjD,QAAS3jD,EAAUL,uBAIhBE,4BAAkBC,GAClB7D,KAAAmD,MAADO,SAAwB1D,KAA5B2nD,kBACEj1C,0BAIGxO,yBACDlE,KAAAmD,MAAJpB,MACS/B,KAAAmD,MAAPg3C,cAEGn6C,KAAAD,MAAL2nD,OAGO1nD,KAAAmD,MAAPgB,WAFSnE,KAAAmD,MAAP+2C,4BAKMxnC,sCACRk1C,oBACAD,YAAmBjP,OAAAhmC,WAAA,aACjBrO,SAAc,CACZqjD,QAAQ,KAET1nD,KAAAmD,MAJHi+C,sBAOQwG,wBACJ5nD,KAAJ2nD,cACEC,aAAa5nD,KAAb4nD,kBACAD,iBAAA18C,MAnDOw8C,CAAmB/nD,aAIhB+nD,eAAe,CAC3BrG,QAAS,KCtCb,IAAayG,6JAGJ3jD,oCAEHxE,EAAAsG,cAACqqB,EAADA,MAAA,cACGrH,OACMA,EAALsH,YACQ,IAAA7rB,MAAN,kCAEI4V,EAAY2O,gBAAlB,GACMjpB,EAAWipB,kBAAjB,UACOhpB,qBAAPgpB,QAZG6+B,CAA4BnoD,aCpBzC,IAOaooD,6JACJ5jD,wBAC0BlE,KAAKmD,aAC7BgB,EADCA,0JAFC2jD,CAAuBpoD,aAOvBqoD,EAAaC,aAAnBF,sBLAP,SAAiCvzC,OAC/BA,QACQ,IAAA9P,MAAN,2DAEIwjD,EAAN,UACAplD,gCAAgCwW,GAC9B4uC,KAAczB,EAAyBjyC,EAAvC0zC,MAEFA,sCCRF,cAEE,IAAInB,aACGE,IAAIl6C,EAAT,EAAgBA,EAAhB,GAAwBA,IACtBg6C,KAAgBpc,WAAhBoc,GAA2Bpc,mBAK3B5qC,EAAJ,GACMooD,GAAY,IAAA96C,MAAlB+6C,aAMID,IAAJnB,MACOC,IAAIl6C,EAAT,EAAgBA,EAAhB,KACEg6C,OACA,KAAIA,MAFkBh6C,IAGpBg6C,KADwB,MAQzBE,IAAIl6C,EAAT,EAAgBA,EAAhB,GAAwBA,IACtBhN,EAAS+mD,SAAgBC,EAAhBD,IAAT/mD,UAMEsoD,EAAJF,EACSp7C,EAAT,EAAgBA,EAAhB,EAAuBA,IACrBhN,EAAS+mD,SAAgBuB,EAAhBvB,IAAT/mD,EACAsoD,EAAqB1d,WAAW0d,EAAhCA,WAGFrB,IACAjnD,kBKlCF,SACEuoD,EACAC,mBAEQhlD,SAC2BglD,EAAMhlD,GAA/B+W,WAAQ2O,UAAOjpB,gBAChB,QAAAsa,EAEL8V,SAAUjH,UAAQF,GAADq/B,EAAwBhuC,GAFpC,IAGL2O,MAAOA,GAHFq/B,QAILtoD,wCAcN,SACEsoD,EACAC,2BAGmCA,IAAzBjuC,WAAQ2O,UAAOjpB,gBAChB,QAAAsa,EAEL8V,SAAUjH,UAAQF,GAADq/B,EAAwBhuC,GAFpC,IAGL2O,MAAOA,GAHFq/B,QAILtoD,4BAUN,SAAqCipB,2BACO,CACxCmH,SAAUjH,UAD8BF,SAExCA,wDC7DJ,SAAkCzoB,SACzB,CAAEgoD,SAAF,EAAiBC,MAAOjoD,uBAQjC,SACEkoD,EACAjlD,qBAAuB,GAEnBilD,GAAYA,EAAhBF,QAAkC,KAC1BhoD,EAAQkoD,EAAdD,aACOjoD,GAAPiD,SAGFA,yBAOF,SACEilD,YAEOA,IAAYA,EAAZA,UAA+BA,EAA/BA,gPCXIC,EAAb,SAAA9jC,GAQE,SAAA8jC,EAAYvlD,GAA2C,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAA0oD,IACrDpoD,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAA6lD,GAAAliC,KAAAxmB,KAAMmD,KALDpD,MAAQ,CACb6oB,QAAQ,GAKRtoB,EAAKs9C,aAAet9C,EAAKs9C,aAAav6C,KAAlBR,OAAA42C,EAAA,EAAA52C,CAAAvC,IAFiCA,EARzD,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAA6lD,EAAA9jC,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAA6lD,EAAA,EAAArvC,IAAA,eAAA9Y,MAAA,WAcIP,KAAKqE,SAAS,CACZukB,QAAS5oB,KAAKD,MAAM6oB,WAf1B,CAAAvP,IAAA,SAAA9Y,MAAA,WAoBI,OACE0jB,EAAA,cAACG,EAAA,YAAD,CACEwE,OAAQ5oB,KAAKD,MAAM6oB,OACnBmI,UACE9M,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9B0mB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO,qBAET5B,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9B0mB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO,yBAET5B,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9B0mB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO,qBAIbmL,SACE/M,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9BswC,OAAO,EACP5pB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO,qBAET5B,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9BswC,OAAO,EACP5pB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO,yBAET5B,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9BswC,OAAO,EACP5pB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO,2BAxErB6iC,EAAA,CAAkDhpD,6ECArCipD,EAAb,SAAA/jC,GAAA,SAAA+jC,IAAA,OAAA9lD,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAA2oD,GAAA9lD,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAA8lD,GAAA3jC,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAA8lD,EAAA/jC,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAA8lD,EAAA,EAAAtvC,IAAA,SAAA9Y,MAAA,WACkB,IAAAD,EAAAN,KACd,OACEikB,EAAA,cAAC7F,EAAA,EAAWnY,SAAZ,KACG,SAAAmU,GAA0B,IAAvB8gC,EAAuB9gC,EAAvB8gC,iBACF,OACEj3B,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,cAAe,WAC9B,SAAAoE,GAAC,OACAF,EAAA,cAAC21B,EAAA,sBAAD,KACG,SAAA5+B,GAA0B,IAAvBzK,EAAuByK,EAAvBzK,iBACIipB,EAAQ,eAAAte,EAAArY,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAC,EACf7zC,EACA0zB,GAFe,IAAA1gB,EAAA,OAAA2gC,EAAAjtC,EAAAotC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAKPzrC,EAAiBxI,GALV,OAMbmzC,EACE/2B,EAAE,2BAA4B,CAAEsX,mBAChC,WARWqgB,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAG,GAAAH,EAAA,SAWP/gC,EAAU+gC,EAAAG,GAAM/2C,QAAU42C,EAAAG,GAAM/2C,QAAU,GAChDg2C,EACE/2B,EAAE,0BAA2B,CAC3BsX,iBACA1gB,YAEF,SAjBW,yBAAA+gC,EAAAI,SAAAN,EAAA,iBAAH,gBAAAgN,EAAAC,GAAA,OAAA3tC,EAAA8J,MAAAhlB,KAAAilB,YAAA,GAqBd,OACEhB,EAAA,cAACG,EAAA,gBAAD,KACEH,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAOzB,EAAK6C,MAAMpB,MAClB2B,QAASpD,EAAK6C,MAAMO,QACpBw2C,eACEj2B,EAAA,cAAAA,EAAA,cACG,IAAIlb,MAAM,GAAG+/C,KAAK,GAAGjgD,IAAI,SAACyT,EAAG+F,GAAJ,OACxB4B,EAAA,cAACG,EAAA,oBAAD,CAAqB/K,IAAKgJ,GACxB4B,EAAA,cAACG,EAAA,mBAAD,UAKR+1B,cAAel2B,EAAA,cAACvE,EAAA,EAAD,OAEd,kBACCpf,EAAK6C,MAAMwK,YAAY9E,IAAI,SAAC+E,EAAGyU,GAK7B,OACE4B,EAAA,cAACG,EAAA,oBAAD,CAAqB/K,IAAKgJ,GACxB4B,EAAA,cAACG,EAAA,eAAD,CACE5Y,KAAMoC,EAAEpC,KACRmF,YAAa/C,EAAE+C,aAAe,GAC9B/B,KAAMD,4BACJmwC,kDACAlxC,GAEF4a,KAAMloB,EAAK6C,MAAM4lD,kBAAkBn7C,GACnC0rB,UACEh5B,EAAK6C,MAAM6lD,sBACP,CACEzuB,SAAUj6B,EAAK6C,MAAM8lD,sBACnBr7C,GAEF+rB,gBAAiBxV,EAAE,iBACnByV,gBAAiBzV,EAAE,iBACnB0V,uBAAwB1V,EACtB,qBACA,CAAEsX,eAAgB7tB,EAAEpC,OAEtBsuB,qBAAsB3V,EACpB,oBAEFqW,cAAerW,EAAE,eACjBgW,cAAehW,EACb,2BAEFmW,cAAenW,EAAE,eACjBsW,gBACyB,IAAtB7sB,EAAEs7C,KACLzvB,SApCO,WACnBD,EAAS5rB,EAAErF,GAAKqF,EAAEpC,aAqCRP,oBAvF1C09C,EAAA,CAAiCjpD,6BCejC,IAAMypD,EAAe,CACnBh1B,WAAY,OACZ5rB,GAAI,OACJoM,YAAaqL,IAAKmE,EAAE,kCACpB0B,MAAO7F,IAAKmE,EAAE,gBAGVsQ,EAAc,CAAC00B,GAEfC,EAAa,CACjB7gD,GAAI,OACJ2sB,WAAW,EACXrP,MAAO7F,IAAKmE,EAAE,gBAGV0Q,EAAyB,CAACu0B,GAMnBC,EAAb,SAAAzkC,GAAA,SAAAykC,IAAA,OAAAxmD,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAqpD,GAAAxmD,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAwmD,GAAArkC,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAwmD,EAAAzkC,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAwmD,EAAA,EAAAhwC,IAAA,SAAA9Y,MAAA,WAOkB,IAAAD,EAAAN,KACd,OACEikB,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,WACf,SAAAoE,GAAC,OACAF,EAAA,cAACg2B,EAAA,2BAAD,CACEqN,kBAAmB6B,EACnB5B,gBAAiB6B,GAEhB,SAAAE,GACC,IAAMC,EA9DpB,SACE57C,EACA6nB,EACAV,EACAM,GAEA,IAAIm0B,EAA+B57C,EAgBnC,OAfA6nB,EAAcriB,QAAQ,SAACnJ,GACrB,IAAMw/C,EAAex/C,EAAOzJ,MAAM4U,cAClCo0C,EAA+BA,EAA6Bv/C,OAC1D,SAAC4D,GAAD,OAAmBA,EAAEpC,KAAK2J,cAAcs0C,SAASD,OAIrDD,EAA+BA,EAA6B/D,KAC1D,SAACkE,EAAKC,GACJ,IACMC,EAAQx0B,EAAkBu0B,EAAMD,EACtC,OAFat0B,EAAkBs0B,EAAMC,GAEzBn+C,KAAKq+C,cAAcD,EAAMp+C,QA4CQs+C,CACnCxpD,EAAK6C,MAAMwK,YACX27C,EAAQ9zB,cACR8zB,EAAQx0B,gBACRw0B,EAAQl0B,iBAGV,OACEnR,EAAA,cAACG,EAAA,oBAADvhB,OAAAC,OAAA,CACEw5B,uBAAwB8e,IAAU7gC,OAAOwlC,kBACzCtrB,YAAaA,EACbI,UAAWA,EACXiT,aAAcyhB,EAA6Br0C,QACvCo0C,EALN,CAMES,yBAA0B5lC,EAAE,+BAC5BoR,iBAAkBpR,EAAE,sBAAuB,CACzC8R,MAAOszB,EAA6Br0C,WAGrC5U,EAAK6C,MAAMgB,SACZ8f,EAAA,cAAC+lC,EAAD,CACEjoD,MAAOzB,EAAK6C,MAAMpB,MAClBinD,uBAAuB,EACvBtlD,QAASpD,EAAK6C,MAAMO,QACpBiK,YAAa47C,EACbR,kBAAmBzoD,EAAK6C,MAAM4lD,kBAC9BE,sBAAuB3oD,EAAK6C,MAAM8lD,iCA1CtDI,EAAA,CAA4C3pD,aAA/B2pD,EAGGY,aAAe,CAC3BC,eAAe,uBCgCNC,EAAb,SAAAvlC,GAAA,SAAAulC,IAAA,OAAAtnD,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAmqD,GAAAtnD,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAsnD,GAAAnlC,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAsnD,EAAAvlC,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAsnD,EAAA,EAAA9wC,IAAA,SAAA9Y,MAAA,WAOkB,IAAAD,EAAAN,KACRklD,EAAariD,OAAOwiD,KAAKrlD,KAAKmD,MAAM4K,UAAUwG,YAAa+wC,OAC/D,SAAC8E,EAAK/wC,GACJ,IAAMsN,EAAIrmB,EAAK6C,MAAM4K,UAAUwG,WAAY8E,GAK3C,OAJA+wC,EAAI/wC,GAAJxW,OAAAwnD,EAAA,EAAAxnD,CAAA,GACK8jB,EADL,CAEEuF,SAAU5rB,EAAK6C,MAAM+oB,WAEhBk+B,GAET,IAEF,OACEnmC,EAAA,cAAC21B,EAAA,sBAAD,KACG,SAAAx/B,GAA+B,IAA5B5J,EAA4B4J,EAA5B5J,sBACE85C,GAA+B,EAC/BxvB,EAAmE,GACjEyvB,EAA0B,eAAAvvC,EAAAnY,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAC,EAAO/qC,GAAP,IAAA5D,EAAA+/B,EAAA,OAAA0O,EAAAjtC,EAAAotC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAGjClhB,EAAoB,IAChBwvB,EAJ6B,CAAAxO,EAAAE,KAAA,gBAKzB/uC,EAAoC,GALX6uC,EAAAE,KAAA,EAMVxrC,EACnBlQ,EAAK6C,MAAM4K,UAAUxF,GACrBsI,GAR6B,aAMzBm8B,EANyB8O,EAAAuE,MAYpBmK,KAAK,SAAAl5C,GAAG,MAAkB,eAAdA,EAAIm5C,SAA2B,CAChDx9C,OAAQ,KAEVA,QAAU,IACZkG,QAAQ,SAAA7B,GACRA,EAAIo5C,WAAWv3C,QAAQ,SAAAosC,GAAC,OAAKtyC,EAAOsyC,GAAKjuC,EAAIX,gBAE/CmqB,IAEIkS,EAAOwd,KAAK,SAAAl5C,GAAG,MAAkB,iBAAdA,EAAIm5C,SAA6B,CAClDx9C,OAAQ,KAEVA,QAAU,IACZpE,IACA,SAAAyI,GAAG,MACA,CACCpM,QAASoM,EAAIX,YACb8D,KAAM,YAGR5R,OAAOwiD,KAAKp4C,GAAQiI,OAhCO,CAAA4mC,EAAAE,KAAA,eAiCvB/uC,EAjCuB,QAmCE,IAA7B6tB,EAAkB5lB,SACpB4lB,EAAoB,CAClB,CACE51B,QAAO,GAAAO,OACLnF,EAAK6C,MAAM4K,UAAUvC,KADhB,oCAGPiJ,KAAM,aAzCmB,yBAAAqnC,EAAAI,SAAAN,MAAH,gBAAAgN,GAAA,OAAA5tC,EAAAgK,MAAAhlB,KAAAilB,YAAA,GAgDhC,OACEhB,EAAA,cAAC0mC,EAAA,SAAD,CACE5F,qBAAsB,mBACtBG,WAAY0F,2BAAiB1F,GAC7B3hD,aAAcjD,EAAK6C,MAAMI,aACzB6vB,SAAUm3B,EACV7kD,OAAQpF,EAAK6C,MAAMuC,QAElB,SAAAwV,GAWK,IAVJ8pC,EAUI9pC,EAVJ8pC,OACAnqB,EASI3f,EATJ2f,aACAypB,EAQIppC,EARJopC,aACA6B,EAOIjrC,EAPJirC,MACAjrB,EAMIhgB,EANJggB,QACAkrB,EAKIlrC,EALJkrC,aACAC,EAIInrC,EAJJmrC,UACAE,EAGIrrC,EAHJqrC,WACAD,EAEIprC,EAFJorC,aACAz1C,EACIqK,EADJrK,OAEMg6C,EAA8B,eAAAhqC,EAAAhe,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAW,IAAA,OAAAZ,EAAAjtC,EAAAotC,KAAA,SAAAU,GAAA,cAAAA,EAAAR,KAAAQ,EAAAP,MAAA,cACrCsO,GAA+B,EADM/N,EAAAP,KAAA,EAE/BsK,IAF+B,OAGrCgE,GAA+B,EAHM,wBAAA/N,EAAAL,SAAAI,MAAH,yBAAAz7B,EAAAmE,MAAAhlB,KAAAilB,YAAA,GAMpC,OAAO3kB,EAAK6C,MAAMgB,SAAS,CACzBgiD,QACAnB,SACAnqB,eACAypB,eACAppB,UACAkrB,eACAC,YACAE,aACAD,aAAcuE,EACd/vB,oBACAjqB,mBA7GlBs5C,EAAA,CAAuCzqD,aAA1ByqD,EAGGF,aAAe,CAC3B1mD,aAAc,ICpGlBsW,EAAA8M,EAAA5M,EAAA,sBAAA+wC,IAAAjxC,EAAA8M,EAAA5M,EAAA,sBAAAiwC,IAAAnwC,EAAA8M,EAAA5M,EAAA,sBAAAgxC,IAAAlxC,EAAA8M,EAAA5M,EAAA,sBAAAixC,yBCAA3L,EAAAC,QAAiBzlC,EAAA0lC,EAAuB,2CCAxCF,EAAAC,QAAiBzlC,EAAA0lC,EAAuB,6CCAxCF,EAAAC,QAAiBzlC,EAAA0lC,EAAuB,0CCAxCF,EAAAC,QAAiBzlC,EAAA0lC,EAAuB,2CCAxCF,EAAAC,QAAiBzlC,EAAA0lC,EAAuB,0CCAxCF,EAAAC,QAAiBzlC,EAAA0lC,EAAuB,kQCuC3B0L,EAAb,SAAArmC,GAAA,SAAAqmC,IAAA,IAAA7kC,EAAA9lB,EAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAirD,GAAA,QAAA5kC,EAAApB,UAAA/P,OAAAoR,EAAA,IAAAvd,MAAAsd,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtB,UAAAsB,GAAA,OAAAjmB,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,MAAAomB,EAAAvjB,OAAAkiB,EAAA,EAAAliB,CAAAooD,IAAAzkC,KAAAxB,MAAAoB,EAAA,CAAApmB,MAAAyF,OAAA6gB,MAISvmB,MAAQ,CACbk7B,WAAW,GALf36B,EAAA,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAAooD,EAAArmC,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAooD,EAAA,EAAA5xC,IAAA,mBAAA9Y,MAAA,SAQ0B4H,GAEtB,IAAM+iD,EAAY/iD,EAAW+gD,KAE7B,OAAkB,IAAdgC,EACKlrC,IAAKmE,EAAE,yBAGTnE,IAAKmE,EAAE,0BAA2B,CAAE8R,MAAOi1B,MAhBtD,CAAA7xC,IAAA,SAAA9Y,MAAA,WAmBkB,IAAA+W,EAAAtX,KACd,OACEikB,EAAA,cAAC7F,EAAA,EAAWnY,SAAZ,KACG,SAAAmU,GAA0B,IAAvB8gC,EAAuB9gC,EAAvB8gC,iBACF,OACEj3B,EAAA,cAACg2B,EAAA,cAAD,KAIG,SAAAj/B,EAAAE,EAAA2F,GAAA,IAAG9Y,EAAHiT,EAAGjT,aAAkBI,EAArB+S,EAAqB/S,WAAgBgjD,EAArCtqC,EAAqCsqC,QAASr7B,EAA9CjP,EAA8CiP,SAA9C,OACC7L,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,cAAe,WAC9B,SAAAoE,GAAC,OACAF,EAAA,cAACmnC,EAAA,sBAAD,KACG,SAAAroC,GAAwD,IAArDpb,EAAqDob,EAArDpb,iBAAkB8I,EAAmCsS,EAAnCtS,eAAgBC,EAAmBqS,EAAnBrS,aACpC,OACEuT,EAAA,cAACmnC,EAAA,eAAD,CACE7iD,GAAIR,EACJxE,aAAc4E,EACdkR,IAAKyW,EAASzW,KAEb,SAAA6J,GAA8B,IAA3B5f,EAA2B4f,EAA3B5f,KAAMG,EAAqByf,EAArBzf,QAAS1B,EAAYmhB,EAAZnhB,MACX6Y,EAAI,eAAAmJ,EAAAlhB,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAC,EAAAx4B,GAAA,IAAA5X,EAAAmF,EAAA1I,EAAAojD,EAAA,OAAA3P,EAAAjtC,EAAAotC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXxwC,EADW4X,EACX5X,KACAmF,EAFWyS,EAEXzS,YACA1I,EAHWmb,EAGXnb,qBAQMojD,EAAoB1jD,EACxBrE,EACAkI,EACAmF,EACA1I,GAfS6zC,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAkBHvrC,EAAe46C,GAlBZ,cAmBTF,EAAQlO,KACN7B,IAAUztC,YAAYxF,WAAW4S,QAAQ,CACvC5S,WAAYkjD,KArBPvP,EAAAwP,OAAA,UAwBF,GAxBE,cAAAxP,EAAAC,KAAA,EAAAD,EAAAG,GAAAH,EAAA,SA0BTZ,EACE/2B,EAAE,yBACF,SA5BO23B,EAAAwP,OAAA,UA8BF,GA9BE,yBAAAxP,EAAAI,SAAAN,EAAA,iBAAH,gBAAAgN,GAAA,OAAA7kC,EAAAiB,MAAAhlB,KAAAilB,YAAA,GAkCJsmC,EAAe,eAAAC,EAAA3oD,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAW,EACtB3rC,GADsB,IAAA86C,EAAA,OAAA/P,EAAAjtC,EAAAotC,KAAA,SAAAU,GAAA,cAAAA,EAAAR,KAAAQ,EAAAP,MAAA,cAGtB1kC,EAAKjT,SAAS,CAAE42B,WAAW,IAHLshB,EAAAP,KAAA,EAIFphC,EAAK,CAAEjK,gBAJL,cAIhB86C,EAJgBlP,EAAA8D,KAKtB/oC,EAAKjT,SAAS,CAAE42B,WAAW,IALLshB,EAAA+O,OAAA,SAMfG,GANe,wBAAAlP,EAAAL,SAAAI,MAAH,gBAAAuM,GAAA,OAAA2C,EAAAxmC,MAAAhlB,KAAAilB,YAAA,GASfymC,EAAQ,eAAAC,EAAA9oD,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAgB,EACfnxC,GADe,IAAAigD,EAAAG,EAAA,OAAAlQ,EAAAjtC,EAAAotC,KAAA,SAAAe,GAAA,cAAAA,EAAAb,KAAAa,EAAAZ,MAAA,cAGXyP,GAAQ,EACZn0C,EAAKjT,SAAS,CAAE42B,WAAW,IAJZ2hB,EAAAZ,KAAA,EAKU6P,EAAergD,GALzB,WAMI,KADbogD,EALShP,EAAAyD,MAAA,CAAAzD,EAAAZ,KAAA,gBAAAY,EAAAZ,KAAA,EAOCphC,EAAK,CAAEpP,SAPR,OAObigD,EAPa7O,EAAAyD,KAAAzD,EAAAZ,KAAA,iBASbd,EAAiB0Q,EAAY,SAThB,eAWft0C,EAAKjT,SAAS,CAAE42B,WAAW,IAXZ2hB,EAAA0O,OAAA,SAYRG,GAZQ,yBAAA7O,EAAAV,SAAAS,MAAH,gBAAAmP,GAAA,OAAAH,EAAA3mC,MAAAhlB,KAAAilB,YAAA,GAeR8mC,EAAa,eAAAC,EAAAnpD,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAsQ,EACpBhkD,EACA4D,GAFoB,OAAA6vC,EAAAjtC,EAAAotC,KAAA,SAAAqQ,GAAA,cAAAA,EAAAnQ,KAAAmQ,EAAAlQ,MAAA,cAIpB1kC,EAAKjT,SAAS,CAAE42B,WAAW,IAJPixB,EAAAlQ,KAAA,EAKdphC,EAAK,CAAE3S,yBALO,OAMpB4D,EAAQsgD,eAAc,GACtB70C,EAAKjT,SAAS,CAAE42B,WAAW,IAPP,wBAAAixB,EAAAhQ,SAAA+P,MAAH,gBAAAG,EAAAC,GAAA,OAAAL,EAAAhnC,MAAAhlB,KAAAilB,YAAA,GAcb4mC,EAAc,eAAAS,EAAAzpD,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAA4Q,EACrBz7C,GADqB,IAAA1M,EAAAu8C,EAAA,OAAAjF,EAAAjtC,EAAAotC,KAAA,SAAA2Q,GAAA,cAAAA,EAAAzQ,KAAAyQ,EAAAxQ,MAAA,UAIA,KAAjBlrC,EAJiB,CAAA07C,EAAAxQ,KAAA,eAAAwQ,EAAAlB,OAAA,SAKZnnC,EACL,gCANiB,cAAAqoC,EAAAxQ,KAAA,EAUqBtrC,EACxCvI,EACA2I,GAZmB,WAUf1M,EAVeooD,EAAAnM,MAePtvC,QAfO,CAAAy7C,EAAAxQ,KAAA,eAAAwQ,EAAAlB,OAAA,UAgBZ,GAhBY,UAmBE,mBAAnBlnD,EAASrC,MAnBQ,CAAAyqD,EAAAxQ,KAAA,gBAoBb2E,EAAMx8B,EAAE,sBApBKqoC,EAAAlB,OAAA,SAqBZ3K,GAEH,kCAvBe,eAAA6L,EAAAlB,OAAA,SA0BdlnD,EAASc,QACZd,EAASc,QACTif,EAAE,uBACFA,EAAE,uBACF,mCA9BiB,yBAAAqoC,EAAAtQ,SAAAqQ,MAAH,gBAAAE,GAAA,OAAAH,EAAAtnC,MAAAhlB,KAAAilB,YAAA,GAiCdynC,EAAgB,WACpBvB,EAAQlO,KACN7B,IAAUztC,YAAYxF,WAAW4S,QAAQ,CACvC5S,WAAY7E,MAKZqpD,EAAe,WACnBxB,EAAQlO,KACN7B,IAAUztC,YAAYxF,WAAWmb,KAAK,CACpCnb,WAAY7E,MAKlB,OACE2gB,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAOA,EACP2B,SAAUD,EACVy2C,eAAgBj2B,EAAA,cAACG,EAAA,OAAD,MAChB+1B,cAAel2B,EAAA,cAACvE,EAAA,EAAD,OAEd,WACC,OACEuE,EAAA,cAAC2oC,EAAA,EAAD,CACE7+C,UAAWzK,EAAKyK,UAChBxK,aAAcD,EAAK2E,qBACnBikB,UAAW5U,EAAKnU,MAAMmgB,KACtB5d,OAAQqmD,GAEP,SAAAc,GAAA,IACC7H,EADD6H,EACC7H,OACAnqB,EAFDgyB,EAEChyB,aACAC,EAHD+xB,EAGC/xB,kBACAqrB,EAJD0G,EAIC1G,MACA7B,EALDuI,EAKCvI,aACAppB,EAND2xB,EAMC3xB,QACAkrB,EAPDyG,EAOCzG,aACAE,EARDuG,EAQCvG,aARD,OAUCriC,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,WAAD,KACEH,EAAA,cAACkL,EAAA,EAAD,CACEC,GAAIgsB,IAAUt8B,UAAU1D,QAEvB+I,EAAE,gBAELF,EAAA,cAACkL,EAAA,EAAD,CACEC,GAAIgsB,IAAUztC,YAAYA,eAEzBwW,EAAE,uBAELF,EAAA,0BACGE,EAAE,+BAGPF,EAAA,cAACG,EAAA,wBAAD,CACE8M,cAAc,EACd2K,sBACEv4B,EAAKqN,YAEP6qB,eAAgB7sB,4BACdmwC,kDACAx7C,GAEFm4B,eAAgBn4B,EAAKkI,KACrBowB,qBAAsBzX,EACpB,sBAEF2X,2BAA4B3X,EAC1B,0BAEFuX,oBAAqBvX,EACnB,mBAEF2oC,eAAgB3oC,EAAE,gBAClB6X,iBAAkB1kB,EAAKy1C,iBACrBzpD,GAEF23B,UAAW3jB,EAAKvX,MAAMk7B,UACtBc,oBACEwvB,EAEF5vB,aAAc+vB,IAEhBznC,EAAA,cAACG,EAAA,sBAAD,CACEuV,gBAAiBxV,EACf,iBAEFqW,cAAerW,EAAE,eACjBkX,cAAelX,EAAE,eACjBE,UAAWF,EACT,sBACA,CACEsX,eAAgBn4B,EAAKkI,OAGzB2vB,kBAAmBhX,EACjB,mBAEF0W,aAAcA,EACdK,SAAUirB,GAASjrB,EACnBD,UACEqpB,GAAgB8B,EAElBtrB,kBACEA,EAEFrH,UAAWnc,EAAKnU,MAAMmgB,KACtB8X,gBAAiBsxB,EACjBpxB,eAAgBqxB,EAChBl6B,WAAY6zB,GAEXtB,sBAnQ/CiG,EAAA,CAA2CvrD,qBCjC9BstD,EAAb,SAAApoC,GAAA,SAAAooC,IAAA,OAAAnqD,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAgtD,GAAAnqD,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAmqD,GAAAhoC,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAmqD,EAAApoC,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAmqD,EAAA,EAAA3zC,IAAA,SAAA9Y,MAAA,WAEI,OACE0jB,EAAA,cAACmnC,EAAA,gBAAD,KACG,SAAAhxC,GAAA,IAAG9W,EAAH8W,EAAG9W,KAAMG,EAAT2W,EAAS3W,QAAS1B,EAAlBqY,EAAkBrY,MAAlB,OACCkiB,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACvE,EAAA,EAAD,CAAWmG,MAAO,gBAClB5B,EAAA,cAAC2oC,EAAA,EAAD,CACE7qD,MAAOA,EACPinD,uBAAuB,EACvBtlD,SAAUD,EACVkK,YAAarK,EAAK6K,sBAClB46C,kBAAmB,SAAA5gD,GAAU,OAC3BizC,IAAUjzC,WAAW4S,QAAQ,CAAE5S,gBAEjC8gD,sBAAuB,SAAA9gD,GAAU,OAC/BizC,IAAUjzC,WAAWmb,KAAK,CAAEnb,yBAhB5C6kD,EAAA,CAAqCttD,aCmBhButD,mLAEjB,OACEhpC,EAAA,cAACg2B,EAAA,cAAD,KAIG,SAAA7/B,EAAAY,EAAAE,GAAA,IAAGtK,EAAHwJ,EAAGxJ,YAAiB7C,EAApBiN,EAAoBjN,UAAeo9C,EAAnCjwC,EAAmCiwC,QAAnC,OACClnC,EAAA,cAACmnC,EAAA,cAAD,CAAe7iD,GAAIqI,EAAarN,aAAcwK,GAC3C,SAAA8S,GAAA,IAAGvd,EAAHud,EAAGvd,KAAMG,EAATod,EAASpd,QAAS1B,EAAlB8e,EAAkB9e,MAAlB,OACCkiB,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAOA,EACP2B,SAAUD,EACVy2C,eAAgBj2B,EAAA,cAACG,EAAA,OAAD,MAChB+1B,cAAel2B,EAAA,cAACvE,EAAA,EAAD,OAEd,WAWC,OACEuE,EAAA,cAAC2oC,EAAA,EAAD,CAAmB7+C,UAAWzK,EAAMoC,OAXvB,SAACuC,GAGdkjD,EAAQlO,KACN7B,IAAU7gC,OAAOG,OAAO,CACtBzS,uBACA8F,UAAWzK,OAMZ,SAAAyf,GASK,IARJiiC,EAQIjiC,EARJiiC,OACAnqB,EAOI9X,EAPJ8X,aACAC,EAMI/X,EANJ+X,kBACAyrB,EAKIxjC,EALJwjC,WACAjC,EAIIvhC,EAJJuhC,aACAppB,EAGInY,EAHJmY,QACAkrB,EAEIrjC,EAFJqjC,aACAE,EACIvjC,EADJujC,aAEA,OACEriC,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACvE,EAAA,EAAD,CAAWmG,MAAO,yBAClB5B,EAAA,cAACG,EAAA,wBAAD,CACEiK,OAAQpK,EAAA,cAAC2oC,EAAA,EAAD,CAA8BjkD,KAAM,IAC5CivC,QACE3zB,EAAA,cAACG,EAAA,2BAAD,CACEoY,cAAel5B,EAAKkI,KACpBqvB,aAAcA,EACdC,kBAAmBA,GAElBkqB,GAGLhN,SAAUoD,IAAU7gC,OAAOwlC,kBAC3BhI,WAAYqD,IAAUztC,cACtBmqC,OAAQyO,EACRpO,eAAgBmM,EAChBlM,aACEn0B,EAAA,cAACG,EAAA,WAAD,CACEiL,QAASi3B,EACTp6B,UAAWgP,GAAWkrB,GAFxB,WAKGA,GACCniC,EAAA,cAAAA,EAAA,qBAEEA,EAAA,cAACG,EAAA,OAAD,CAAQ8K,KAAM,KAAMK,QAAQ,wBAlEnB7vB,aCV1BwtD,mLAEjB,OACEjpC,EAAA,cAACmnC,EAAA,eAAD,KACG,SAAAhxC,GAAA,IAAG9W,EAAH8W,EAAG9W,KAAMG,EAAT2W,EAAS3W,QAAS1B,EAAlBqY,EAAkBrY,MAAlB,OACCkiB,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACvE,EAAA,EAAD,CAAWmG,MAAO,qBAClB5B,EAAA,cAACG,EAAA,wBAAD,CACEiK,OAAQpK,EAAA,cAAC2oC,EAAA,EAAD,CAA8BjkD,KAAM,IAC5CivC,QACE3zB,EAAA,cAACG,EAAA,gBAAD,KACEH,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAOA,EACP2B,SAAUD,EACVy2C,eACEj2B,EAAA,cAAAA,EAAA,cACG,IAAIlb,MAAM,GAAG+/C,KAAK,GAAGjgD,IAAI,SAACyT,EAAG+F,GAAJ,OACxB4B,EAAA,cAACG,EAAA,oBAAD,CAAqB/K,IAAKgJ,GACxB4B,EAAA,cAACG,EAAA,mBAAD,UAKR+1B,cAAel2B,EAAA,cAACvE,EAAA,EAAD,OAEd,kBACCpc,EAAK+N,qBACFm0C,KAAK,SAAC/2C,EAAGg3C,GAAJ,OAAUh3C,EAAEjD,KAAKq+C,cAAcpE,EAAEj6C,QACtC3C,IAAI,SAACkF,EAAWsU,GAAZ,OACH4B,EAAA,cAACG,EAAA,oBAAD,CAAqB/K,IAAKgJ,GACxB4B,EAAA,cAACG,EAAA,eAAD,CACE5Y,KAAMuC,EAAUvC,KAChBmF,YAAa5C,EAAU4C,aAAe,GACtC/B,KAAMD,4BACJmwC,kDACA/wC,GAEFya,KAAM4yB,IAAU7gC,OAAOylC,mBAAmB,CACxCjyC,sBASlBgqC,WAAYqD,IAAUztC,0BA/CQjO,qBCX/B6a,EAAS,CACpB0yC,oBACAC,iBACAC,4LCmBE,OACElpC,EAAA,cAAC7F,EAAA,EAAWnY,SAAZ,KACG,SAAAmU,GAAA,IAAG8gC,EAAH9gC,EAAG8gC,iBAAH,OACCj3B,EAAA,cAACg2B,EAAA,cAAD,KACG,SAAC39B,EAADtB,EAAAE,GAAA,IAAMnN,EAANiN,EAAMjN,UAAW9F,EAAjB+S,EAAiB/S,qBAA0BkjD,EAA3CjwC,EAA2CiwC,QAA3C,OACClnC,EAAA,cAACmnC,EAAA,sBAAD,KACG,SAAAvqC,GAA0C,IAAvCvQ,EAAuCuQ,EAAvCvQ,iBAAkBG,EAAqBoQ,EAArBpQ,eACd/K,EAAM,eAAAwd,EAAArgB,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAC,EAAA74B,EAEblX,GAFa,IAAAL,EAAAmF,EAAAxI,EAAA,OAAAuzC,EAAAjtC,EAAAotC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXxwC,EADWuX,EACXvX,KAAMmF,EADKoS,EACLpS,YADKmrC,EAAAC,KAAA,EAKL5zC,EAAamI,EACjBvC,EACAvC,EACAmF,GAAe,GACf1I,GATS6zC,EAAAE,KAAA,EAWLvrC,EAAetI,GAXV,OAYX0D,EAAQsgD,eAAc,GACtBjR,EAAgB,0DAAAz1C,OAC4C+F,EAD5C,kCAEd,WAEF2/C,EAAQlO,KAAK7B,IAAUztC,eAjBZmuC,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAG,GAAAH,EAAA,kCAAAA,EAAAI,SAAAN,EAAA,kBAAH,gBAAAgN,EAAAC,GAAA,OAAA3lC,EAAA8B,MAAAhlB,KAAAilB,YAAA,GAoCZ,OACEhB,EAAA,cAAC0mC,EAAA,SAAD,CACE5F,qBAAsB,mBACtBG,WAjBgC,CAClC15C,KAAM,CACJhI,aAAc,GACdkR,YAAa,OACbE,UAAU,EACVH,KAAM,UAGR9D,YAAa,CACXnN,aAAc,GACdkR,YAAa,cACbD,KAAM,aAONlR,aAAc,CACZoN,YAAa,GACbnF,KAAM,IAER9F,OAAQA,GAEP,SAAA0d,GAAA,IACC4hC,EADD5hC,EACC4hC,OACAnqB,EAFDzX,EAECyX,aACAypB,EAHDlhC,EAGCkhC,aACAppB,EAJD9X,EAIC8X,QACAqrB,EALDnjC,EAKCmjC,WALD,OAOCtiC,EAAA,cAACG,EAAA,wBAAD,CACEiK,OAAQpK,EAAA,cAAC2oC,EAAA,EAAD,CAA8BjkD,KAAM,IAC5CivC,QACE3zB,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACvE,EAAA,EAAD,CAAWmG,MAAO,oBAClB5B,EAAA,cAACG,EAAA,2BAAD,CACEoY,cAAe,kBACf3B,aAAcA,GAEbmqB,IAIPjN,WAAYqD,IAAUztC,cACtBqqC,SAAUoD,IAAU7gC,OAAOylC,mBAAmB,CAC5CjyC,cAEF+pC,OAAQyO,EACRpO,gBAAiBjd,EACjBgd,cAAeoM,EACfjM,YAAY,mBAlFE34C,sBCfnB0tD,mLAEjB,OACEnpC,EAAA,cAACvE,EAAA,EAAD,KACEuE,EAAA,cAACG,EAAA,WAAD,KACEH,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,IAAUztC,eAApB,eACAsW,EAAA,gDAEFA,EAAA,cAACwT,EAAA,EAAD,KACExT,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,IAAOI,OAAOwlC,gBACpBnwB,OAAO,EACPuyB,UAAW5nC,EAAO2yC,iBAEpBjpC,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,IAAOI,OAAOylC,mBACpBpwB,OAAO,EACPuyB,UAAW5nC,EAAO0yC,oBAEpBhpC,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,IAAOI,OAAOG,OACpBkV,OAAO,EACPuyB,UAAW5nC,EAAO4yC,sBAtBqBztD,aCHtC2tD,EAAb,SAAAzoC,GAAA,SAAAyoC,IAAA,OAAAxqD,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAqtD,GAAAxqD,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAwqD,GAAAroC,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAwqD,EAAAzoC,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAwqD,EAAA,EAAAh0C,IAAA,SAAA9Y,MAAA,WAEI,OACE0jB,EAAA,cAACwT,EAAA,EAAD,KACExT,EAAA,cAACoM,EAAA,EAAD,CAAOH,KAAM/V,IAAOI,OAAOa,KAAM+mC,UAAWiL,IAC5CnpC,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,IAAOxM,YACbiiB,OAAO,EACPuyB,UAAW6K,IAEb/oC,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,IAAOhS,WAAWmb,KACxBsM,OAAO,EACPzrB,SAAU8f,EAAA,cAACqpC,EAAD,CAAuBhqC,MAAM,MAEzCW,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,IAAOhS,WAAW4S,QACxB6U,OAAO,EACPzrB,SAAU8f,EAAA,cAACqpC,EAAD,CAAuBhqC,MAAM,WAlBjD+pC,EAAA,CAAuC3tD,8BCQlB6tD,mLAEjB,OACEtpC,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,iBAAkB,WACjC,SAAAoE,GAAC,OACAF,EAAA,cAACG,EAAA,UAAD,CACExG,MAAO,CACL4tB,WAAY,SAGdvnB,EAAA,cAACG,EAAA,OAAD,KACEH,EAAA,cAACG,EAAA,WAAD,CACE6L,MAAO9L,EAAE,uCACTiL,GAAIjV,IAAOH,cAAca,OAE3BoJ,EAAA,cAACG,EAAA,WAAD,CACE6L,MAAO9L,EAAE,iCACTiL,GAAIjV,IAAOW,WAAWD,kBAjBYnb,aCmClD,IAAMypD,EAAe,CACnBh1B,WAAY,OACZ5rB,GAAI,OACJoM,YAAaqL,IAAKmE,EAAE,kCACpB0B,MAAO7F,IAAKmE,EAAE,gBAGVsQ,EAA6B,CAAC00B,GAE9BC,EAAa,CACjB7gD,GAAI,OACJ2sB,WAAW,EACXrP,MAAO7F,IAAKmE,EAAE,gBAGV0Q,EAAyB,CAACu0B,GAEXoE,4LACM5T,GACvB,YAAkB3uC,IAAX2uC,EAAIrxC,4CAGWqxC,GACtB,IAAMsR,EAAYuC,2BAAiB7T,EAAIsP,MAEvC,OAAkB,IAAdgC,EACKlrC,IAAKmE,EAAE,4BAGTnE,IAAKmE,EAAE,6BAA8B,CAAE8R,MAAOi1B,yCAGnC5wC,GAElBozC,MAAM,+BAAiCpzC,yCAGpBA,GAEnBozC,MAAM,wCAA0CpzC,oCAGlC,IAAAha,EAAAN,KACd,OACEikB,EAAA,cAACmnC,EAAA,kBAAD,KACG,SAAAhxC,GAAA,IAAG9W,EAAH8W,EAAG9W,KAAMG,EAAT2W,EAAS3W,QAAS1B,EAAlBqY,EAAkBrY,MAAlB,OACCkiB,EAAA,cAACg2B,EAAA,2BAAD,CACEqN,kBAAmB6B,EACnB5B,gBAAiB6B,GAEhB,SAAAE,GACC,IAAMqE,EA7EpB,SACE3zC,EACAwb,EACAV,EACAM,GAEA,IAAIu4B,EAAoB3zC,EAiBxB,OAhBAwb,EAAcriB,QAAQ,SAACnJ,GACrB,IAAMw/C,EAAex/C,EAAOzJ,MAAM4U,cAClCw4C,EAAoBA,EAAkB3jD,OAAO,SAAC4vC,GAAD,OAC3CA,EAAIpuC,KAAK2J,cAAcs0C,SAASD,OAIpCmE,EAAoBA,EAAkBnI,KAAK,SAACoI,EAASC,GACnD,OAAIz4B,EACKw4B,EAAQpiD,KAAKq+C,cAAcgE,EAAQriD,MAIrCqiD,EAAQriD,KAAKq+C,cAAc+D,EAAQpiD,QAyDNsiD,CACxBxqD,EAAK8G,MACLk/C,EAAQ9zB,cACR8zB,EAAQx0B,gBACRw0B,EAAQl0B,iBAGV,OACEnR,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,iBAAkB,WACjC,SAAAoE,GAAC,OACAF,EAAA,cAAAA,EAAA,cACEA,EAAA,cAAC8pC,EAAD,MACA9pC,EAAA,cAACG,EAAA,UAAD,CAAWuE,UAAU,cACnB1E,EAAA,oBAAI0E,UAAU,sBACXxE,EAAE,wCAELF,EAAA,mBACE8I,wBAAyB,CACvBC,OAAQ7I,EACN,iDAKRF,EAAA,cAACG,EAAA,qBAADvhB,OAAAC,OAAA,CACE2xB,YAAaA,EACbI,UAAWA,GACPv0B,EAAKP,MAHX,CAIE8+B,uBACE1kB,IAAOH,cAAcO,OAAOC,OAE9BstB,aAAc6lB,EAAkBz4C,QAC5Bo0C,EARN,CASEjlC,UAAW,GACX+T,gBAAiB,GACjB6G,mBAAoB9a,EAAE,+BACtB6a,oBAAqB7a,EACnB,mCAEFgb,2BAA4Bhb,EAC1B,mCAEFib,8BAA+Bjb,EAC7B,sCAEFie,SAAUje,EAAE,eACZoR,iBAAkBpR,EAAE,sBAAuB,CACzC8R,MAAO03B,EAAkBz4C,WAG3B+O,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAOA,EACP2B,SAAUD,EACVy2C,eACEj2B,EAAA,cAACG,EAAA,yBAAD,CACEvG,MAAO,IACPD,MAAO,CACLowC,gBAAiB,OACjBvpB,UAAW,MAIjB0V,cAAel2B,EAAA,cAACvE,EAAA,EAAD,OAEd,kBACCiuC,EACG3jD,OAAO,SAAC4vC,GAAD,OACNt5C,EAAK2tD,kBAAkBrU,KAExB/wC,IAAI,SAAC+wC,EAAgBv3B,GAAjB,OACH4B,EAAA,cAACG,EAAA,qBAAD,CACE/K,IAAKgJ,EACL/H,eAAgBs/B,EAAIrxC,GACpB61B,wBAAyBwb,EAAIjpC,YAC7B8tB,iBAAkBmb,EAAIhrC,KACtB0vB,iBAAkBsb,EAAIpuC,KACtB+xB,WAAYpZ,EAAE,iBACduZ,YAAavZ,EAAE,kBACfsZ,eAAgBtZ,EACd,uCAEFga,kBAAmB79B,EAAKysD,iBAAiBnT,GACzCngB,SAAUn5B,EAAK48B,aACfS,UAAWr9B,EAAK68B,cAChBa,OAAQyvB,2BAAiB7T,EAAIsP,2BAtHhBxpD,aC7C1BwuD,0LAGIhF,GACrB,OAAa,IAATA,EACKlpC,IAAKmE,EAAE,4BAGTnE,IAAKmE,EAAE,6BAA8B,CAC1C8R,MAAOizB,qCAIK,IAAA5oD,EAAAN,KACd,OACEikB,EAAA,cAACmnC,EAAA,0BAAD,CAA2Bx/C,YAAa5L,KAAKmD,MAAMyI,aAChD,SAAAwO,GAAA,IAAG9W,EAAH8W,EAAG9W,KAAMG,EAAT2W,EAAS3W,QAAS1B,EAAlBqY,EAAkBrY,MAAlB,OACCkiB,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAOA,EACP2B,SAAUD,EACVy2C,eAAgBj2B,EAAA,cAACG,EAAA,OAAD,MAChB+1B,cAAel2B,EAAA,cAACvE,EAAA,EAAD,OAEd,kBACCuE,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,iBAAkB,WACjC,SAAAoE,GAAC,OACAF,EAAA,cAACG,EAAA,2BAAD,CACEgU,gBAAiBjU,EAAE,sBACnBie,SAAUje,EAAE,eACZ6X,iBAAkB17B,EAAK6tD,gBAAgB7tD,EAAK6C,MAAM+lD,MAClD3mB,oBAAqBjiC,EAAK6C,MAAMo/B,oBAChCj/B,KAAMA,iBA/ByB5D,aCiB9B0uD,yLACG35C,GACpB,MAAI,UAAYA,EACPuL,IAAKmE,EAAE,0CAGZ,eAAiB1P,EACZuL,IAAKmE,EAAE,+CAGZ,cAAgB1P,EACXuL,IAAKmE,EAAE,6CAGTnE,IAAKmE,EAAE,kFAGA,IAAA7jB,EAAAN,KACd,OACEikB,EAAA,cAACg2B,EAAA,cAAD,KACG,SAAA7/B,EAAAY,EAAAE,GAAiD,IAA9CtP,EAA8CwO,EAA9CxO,YAAiB0D,EAA6B0L,EAA7B1L,UAAe67C,EAAcjwC,EAAdiwC,QAC5BkD,EAA0B,SAACC,GAE/BnD,EAAQlO,KACN7B,IAAUvuC,aAAa3E,YAAY6S,QAAQ,CACzCtR,cAAe6kD,MAIrB,OACErqC,EAAA,cAACmnC,EAAA,qBAAD,KACG,SAAAvqC,GAAyB,IAAtB5U,EAAsB4U,EAAtB5U,gBACIixB,EAAY,eAAAna,EAAAlgB,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAC,IAAA,OAAAF,EAAAjtC,EAAAotC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACb/vC,EAAgBL,GADH,OAInBu/C,EAAQlO,KAAK7B,IAAUz8B,eAAe7D,WAAWD,QAJ9B,wBAAAihC,EAAAI,SAAAN,MAAH,yBAAA74B,EAAAiC,MAAAhlB,KAAAilB,YAAA,GAMlB,OACEhB,EAAA,cAACmnC,EAAA,cAAD,CACEx/C,YAAaA,EACbrI,aAAc+L,GAEb,SAAA4T,GAAA,IAAG5f,EAAH4f,EAAG5f,KAAMG,EAATyf,EAASzf,QAAS1B,EAAlBmhB,EAAkBnhB,MAAlB,OACCkiB,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAOA,EACP2B,SAAUD,EACVy2C,eAAgBj2B,EAAA,cAACG,EAAA,OAAD,MAChB+1B,cAAel2B,EAAA,cAACvE,EAAA,EAAD,OAEd,kBACCuE,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,iBAAkB,WACjC,SAAAoE,GAAC,OACAF,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,WAAD,KACEH,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,IAAUt8B,UAAU1D,QAC3B+I,EAAE,gBAELF,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,IAAUz8B,eAAevD,QAChC+I,EAAE,0BAELF,EAAA,cAACkL,EAAA,EAAD,CACEC,GAAIgsB,IAAUz8B,eAAe7D,WAAWD,QAEvCsJ,EAAE,sBAELF,EAAA,0BACGE,EAAE,wCAGPF,EAAA,cAACG,EAAA,gBAAD,CACEsb,cAAep8B,EAAKkI,KAEpBq0B,cAAev8B,EAAK4lD,KACpBzpB,eAAgBtb,EAAE,iBAClBoZ,WAAYpZ,EAAE,iBACd0V,uBAAwB1V,EACtB,+BACA,CAAE3Y,KAAMlI,EAAKkI,OAEfsuB,qBAAsB3V,EACpB,8BAEFmZ,cAAenZ,EACb,gCAEFwb,cAAexb,EAAE,sBAAuB,CACtC5b,GAAIjF,EAAKsI,cAEX2iD,yBAA0BpqC,EACxB,kCAEFqqC,yBACyB,UAAvBlrD,EAAKwI,cACDqY,EACE,wCAEqB,eAAvB7gB,EAAKwI,cACLqY,EACE,6CAEFA,EACE,4CAGRqb,WAAYrb,EAAE,iBACdob,cAAepb,EACb,gCAEFsqC,sBAAuBtqC,EACrB,+BAEF4b,oBACE9b,EAAA,cAACyqC,EAAD,CACE9iD,YAAatI,EAAKiF,GAClB2gD,KAEE5lD,EAAK4lD,KAEP3mB,oBACE8rB,IAINzuB,oBAAqBwb,IAAUz8B,eAAe7D,WAAWxL,UAAU2L,OACjE,CAAE3L,UAAWhM,IAEfm2B,SAAUyD,EACVyxB,gBACE1qC,EAAA,cAACG,EAAA,kBAAD,CACEid,qBAAsB/9B,EAAKqN,YAC3B+uB,cAAep8B,EAAKkI,KACpB4sB,gBAAiBjU,EAAE,sBACnBsf,eAAgBtf,EAAE,wBAClBuf,mBACEpgC,EAAKsrD,YACD,IAAIxhD,KACF9J,EAAKsrD,aACL9gB,iBACF,GAEN1L,SAAUje,EAAE,eACZqf,SAAUrf,EAAE,eACZ0qC,gBAAiBvuD,EAAKwuD,eACpBxrD,EAAKwI,iBAIXijD,gBACE9qC,EAAA,cAACG,EAAA,kBAAD,CACEwf,iBAAkBtgC,EAAKuI,QAAQhD,IAC7B,SAACT,GAAD,MACG,CACCuI,YAAavI,EAAOuI,YACpBnF,KAAMpD,EAAOoD,8BA1JP9L,qBC/B3C,SAASsvD,EAAqB1/C,GACnC,IAAMmF,EAAOnF,EAAUxD,cAEvB,MAAI,UAAY2I,EACPuL,IAAKmE,EAAE,0CAGZ,eAAiB1P,EACZuL,IAAKmE,EAAE,+CAGZ,cAAgB1P,EACXuL,IAAKmE,EAAE,6CAGTnE,IAAKmE,EAAE,4DCoCK8qC,cAInB,SAAAA,EAAmB9rD,GAAmC,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAivD,IACpD3uD,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAosD,GAAAzoC,KAAAxmB,KAAMmD,KACDpD,MAAQ,CAAEosB,iBAAiB,EAAOzoB,SAAS,GAFIpD,iFASpD,GAAIN,KAAKD,MAAMuP,UACb,OAAQtP,KAAKD,MAAMuP,UAAUxD,eAC3B,IAAK,QACH,OAAOkU,IAAKmE,EAAE,gBAMpB,OAAOnE,IAAKmE,EAAE,wDAQK3Y,EAAcmF,GACjC,OAAOqP,IAAKmE,EAAE,wBAAyB,CACrC+qC,kBAAmBv+C,EACnBw+C,WAAY3jD,qCAIA,IAAA8L,EAAAtX,KACd,OACEikB,EAAA,cAAC7F,EAAA,EAAWnY,SAAZ,KACG,SAAAmU,GAA0B,IAAvB8gC,EAAuB9gC,EAAvB8gC,iBACIkU,EAA6B,SAACC,GAClC,IAAMzqD,EAAOob,IAAKmE,EAChB,0DACA,CACEjb,SAAUmmD,IAId,OADAnU,EAAiBt2C,EAAM,SAChBA,GAET,OACEqf,EAAA,cAACg2B,EAAA,cAAD,KACG,SAAAj/B,EAAkBsB,EAAlBpB,GAAA,IAAGtP,EAAHoP,EAAGpP,YAAoBu/C,EAAvBjwC,EAAuBiwC,QAAvB,OACClnC,EAAA,cAACmnC,EAAA,qBAAD,KACG,SAAAvqC,GAA0C,IAAvC3U,EAAuC2U,EAAvC3U,gBAAiBC,EAAsB0U,EAAtB1U,gBACbmjD,EAA0B,eAAAvsC,EAAAlgB,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAC,EACjC3wB,GADiC,IAAAskC,EAAA,OAAA7T,EAAAjtC,EAAAotC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAAAF,EAAAC,KAAA,EAK/BzkC,EAAKjT,SAALxB,OAAAwnD,EAAA,EAAAxnD,CAAA,GACKyU,EAAKvX,MADV,CAEEosB,iBAAiB,EACjBqjC,4BAAwBvkD,EACxBwkD,6BAAyBxkD,EACzBk1B,sBAAkBl1B,EAClBvH,SAAS,MAIMkI,EAfc,CAAAkwC,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAgBrB7vC,EAAgB8e,EAAM,GAAIrf,GAhBL,OAAAkwC,EAAAG,GAAAH,EAAAuE,KAAAvE,EAAAE,KAAA,uBAAAF,EAAAE,KAAA,GAiBrB7vC,EAAgB8e,EAAM,IAjBD,QAAA6wB,EAAAG,GAAAH,EAAAuE,KAAA,QAezBkP,EAfyBzT,EAAAG,GAmB/Bf,EAAgB,GAAAz1C,OACX8pD,EAAShnD,GADE,iBAEd,WAIF+O,EAAKjT,SAALxB,OAAAwnD,EAAA,EAAAxnD,CAAA,GACKyU,EAAKvX,MADV,CAEE0vD,wBAAyBzvC,IAAKmE,EAC5B,uDAEF7U,UAAWigD,EACX7rD,SAAS,KA/BoBo4C,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA4T,GAAA5T,EAAA,SAmC/BxkC,EAAKjT,SAALxB,OAAAwnD,EAAA,EAAAxnD,CAAA,GACKyU,EAAKvX,MADV,CAEEosB,iBAAiB,EACjBqjC,uBAAwBxvC,IAAKmE,EAC3B,sDAEFgc,iBAAkBngB,IAAKmE,EACrB,qDAEFzgB,SAAS,KA5CoB,yBAAAo4C,EAAAI,SAAAN,EAAA,kBAAH,gBAAAgN,GAAA,OAAA7lC,EAAAiC,MAAAhlB,KAAAilB,YAAA,GAgD1B+b,EAAY,eAAA9d,EAAArgB,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAW,EAAOqT,GAAP,OAAAjU,EAAAjtC,EAAAotC,KAAA,SAAAU,GAAA,cAAAA,EAAAR,KAAAQ,EAAAP,MAAA,cAAAO,EAAAR,KAAA,EAAAQ,EAAAP,KAAA,EAEX9vC,EAAgByjD,GAFL,OAGjBxE,EAAQlO,KACN7B,IAAUz8B,eAAe7D,WAAWD,QAJrB0hC,EAAAP,KAAA,eAAAO,EAAAR,KAAA,EAAAQ,EAAAN,GAAAM,EAAA,iCAAAA,EAAAL,SAAAI,EAAA,iBAAH,gBAAAuM,GAAA,OAAA3lC,EAAA8B,MAAAhlB,KAAAilB,YAAA,GAUlB,OACEhB,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,iBAAkB,WACjC,SAAAoE,GAAC,OACAF,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,UAAD,CAAWuE,UAAU,aACnB1E,EAAA,cAACG,EAAA,WAAD,KACEH,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,IAAUt8B,UAAU1D,QAC3B+I,EAAE,gBAELF,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,IAAUz8B,eAAevD,QAChC+I,EAAE,0BAELF,EAAA,cAACkL,EAAA,EAAD,CACEC,GAAIgsB,IAAUz8B,eAAe7D,WAAWD,QAEvCsJ,EAAE,sBAELF,EAAA,0BACGE,EAAE,yCAITF,EAAA,cAACG,EAAA,UAAD,CACEuE,UACE,mDAGF1E,EAAA,cAACG,EAAA,WAAD,CACEuE,UAAW,gCACXH,KAAM4yB,IAAUz8B,eAAe7D,WAAWD,OAC1C6N,GAAI,WAEHvE,EAAE,mBAGN7M,EAAKvX,MAAM2D,QAAUugB,EAAA,cAACG,EAAA,OAAD,MAAa,KACnCH,EAAA,cAACG,EAAA,oBAAD,CACEgc,YAAa9oB,EAAKvX,MAAMosB,gBACxBgU,iBAAkB7oB,EAAKvX,MAAMogC,iBAC7BG,mBAAoBnc,EAClB,+BAEFoc,oBAAqBpc,EACnB,mCAEFqc,6BAA8Brc,EAC5B,yCAEFsc,yBAA0Btc,EACxB,qCAEFuc,2BACEppB,EAAKvX,MAAMyvD,uBAEb7uB,4BACErpB,EAAKvX,MAAM0vD,wBAEbvvB,uBAAwB/b,EACtB,iCAEFE,UAAWF,EAAE,6BACbyc,oBAAqB0uB,EACrBxuB,oBAAqBsuB,IAEtB93C,EAAKvX,MAAMuP,WACZgI,EAAKvX,MAAMuP,UAAU/G,IACrB+O,EAAKvX,MAAMuP,UAAU1D,YACnBqY,EAAA,cAACG,EAAA,sBAAD,CACEvY,QAASyL,EAAKvX,MAAMuP,UAAUzD,QAAQhD,IACpC,SAACT,GAAD,MACG,CACCuI,YAAavI,EAAOuI,YACpBnF,KAAMpD,EAAOoD,QAGnBm2B,WAAYyZ,IAAUz8B,eAAe7D,WAAWD,OAChDwmB,qBACE/pB,EAAKvX,MAAMuP,UAAUqB,YAEvB/E,YAAa0L,EAAKvX,MAAMuP,UAAU1D,YAClC8zB,cAAepoB,EAAKvX,MAAMuP,UAAU9D,KACpC21B,aAAc7pB,EAAKvX,MAAMuP,UAAU/G,GACnCi5B,iBAAkBlqB,EAAKs4C,kBACvBhuB,WAAY5hB,IAAKmE,EAAE,iBACnByX,qBAAsB5b,IAAKmE,EACzB,sBAEFod,yBAA0BytB,EACxB13C,EAAKvX,MAAMuP,WAEbugD,YAAa7vC,IAAKmE,EAAE,aACpBud,WAAY1hB,IAAKmE,EACf,4CAEFid,cAAephB,IAAKmE,EAAE,eACtBE,UAAWrE,IAAKmE,EACd,yCAEFmd,cAAethB,IAAKmE,EAAE,eACtB2rC,eAAgBx4C,EAAKy4C,cACrB7uB,SAAUF,IAGZ/c,EAAA,cAACG,EAAA,UAAD,sBAzNmB1kB,sBCZjD,IC/BYswD,EAKAC,ED0BN9G,EAAe,CACnBh1B,WAAY,OACZ5rB,GAAI,OACJoM,YAAaqL,IAAKmE,EAAE,kCACpB0B,MAAO7F,IAAKmE,EAAE,gBAGVsQ,EAA6B,CAAC00B,GAE9BC,GAAa,CACjB7gD,GAAI,OACJ2sB,WAAW,EACXrP,MAAO7F,IAAKmE,EAAE,gBAGV0Q,GAAyB,CAACu0B,IAEX8G,6LACM5gD,GACvB,YAAwBrE,IAAjBqE,EAAU/G,4CAGK+G,GAEtB,IAAM47C,EAAY57C,EAAU45C,KAE5B,OAAkB,IAAdgC,EACKlrC,IAAKmE,EAAE,4BAGTnE,IAAKmE,EAAE,6BAA8B,CAAE8R,MAAOi1B,qCAGvC,IAAA5qD,EAAAN,KACd,OACEikB,EAAA,cAACmnC,EAAA,qBAAD,KACG,SAAAhxC,GAAyB,IAAtBnO,EAAsBmO,EAAtBnO,gBACIixB,EAAY,eAAAliB,EAAAnY,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAC,EAAOhwC,GAAP,OAAA8vC,EAAAjtC,EAAAotC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACb/vC,EAAgBL,GADH,wBAAAkwC,EAAAI,SAAAN,MAAH,gBAAAgN,GAAA,OAAA5tC,EAAAgK,MAAAhlB,KAAAilB,YAAA,GAIlB,OACEhB,EAAA,cAACmnC,EAAA,eAAD,KACG,SAAAlwC,GAAA,IAAG5X,EAAH4X,EAAG5X,KAAMG,EAATyX,EAASzX,QAAS1B,EAAlBmZ,EAAkBnZ,MAAlB,OACCkiB,EAAA,cAACg2B,EAAA,2BAAD,CACEqN,kBAAmB6B,EACnB5B,gBAAiB6B,IAEhB,SAAAE,GACC,IAAMqE,EA3E1B,SACE7yC,EACA0a,EACAV,EACAM,GAEA,IAAIu4B,EAAoB7yC,EAiBxB,OAhBA0a,EAAcriB,QAAQ,SAACnJ,GACrB,IAAMw/C,EAAex/C,EAAOzJ,MAAM4U,cAClCw4C,EAAoBA,EAAkB3jD,OAAO,SAACsF,GAAD,OAC3CA,EAAU9D,KAAK2J,cAAcs0C,SAASD,OAI1CmE,EAAoBA,EAAkBnI,KAAK,SAAC2K,EAAeC,GACzD,OAAIh7B,EACK+6B,EAAc3kD,KAAKq+C,cAAcuG,EAAc5kD,MAIjD4kD,EAAc5kD,KAAKq+C,cAAcsG,EAAc3kD,QAuDZ6kD,CACxB/sD,EAAK8G,MACLk/C,EAAQ9zB,cACR8zB,EAAQx0B,gBACRw0B,EAAQl0B,iBAGV,OACEnR,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,iBAAkB,WACjC,SAAAoE,GAAC,OACAF,EAAA,cAAAA,EAAA,cACEA,EAAA,cAAC8pC,EAAD,MACA9pC,EAAA,cAACG,EAAA,UAAD,CAAWuE,UAAU,cACnB1E,EAAA,oBAAI0E,UAAU,sBACXxE,EAAE,kCAELF,EAAA,mBACE8I,wBAAyB,CACvBC,OAAQ7I,EACN,2CAKRF,EAAA,cAACG,EAAA,kBAADvhB,OAAAC,OAAA,CACE2xB,YAAaA,EACbI,UAAWA,GACXyO,oBAAqB8X,IAAUtgC,WAAWK,SAC1C2sB,aAAc6lB,EAAkBz4C,QAC5Bo0C,EALN,CAMEjlC,UAAW,GACX+T,gBAAiB,GACjB6G,mBAAoB9a,EAClB,mCAEF6a,oBAAqB7a,EACnB,6BAEFkf,wBAAyBlf,EACvB,6BAEFif,2BAA4Bjf,EAC1B,gCAEFie,SAAUje,EAAE,eACZmsC,0BAA2BnsC,EACzB,gCAEFoR,iBAAkBpR,EAAE,sBAAuB,CACzC8R,MAAO03B,EAAkBz4C,WAG3B+O,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAOA,EACP2B,SAAUD,EACVy2C,eACEj2B,EAAA,cAACG,EAAA,sBAAD,CACEvG,MAAO,IACPD,MAAO,CACLowC,gBAAiB,OACjBvpB,UAAW,MAIjB0V,cAAel2B,EAAA,cAACvE,EAAA,EAAD,OAEd,kBACCiuC,EACG3jD,OAAO,SAACsF,GAAD,OACNhP,EAAK2tD,kBAAkB3+C,KAExBzG,IACC,SAACyG,EAAsB+S,GAAvB,OACE4B,EAAA,cAACG,EAAA,kBAAD,CACE/K,IAAKgJ,EACL0gB,gBAAiBqY,IAAUtgC,WAAWxL,UAAUyL,QAC9C,CAAEzL,cAEJ+xB,qBACE/xB,EAAUqB,YAEZsyB,cAAe3zB,EAAUV,KACzBhD,YAAa0D,EAAU/G,GACvBm3B,cAAepwB,EAAU9D,KACzBi0B,eAAgBtb,EAAE,iBAClBoZ,WAAYpZ,EAAE,iBACd0V,uBAAwB1V,EACtB,+BACA,CAAE3Y,KAAM8D,EAAU9D,OAEpBsuB,qBAAsB3V,EACpB,8BAEFmZ,cAAenZ,EACb,gCAEFuZ,YAAavZ,EAAE,kBACfsZ,eAAgBtZ,EACd,iCAEF6e,kBAAmBgsB,EACjB1/C,GAEFkwB,WAAYrb,EAAE,iBACdob,cAAepb,EACb,gCAEFga,kBAAmB79B,EAAKysD,iBACtBz9C,GAEFswB,oBAAqBwb,IAAUtgC,WAAWxL,UAAU2L,OAClD,CAAE3L,cAEJmqB,SAAUyD,EACVc,OAEE1uB,EAAU45C,4BApJVxpD,aEvDvB6wD,oLAEjB,OACEtsC,EAAA,cAACwT,EAAA,EAAD,KACExT,EAAA,cAACusC,EAAA,EAAD,CACEtgC,KAAM/V,IAAOiB,KACbwU,OAAO,EACPR,GAAIjV,IAAOH,cAAca,OAE3BoJ,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,IAAOH,cAAca,KAC3B+U,OAAO,EACPuyB,UAAWqL,IAEbvpC,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,IAAOW,WAAWD,KACxB+U,OAAO,EACPuyB,UAAW+N,KAEbjsC,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,IAAOW,WAAWK,OACxByU,OAAO,EACPuyB,UAAW8M,IAnBf,kDAsBEhrC,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,IAAOW,WAAWxL,UAAUyL,QAClC6U,OAAO,EACPuyB,UAAWiM,IAEbnqC,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,IAAOW,WAAWxL,UAAU2L,OAClC2U,OAAO,EACPuyB,UAAW8M,YAjCyBvvD,aCHjC+wD,GAAb,SAAA7rC,GAAA,SAAA6rC,IAAA,OAAA5tD,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAywD,GAAA5tD,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAA4tD,GAAAzrC,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAA4tD,EAAA7rC,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAA4tD,EAAA,EAAAp3C,IAAA,SAAA9Y,MAAA,WAEI,OACE0jB,EAAA,cAACwT,EAAA,EAAD,KACExT,EAAA,cAACoM,EAAA,EAAD,CAAOH,KAAM/V,IAAOiB,KAAM+mC,UAAWuO,UAJ7CD,EAAA,CAA0C/wD,uBCApCixD,UAAwBC,GAAS,CACrCC,OAAQ,kBAAMh3C,EAAAzZ,EAAA,GAAAM,KAAAmZ,EAAAxW,KAAA,YACdK,QAASihB,MAGEmsC,GAAb,SAAAlsC,GAAA,SAAAksC,IAAA,OAAAjuD,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAA8wD,GAAAjuD,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAiuD,GAAA9rC,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAiuD,EAAAlsC,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAiuD,EAAA,EAAAz3C,IAAA,SAAA9Y,MAAA,WAEI,OACE0jB,EAAA,cAACg2B,EAAA,WAAD,KACG,SAAA7/B,GAAA,IAAGkW,EAAHlW,EAAGkW,MAAH,OAAerM,EAAA,cAAC0sC,GAAD,CAAuBI,QAASzgC,EAAM9tB,YAJ9DsuD,EAAA,CAAqCpxD,yCCLtBsxD,GAAA,CACbryC,mBACAG,eACAxb,UACAuJ,4BCCWokD,GAAb,SAAArsC,GAGE,SAAAqsC,EAAmB9tD,GAA8C,OAAAN,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAixD,GAAApuD,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAouD,GAAAzqC,KAAAxmB,KACzDmD,IAJV,OAAAN,OAAAqiB,EAAA,EAAAriB,CAAAouD,EAAArsC,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAouD,EAAA,EAAA53C,IAAA,SAAA9Y,MAAA,WAQI,OACE0jB,EAAA,cAACmnC,EAAA,mBAAD,CAAoB/yC,iBAAkBrY,KAAKmD,MAAMkV,kBAC9C,SAAA+B,GAAA,IAAG9W,EAAH8W,EAAG9W,KAAMG,EAAT2W,EAAS3W,QAAS1B,EAAlBqY,EAAkBrY,MAAlB,OACCkiB,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAOA,EACP2B,SAAUD,EACVy2C,eAAgBj2B,EAAA,cAACG,EAAA,OAAD,MAChB+1B,cAAel2B,EAAA,cAACvE,EAAA,EAAD,OAEd,kBACCuE,EAAA,cAACG,EAAA,UAAD,KACEH,EAAA,wBAAK3gB,EAAKyT,UACVkN,EAAA,wBAAK3gB,EAAK2T,2BApB1Bg6C,EAAA,CAAgCvxD,sBCcnBwxD,GAAb,SAAAtsC,GAAA,SAAAssC,IAAA,OAAAruD,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAkxD,GAAAruD,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAquD,GAAAlsC,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAquD,EAAAtsC,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAquD,EAAA,EAAA73C,IAAA,SAAA9Y,MAAA,WAII,IAAM2W,EAAiBlX,KAAKmD,MAAM+T,eAClC,OACE+M,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,OAAQ,WACvB,SAAAoE,GAAC,OACAF,EAAA,cAACG,EAAA,UAAD,CACExG,MAAO,CACL4tB,WAAY,SAGdvnB,EAAA,cAACG,EAAA,OAAD,KACEH,EAAA,cAACG,EAAA,WAAD,CACE6L,MAAO9L,EAAE,6BACTiL,GAAIgsB,KAAUoE,gBAAgBG,MAAMvkC,KAAK,CACvClE,qBAGJ+M,EAAA,cAACG,EAAA,WAAD,CACE6L,MAAO9L,EAAE,oCACTiL,GAAIgsB,KAAUoE,gBAAgBC,aAAa,CACzCvoC,qBAGJ+M,EAAA,cAACG,EAAA,WAAD,CACE6L,MAAO9L,EAAE,iCACTiL,GAAIgsB,KAAUoE,gBAAgBE,UAAU,CACtCxoC,qBAGJ+M,EAAA,cAACG,EAAA,WAAD,CACE6L,MAAO9L,EAAE,+BACTiL,GAAIgsB,KAAUoE,gBAAgB17B,QAAQ,CACpC5M,6BAnClBg6C,EAAA,CAA0CxxD,aCC7ByxD,GAAb,SAAAvsC,GAQE,SAAAusC,EAAYhuD,GAA+B,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAmxD,IACzC7wD,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAsuD,GAAA3qC,KAAAxmB,KAAMmD,KALDpD,MAAQ,CACb6oB,QAAQ,GAKRtoB,EAAKs9C,aAAet9C,EAAKs9C,aAAav6C,KAAlBR,OAAA42C,GAAA,EAAA52C,CAAAvC,IAFqBA,EAR7C,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAAsuD,EAAAvsC,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAsuD,EAAA,EAAA93C,IAAA,eAAA9Y,MAAA,WAcIP,KAAKqE,SAAS,CACZukB,QAAS5oB,KAAKD,MAAM6oB,WAf1B,CAAAvP,IAAA,SAAA9Y,MAAA,WAoBI,OACE0jB,EAAA,cAACG,EAAA,YAAD,CACEwE,OAAQ5oB,KAAKD,MAAM6oB,OACnBmI,UACE9M,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9B0mB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO7F,IAAKmE,EAAE,qDAEhBF,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9B0mB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO7F,IAAKmE,EAAE,sDAIpB6M,SACE/M,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9BswC,OAAO,EACP5pB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO7F,IAAKmE,EAAE,qDAEhBF,EAAA,cAACG,EAAA,WAAD,CACEmM,SAA8B,IAApBvwB,KAAKmD,MAAMwF,KACrBqwC,WAAYh5C,KAAKmD,MAAMwF,KAAO,EAC9BswC,OAAO,EACP5pB,QAASrvB,KAAK49C,aACdj1C,KAAM,EACNkd,MAAO7F,IAAKmE,EAAE,4DAzD5BgtC,EAAA,CAAsCzxD,aPbhC0xD,GAAmB,aACnBC,GAAsB,cAwFrB,SAASC,GACdt6C,EACAu6C,GAEA,IAAMC,EAAkC,GADrBC,GAAA,EAAAC,GAAA,EAAAC,OAAA1mD,EAAA,IAEnB,QAAA2mD,EAAAC,EAAuBN,EAAvB5vD,OAAAmwD,cAAAL,GAAAG,EAAAC,EAAA7V,QAAAv6C,MAAAgwD,GAAA,EAAkC,KAAvBM,EAAuBH,EAAArxD,MAC1ByxD,EAAqB,GACrB9hC,EACJ,cACA6hC,EAASt2B,eACT,IACAs2B,EAASE,eAAe/hC,KAC1B8hC,EAAS/U,KAAK/sB,GAGd,IAAMgiC,EAA8B,GAMpCA,EAASjV,KALwB,CAC/BzxC,KAAM,MACNu/B,UAAU,EACVt2B,KAAM,QAMR,IAAM09C,EAA2B,CAC/BC,aAAc,GACdC,YAAY,EACZC,kBAAmBP,EAAS56C,SAAW,eACvCo7C,iBAAkBL,EAClBM,YAAaR,EACb76C,SAAU46C,EAAS56C,UAIfs7C,EAA+B,CACnClqD,GAAIyO,EAAiB,IAAM+6C,EAAS56C,SACpCu7C,eAAgBP,GAElBX,EAAavU,KAAKwV,IApCD,MAAAjW,GAAAkV,GAAA,EAAAC,EAAAnV,EAAA,YAAAiV,GAAA,MAAAI,EAAAc,QAAAd,EAAAc,SAAA,WAAAjB,EAAA,MAAAC,GAsCnB,OAAOH,EA2CF,SAASoB,GAAsBC,GACpC,IAAIC,EAAkB9C,EAAmB+C,SAIzC,OAHIF,EAAKxzC,SAAWwzC,EAAKxzC,QAAQs1B,WAC/Bme,EAAUD,EAAKxzC,QAAQs1B,UAElBme,EAOF,SAASE,GAAuBH,GACrC,IAAIpe,GAAa,EAQjB,OANEoe,EAAKxzC,SACLwzC,EAAKxzC,QAAQ4zC,YACbJ,EAAKxzC,QAAQ4zC,aAAehD,EAAsBiD,WAElDze,GAAa,GAERA,EA6CF,SAAS0e,GAAcT,GAE5B,IAAMU,EAAaV,EAAeF,YAAY,GAC9C,OAAIY,EACK,iBAUX,SAA6BA,GAE3B,OAaF,SAA2BA,GAEzB,OAAOA,EAAWC,MAAM,KAAK,GAAGA,MAAM,KAAK,GAdzCC,CAAkBF,GAAYj+C,cAC9Bk8C,GACA,IAoBJ,SAAqB+B,GACnB,IAAMG,EAAWH,EAAWC,MAAM,KAElC,OAAOE,EAASA,EAASr+C,OAAS,GAAGm+C,MAAM,KAAK,GAtB9CG,CAAYJ,GAhBcK,CAAoBL,GAAc,IAEvD,GQhPT,SAASM,GACPC,EACAn+B,EACAV,EACAM,EACAw+B,EACAC,GAEA,IAAMtC,EAAwB,GAC1BoC,GAAeA,EAAYz+C,OAAS,GRenC,SAAS4+C,EACdvC,EACAwC,EACA3e,EACAwe,EACAC,GAEA,GAAIE,EAAY,CAEd,IAAMX,EAAuB,GAFfY,GAAA,EAAAC,GAAA,EAAAC,OAAAjpD,EAAA,IAGd,QAAAkpD,EAAAC,EAAkBhf,EAAlBzzC,OAAAmwD,cAAAkC,GAAAG,EAAAC,EAAApY,QAAAv6C,MAAAuyD,GAAA,EAA4B,KAAjBK,EAAiBF,EAAA5zD,MAC1B6yD,EAAWnW,KAAKoX,IAJJ,MAAA7X,GAAAyX,GAAA,EAAAC,EAAA1X,EAAA,YAAAwX,GAAA,MAAAI,EAAAzB,QAAAyB,EAAAzB,SAAA,WAAAsB,EAAA,MAAAC,GAQd,IAA6B,IAAzBH,EAAWO,UAAoB,CACjC,IAAMC,EAASR,EAAWt4B,eAAiB,IAAMs4B,EAAWvoD,KAEtDgpD,GAC8D,IAAlEZ,EAAkBa,UAAU,SAAAt9C,GAAQ,OAAIA,IAAao9C,IAIjDG,GAC8D,IAAlEb,EAAkBY,UAAU,SAAAt9C,GAAQ,OAAIA,IAAao9C,IAIjDI,EAAiB,CACrBl5B,eAAgBs4B,EAAWt4B,eAC3Bm5B,SAAUF,EACVtf,SAAUge,EACVroB,SAAUypB,EACVr9C,SAAUo9C,EACVtC,eAAgB8B,GAElBxC,EAAUtU,KAAK0X,GAKjB,GAFAvB,EAAWnW,KAAK8W,EAAWvoD,MAEvBuoD,EAAW5vD,UAAY4vD,EAAW5vD,SAAS+Q,OAAS,EAAG,KAAA2/C,GAAA,EAAAC,GAAA,EAAAC,OAAA9pD,EAAA,IACzD,QAAA+pD,EAAAC,EAAwBlB,EAAW5vD,SAAnCxC,OAAAmwD,cAAA+C,GAAAG,EAAAC,EAAAjZ,QAAAv6C,MAAAozD,GAAA,EACEf,EACEvC,EAFyCyD,EAAAz0D,MAIzC6yD,EACAQ,EACAC,GAPqD,MAAArX,GAAAsY,GAAA,EAAAC,EAAAvY,EAAA,YAAAqY,GAAA,MAAAI,EAAAtC,QAAAsC,EAAAtC,SAAA,WAAAmC,EAAA,MAAAC,MQvD3DjB,CACEvC,EACAoC,EAAY,GACZ,GACAC,EACAC,GAIJ,IAAIlG,EAAoB4D,EAiBxB,OAhBA/7B,EAAcriB,QAAQ,SAACnJ,GACrB,IAAMw/C,EAAex/C,EAAOzJ,MAAM4U,cAClCw4C,EAAoBA,EAAkB3jD,OAAO,SAAC+nD,GAAD,OAC3CA,EAAS56C,SAAShC,cAAcs0C,SAASD,OAI7CmE,EAAoBA,EAAkBnI,KAAK,SAAC0P,EAAcC,GACxD,OAAI//B,EACK8/B,EAAa/9C,SAAS0yC,cAAcsL,EAAah+C,UAInDg+C,EAAah+C,SAAS0yC,cAAcqL,EAAa/9C,sBRnChD64C,gEAKAC,iEQ2CZ,IAAM9G,GAAe,CACnBh1B,WAAY,OACZ5rB,GAAI,OACJoM,YAAaqL,IAAKmE,EAAE,kCACpB0B,MAAO7F,IAAKmE,EAAE,gBAGVsQ,GAA6B,CAAC00B,IAE9BC,GAAa,CACjB7gD,GAAI,OACJ2sB,WAAW,EACXrP,MAAO7F,IAAKmE,EAAE,gBAGV0Q,GAAyB,CAACu0B,IAEnBgM,GAAb,SAAAxwC,GAIE,SAAAwwC,EAAmBjyD,GAA+B,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAo1D,IAChD90D,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAuyD,GAAA5uC,KAAAxmB,KAAMmD,KAJDkyD,eAA6B,GAGc/0D,EAF3CszD,kBAA8B,GAInCtzD,EAAKg1D,0BAA4Bh1D,EAAKg1D,0BAA0BjyD,KAA/BR,OAAA42C,GAAA,EAAA52C,CAAAvC,IAFeA,EAJpD,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAAuyD,EAAAxwC,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAuyD,EAAA,EAAA/7C,IAAA,4BAAA9Y,MAAA,SASmCiL,EAAcu/B,GAC7C,GAAIA,EAAU,KAAAipB,GAAA,EAAAC,GAAA,EAAAC,OAAAjpD,EAAA,IACZ,QAAAkpD,EAAAC,EAAuBp0D,KAAKq1D,eAA5B1zD,OAAAmwD,cAAAkC,GAAAG,EAAAC,EAAApY,QAAAv6C,MAAAuyD,GAAA,EAA4C,KAAjCjC,EAAiCoC,EAAA5zD,MACtCwxD,EAAS56C,WAAa3L,GACxBxL,KAAKmD,MAAMoyD,eAAexD,IAHlB,MAAAvV,GAAAyX,GAAA,EAAAC,EAAA1X,EAAA,YAAAwX,GAAA,MAAAI,EAAAzB,QAAAyB,EAAAzB,SAAA,WAAAsB,EAAA,MAAAC,SAOZl0D,KAAKmD,MAAMqyD,iBAAiBhqD,KAjBlC,CAAA6N,IAAA,SAAA9Y,MAAA,WAqBkB,IAAA+W,EAAAtX,KACd,OACEikB,EAAA,cAACmnC,EAAA,mCAAD,CACErjD,aAAc/H,KAAKmD,MAAMs4B,gBAExB,SAAArhB,GAAA,IAAG9W,EAAH8W,EAAG9W,KAAMG,EAAT2W,EAAS3W,QAAS1B,EAAlBqY,EAAkBrY,MAAlB,OACCkiB,EAAA,cAACg2B,EAAA,2BAAD,CACEqN,kBAAmB6B,GACnB5B,gBAAiB6B,IAEhB,SAAAE,GACC,IAAMqE,EAAoB+F,GACxBpwD,EACAgmD,EAAQ9zB,cACR8zB,EAAQx0B,gBACRw0B,EAAQl0B,gBACR9d,EAAKs8C,kBACLt8C,EAAKnU,MAAM0wD,mBAIb,OAFAv8C,EAAK+9C,eAAiB1H,EAGpB1pC,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,OAAQ,WACvB,SAAAoE,GAAC,OACAF,EAAA,cAACG,EAAA,aAADvhB,OAAAC,OAAA,CACE2xB,YAAaA,GACbI,UAAWA,IACPvd,EAAKvX,MAHX,CAIE+nC,aAAc6lB,EAAkBz4C,QAC5Bo0C,EALN,CAMErqB,mBAAoB9a,EAClB,wCAEF6a,oBAAqB7a,EAAE,kCACvBie,SAAUje,EAAE,eACZmsC,0BAA2BnsC,EACzB,gCAEFoR,iBAAkBpR,EAAE,sBAAuB,CACzC8R,MAAO03B,EAAkBz4C,WAG3B+O,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAOA,EACP2B,SAAUD,EACVy2C,eACEj2B,EAAA,cAACG,EAAA,qBAAD,CACEvG,MAAO,IACPD,MAAO,CACLowC,gBAAiB,OACjBvpB,UAAW,MAIjB0V,cAAel2B,EAAA,cAACvE,EAAA,EAAD,OAEd,kBACCiuC,EAAkB9kD,IAChB,SAACkpD,EAAoB1vC,GAArB,OACE4B,EAAA,cAACG,EAAA,iBAAD,CACE/K,IAAKgJ,EACLoZ,eAAgBs2B,EAASt2B,eACzBjwB,KAAMumD,EAAS56C,SACfi+B,SAAU2c,EAAS3c,SACnBrK,SAAUgnB,EAAShnB,SACnBvL,WAAYrb,EAAE,iBACdmxB,aAAcyc,EAAS6C,SACvBlgB,mBACEp9B,EAAKg+C,2CAzFvCF,EAAA,CAAsC11D,iCC9CzB+1D,GAAb,SAAA7wC,GASE,SAAA6wC,EAAmBtyD,GAA0B,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAy1D,IAC3Cn1D,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAA4yD,GAAAjvC,KAAAxmB,KAAMmD,KACDpD,MAAQ,CACX21D,aAAcD,EAAYE,kBAC1BC,SAAU,IAGZt1D,EAAKu1D,mBAAqBv1D,EAAKu1D,mBAAmBxyD,KAAxBR,OAAA42C,GAAA,EAAA52C,CAAAvC,IAC1BA,EAAKw1D,aAAex1D,EAAKw1D,aAAazyD,KAAlBR,OAAA42C,GAAA,EAAA52C,CAAAvC,IARuBA,EAT/C,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAA4yD,EAAA7wC,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAA4yD,EAAA,EAAAp8C,IAAA,qBAAA9Y,MAAA,SAoB4Bw1D,GAEtBA,GAAWA,EAAQnzB,QAAQ1tB,OAAS,EAChClV,KAAKqE,SAAS,CAAEqxD,aAAcK,IAC9B/1D,KAAKqE,SAAS,CAAEqxD,aAAcD,EAAYE,oBAGhD31D,KAAKmD,MAAM6yD,sBAAsBh2D,KAAKD,MAAM21D,gBA3BhD,CAAAr8C,IAAA,eAAA9Y,MAAA,WA+BI,IAAM01D,EAAU9C,GAAcnzD,KAAKmD,MAAMw8C,MAAM,IAI/C3/C,KAAKqE,SAAS,CACZqxD,aAAcD,EAAYE,kBAC1BC,SAAUK,EACVC,aAAcl2D,KAAKmD,MAAMw8C,MAAM,OAtCrC,CAAAtmC,IAAA,SAAA9Y,MAAA,WA0CkB,IAAA+W,EAAAtX,KACRm2D,EAAiB,CACrBC,SAAU,CACRC,mBAAmB,EACnB7yD,aAAc,KACd8yD,YAAY,EACZ3lD,YAAaqP,IAAKmE,EAChB,sDAEFzP,YAAasL,IAAKmE,EAAE,2CACpBoyC,SAAU,oBACVC,KAAM,WACNC,MAAO,EACP7hD,UAAU,EACV+wC,QAAQ,EACRlxC,KAAM,UAERkD,UAAW,CACT0+C,mBAAmB,EACnB7yD,aAAc,IACd8yD,YAAY,EACZ3lD,YAAaqP,IAAKmE,EAChB,uDAEFzP,YAAasL,IAAKmE,EAAE,4CACpBoyC,SAAU,oBACVC,KAAM,WACNC,MAAO,EACP7hD,UAAU,EACV+wC,QAAQ,EACRlxC,KAAM,UAERiiD,aAAc,CACZL,mBAAmB,EACnB7yD,aAAcxD,KAAKD,MAAM61D,SACzBU,YAAY,EACZ3lD,YAAaqP,IAAKmE,EAChB,0DAEFzP,YAAasL,IAAKmE,EAAE,+CACpBrG,OAAQ,IACRy4C,SAAU,mBACVC,KAAM,WACNC,MAAO,EACP7hD,UAAU,EACV+wC,QAAQ,EACRlxC,KAAM,aAIV,OAEEwP,EAAA,cAACmnC,EAAA,0BAAD,CAA2Bt0C,SAAS,aACjC,SAAAsD,GAA6B,IAA1B7D,EAA0B6D,EAA1B7D,oBACIogD,EAAQ,eAAA37C,EAAAnY,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAC,EAAOr7C,GAAP,IAAAw1D,EAAA,OAAAra,EAAAjtC,EAAAotC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACqBzlC,EAClCe,EAAKnU,MAAMyzD,UACXr2D,EAAMm2D,aACNn2D,EAAM61D,SACN71D,EAAMoX,WALO,OACTo+C,EADSja,EAAAuE,KAOf/oC,EAAKu+C,mBAAmBE,GAPT,wBAAAja,EAAAI,SAAAN,MAAH,gBAAAgN,GAAA,OAAA5tC,EAAAgK,MAAAhlB,KAAAilB,YAAA,GASd,OAGEhB,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,UAAD,KACEH,EAAA,cAAC4uB,GAAA,EAAD,CACE7X,QAAQ,UACRnV,MAEEvO,EAAKnU,MAAMw8C,MAAMzqC,OAAS,EACtB,iBACA,mBAEN3M,GAAG,mBACH8mB,QAAS/X,EAAKw+C,cAEbx+C,EAAKnU,MAAMw8C,MAAM92C,IAAI,SAAC8rD,EAAMtyC,GAAP,OACpB4B,EAAA,cAAC8uB,GAAA,EAAD,CAAU15B,IAAKgJ,GAAQsyC,EAAKx9C,cAIlC8M,EAAA,cAACG,EAAA,UAAD,KACEH,EAAA,cAAC0mC,EAAA,SAAD,CACEzF,WAAYiR,EACZ5yD,aAAc,GACdwhD,qBAAsB,YACtBr/C,OAAQixD,GAEP,SAAAz7C,GAAA,IAAG8pC,EAAH9pC,EAAG8pC,OAAQnqB,EAAX3f,EAAW2f,aAAX,OACC5W,EAAA,cAACA,EAAA,SAAD,KACG+gC,EACD/gC,EAAA,wBACExP,KAAK,SACLkU,UAAU,kBACV0G,QAASwL,GAHX,qBAxItB46B,EAAA,CAAiC/1D,aAApB+1D,GAIGE,kBAAkC,CAC9C/yB,QAAS,GACT/tB,KAAM,gDChBGgiD,GAAb,SAAAjyC,GAIE,SAAAiyC,EAAmB1zD,GAAkC,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAA62D,IACnDv2D,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAg0D,GAAArwC,KAAAxmB,KAAMmD,KACDpD,MAAQ,CACX21D,aAAcD,GAAYE,mBAG5Br1D,EAAKw2D,gBAAkBx2D,EAAKw2D,gBAAgBzzD,KAArBR,OAAA42C,GAAA,EAAA52C,CAAAvC,IAN4BA,EAJvD,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAAg0D,EAAAjyC,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAg0D,EAAA,EAAAx9C,IAAA,kBAAA9Y,MAAA,SAayBw1D,GAEnBA,GAAWA,EAAQnzB,QAAQ1tB,OAAS,EAChClV,KAAKqE,SAAS,CACZqxD,aAAcK,IAEhB/1D,KAAKqE,SAAS,CACZqxD,aAAcD,GAAYE,sBApBtC,CAAAt8C,IAAA,SAAA9Y,MAAA,WAyBkB,IAAA+W,EAAAtX,KACR+2D,EAAoB,SAACx2D,GAAD,OACxB0jB,EAAA,cAAC+d,GAAA,EAAMg1B,QAAP,KAAgBz2D,IAEZ02D,EAAsB,SAAC12D,GAAD,OAC1B0jB,EAAA,cAAC+d,GAAA,EAAMk1B,KAAP,KAAa32D,IAGf,OACE0jB,EAAA,cAACwI,GAAA,EAAKI,IAAN,KACE5I,EAAA,cAACwI,GAAA,EAAKK,IAAN,CAAUsP,GAAI,GACZnY,EAAA,cAACG,EAAA,UAAD,KACEH,EAAA,cAACkzC,GAAD,CACExX,MAAO3/C,KAAKmD,MAAMw8C,MAClBiX,UAAW52D,KAAKmD,MAAMyzD,UACtBZ,sBAAuBh2D,KAAK82D,oBAIlC7yC,EAAA,cAACwI,GAAA,EAAKK,IAAN,CAAUsP,GAAI,GACZnY,EAAA,cAACG,EAAA,UAAD,KACGpkB,KAAKD,MAAM21D,aAAa7gD,KAAKK,OAAS,EACrC+O,EAAA,cAACG,EAAA,aAADvhB,OAAAC,OAAA,CACE8/B,QAAS5iC,KAAKD,MAAM21D,aAAa9yB,QAAQ/5B,IAAI,SAAA+E,GAAC,MAAK,CACjDq0B,KAAM,CACJC,WAAY,CAAC60B,IAEf1oC,OAAQ,CACN6T,WAAY,CAAC+0B,GACbhnC,MAAOriB,EAAEqiB,OAEXoS,SAAUz0B,EAAEpC,QAEdqJ,KAAM7U,KAAKD,MAAM21D,aAAa7gD,KAC3BhM,IAAI,SAAAuuD,GAAG,OAAIA,EAAIA,MACfvuD,IAAI,SAAAuuD,GAAG,OACNA,EAAI9R,OAEF,SAAC8R,EAAK/kB,EAAGjqB,GAAT,OAAAvlB,OAAAwnD,EAAA,EAAAxnD,CAAA,GACKu0D,EADLv0D,OAAAw0D,GAAA,EAAAx0D,CAAA,GAEGyU,EAAKvX,MAAM21D,aAAa9yB,QAAQxa,GAAK5c,KAAO6mC,KAE/C,MAGNxP,OACE7iC,KAAKD,MAAM21D,aAAa9yB,QAAQ1tB,OAAS,EACrClV,KAAKD,MAAM21D,aAAa9yB,QAAQ,GAAGp3B,KACnC,IAEFxL,KAAKmD,QAGX8gB,EAAA,cAAC8a,GAAA,EAAD,KACE9a,EAAA,cAAC8a,GAAA,EAAW1G,MAAZ,KACGrY,IAAKmE,EACJ,yDAGJF,EAAA,cAAC8a,GAAA,EAAWu4B,KAAZ,KACGt3C,IAAKmE,EACJ,gEAtFpB0yC,EAAA,CAAyCn3D,aCD5B63D,GAAb,SAAA3yC,GACE,SAAA2yC,EAAmBp0D,GAA4B,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAu3D,IAC7Cj3D,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAA00D,GAAA/wC,KAAAxmB,KAAMmD,KACDq0D,iCAAmCl3D,EAAKk3D,iCAAiCn0D,KAAtCR,OAAA42C,GAAA,EAAA52C,CAAAvC,IAFKA,EADjD,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAA00D,EAAA3yC,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAA00D,EAAA,EAAAl+C,IAAA,mCAAA9Y,MAAA,SAQ0CiL,EAAcipC,GACpDz0C,KAAKmD,MAAMs0D,6BAA6BjsD,EAAMipC,KATlD,CAAAp7B,IAAA,SAAA9Y,MAAA,WAYkB,IAAA+W,EAAAtX,KACd,OACEikB,EAAA,cAACG,EAAA,kBAAD,KACEH,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAO/B,KAAKmD,MAAMpB,MAClB2B,QAAS1D,KAAKmD,MAAMO,QACpBw2C,eACEj2B,EAAA,cAAAA,EAAA,cACG,IAAIlb,MAAM,GAAG+/C,KAAK,GAAGjgD,IAAI,SAACyT,EAAG+F,GAAJ,OACxB4B,EAAA,cAACG,EAAA,sBAAD,CAAuB/K,IAAKgJ,GAC1B4B,EAAA,cAACG,EAAA,qBAAD,UAKR+1B,cAAel2B,EAAA,cAACvE,EAAA,EAAD,OAEd,kBACCpI,EAAKnU,MAAMwK,YAAY9E,IAAI,SAAC+E,EAAGyU,GAAJ,OACzB4B,EAAA,cAACG,EAAA,sBAAD,CAAuB/K,IAAKgJ,GAC1B4B,EAAA,cAACG,EAAA,iBAAD,CACE5Y,KAAMoC,EAAEpC,KACRmF,YAAa/C,EAAE+C,aAAe,GAC9BgkC,SAAUie,GAAsBhlD,GAChCgB,KAAMD,4BAAkBmwC,kDAAwBlxC,GAChDm9B,SAAUioB,GAAuBplD,GACjC8mC,mBAAoBp9B,EAAKkgD,6CAtC3CD,EAAA,CAAmC73D,aCPnC,SAASoqD,GACPn8C,EACA+pD,EACAC,EACAniC,EACAV,EACAM,GAGA,IAAIm0B,EZ+HC,SACLqO,EACAC,EACAF,GAEA,IAAMG,EAAwB,GADhBC,GAAA,EAAAC,GAAA,EAAAC,OAAAhtD,EAAA,IAEd,IAFc,IAEditD,EAFcC,EAAA,eAEHtF,EAFGqF,EAAA33D,MAGR63D,EAAapI,EAAmB+C,SAC9BsF,EAAgBR,EAA8BrN,KAClD,SAAA8N,GAAU,OAAIA,EAAWC,aAAe1F,EAAKrnD,OAG7C6sD,GAC2B,WAA3BA,EAAcG,UACgB,WAA9BH,EAAcI,cAEdL,EAAapI,EAAmBxb,QAGlC,IAAIkkB,EAAiBzI,EAAsB0I,YACvC9F,EAAKrnD,OAASmsD,IAChBe,EAAiBzI,EAAsBiD,UAEzCL,EAAKxzC,QAAU,CAAEs1B,SAAUyjB,EAAYnF,WAAYyF,GACnDZ,EAAQ7a,KAAK4V,IAlBf+F,EAAmBhB,EAAnBj2D,OAAAmwD,cAAAiG,GAAAG,EAAAU,EAAA5c,QAAAv6C,MAAAs2D,GAAA,EAA0BI,IAFZ,MAAA3b,GAAAwb,GAAA,EAAAC,EAAAzb,EAAA,YAAAub,GAAA,MAAAa,EAAAjG,QAAAiG,EAAAjG,SAAA,WAAAqF,EAAA,MAAAC,GAsBd,OAAOH,EYzJ4Be,CACjClrD,EACA+pD,EACAC,GAiBF,OAfAniC,EAAcriB,QAAQ,SAACnJ,GACrB,IAAMw/C,EAAex/C,EAAOzJ,MAAM4U,cAClCo0C,EAA+BA,EAA6Bv/C,OAC1D,SAAC4D,GAAD,OAAmBA,EAAEpC,KAAK2J,cAAcs0C,SAASD,OAIrDD,EAA+BA,EAA6B/D,KAC1D,SAACkE,EAAKC,GACJ,IACMC,EAAQx0B,EAAkBu0B,EAAMD,EACtC,OAFat0B,EAAkBs0B,EAAMC,GAEzBn+C,KAAKq+C,cAAcD,EAAMp+C,QAO3C,IAAM29C,GAAe,CACnBh1B,WAAY,OACZ5rB,GAAI,OACJoM,YAAaqL,IAAKmE,EAAE,kCACpB0B,MAAO7F,IAAKmE,EAAE,gBAGVsQ,GAAc,CAAC00B,IAEfC,GAAa,CACjB7gD,GAAI,OACJ2sB,WAAW,EACXrP,MAAO7F,IAAKmE,EAAE,gBAGV0Q,GAAyB,CAACu0B,IAanB0P,GAAb,SAAAl0C,GAIE,SAAAk0C,EAAmB31D,GAAuC,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAA84D,IACxDx4D,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAi2D,GAAAtyC,KAAAxmB,KAAMmD,KACDpD,MAAQ,CACXg5D,mBAAoB,IAEtBz4D,EAAK04D,iCAAmC14D,EAAK04D,iCAAiC31D,KAAtCR,OAAA42C,GAAA,EAAA52C,CAAAvC,IALgBA,EAJ5D,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAAi2D,EAAAl0C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAi2D,EAAA,EAAAz/C,IAAA,mCAAA9Y,MAAA,SAc0CiL,EAAcu/B,GACpD/qC,KAAKmD,MAAMs0D,6BAA6BjsD,EAAMu/B,KAflD,CAAA1xB,IAAA,SAAA9Y,MAAA,WAkBkB,IAAA+W,EAAAtX,KACd,OACEikB,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,WACf,SAAAoE,GAAC,OACAF,EAAA,cAACmnC,EAAA,gBAAD,KACG,SAAAhxC,GAAA,IAAG9W,EAAH8W,EAAG9W,KAAH8W,EAAS3W,QAAT2W,EAAkBrY,MAAlB,OACCkiB,EAAA,cAACg2B,EAAA,2BAAD,CACEqN,kBAAmB6B,GACnB5B,gBAAiB6B,IAEhB,SAAAE,GACC,IAAMC,EAA+BO,GACnCxmD,EAAK6K,sBACLmJ,EAAKnU,MAAMu0D,iBACXpgD,EAAKvX,MAAMg5D,mBACXzP,EAAQ9zB,cACR8zB,EAAQx0B,gBACRw0B,EAAQl0B,iBAGV,OACEnR,EAAA,cAACG,EAAA,sBAADvhB,OAAAC,OAAA,CACEw5B,uBAAwB8e,IAAUztC,YAAY4M,OAAOwlC,kBACrDtrB,YAAaA,GACbI,UAAWA,GACXiT,aAAcyhB,EAA6Br0C,QACvCo0C,EALN,CAMES,yBAA0B5lC,EACxB,+BAEFoR,iBAAkBpR,EAAE,sBAAuB,CACzC8R,MAAOszB,EAA6Br0C,WAGrCoC,EAAKnU,MAAMgB,SACZ8f,EAAA,cAACg1C,GAAD,CACEl3D,MAAOuV,EAAKnU,MAAMpB,MAClB2B,QAAS4T,EAAKnU,MAAMO,QACpBiK,YAAa47C,EACbkO,6BACEngD,EAAK0hD,8CA1D/BF,EAAA,CAA8Cp5D,aClDjCw5D,GAAb,SAAAt0C,GAIE,SAAAs0C,EAAmB/1D,GAAW,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAk5D,IAC5B54D,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAq2D,GAAA1yC,KAAAxmB,KAAMmD,KACDpD,MAAQ,CACXg5D,mBAAoB,IAEtBz4D,EAAK04D,iCAAmC14D,EAAK04D,iCAAiC31D,KAAtCR,OAAA42C,GAAA,EAAA52C,CAAAvC,IALZA,EAJhC,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAAq2D,EAAAt0C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAq2D,EAAA,EAAA7/C,IAAA,mCAAA9Y,MAAA,SAc0CiL,EAAcu/B,GACpD,IAAMouB,EAAUpuB,EAAWv/B,EAAO,GAClCxL,KAAKqE,SAAS,CACZ00D,mBAAoBI,MAjB1B,CAAA9/C,IAAA,SAAA9Y,MAAA,WAqBkB,IAAA+W,EAAAtX,KACR+H,EAAuB/H,KAAKD,MAAMg5D,mBACxC,OACE90C,EAAA,cAACg2B,EAAA,cAAD,KACG,SAAA7/B,EAAAY,EAAAE,GAAAd,EAAG/B,iBAAH,IAAyBnB,EAAzB8D,EAAyB9D,eAAzBgE,EAA6CiwC,QAA7C,OACClnC,EAAA,cAACG,EAAA,kBAAD,CACEiK,OAAQpK,EAAA,cAACm1C,GAAD,CAAkBzwD,KAAM,IAChCivC,QACE3zB,EAAA,cAACmnC,EAAA,qCAAD,KACG,SAAAvqC,GAAA,IAAGvd,EAAHud,EAAGvd,KAAMG,EAATod,EAASpd,QAAS1B,EAAlB8e,EAAkB9e,MAAlB,OACCkiB,EAAA,cAACo1C,GAAD,CACEt3D,MAAOA,EACP2B,SAAUD,EACVi0D,iBAAkBp0D,EAClBm0D,6BACEngD,EAAK0hD,qCAMfjhB,WAAYqD,IAAU93C,KAAKk8C,gBAAgBG,MAAMvkC,KAAK,CACpDlE,mBAEF+gC,SAAUmD,IAAU93C,KAAKk8C,gBAAgBG,MAAMC,aAAaE,YAC1D,CACE/3C,eACAmP,mBAGJihC,eAAgB7gC,EAAKvX,MAAMg5D,mBAAmB7jD,OAAS,EACvDgjC,eAAe,EACfG,YAAY,UArDxB6gB,EAAA,CAA0Cx5D,aCG7B45D,GAAb,SAAA10C,GAME,SAAA00C,EAAmBn2D,GAAW,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAs5D,IAC5Bh5D,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAy2D,GAAA9yC,KAAAxmB,KAAMmD,KAHDo2D,cAA4B,GAIjCj5D,EAAKP,MAAQ,CACXy5D,mBAAmB,GAErBl5D,EAAKm5D,cAAgBn5D,EAAKm5D,cAAcp2D,KAAnBR,OAAA42C,GAAA,EAAA52C,CAAAvC,IACrBA,EAAKo5D,iBAAmBp5D,EAAKo5D,iBAAiBr2D,KAAtBR,OAAA42C,GAAA,EAAA52C,CAAAvC,IANIA,EANhC,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAAy2D,EAAA10C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAy2D,EAAA,EAAAjgD,IAAA,uBAAA9Y,MAAA,SAe8BixD,GAC1B,IAAMmI,EAAsB,GAD+B3F,GAAA,EAAAC,GAAA,EAAAC,OAAAjpD,EAAA,IAE3D,QAAAkpD,EAAAC,EAA0B5C,EAA1B7vD,OAAAmwD,cAAAkC,GAAAG,EAAAC,EAAApY,QAAAv6C,MAAAuyD,GAAA,EAAwC,KAA7BvB,EAA6B0B,EAAA5zD,MACtCo5D,EAAU1c,KAAKwV,EAAYC,eAAev7C,WAHe,MAAAqlC,GAAAyX,GAAA,EAAAC,EAAA1X,EAAA,YAAAwX,GAAA,MAAAI,EAAAzB,QAAAyB,EAAAzB,SAAA,WAAAsB,EAAA,MAAAC,GAK3D,OAAOyF,IApBX,CAAAtgD,IAAA,gBAAA9Y,MAAA,SAuBuBo0D,GACnB30D,KAAKu5D,cAActc,KAAK0X,GACxB30D,KAAKqE,SAAS,CACZm1D,kBAAmBx5D,KAAKu5D,cAAcrkD,OAAS,MA1BrD,CAAAmE,IAAA,mBAAA9Y,MAAA,SA8B0B4W,GACtB,IAAMkL,EAAQriB,KAAKu5D,cAAc9E,UAC/B,SAAAE,GAAI,OAAIA,EAAKx9C,WAAaA,KAGb,IAAXkL,GACFriB,KAAKu5D,cAAcK,OAAOv3C,EAAO,GAEnCriB,KAAKqE,SAAS,CACZm1D,kBAAmBx5D,KAAKu5D,cAAcrkD,OAAS,MAvCrD,CAAAmE,IAAA,SAAA9Y,MAAA,WA2CkB,IAAA+W,EAAAtX,KACd,OACEikB,EAAA,cAACg2B,EAAA,cAAD,KACG,SAAA7/B,EAAAY,EAAAE,GAAAd,EACG/B,iBADH,IAEGnB,EAFH8D,EAEG9D,eAAgBnP,EAFnBiT,EAEmBjT,aAChBojD,EAHHjwC,EAGGiwC,QAHH,OAMClnC,EAAA,cAACmnC,EAAA,0BAAD,CAA2Bt0C,SAAS,aACjC,SAAA+J,GAAoC,IAAjCrK,EAAiCqK,EAAjCrK,2BACIqjD,EAAiB,eAAA92C,EAAAlgB,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAC,IAAA,IAAA1jC,EAAA,OAAAwjC,EAAAjtC,EAAAotC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAClB9jC,EAAmBo5C,GACvBp6C,EAAeF,eACfM,EAAKiiD,eAHiBzd,EAAAE,KAAA,EAKlBxlC,EACJU,EAAeH,SACfmB,GAPsB,OAUxBizC,EAAQlO,KACN7B,IAAU93C,KAAKk8C,gBAAgBG,MAAMvkC,KAAK,CAAElE,oBAXtB,wBAAA4kC,EAAAI,SAAAN,MAAH,yBAAA74B,EAAAiC,MAAAhlB,KAAAilB,YAAA,GAcvB,OACEhB,EAAA,cAACmnC,EAAA,qBAAD,CACEr1C,UAAWmB,EAAeF,eAAiB,KAE1C,SAAAkM,GAAA,IAAG5f,EAAH4f,EAAG5f,KAAH4f,EAASzf,QAATyf,EAAkBnhB,MAAlB,OACCkiB,EAAA,cAACG,EAAA,kBAAD,CACEiK,OAAQpK,EAAA,cAACm1C,GAAD,CAAkBzwD,KAAM,IAChCivC,QACE3zB,EAAA,cAAC61C,GAAD,CACEr+B,eAAgB1zB,EAChB8rD,kBAAmBv8C,EAAKyiD,qBAAqBz2D,GAC7CiyD,eAAgBj+C,EAAKmiD,cACrBjE,iBAAkBl+C,EAAKoiD,mBAG3B3hB,WAAYqD,IAAU93C,KAAKk8C,gBAAgBG,MAAMvkC,KAAK,CACpDlE,mBAEF8gC,SAAUoD,IAAU93C,KAAKk8C,gBAAgBG,MAAMC,aAAaC,iBAC1D,CAAE3oC,mBAEJshC,cAAeqhB,EACf1hB,gBAAiB7gC,EAAKvX,MAAMy5D,kBAC5BthB,eAAe,EACfG,YAAY,cA5FlCihB,EAAA,CAAqC55D,aCbhBs6D,oLAEjB,OACE/1C,EAAA,cAACg2B,EAAA,cAAD,KACG,SAAC39B,EAADlC,GAAA,IAAMlD,EAANkD,EAAMlD,eAAN,OACC+M,EAAA,cAACvE,EAAA,EAAD,KACEuE,EAAA,cAACG,EAAA,WAAD,KACEH,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,IAAUt8B,UAAU1D,QAC3B4E,IAAKmE,EAAE,gBAEVF,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,IAAU93C,KAAK8X,QACtB4E,IAAKmE,EAAE,+BAEVF,EAAA,cAACkL,EAAA,EAAD,CACEC,GAAIgsB,IAAU93C,KAAKk8C,gBAAgBG,MAAMvkC,KAAK,CAC5ClE,oBAGDA,EAAeH,UAElBkN,EAAA,0BAAOjE,IAAKmE,EAAE,0CAEhBF,EAAA,cAACwT,EAAA,EAAD,KAEExT,EAAA,cAACoM,EAAA,EAAD,CACEH,KACE/V,GAAO7W,KAAKk8C,gBAAgBtoC,eAAeyoC,MAAMC,aAC9CC,iBAELjwB,OAAO,EACPuyB,UAAW+W,KAGbj1C,EAAA,cAACoM,EAAA,EAAD,CACEH,KACE/V,GAAO7W,KAAKk8C,gBAAgBtoC,eAAeyoC,MAAMC,aAC9CE,YAELlwB,OAAO,EACPuyB,UAAWmX,gBAvCiB55D,aCN/Bu6D,GAAb,SAAAr1C,GAAA,SAAAq1C,IAAA,OAAAp3D,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAi6D,GAAAp3D,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAo3D,GAAAj1C,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAo3D,EAAAr1C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAo3D,EAAA,EAAA5gD,IAAA,SAAA9Y,MAAA,WAEI,IAAM41D,EAAiB,CACrB+D,gBAAiB,CACf7D,mBAAmB,EACnBC,YAAY,EACZ5hD,YAAasL,IAAKmE,EAChB,wDAEFoyC,SAAU,mBACVC,KAAM,WACNC,MAAO,EACP7hD,UAAU,EACV+wC,QAAQ,EACRlxC,KAAM,YAERiC,SAAU,CACR2/C,mBAAmB,EACnBC,YAAY,EACZ5hD,YAAasL,IAAKmE,EAAE,iDACpBoyC,SAAU,mBACVC,KAAM,WACNC,MAAO,EACP7hD,UAAU,EACV+wC,QAAQ,EACRlxC,KAAM,WAGJ2e,EAAW,SAAC5yB,GAChB,IAAMyM,EAAc,GAKpB,OAHIzM,EAAEkW,SAAS+yC,SAAS,OACtBx8C,EAAOyJ,SAAW,qDAEbzJ,GAGT,OACEgX,EAAA,cAACg2B,EAAA,cAAD,KACG,SAACsF,EAAGt/C,EAAJma,GAAA,IAAS+wC,EAAT/wC,EAAS+wC,QAAT,OAEClnC,EAAA,cAACmnC,EAAA,0BAAD,CAA2Bt0C,SAAS,aACjC,SAAAkE,GAA8B,IAA3B/E,EAA2B+E,EAA3B/E,qBACIkkD,EAAY,eAAAj/C,EAAArY,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAC,EAAOr7C,GAAP,IAAA2W,EAAA,OAAAwkC,EAAAjtC,EAAAotC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACU/lC,EAC3B1V,EAAMmW,SACNnW,EAAM25D,iBAHW,OACbhjD,EADa4kC,EAAAuE,KAMnB8K,EAAQlO,KACN7B,IAAU93C,KAAKk8C,gBAAgBG,MAAMvkC,KAAK,CAAElE,oBAP3B,wBAAA4kC,EAAAI,SAAAN,MAAH,gBAAAgN,GAAA,OAAA1tC,EAAA8J,MAAAhlB,KAAAilB,YAAA,GAUlB,OACEhB,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,OAAQ,WACvB,SAAAoE,GAAC,OACAF,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,WAAD,KACEH,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,IAAUt8B,UAAU1D,QAC3B+I,EAAE,gBAELF,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,IAAU93C,KAAK8X,QACtB+I,EAAE,+BAELF,EAAA,0BACGE,EACC,uDAINF,EAAA,cAACG,EAAA,UAAD,KACEH,EAAA,wBACGE,EACC,sDAGJF,EAAA,cAAC0mC,EAAA,SAAD,CACEzF,WAAYiR,EACZ5yD,aAAc,GACdwhD,qBAAsB5gC,EACpB,4CAEFiP,SAAUA,EACV1tB,OAAQy0D,GAEP,SAAAt5C,GAAA,IAAGmkC,EAAHnkC,EAAGmkC,OAAQnqB,EAAXha,EAAWga,aAAX,OACC5W,EAAA,cAACA,EAAA,SAAD,KACG+gC,EACD/gC,EAAA,wBACExP,KAAK,SACLkU,UAAU,kBACV0G,QAASwL,GAER1W,EAAE,iCA7FnC81C,EAAA,CAA8Cv6D,aCiBjC06D,GAAb,SAAAx1C,GAAA,SAAAw1C,IAAA,OAAAv3D,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAo6D,GAAAv3D,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAu3D,GAAAp1C,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAu3D,EAAAx1C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAu3D,EAAA,EAAA/gD,IAAA,SAAA9Y,MAAA,WAEI,OACE0jB,EAAA,cAACg2B,EAAA,cAAD,KAIG,SAAA7/B,EAAAY,EAAAE,GAA2D,IAAxD7C,EAAwD+B,EAAxD/B,iBAAsBnB,EAAkC8D,EAAlC9D,eAAkCgE,EAAdiwC,QAC5C,OACElnC,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,OAAQ,WACvB,SAAAoE,GAAC,OACAF,EAAA,yBACEA,EAAA,cAACG,EAAA,WAAD,KACEH,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,IAAUt8B,UAAU1D,QAC3B+I,EAAE,gBAELF,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,IAAU93C,KAAK8X,QACtB+I,EAAE,+BAELF,EAAA,0BACG5L,EAAmB,IACnB8L,EAAE,iCAGPF,EAAA,cAACo2C,GAAD,CAAYhiD,iBAAkBA,IAC9B4L,EAAA,cAACq2C,GAAD,CAAsBpjD,eAAgBA,IACtC+M,EAAA,cAACG,EAAA,UAAD,KACEH,EAAA,qEA3BpBm2C,EAAA,CAA+C16D,aCAlC66D,GAAb,SAAA31C,GAAA,SAAA21C,IAAA,OAAA13D,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAu6D,GAAA13D,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAA03D,GAAAv1C,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAA03D,EAAA31C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAA03D,EAAA,EAAAlhD,IAAA,SAAA9Y,MAAA,WAEI,OACE0jB,EAAA,cAACg2B,EAAA,cAAD,KAIG,SAAA7/B,EAAAY,EAAAE,GAA2D,IAAxD7C,EAAwD+B,EAAxD/B,iBAAsBnB,EAAkC8D,EAAlC9D,eAAkCgE,EAAdiwC,QAC5C,OACElnC,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,OAAQ,WACvB,SAAAoE,GAAC,OACAF,EAAA,yBACEA,EAAA,cAACG,EAAA,WAAD,KACEH,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,IAAUt8B,UAAU1D,QAC3B+I,EAAE,gBAELF,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,IAAU93C,KAAK8X,QACtB+I,EAAE,+BAELF,EAAA,0BACG5L,EAAmB,IACnB8L,EAAE,sCAGPF,EAAA,cAACo2C,GAAD,CAAYhiD,iBAAkBA,IAC9B4L,EAAA,cAACq2C,GAAD,CAAsBpjD,eAAgBA,IACtC+M,EAAA,cAACG,EAAA,UAAD,KACEH,EAAA,2EA3BpBs2C,EAAA,CAAoD76D,aCwBpD,IAAMypD,GAAe,CACnBh1B,WAAY,OACZ5rB,GAAI,OACJoM,YAAaqL,IAAKmE,EAAE,kCACpB0B,MAAO7F,IAAKmE,EAAE,gBAGVsQ,GAA6B,CAAC00B,IAE9BC,GAAa,CACjB7gD,GAAI,OACJ2sB,WAAW,EACXrP,MAAO7F,IAAKmE,EAAE,gBAGV0Q,GAAyB,CAACu0B,IAMzB,IAAMoR,GAAb,SAAA51C,GAAA,SAAA41C,IAAA,OAAA33D,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAw6D,GAAA33D,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAA23D,GAAAx1C,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAA23D,EAAA51C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAA23D,EAAA,EAAAnhD,IAAA,oBAAA9Y,MAAA,SAC2B2W,GACvB,YAAmCjM,IAA5BiM,EAAeH,WAF1B,CAAAsC,IAAA,mBAAA9Y,MAAA,SAK0BgX,GAEtBm2C,MAAM,yBAA2Bn2C,KAPrC,CAAA8B,IAAA,6BAAA9Y,MAAA,WAYImtD,MAAM,4BAZV,CAAAr0C,IAAA,SAAA9Y,MAAA,WAekB,IAAAD,EAAAN,KACd,OACEikB,EAAA,cAACmnC,EAAA,oBAAD,KACG,SAAAhxC,GAAoC,IAAjC9W,EAAiC8W,EAAjC9W,KAAMG,EAA2B2W,EAA3B3W,QAAS1B,EAAkBqY,EAAlBrY,MAAOqB,EAAWgX,EAAXhX,KACxB,OAEE6gB,EAAA,cAACmnC,EAAA,0BAAD,CAA2Bt0C,SAAS,aACjC,SAAAkE,GAIK,IAHJ3E,EAGI2E,EAHJ3E,qBACAC,EAEI0E,EAFJ1E,sBACAG,EACIuE,EADJvE,oBAEMymB,EAAY,eAAAhiB,EAAArY,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAC,EAAOrkC,GAAP,OAAAmkC,EAAAjtC,EAAAotC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACb3lC,EAAqBkB,GAAoB7W,KAAK0C,GADjC,wBAAA04C,EAAAI,SAAAN,MAAH,gBAAAgN,GAAA,OAAA1tC,EAAA8J,MAAAhlB,KAAAilB,YAAA,GAIZ2wB,EAAa,eAAA/0B,EAAAhe,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAW,EAAO/kC,GAAP,OAAAmkC,EAAAjtC,EAAAotC,KAAA,SAAAU,GAAA,cAAAA,EAAAR,KAAAQ,EAAAP,MAAA,cAAAO,EAAAP,KAAA,EACd1lC,EAAsBiB,GADR,wBAAAglC,EAAAL,SAAAI,MAAH,gBAAAuM,GAAA,OAAAhoC,EAAAmE,MAAAhlB,KAAAilB,YAAA,GAIb0wB,EAAe,eAAA5yB,EAAAlgB,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAgB,EAAO3lC,GAAP,OAAA0kC,EAAAjtC,EAAAotC,KAAA,SAAAe,GAAA,cAAAA,EAAAb,KAAAa,EAAAZ,MAAA,cAAAY,EAAAZ,KAAA,EAChBvlC,EAAoBO,GADJ,wBAAA4lC,EAAAV,SAAAS,MAAH,gBAAAmP,GAAA,OAAA/oC,EAAAiC,MAAAhlB,KAAAilB,YAAA,GAIrB,OACEhB,EAAA,cAACg2B,EAAA,2BAAD,CACEqN,kBAAmB6B,GACnB5B,gBAAiB6B,IAEhB,SAAAE,GACC,IAAMqE,EAnG5B,SACEnO,EACAhqB,EACAV,EACAM,GAEA,IAAIu4B,EAAoBnO,EAwBxB,OAvBAhqB,EAAcriB,QAAQ,SAACnJ,GACrB,IAAMw/C,EAAex/C,EAAOzJ,MAAM4U,cAClCw4C,EAAoBA,EAAkB3jD,OACpC,SAACkN,GAAD,OACEA,EAAeH,SAAS5B,cAAcs0C,SAASD,OAIrDmE,EAAoBA,EAAkBnI,KACpC,SAACiV,EAAoBC,GACnB,OAAItlC,EACKqlC,EAAmB1jD,SAAS8yC,cACjC6Q,EAAmB3jD,UAKhB2jD,EAAmB3jD,SAAS8yC,cACjC4Q,EAAmB1jD,YA0EqB4jD,CACxBr3D,EACAgmD,EAAQ9zB,cACR8zB,EAAQx0B,gBACRw0B,EAAQl0B,iBAGV,OACEnR,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,OAAQ,WACvB,SAAAoE,GAAC,OACAF,EAAA,cAACG,EAAA,mBAADvhB,OAAAC,OAAA,CACE2xB,YAAaA,GACbI,UAAWA,GACXiT,aAAc6lB,EAAkBz4C,QAC5Bo0C,EAJN,CAKEsR,6BAA8Bz2C,EAC5B,2CAEF02C,gCAAiC12C,EAC/B,8CAEFiU,gBAAiBjU,EACf,iDAEF8a,mBAAoB9a,EAClB,wCAEF6a,oBAAqB7a,EACnB,kCAEFud,WAAYvd,EAAE,iBACduzB,cAAevzB,EACb,0CAEFqzB,6BAA8BrzB,EAC5B,2CAEFie,SAAUje,EAAE,eACZmsC,0BAA2BnsC,EACzB,gCAEFoR,iBAAkBpR,EAAE,sBAAuB,CACzC8R,MAAO03B,EAAkBz4C,SAE3BmP,UAAWF,EACT,2CAEFwzB,eAAgByD,KAAUoE,gBAAgBjlC,SAC1C2mB,SAAU5gC,EAAKw6D,iBACf7mB,YAAa3wC,EAAK4R,OAAS,IAE3B+O,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAOA,EACP2B,SAAUD,EACVy2C,eACEj2B,EAAA,cAACG,EAAA,2BAAD,CACEvG,MAAO,IACPD,MAAO,CACLowC,gBAAiB,OACjBvpB,UAAW,MAIjB0V,cAAel2B,EAAA,cAACvE,EAAA,EAAD,OAEd,kBACCiuC,EAAkB9kD,IAChB,SACEqO,EACAmL,GAEA,IAAM04C,EnByBrC,SACL7jD,GAGA,IAAM8jD,EAAsD,CAC1Dj7D,MAAOmX,EAAeyB,eACtBsiD,WAAY,EACZvkB,SAAU,GACVwkB,UAAW,GAEb,OAAQhkD,EAAeyB,gBACrB,IAAK,cACHqiD,EAAmBC,WAAa,EAChCD,EAAmBtkB,SAAW,cAC9B,MACF,IAAK,WACHskB,EAAmBC,WAAa,EAChCD,EAAmBtkB,SAAW,WAC9B,MACF,IAAK,YACHskB,EAAmBC,WAAa,EAChCD,EAAmBtkB,SAAW,YAC9B,MACF,IAAK,UACHskB,EAAmBC,WAAa,EAChCD,EAAmBtkB,SAAW,YAMlC,OAHIx/B,EAAeikD,gBACjBH,EAAmBniC,OAAS3hB,EAAeikD,eAEtCH,EmBxDuDI,CACxBlkD,GAEF,OACE+M,EAAA,cAACG,EAAA,uBAAD,CACE/K,IAAKgJ,EACL0gB,gBAAiBqY,KAAUoE,gBAAgBG,MAAMvkC,KAC/C,CAAElE,mBAEJK,mBACEL,EAAeH,SAEjBqgC,0BACElgC,EAAeD,iBACXC,EAAeD,iBACf,GAEND,eACEE,EAAeF,eAEjByoB,eAAgBtb,EAAE,iBAClBoZ,WAAYpZ,EAAE,iBACd0V,uBAAwB1V,EACtB,oCACA,CAAE3Y,KAAM0L,EAAeH,WAEzB+iB,qBAAsB3V,EACpB,mCAEF8yB,UAAW9yB,EAAE,gBACbovB,SAAUpvB,EAAE,eACZuvB,YAAavvB,EACX,4CAEF6tB,UAAW7tB,EAAE,gBACb+yB,WAAY/yB,EAAE,iBACdgzB,YAAahzB,EAAE,kBACf2tB,cAAe3tB,EACb,8CAEFkyB,cAAelyB,EAAE,oBACjBmyB,0BAA2BnyB,EACzB,uCACA,CAAE3Y,KAAM0L,EAAeH,WAEzBw/B,wBAAyBpyB,EACvB,sCAEFsV,SAAUyD,EACV2Y,SACEv1C,EAAK+6D,2BAEPtlB,YAAaJ,EACbG,UAAWF,EACXK,sBACE8kB,EAAkBh7D,MAEpB02C,iBACEskB,EAAkBliC,OAEpB+d,sBACEmkB,EAAkBE,WAEpBpkB,qBACEkkB,EAAkBG,UAEpBvkB,mBACEokB,EAAkBrkB,SAEpBI,sBAAuB3yB,EACrB,oCAEF4yB,sBAAuB5yB,EACrB,sCA7L5Cq2C,EAAA,CAAyC96D,aC5B5B47D,GAAb,SAAA12C,GAAA,SAAA02C,IAAA,OAAAz4D,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAs7D,GAAAz4D,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAy4D,GAAAt2C,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAy4D,EAAA12C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAy4D,EAAA,EAAAjiD,IAAA,SAAA9Y,MAAA,WAII,OACE0jB,EAAA,cAACg2B,EAAA,cAAD,KAIG,SAAA7/B,EAAAY,EAAAE,GAAA,IAAG7C,EAAH+B,EAAG/B,iBAAsBnB,EAAzB8D,EAAyB9D,eAAzBgE,EAA6CiwC,QAA7C,OACClnC,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,OAAQ,WACvB,SAAAoE,GAAC,OACAF,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,WAAD,KACEH,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,IAAUt8B,UAAU1D,QAC3B+I,EAAE,gBAELF,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,IAAU93C,KAAK8X,QACtB+I,EAAE,+BAELF,EAAA,0BACG5L,EAAmB,IACnB8L,EAAE,mCAGPF,EAAA,cAACo2C,GAAD,CAAYhiD,iBAAkBA,IAC9B4L,EAAA,cAACq2C,GAAD,CAAsBpjD,eAAgBA,IACtC+M,EAAA,cAACmnC,EAAA,qBAAD,CACEr1C,UAAWmB,EAAeF,eAAiB,KAE1C,SAAA6J,GAAA,IAAGvd,EAAHud,EAAGvd,KAAHud,EAASpd,QAATod,EAAkB9e,MAAlB,OACCkiB,EAAA,cAACs3C,GAAD,CACE5b,MAAOr8C,EAAKuF,IACV,SAAC4pD,GAAD,OACEA,EAAYC,iBAEhBkE,UpBnDbxF,gBoBeTkK,EAAA,CAAiD57D,aC0BjD,IAAMypD,GAAe,CACnBh1B,WAAY,OACZ5rB,GAAI,OACJoM,YAAaqL,IAAKmE,EAAE,kCACpB0B,MAAO7F,IAAKmE,EAAE,gBAGVsQ,GAA6B,CAAC00B,IAE9BC,GAAa,CACjB7gD,GAAI,OACJ2sB,WAAW,EACXrP,MAAO7F,IAAKmE,EAAE,gBAGV0Q,GAAyB,CAACu0B,IAEnBoS,GAAb,SAAA52C,GAAA,SAAA42C,IAAA,OAAA34D,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAw7D,GAAA34D,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAA24D,GAAAx2C,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAA24D,EAAA52C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAA24D,EAAA,EAAAniD,IAAA,oBAAA9Y,MAAA,SAI2Bo0D,GACvB,YAAyB1pD,IAAlB0pD,EAAKx9C,WALhB,CAAAkC,IAAA,mBAAA9Y,MAAA,SAQ0B4W,GAEtBu2C,MAAM,eAAiBv2C,KAV3B,CAAAkC,IAAA,iBAAA9Y,MAAA,WAeImtD,MAAM,gBAfV,CAAAr0C,IAAA,SAAA9Y,MAAA,WAkBkB,IAAAD,EAAAN,KACd,OACEikB,EAAA,cAACg2B,EAAA,cAAD,KAIG,SAAA7/B,EAAAY,EAAAE,GAA2D,IAAxD7C,EAAwD+B,EAAxD/B,iBAAsBnB,EAAkC8D,EAAlC9D,eAAkCgE,EAAdiwC,QAC5C,OACElnC,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,OAAQ,WACvB,SAAAoE,GAAC,OACAF,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,WAAD,KACEH,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,IAAUt8B,UAAU1D,QAC3B+I,EAAE,gBAELF,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,IAAU93C,KAAK8X,QACtB+I,EAAE,+BAELF,EAAA,0BACG5L,EAAmB,IACnB8L,EAAE,+BAGPF,EAAA,cAACo2C,GAAD,CAAYhiD,iBAAkBA,IAC9B4L,EAAA,cAACmnC,EAAA,qBAAD,CACEr1C,UAAWmB,EAAeF,eAAiB,KAE1C,SAAA6J,GAAoC,IAAjCvd,EAAiCud,EAAjCvd,KAAMG,EAA2Bod,EAA3Bpd,QAAS1B,EAAkB8e,EAAlB9e,MAAOqB,EAAWyd,EAAXzd,KACxB,OAEE6gB,EAAA,cAACmnC,EAAA,0BAAD,CAA2Bt0C,SAAS,aACjC,SAAAiM,GAAoB,IAAjB5M,EAAiB4M,EAAjB5M,WACIslD,EAAgB,eAAAv4C,EAAArgB,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAC,EACvBzkC,GADuB,OAAAukC,EAAAjtC,EAAAotC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAGjB7lC,EAAWe,EAAgBC,GAAUzW,KACzC0C,GAJqB,wBAAA04C,EAAAI,SAAAN,MAAH,gBAAAgN,GAAA,OAAA1lC,EAAA8B,MAAAhlB,KAAAilB,YAAA,GAQtB,OACEhB,EAAA,cAACg2B,EAAA,2BAAD,CACEqN,kBAAmB6B,GACnB5B,gBAAiB6B,IAEhB,SAAAE,GACC,IAIMqE,EA/GxC,SACE+N,EACAlmC,EACAV,EACAM,GAEA,IAAIu4B,EAAoB+N,EAiBxB,OAhBAlmC,EAAcriB,QAAQ,SAACnJ,GACrB,IAAMw/C,EAAex/C,EAAOzJ,MAAM4U,cAClCw4C,EAAoBA,EAAkB3jD,OAAO,SAAC2qD,GAAD,OAC3CA,EAAKx9C,SAAShC,cAAcs0C,SAASD,OAIzCmE,EAAoBA,EAAkBnI,KAAK,SAACmW,EAAUC,GACpD,OAAIxmC,EACKumC,EAASxkD,SAAS0yC,cAAc+R,EAASzkD,UAI3CykD,EAASzkD,SAAS0yC,cAAc8R,EAASxkD,YA2FQ0kD,CAJRv4D,EAAKuF,IACrB,SAAC4pD,GAAD,OACEA,EAAYC,iBAIdpJ,EAAQ9zB,cACR8zB,EAAQx0B,gBACRw0B,EAAQl0B,iBAEV,OACEnR,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACq2C,GAAD,CACEpjD,eAAgBA,IAElB+M,EAAA,cAACG,EAAA,SAADvhB,OAAAC,OAAA,CACE2xB,YAAaA,GACbI,UAAWA,IACPv0B,EAAKP,MAHX,CAIE+nC,aAAc6lB,EAAkBz4C,QAC5Bo0C,EALN,CAMElxB,gBAAiBjU,EACf,4CAEF8a,mBAAoB9a,EAClB,0CAEF6a,oBAAqB7a,EACnB,2CAEF2vB,gBAAiB3vB,EACf,wCAEFiwB,mBAAoBjwB,EAClB,2CAEF+vB,eAAgB/vB,EACd,kCAEFgwB,kBAAmBhwB,EACjB,qCAEFie,SAAUje,EAAE,eACZmsC,0BAA2BnsC,EACzB,gCAEFoR,iBAAkBpR,EAChB,sBACA,CACE8R,MAAO03B,EAAkBz4C,SAI7B8+B,mBAAoBoH,IAAU93C,KAAKk8C,gBAAgBjlC,SACnDs5B,oBAAqBuH,IAAU93C,KAAKk8C,gBAAgBG,MAAMC,aAAaC,iBACrE,CAAE3oC,mBAEJ4kD,aAAcx7D,EAAKy7D,iBACnB9nB,YAAa3wC,EAAK4R,OAAS,KAE7B+O,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAOA,EACP2B,SAAUD,EACVy2C,eACEj2B,EAAA,cAACG,EAAA,iBAAD,CACEvG,MAAO,IACPD,MAAO,CACLowC,gBAAiB,OACjBvpB,UAAW,MAIjB0V,cAAel2B,EAAA,cAACvE,EAAA,EAAD,OAEd,kBACCiuC,EACG3jD,OAAO,SAAC2qD,GAAD,OACNr0D,EAAK2tD,kBAAkB0G,KAExB9rD,IACC,SACE8rD,EACAtyC,GAFF,OAIE4B,EAAA,cAACG,EAAA,aAAD,CACE/K,IAAKgJ,EACLlL,SAAUw9C,EAAKx9C,SACfq8B,gBACEmhB,EAAKrC,kBAEP7yB,eAAgBtb,EACd,iBAEFoZ,WAAYpZ,EACV,iBAEF0V,uBAAwB1V,EACtB,wCACA,CACE3Y,KAAMmpD,EAAKx9C,WAGf2iB,qBAAsB3V,EACpB,mCAEFovB,SAAUpvB,EAAE,eACZuvB,YAAavvB,EACX,oBAEFsV,SAAUgiC,EACVtqC,OAAQ7wB,EAAK07D,qCA9K/DR,EAAA,CAA6C97D,aC1EhCu8D,GAAb,SAAAr3C,GAAA,SAAAq3C,IAAA,OAAAp5D,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAi8D,GAAAp5D,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAo5D,GAAAj3C,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAo5D,EAAAr3C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAo5D,EAAA,EAAA5iD,IAAA,SAAA9Y,MAAA,WAEI,OACE0jB,EAAA,cAACwT,EAAA,EAAD,KACExT,EAAA,cAACusC,EAAA,EAAD,CACEtgC,KAAM/V,KAAOiB,KACbwU,OAAO,EACPR,GAAIjV,KAAOqlC,gBAAgB3kC,OAE7BoJ,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOqlC,gBAAgBtoC,eAAeyoC,MAAMC,aAAaxkC,KAC/D+mC,UAAW6X,KAEb/1C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOqlC,gBAAgBjlC,OAC7BqV,OAAO,EACPuyB,UAAW8X,KAEbh2C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOqlC,gBAAgB3kC,KAC7B+U,OAAO,EACPuyB,UAAWqY,KAEbv2C,EAAA,cAACusC,EAAA,EAAD,CACEtgC,KAAM/V,KAAOqlC,gBAAgBtoC,eAAekE,KAC5CwU,OAAO,EACPR,GAAIjV,KAAOqlC,gBAAgBtoC,eAAeyoC,MAAMvkC,OAElD6I,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOqlC,gBAAgBtoC,eAAeyoC,MAAMvkC,KAClDwU,OAAO,EACPuyB,UAAWqZ,KAEbv3C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOqlC,gBAAgBtoC,eAAeuoC,aAC5C7vB,OAAO,EACPuyB,UAAWoY,KAEbt2C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOqlC,gBAAgBtoC,eAAewoC,UAC5C9vB,OAAO,EACPuyB,UAAWmZ,KAEbr3C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOqlC,gBAAgBtoC,eAAe4M,QAC5C8L,OAAO,EACPuyB,UAAWiY,UA9CrB6B,EAAA,CAAgCv8D,gCC2BnBw8D,GAAb,SAAAt3C,GAAA,SAAAs3C,IAAA,OAAAr5D,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAk8D,GAAAr5D,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAq5D,GAAAl3C,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAq5D,EAAAt3C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAq5D,EAAA,EAAA7iD,IAAA,SAAA9Y,MAAA,WACkB,IAAAD,EAAAN,KACd,OACEikB,EAAA,cAACg2B,EAAA,cAAD,KACG,SAAA7/B,EAAAY,GAAA,IAAG3S,EAAH+R,EAAG/R,OAAYH,EAAf8S,EAAe9S,YAAf,OACC+b,EAAA,cAACG,EAAA,wBAAD,CACEiK,OAAQ/tB,EAAK6C,MAAMkrB,OACnBupB,QACE3zB,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACvE,EAAA,EAAD,CAAWmG,MAAO,qBAClB5B,EAAA,cAACG,EAAA,UAAD,KACEH,EAAA,8CACAA,EAAA,qGAIAA,EAAA,cAAC2D,GAAA,EAAD,CACEhY,MAAOusD,mBAASj0D,EAAaG,GAC7BygB,YAAa,SAAAxgB,GAAQ,OACnBhI,EAAK6C,MAAMi5D,mBACT9zD,EACA,CAAED,UACF,CAAEH,iBAGNugB,kBAAmB,SAAC4zC,EAAiB1zD,GAAlB,OACjBrI,EAAK6C,MAAMm5D,iCACTD,EACA1zD,EACA,CAAEN,UACF,CAAEH,qBAOd6vC,WAAYz3C,EAAK6C,MAAM40C,WAAW,CAAE1vC,UAAU,CAAEH,gBAChD+vC,SAAU33C,EAAK6C,MAAM80C,SAAS,CAAE5vC,UAAU,CAAEH,wBAtCxDg0D,EAAA,CAAiCx8D,sBCdpB68D,GAAb,SAAA33C,GAAA,SAAA23C,IAAA,OAAA15D,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAu8D,GAAA15D,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAA05D,GAAAv3C,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAA05D,EAAA33C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAA05D,EAAA,EAAAljD,IAAA,SAAA9Y,MAAA,WAII,IAAM2H,EAAclI,KAAKmD,MAAM+E,YAC/B,OACE+b,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,cAAe,WAC9B,SAAAoE,GAAC,OACAF,EAAA,cAACG,EAAA,UAAD,CACExG,MAAO,CACL4tB,WAAY,SAGdvnB,EAAA,cAACG,EAAA,OAAD,KACEH,EAAA,cAACG,EAAA,WAAD,CACE6L,MAAO,UACPb,GAAIgsB,KAAUlzC,YAAY6S,QAAQ,CAChCtR,cAAevB,EAAYK,OAG/B0b,EAAA,cAACG,EAAA,WAAD,CACE6L,MAAO,WACPb,GAAIgsB,KAAUlzC,YAAY+a,SAAS,CACjC/a,kBAGJ+b,EAAA,cAACG,EAAA,WAAD,CACE6L,MAAO,UACPb,GAAIgsB,KAAUlzC,YAAY4b,QAAQ,CAChC5b,0BA7BlBq0D,EAAA,CAA6C78D,aCkFhC88D,GAAb,SAAA53C,GAOE,SAAA43C,EAAYr5D,GAAqC,OAAAN,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAw8D,GAAA35D,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAA25D,GAAAh2C,KAAAxmB,KACzCmD,IARV,OAAAN,OAAAqiB,EAAA,EAAAriB,CAAA25D,EAAA53C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAA25D,EAAA,EAAAnjD,IAAA,0BAAA9Y,MAAA,SAWiC6H,GAAoC,IAAA9H,EAAAN,KACjE,IACE,IAAMmZ,EAAarR,8BAAoBM,GACjCwH,EAAQ6sD,yBAAetjD,GACvBxQ,EAAO+zD,wBAAc9sD,EAAO5P,KAAKmD,MAAMw5D,mBACvCzX,EAAa0X,kCAAwBj0D,GACrCk0D,EACJ78D,KAAKmD,MAAMw5D,kBAAoB/sD,EAAMsF,OAAS,EAC1CxP,EAAM,eAAA0U,EAAAvX,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAC,EACb/qC,EACAhF,GAFa,OAAA6vC,EAAAjtC,EAAAotC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAIP17C,EAAK6C,MAAM25D,qBAAqB,CACpC10D,SACAy0D,yBACAhsD,WAPW,OASbhF,EAAQsgD,eAAc,GATT,wBAAArQ,EAAAI,SAAAN,MAAH,gBAAAgN,EAAAC,GAAA,OAAAzuC,EAAA4K,MAAAhlB,KAAAilB,YAAA,GAWZ,OACEhB,EAAA,cAAC0mC,EAAA,SAAD,CACE5F,qBAAsB,mBACtBG,WAAY0F,2BAAiB1F,GAC7B3hD,aAAcvD,KAAKmD,MAAMI,aACzBmC,OAAQA,EACR2T,IAAKrZ,KAAKmD,MAAMw5D,mBAEf,SAAA3hD,GAAA,IAAGgqC,EAAHhqC,EAAGgqC,OAAQnqB,EAAX7f,EAAW6f,aAAcypB,EAAzBtpC,EAAyBspC,aAAcppB,EAAvClgB,EAAuCkgB,QAASqrB,EAAhDvrC,EAAgDurC,WAAhD,OACCjmD,EAAK6C,MAAMgB,SAAS,CAClBo+C,KACEt+B,EAAA,cAACG,EAAA,sBAAD,CACEC,UAAW,mBACX04C,aACE,4DAEFvgC,cAAa,GAAA/2B,OAAK2C,EAAOoD,KAAZ,OAAA/F,OAAsB2C,EAAOuI,aAC1CkqB,aAAcA,GAEbmqB,GAGLV,eACAppB,UACAqrB,iBAKR,MAAOnmD,GACP,OAAO,QA5Db,CAAAiZ,IAAA,yBAAA9Y,MAAA,SAgEgC6H,GAAgB,IAAAkP,EAAAtX,KAQ5C,OAAOA,KAAKmD,MAAMgB,SAAS,CACzBo+C,KACEt+B,EAAA,cAACG,EAAA,oCAAD,CACEC,UAAW,mBACX04C,aACE,4DAEFruB,UAAW,0DAGf4V,cAAc,EACdppB,SAAS,EACTqrB,WAnBiB,WACjBjvC,EAAKnU,MAAM25D,qBAAqB,CAC9B10D,SACAy0D,wBAAwB,EACxBhsD,OAAQ,YArEhB,CAAAwI,IAAA,SAAA9Y,MAAA,WAyFI,IAAM6H,EAAS40D,wBACbC,8BAAoBC,iCAAuBl9D,KAAKmD,MAAMgF,aACtDnI,KAAKmD,MAAM6E,UAEb,OACEhI,KAAKm9D,wBAAwB/0D,IAC7BpI,KAAKo9D,uBAAuBh1D,OA/FlCo0D,EAAA,CAA2C98D,aAA9B88D,GAGGvS,aAAe,CAC3B1mD,aAAc,ICvDX,IAAM85D,GAAb,SAAAz4C,GAAA,SAAAy4C,IAAA,OAAAx6D,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAq9D,GAAAx6D,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAw6D,GAAAr4C,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAw6D,EAAAz4C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAw6D,EAAA,EAAAhkD,IAAA,SAAA9Y,MAAA,WAGkB,IAAAD,EAAAN,KACd,OACEikB,EAAA,cAACmnC,EAAA,uBAAD,KACG,SAAAhxC,GAAA,IAAGhT,EAAHgT,EAAGhT,cAAeO,EAAlByS,EAAkBzS,iBAAlB,OACCsc,EAAA,cAACg2B,EAAA,cAAD,KAIG,SAAAj/B,EAAAE,EAAA2F,GASI,IARD7Y,EAQCgT,EARDhT,SAAUK,EAQT2S,EARS3S,OAQTi1D,EAAAtiD,EARiBrS,YAQjB,IAAA20D,EARwB,IAQxBA,EAR6Bh1D,EAQ7B0S,EAR6B1S,SAE9BL,EAMCiT,EANDjT,qBACAE,EAKC+S,EALD/S,WACAD,EAICgT,EAJDhT,YACA4Y,EAGC5F,EAHD4F,mBAEAqqC,EACCtqC,EADDsqC,QAEIoS,EAAet8C,SAAStY,EAAM,IAC9BqY,EAAmBC,SAAS3Y,EAAU,IACtCw0D,EAAoB,eAAA55C,EAAArgB,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAC,EAAA74B,GAAA,IAAA3a,EAAAy0D,EAAAhsD,EAAA,OAAA6qC,EAAAjtC,EAAAotC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAC3B5zC,EAD2B2a,EAC3B3a,OACAy0D,EAF2B95C,EAE3B85C,uBACAhsD,EAH2BkS,EAG3BlS,OAH2BirC,EAAAE,KAAA,GAKqB,WAApB17C,EAAK6C,MAAMJ,MACpB,IAAjBw6D,EACEn2D,EACAO,GACFmZ,GAAsB5Y,EACtBC,EACAC,EACAC,EACA2Y,EACAnQ,GAdyB,OAK3BiQ,EAL2Bg7B,EAAAuE,KAgBvBwc,EACF1R,EAAQlO,KACN38C,EAAK6C,MAAMq6D,aACT,CACEx1D,WACAK,SACAC,WACAK,KAAI,GAAAlD,OAAK83D,EAAe,IAE1B,CACEt1D,uBACAE,aACAD,cACA4Y,wBAKNqqC,EAAQlO,KACN38C,EAAK6C,MAAMs6D,kBACT38C,EACA,CAAE9Y,WAAUK,SAAQM,OAAML,YAC1B,CACEL,uBACAE,aACAD,cACA4Y,wBA1CmB,wBAAAg7B,EAAAI,SAAAN,MAAH,gBAAAgN,GAAA,OAAA1lC,EAAA8B,MAAAhlB,KAAAilB,YAAA,GAiD1B,OACEhB,EAAA,cAACy5C,GAAD,CACEv1D,WAAYA,EACZH,SAAUA,EACV20D,kBAAmBY,EACnBh6D,aAAc0E,EACd60D,qBAAsBA,GAErB,SAAA15C,GAAA,IAAGm/B,EAAHn/B,EAAGm/B,KAAMgE,EAATnjC,EAASmjC,WAAYjC,EAArBlhC,EAAqBkhC,aAArB,OACCrgC,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACvE,EAAA,EAAD,CAAWmG,MAAO,yBAClB5B,EAAA,cAACG,EAAA,wBAAD,CACEiK,OAAQ/tB,EAAK6C,MAAMkrB,OACnBC,QAAShuB,EAAK6C,MAAMmrB,QAAQ,CAC1BgwB,YAAat9B,EACb7Y,aACAyH,MAAOusD,mBACLr7C,GAAsB5Y,EACtBG,KAGJuvC,QAAS2K,EACTvK,SAAU13C,EAAK6C,MAAM60C,SACnB,CAAEhwC,WAAUK,SAAQM,OAAML,YAC1B,CACEL,uBACAE,aACAD,cACA4Y,uBAGJi3B,WAAYz3C,EAAK6C,MAAM40C,WACrB,CAAE/vC,WAAUK,SAAQM,OAAML,YAC1B,CACEL,uBACAE,aACAD,cACA4Y,uBAGJg3B,OAAQyO,EACRrO,cAAeoM,eAjHvC+Y,EAAA,CAAyC39D,aCN5Bi+D,GAAb,SAAA/4C,GAAA,SAAA+4C,IAAA,OAAA96D,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAA29D,GAAA96D,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAA86D,GAAA34C,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAA86D,EAAA/4C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAA86D,EAAA,EAAAtkD,IAAA,SAAA9Y,MAAA,WACkB,IAAAD,EAAAN,KACd,OACEikB,EAAA,cAACg2B,EAAA,cAAD,KACG,SAAA7/B,EAAAY,GAAqE,IAAlEjT,EAAkEqS,EAAlErS,aAAcM,EAAoD+R,EAApD/R,OAAQC,EAA4C8R,EAA5C9R,SAAcH,EAA8B6S,EAA9B7S,WAAYD,EAAkB8S,EAAlB9S,YAC5C8Y,EAAmBC,SAAS3Y,EAAU,IAC5C,OACE2b,EAAA,cAACmnC,EAAA,eAAD,CAAgB7iD,GAAIR,EAAcxE,aAAc4E,GAC7C,SAAA+S,GAAA,IAAG5X,EAAH4X,EAAG5X,KAAMG,EAATyX,EAASzX,QAAS1B,EAAlBmZ,EAAkBnZ,MAAlB,OACCkiB,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAOA,EACP2B,SAAUD,EACVy2C,eAAgBj2B,EAAA,cAACG,EAAA,OAAD,MAChB+1B,cAAel2B,EAAA,cAACvE,EAAA,EAAD,OAEd,kBACCuE,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACvE,EAAA,EAAD,CAAWmG,MAAO,qBAClB5B,EAAA,cAACG,EAAA,wBAAD,CACEiK,OAAQ/tB,EAAK6C,MAAMkrB,OACnBC,QAAShuB,EAAK6C,MAAMmrB,QAAQ,CAC1BgwB,YAAat9B,EACb7Y,WAAYA,EACZyH,MAAOusD,mBAASj0D,EAAaG,KAE/BuvC,QACE3zB,EAAA,cAACG,EAAA,8BAAD,CACEC,UAAS,GAAA5e,OAAK0C,EAAWqD,KAAhB,oBACTuxD,aACE,sDAGA/7C,EAAmB,EACjB1d,EAAK8M,cACL9M,EAAK6M,iBAENq1C,KAAK,SAAC/2C,EAAGg3C,GAAJ,OAAUh3C,EAAEjD,KAAKq+C,cAAcpE,EAAEj6C,QACtC3C,IAAI,SAAC4F,EAAG2Z,GAAJ,OACHnE,EAAA,cAACG,EAAA,iCAAD,CACE/K,IAAK+O,EACL+lB,gBAAiB1/B,EAAEjD,KACnB4iC,uBACE3/B,EAAEkC,aAAe,4BAEnB9E,QACEoY,EAAA,cAACG,EAAA,WAAD,CACEoE,KAAMloB,EAAK6C,MAAMy6D,WACfnvD,EAAElG,GACF,CAAER,eAAcM,SAAQC,YACxB,CAAEH,aAAYD,iBAJlB,eAcZ8vC,SACE13C,EAAK6C,MAAM60C,SACP13C,EAAK6C,MAAM60C,SACT,CAAEjwC,eAAcM,SAAQC,YACxB,CAAEH,aAAYD,qBAEhB+C,EAEN8sC,WAAYz3C,EAAK6C,MAAM40C,WACrB,CAAEhwC,eAAcM,SAAQC,YACxB,CAAEH,aAAYD,6BArExCy1D,EAAA,CAAsCj+D,aCZzBm+D,GAAb,SAAAj5C,GAAA,SAAAi5C,IAAA,OAAAh7D,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAA69D,GAAAh7D,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAg7D,GAAA74C,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAg7D,EAAAj5C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAg7D,EAAA,EAAAxkD,IAAA,SAAA9Y,MAAA,WAGkB,IAAAD,EAAAN,KACd,OACEikB,EAAA,cAACg2B,EAAA,cAAD,KACG,SAAA7/B,EAAAY,EAAAE,GAAA,IAAG7S,EAAH+R,EAAG/R,OAAYH,EAAf8S,EAAe9S,YAAiBijD,EAAhCjwC,EAAgCiwC,QAAhC,OACClnC,EAAA,cAACmnC,EAAA,uBAAD,KACG,SAAAvqC,GAAyB,IAAtBpZ,EAAsBoZ,EAAtBpZ,gBACI/B,EAAM,eAAAwd,EAAArgB,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAC,EAAA74B,EAEblX,GAFa,IAAAL,EAAAsV,EAAA,OAAA46B,EAAAjtC,EAAAotC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXxwC,EADWuX,EACXvX,KADWuX,EACLpS,YAGFmQ,EAAqBg9C,6BACzB51D,EACAsD,GANWswC,EAAAE,KAAA,EASPv0C,EAAgBqZ,GATT,OAUbjV,EAAQsgD,eAAc,GAEtBhB,EAAQlO,KAAK38C,EAAK6C,MAAM46D,aAAaj9C,IAZxB,wBAAAg7B,EAAAI,SAAAN,MAAH,gBAAAgN,EAAAC,GAAA,OAAA3lC,EAAA8B,MAAAhlB,KAAAilB,YAAA,GA8BZ,OACEhB,EAAA,cAAC0mC,EAAA,SAAD,CACE5F,qBAAsB,mBACtBG,WAnBgC,CAClC15C,KAAM,CACJhI,aAAc,GACdkR,YAAa,OACb+hD,MAAO,EACP7hD,UAAU,EACVH,KAAM,UAGR9D,YAAa,CACXnN,aAAc,GACdkR,YAAa,cACb+hD,MAAO,EACPhiD,KAAM,aAONlR,aAAc,CACZoN,YAAazI,EAAYyI,YACzBnF,KAAMtD,EAAYsD,MAEpB9F,OAAQA,GAEP,SAAA0d,GAAA,IACC4hC,EADD5hC,EACC4hC,OACAmB,EAFD/iC,EAEC+iC,MACAtrB,EAHDzX,EAGCyX,aACAypB,EAJDlhC,EAICkhC,aACAppB,EALD9X,EAKC8X,QACAqrB,EANDnjC,EAMCmjC,WAND,OAQCtiC,EAAA,cAACG,EAAA,wBAAD,CACEiK,OAAQ/tB,EAAK6C,MAAMkrB,OACnBupB,QACE3zB,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACvE,EAAA,EAAD,CAAWmG,MAAO,yBAClB5B,EAAA,cAACG,EAAA,sBAAD,CACEC,UAAW,uBACX04C,aACE,yCAEFliC,aAAcA,GAEbmqB,IAIPjN,WAAYz3C,EAAK6C,MAAM40C,WACrB,CAAE1vC,UACF,CAAEH,gBAEJ8vC,SAAU13C,EAAK6C,MAAM60C,SACnB,CAAE3vC,UACF,CAAEH,gBAEJ4vC,OAAQyO,EACRpO,eAAgBgO,IAAUjrB,EAC1Bgd,cAAeoM,EACfjM,YAAY,cApFlCwlB,EAAA,CAAyCn+D,uBCiDlC,IA2CMw5D,GAAb,SAAAt0C,GAAA,SAAAs0C,IAAA,OAAAr2D,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAk5D,GAAAr2D,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAq2D,GAAAl0C,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAq2D,EAAAt0C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAq2D,EAAA,EAAA7/C,IAAA,SAAA9Y,MAAA,WAGkB,IAAAD,EAAAN,KACd,OACEikB,EAAA,cAACg2B,EAAA,cAAD,KACG,SAAC5/B,EAAQta,EAATqa,GAAgC,IAAd+wC,EAAc/wC,EAAd+wC,QACT9iD,EAAqBgS,EAArBhS,OAAQC,EAAa+R,EAAb/R,SADe01D,EAEiBj+D,EAAxCmI,mBAFuB,IAAA81D,EAETt8C,gCAFSs8C,EAGzBh9C,EAAmBC,SAAS3Y,EAAU,KAAO,EAoB7C21D,EAAmB9B,mBAASj0D,EAAaG,GAC/C,OACE4b,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACvE,EAAA,EAAD,CAAWmG,MAAO,wBAClB5B,EAAA,cAACG,EAAA,wBAAD,CACEiK,OAAQ/tB,EAAK6C,MAAMkrB,OACnBC,QAAShuB,EAAK6C,MAAMmrB,QAAQ,CAC1BgwB,YAAat9B,EACbpR,MAAOquD,IAETrmB,QACE3zB,EAAA,cAACmnC,EAAA,gBAAD,KACG,SAAApwC,GAAA,IACOkjD,EADPljD,EACC1X,KACS66D,EAFVnjD,EAECvX,QACO26D,EAHRpjD,EAGCjZ,MAHD,OAKCkiB,EAAA,cAACmnC,EAAA,eAAD,KACG,SAAAlwC,GAAA,IACOmjD,EADPnjD,EACC5X,KACSg7D,EAFVpjD,EAECzX,QACO86D,EAHRrjD,EAGCnZ,MAHD,OAKCkiB,EAAA,cAACmnC,EAAA,UAAD,KACG,SAAAvqC,GAAA,IAAUjR,EAAViR,EAAGzW,MAAH,OACC6Z,EAAA,cAACG,EAAA,kCAAD,CACEC,UAAW,sBACX04C,aACE,8HAGF94C,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAOq8D,GAAoBG,EAC3B76D,SACGy6D,IAAuBG,EAE1BpkB,eAAgBj2B,EAAA,cAACG,EAAA,yBAAD,MAChB+1B,cAAel2B,EAAA,cAACvE,EAAA,EAAD,OAEd,kBACCuE,EAAA,cAAAA,EAAA,cACIu6C,iCACAt2D,EACAG,EAtKjC,SACLsF,EACAmN,EACAlL,GAEA,MAAO,GAAAnK,OAAA5C,OAAA+9C,GAAA,EAAA/9C,CACF8K,EAAY9E,IAAI,SAAA+E,GAAC,OAAA/K,OAAAwnD,EAAA,EAAAxnD,CAAA,GACf+K,EADe,CAElB+C,YAAa/C,EAAE+C,aAAe,GAC9B/B,KAAMD,4BAAkBmwC,kDAAwBlxC,GAChD2G,gBAAYtJ,OALTpI,OAAA+9C,GAAA,EAAA/9C,CAOFiY,EAAWwqC,OACZ,SAACmZ,EAAoBnvD,GA2BnB,OA1BAA,EAAUzD,QAAQsH,QAAQ,SAAA1E,GACxB,IAAI8F,EAAa,GAEf9F,EAAE0K,YACFpQ,MAAM21D,QAAQjwD,EAAE0K,WAAWC,2BAE3B7E,EAAa9F,EAAE0K,WAAWC,wBAAwBksC,OAChD,SAACta,EAAKC,GACJ,OAAOpoC,OAAAwnD,EAAA,EAAAxnD,CAAA,GAAKmoC,EAAQC,EAAQ12B,aAE9B,KAGiB,SAAjB9F,EAAEkwD,YACJF,EAAmBxhB,KAAK,CACtB70C,OAAQqG,EACRxG,0BAAsBgD,EACtB0F,YAAalC,EAAEkC,aAAe,GAC9BrB,YACAV,KAAI,GAAAnJ,OAAKq5C,mDAALr5C,OAA8B4J,2BAAiBC,IACnD9D,KAAMiD,EAAEjD,KACR+I,aACA/E,SAAU,gBAITivD,GAET,KArCG57D,OAAA+9C,GAAA,EAAA/9C,CAuCF+M,EAAM/G,IAAI,SAAA5I,GAAC,OAAA4C,OAAAwnD,EAAA,EAAAxnD,CAAA,GACT5C,EADS,CAEZ2O,KAAI,GAAAnJ,OAAKq5C,mDAALr5C,OAA8B8J,0BAAgBtP,EAAEuP,iBAEtDg2C,KAAK,SAAC/2C,EAAGg3C,GAAJ,OAAUh3C,EAAEjD,KAAKq+C,cAAcpE,EAAEj6C,QAuHFozD,CACuB,IAArB59C,EACIk9C,EAAgB9vD,0BAChB8vD,EAAgB7vD,wBACpBgwD,EAAej0D,MACfwF,GAEFoR,GACcnY,IACd,SAACF,EAAMyf,GAAP,OACEnE,EAAA,cAACG,EAAA,qCAAD,CACE/K,IAAK+O,EACL+lB,gBAAiBxlC,EAAK6C,KACtB4iC,uBACEzlC,EAAKgI,aACL,4BAEF/B,KACEqV,EAAA,qBACEsE,IAAK5f,EAAKiG,KACViP,MAAO,GACPC,OAAQ,KAGZjS,QACEoY,EAAA,cAACG,EAAA,WAAD,CACEiL,QAAS,kBAzF3B,SAACwvC,GACnB,IAtDgBC,EAuDhB,OAtDmD,kBADnCA,EAsDaD,GArDMjuD,YACpC,gBAEJkuD,EAA0BtvD,SAGxB,aAiDK,IAAK,eACH27C,EAAQlO,KAAK38C,EAAK6C,MAAM47D,gBAAgB1kD,EAAQta,IAChD,MACF,IAAK,WACHorD,EAAQlO,KACN38C,EAAK6C,MAAM67D,eACTH,EADFh8D,OAAAwnD,EAAA,EAAAxnD,CAAA,GAGOwX,GAELta,KA6E8Bk/D,CAAYt2D,KAFhB,cAWRsb,EAAA,cAACG,EAAA,qCAAD,CACE+pB,gBAAiB,GACjBC,uBAAwB,GACxBx/B,KAAM,GACN/C,QACEoY,EAAA,cAACG,EAAA,WAAD,CAAYoE,KAAM,KAAlB,iCAgB1BwvB,SACE13C,EAAK6C,MAAM60C,SACP13C,EAAK6C,MAAM60C,SAAS39B,EAAQta,QAC5BkL,EAEN8sC,WAAYz3C,EAAK6C,MAAM40C,WAAW19B,EAAQta,YAvI1Dm5D,EAAA,CAA0Cx5D,aC5GpCw/D,GACJj7C,EAAA,cAACk7C,GAAD,CACEpnB,WAAYqD,KAAUvgC,KACtBuhD,mBAAoB,SAAC9zD,EAAUi3C,EAAGt/C,GAAd,OAClBm7C,KAAU7gC,OAAO6H,UAAUG,QAAQd,WAAnC5e,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEyF,SAAQ,GAAA7C,OAAK6C,IACVi3C,EACAt/C,KAGPq8D,iCAAkC,SAACD,EAAS1zD,EAAM42C,EAAGt/C,GAAnB,OAChCm7C,KAAU7gC,OAAO6H,UAAUO,SAASxa,WAAW2Z,gBAA/Cjf,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEmF,SAAUW,EAAKP,OAAQG,GACvBJ,WAAYQ,EAAKR,WACjBG,SAAQ,GAAA7C,OAAK42D,IACV9c,EACAt/C,KAGPouB,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA+Bz2D,KAAM,IAC7CsvC,SAAU,SAACsH,EAAGt/C,GAAJ,OACRm7C,KAAU7gC,OAAO6H,UAAUU,eAA3BjgB,OAAAwnD,EAAA,EAAAxnD,CAAA,GACK08C,EACAt/C,OAMLo/D,GACJp7C,EAAA,cAACq7C,GAAD,CACEtnB,SAAU,SAACuH,EAAGt/C,GAAJ,OAAUm7C,KAAU7gC,OAAO6H,UAAUC,MAA3Bxf,OAAAwnD,EAAA,EAAAxnD,CAAA,GAAsC08C,EAAMt/C,KAChE83C,WAAYqD,KAAUvgC,KACtBwT,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA+Bz2D,KAAM,IAC7Co1D,aAAc3iB,KAAUvgC,OAItB0kD,GACJt7C,EAAA,cAACu7C,GAAD,CACEznB,WAAYqD,KAAUvgC,KACtBwT,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA+Bz2D,KAAM,IAC7Co2D,gBAAiB,SAACxf,EAAGt/C,GAAJ,MAAW,CAAEkwB,SAAU,SACxC6uC,eAAgB,SAAC72D,EAAYkS,EAAQta,GAArB,OACdq7C,KAAU7gC,OAAO/M,MAAMrF,WAAWyZ,aAAlC/e,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEsF,cACGkS,EACAta,KAGPuuB,QAAS,kBACPrK,EAAA,cAACG,EAAA,wBAAD,KACG,SAAAhK,GAAA,IAAG42B,EAAH52B,EAAG42B,SAAH,OACC/sB,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,2BAAD,CACExV,KAAMqV,EAAA,mBAAG0E,UAAW,eACpBtE,UAAW,WACXkrB,YAAa,QACb3mB,QAAQ,EACRC,YAAamoB,EACbrgC,YAAa,wBAEfsT,EAAA,cAACG,EAAA,gCAAD,CACExV,KAAMqV,EAAA,mBAAG0E,UAAW,eACpBtE,UAAW,YACXkrB,YAAa,SACb3mB,QAAQ,EACRC,YAAamoB,EACbxlC,KAAM,MACNpD,OAAQ,MACR0nC,SAAU,cASlB2vB,GACJx7C,EAAA,cAACy7C,GAAD,CACE1nB,SAAUoD,KAAU7gC,OAAO/M,MAAMiU,WACjCs2B,WAAYqD,KAAUvgC,KACtBwT,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA+Bz2D,KAAM,IAC7C2lB,QAAS,SAAAtT,GAAA,IAAG7S,EAAH6S,EAAG7S,WAAH,OACP8b,EAAA,cAACG,EAAA,wBAAD,KACG,SAAAlJ,GAAA,IAAG81B,EAAH91B,EAAG81B,SAAH,OACC/sB,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,2BAAD,CACExV,KACEqV,EAAA,qBACEsE,IAAK5Z,4BAAkBmwC,kDAAwB32C,GAC/C0V,MAAO,GACPC,OAAQ,KAGZuG,UAAS,MAAA5e,OAAQ0C,EAAW4F,UAAWvC,MACvC+jC,YAAW,MAAA9pC,OAAQ0C,EAAWqD,MAC9Bod,QAAQ,EACRC,YAAamoB,EACbrgC,YAAa,qBAEfsT,EAAA,cAACG,EAAA,gCAAD,CACExV,KAAMqV,EAAA,mBAAG0E,UAAW,eACpBtE,UAAW,YACXkrB,YAAa,SACb3mB,QAAQ,EACRC,YAAamoB,EACbxlC,KAAM,MACNpD,OAAQ,MACR0nC,SAAU,YAMpB8tB,WAAY,SAAC51D,EAAUu3C,EAAGt/C,GAAd,OACVm7C,KAAU7gC,OAAO/M,MAAMrF,WAAW2Z,gBAAlCjf,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEmF,YACGu3C,EACAt/C,OAML0/D,GACJ17C,EAAA,cAAC27C,GAAD,CACE5nB,SAAU,SAACuH,EAAGt/C,GAAJ,OACRm7C,KAAU7gC,OAAO/M,MAAMrF,WAAWyZ,aAAlC/e,OAAAwnD,EAAA,EAAAxnD,CAAA,GAAoD08C,EAAMt/C,KAE5D83C,WAAYqD,KAAUvgC,KACtBwT,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA+Bz2D,KAAM,EAAGm1C,QAAS,IACzD/6C,KAAM,SACNy6D,aAAc,SAACje,EAAGt/C,GAAJ,OACZm7C,KAAU7gC,OAAO/M,MAAMrF,WAAW2Z,gBAAlCjf,OAAAwnD,EAAA,EAAAxnD,CAAA,GACK08C,EACAt/C,KAGPquB,QAAS,SAAAzN,GAAA,IAAG1Y,EAAH0Y,EAAG1Y,WAAH,OACP8b,EAAA,cAACG,EAAA,wBAAD,KACG,SAAArB,GAAA,IAAGiuB,EAAHjuB,EAAGiuB,SAAH,OACC/sB,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,2BAAD,CACExV,KACEqV,EAAA,qBACEsE,IAAK5Z,4BAAkBmwC,kDAAwB32C,GAC/C0V,MAAO,GACPC,OAAQ,KAGZuG,UAAS,MAAA5e,OAAQ0C,EAAW4F,UAAWvC,MACvC+jC,YAAW,MAAA9pC,OAAQ0C,EAAWqD,MAC9Bod,QAAQ,EACRC,YAAamoB,EACbrgC,YAAa,yBAEfsT,EAAA,cAACG,EAAA,gCAAD,CACExV,KAAMqV,EAAA,mBAAG0E,UAAW,eACpBtE,UAAW,YACXkrB,YAAa,SACb3mB,QAAQ,EACRC,YAAamoB,EACbxlC,KAAM,MACNpD,OAAQ,MACR0nC,SAAU,YAMpB2tB,kBAAmB,SAACv1D,EAAamS,EAAQta,GACvC,OAAOq7C,KAAU7gC,OAAOyH,OAAOP,WAAxB5e,OAAAwnD,EAAA,EAAAxnD,CAAA,CACLqF,eACGmS,EAFE,CAGL/R,SAAU,UAMZu3D,GACJ57C,EAAA,cAACu7C,GAAD,CACEznB,WAAYqD,KAAUvgC,KACtBwT,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA+Bz2D,KAAM,IAC7Co2D,gBAAiB,SAACxf,EAAGt/C,GAAJ,MAAW,CAAEkwB,SAAU,SACxC6uC,eAAgB,SAAC72D,EAAYkS,EAAQta,GAArB,OACdq7C,KAAU7gC,OAAOyH,OAAO7Z,WAAWyZ,aAAnC/e,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEsF,cACGkS,EACAta,KAGPuuB,QAAS,SAAApL,GAAA,IAAGtT,EAAHsT,EAAGtT,MAAH,OACPqU,EAAA,cAACG,EAAA,wBAAD,KACG,SAAAhB,GAAkB,IAAf4tB,EAAe5tB,EAAf4tB,SACIuK,EAAc3rC,EAAM,GAC1B,OACEqU,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,gCAAD,CACExV,KACEqV,EAAA,qBACEsE,IAAK5Z,4BACHmwC,kDACAvD,EAAYpzC,YAEd0V,MAAO,GACPC,OAAQ,KAGZuG,UAAS,MAAA5e,OAAQ81C,EAAYpzC,WAAYqD,MACzC+jC,YAAW,MAAA9pC,OAAQ81C,EAAYpzC,WAAYqD,MAC3Cod,QAAQ,EACRC,YAAamoB,EACbxlC,KAAM+vC,EAAYpzC,WAAY4F,UAAWvC,KACzCpD,OAAQmzC,EAAYpzC,WAAYqD,KAChCskC,SAAU,SAEZ7rB,EAAA,cAACG,EAAA,2BAAD,CACExV,KAAMqV,EAAA,mBAAG0E,UAAW,eACpBtE,UAAW,YACXkrB,YAAa,SACb3mB,QAAQ,EACRC,YAAamoB,EACbrgC,YAAa,8BAUvBmvD,GACJ77C,EAAA,cAACy7C,GAAD,CACE1nB,SAAU,SAACuH,EAAGt/C,GAAJ,OAAUm7C,KAAU7gC,OAAOyH,OAAOP,WAAxB5e,OAAAwnD,EAAA,EAAAxnD,CAAA,GAAwC08C,EAAMt/C,KAClE83C,WAAYqD,KAAUvgC,KACtBwT,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA+Bz2D,KAAM,IAC7C2lB,QAAS,SAAAvK,GAAA,IAAG5b,EAAH4b,EAAG5b,WAAYyH,EAAfmU,EAAenU,MAAf,OACPqU,EAAA,cAACG,EAAA,wBAAD,KACG,SAAAonC,GAAkB,IAAfxa,EAAewa,EAAfxa,SACIuK,EAAc3rC,EAAM,GAC1B,OACEqU,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,gCAAD,CACExV,KACEqV,EAAA,qBACEsE,IAAK5Z,4BACHmwC,kDACAvD,EAAYpzC,YAEd0V,MAAO,GACPC,OAAQ,KAGZuG,UAAS,MAAA5e,OAAQ81C,EAAYpzC,WAAYqD,MACzC+jC,YAAW,MAAA9pC,OAAQ81C,EAAYpzC,WAAYqD,MAC3Cod,QAAQ,EACRC,YAAamoB,EACbxlC,KAAM+vC,EAAYpzC,WAAY4F,UAAWvC,KACzCpD,OAAQmzC,EAAYpzC,WAAYqD,KAChCskC,SAAU,SAEZ7rB,EAAA,cAACG,EAAA,2BAAD,CACExV,KACEqV,EAAA,qBACEsE,IAAK5Z,4BAAkBmwC,kDAAwB32C,GAC/C0V,MAAO,GACPC,OAAQ,KAGZuG,UAAS,MAAA5e,OAAQ0C,EAAW4F,UAAWvC,MACvC+jC,YAAW,MAAA9pC,OAAQ0C,EAAWqD,MAC9Bod,QAAQ,EACRC,YAAamoB,EACbrgC,YAAa,yBAOzBitD,WAAY,SAAC51D,EAAUu3C,EAAGt/C,GAAd,OACVm7C,KAAU7gC,OAAOyH,OAAO7Z,WAAW2Z,gBAAnCjf,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEmF,YACGu3C,EACAt/C,OAML8/D,GACJ97C,EAAA,cAAC27C,GAAD,CACE5nB,SAAU,SAACuH,EAAGt/C,GAAJ,OACRm7C,KAAU7gC,OAAOyH,OAAO7Z,WAAWyZ,aAAnC/e,OAAAwnD,EAAA,EAAAxnD,CAAA,GAAqD08C,EAAMt/C,KAE7D83C,WAAYqD,KAAUvgC,KACtBwT,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA+Bz2D,KAAM,EAAGm1C,QAAS,IACzD/6C,KAAM,SACNy6D,aAAc,SAACje,EAAGt/C,GAAJ,OACZm7C,KAAU7gC,OAAOyH,OAAO7Z,WAAW2Z,gBAAnCjf,OAAAwnD,EAAA,EAAAxnD,CAAA,GACK08C,EACAt/C,KAGPquB,QAAS,SAAAq9B,GAAA,IAAGxjD,EAAHwjD,EAAGxjD,WAAYyH,EAAf+7C,EAAe/7C,MAAf,OACPqU,EAAA,cAACG,EAAA,wBAAD,KACG,SAAA4nC,GAAkB,IAAfhb,EAAegb,EAAfhb,SACIuK,EAAc3rC,EAAM,GAC1B,OACEqU,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,gCAAD,CACExV,KACEqV,EAAA,qBACEsE,IAAK5Z,4BACHmwC,kDACAvD,EAAYpzC,YAEd0V,MAAO,GACPC,OAAQ,KAGZuG,UAAS,MAAA5e,OAAQ81C,EAAYpzC,WAAYqD,MACzC+jC,YAAW,MAAA9pC,OAAQ81C,EAAYpzC,WAAYqD,MAC3Cod,QAAQ,EACRC,YAAamoB,EACbxlC,KAAM+vC,EAAYpzC,WAAY4F,UAAWvC,KACzCpD,OAAQmzC,EAAYpzC,WAAYqD,KAChCskC,SAAU,SAEZ7rB,EAAA,cAACG,EAAA,2BAAD,CACExV,KACEqV,EAAA,qBACEsE,IAAK5Z,4BAAkBmwC,kDAAwB32C,GAC/C0V,MAAO,GACPC,OAAQ,KAGZuG,UAAS,MAAA5e,OAAQ0C,EAAW4F,UAAWvC,MACvC+jC,YAAW,MAAA9pC,OAAQ0C,EAAWqD,MAC9Bod,QAAQ,EACRC,YAAamoB,EACbrgC,YAAa,6BAOzB8sD,kBAAmB,SAACv1D,EAAamS,GAAd,OACjB+gC,KAAU7gC,OAAO6H,UAAUC,MAA3Bxf,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEqF,eACGmS,OAML2lD,GACJ/7C,EAAA,cAACu7C,GAAD,CACEznB,WAAY,SAACwH,EAAGt/C,GAAJ,OAAUm7C,KAAU7gC,OAAO6H,UAAUC,MAA3Bxf,OAAAwnD,EAAA,EAAAxnD,CAAA,GAAsC08C,EAAMt/C,KAClEouB,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA+Bz2D,KAAM,IAC7Co2D,gBAAiB,SAACxf,EAAGt/C,GAAJ,MAAW,CAAEkwB,SAAU,SACxC6uC,eAAgB,SAAC72D,EAAYo3C,EAAGt/C,GAAhB,OACdm7C,KAAU7gC,OAAO6H,UAAUG,QAAQpa,WAAWyZ,aAA9C/e,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEsF,cACGo3C,EACAt/C,KAGPquB,QAAS,SAAAg+B,GAAA,IAAG18C,EAAH08C,EAAG18C,MAAO0uC,EAAVgO,EAAUhO,YAAV,OACPr6B,EAAA,cAACm7C,GAAA,EAAD,CACExvD,MAAOA,EACP4uC,WAAYF,EACZK,aAAY,GAAAl5C,OAAK64C,EAAc,EAAnB,WACZM,eAAgB,QAChBC,mBAAoB,2BAMtBohB,GACJh8C,EAAA,cAACy7C,GAAD,CACE3nB,WAAY,SAACwH,EAAGt/C,GAAJ,OAAUm7C,KAAU7gC,OAAO6H,UAAUC,MAA3Bxf,OAAAwnD,EAAA,EAAAxnD,CAAA,GAAsC08C,EAAMt/C,KAClEouB,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA+Bz2D,KAAM,IAC7C2lB,QAAS,SAAAu+B,GAAA,IAAG1kD,EAAH0kD,EAAG1kD,WAAYyH,EAAfi9C,EAAej9C,MAAO0uC,EAAtBuO,EAAsBvO,YAAtB,OACPr6B,EAAA,cAACm7C,GAAA,EAAD,CACExvD,MAAOA,EACP4uC,WAAYF,EACZI,QACEz6B,EAAA,qBACEsE,IAAK5Z,4BAAkBmwC,kDAAwB32C,GAC/C2V,OAAQ,GACRD,MAAO,KAGX8gC,aAAY,GAAAl5C,OAAK64C,EAAc,EAAnB,MAAA74C,OAAyB0C,EAAW4F,UAAWvC,MAC3DozC,eAAc,GAAAn5C,OAAK64C,EAAc,EAAnB,MAAA74C,OAAyB0C,EAAWqD,MAClDqzC,mBAAoB,sBAGxB+e,WAAY,SAAC51D,EAAUu3C,EAAGt/C,GAAd,OACVm7C,KAAU7gC,OAAO6H,UAAUG,QAAQpa,WAAW2Z,gBAA9Cjf,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEmF,YACGu3C,EACAt/C,OAMLigE,GACJj8C,EAAA,cAAC27C,GAAD,CACE5nB,SAAU,SAACuH,EAAGt/C,GAAJ,OACRm7C,KAAU7gC,OAAO6H,UAAUG,QAAQpa,WAAWyZ,aAA9C/e,OAAAwnD,EAAA,EAAAxnD,CAAA,GAAgE08C,EAAMt/C,KAExE83C,WAAY,SAACwH,EAAGt/C,GAAJ,OAAUm7C,KAAU7gC,OAAO6H,UAAUC,MAA3Bxf,OAAAwnD,EAAA,EAAAxnD,CAAA,GAAsC08C,EAAMt/C,KAClEouB,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA+Bz2D,KAAM,IAC7C5F,KAAM,SACNy6D,aAAc,SAACje,EAAGt/C,GAAJ,OACZm7C,KAAU7gC,OAAO6H,UAAUG,QAAQpa,WAAW2Z,gBAA9Cjf,OAAAwnD,EAAA,EAAAxnD,CAAA,GACK08C,EACAt/C,KAGPquB,QAAS,SAAA6xC,GAAA,IAAGh4D,EAAHg4D,EAAGh4D,WAAYyH,EAAfuwD,EAAevwD,MAAO0uC,EAAtB6hB,EAAsB7hB,YAAtB,OACPr6B,EAAA,cAACm7C,GAAA,EAAD,CACExvD,MAAOA,EACP4uC,WAAYF,EACZI,QACEz6B,EAAA,qBACEsE,IAAK5Z,4BAAkBmwC,kDAAwB32C,GAC/C2V,OAAQ,GACRD,MAAO,KAGX8gC,aAAY,GAAAl5C,OAAK64C,EAAc,EAAnB,MAAA74C,OAAyB0C,EAAW4F,UAAWvC,MAC3DozC,eAAc,GAAAn5C,OAAK64C,EAAc,EAAnB,MAAA74C,OAAyB0C,EAAWqD,MAClDqzC,mBAAoB,0BAGxB4e,kBAAmB,SAACv1D,EAAamS,GAAd,OACjB+gC,KAAU7gC,OAAO6H,UAAUC,MAA3Bxf,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEqF,eACGmS,OAML+lD,GACJn8C,EAAA,cAACy7C,GAAD,CACE3nB,WAAY,SAACwH,EAAGt/C,GAAJ,OAAUm7C,KAAU7gC,OAAO6H,UAAUC,MAA3Bxf,OAAAwnD,EAAA,EAAAxnD,CAAA,GAAsC08C,EAAMt/C,KAClEouB,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA+Bz2D,KAAM,IAC7C2lB,QAAS,SAAA+xC,GAAA,IAAGzwD,EAAHywD,EAAGzwD,MAAO0uC,EAAV+hB,EAAU/hB,YAAV,OACPr6B,EAAA,cAACm7C,GAAA,EAAD,CAA0BxvD,MAAOA,EAAO0uC,YAAaA,KAEvDsf,WAAY,SAAC51D,EAAUu3C,EAAGt/C,GAAd,OACVm7C,KAAU7gC,OAAO6H,UAAUO,SAASxa,WAAW2Z,gBAA/Cjf,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEmF,YACGu3C,EACAt/C,OAMLqgE,GACJr8C,EAAA,cAAC27C,GAAD,CACE5nB,SAAU,SAACuH,EAAGt/C,GAAJ,OACRm7C,KAAU7gC,OAAO6H,UAAUO,SAASxa,WAAWyZ,aAA/C/e,OAAAwnD,EAAA,EAAAxnD,CAAA,GACK08C,EACAt/C,KAGP83C,WAAY,SAACwH,EAAGt/C,GAAJ,OAAUm7C,KAAU7gC,OAAO6H,UAAUC,MAA3Bxf,OAAAwnD,EAAA,EAAAxnD,CAAA,GAAsC08C,EAAMt/C,KAClEouB,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA+Bz2D,KAAM,IAC7C5F,KAAM,UACNy6D,aAAc,SAACje,EAAGt/C,GAAJ,OACZm7C,KAAU7gC,OAAO6H,UAAUO,SAASxa,WAAW2Z,gBAA/Cjf,OAAAwnD,EAAA,EAAAxnD,CAAA,GACK08C,EACAt/C,KAGPquB,QAAS,SAAAiyC,GAAA,IAAG3wD,EAAH2wD,EAAG3wD,MAAO0uC,EAAViiB,EAAUjiB,YAAV,OACPr6B,EAAA,cAACm7C,GAAA,EAAD,CAA0BxvD,MAAOA,EAAO0uC,YAAaA,KAEvDmf,kBAAmB,SAACv1D,EAAamS,GAAd,OACjB+gC,KAAU7gC,OAAO6H,UAAUC,MAA3Bxf,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEqF,eACGmS,OA0BEmmD,GAAiD,WAC5D,OACEv8C,EAAA,cAACvE,EAAA,EAAD,KACEuE,EAAA,cAACG,EAAA,WAAD,KACEH,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,KAAUvgC,QAApB,gBACAoJ,EAAA,8CAEFA,EAAA,cAACwT,EAAA,EAAD,KAEExT,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOI,OAAO/M,MAAMiU,WAC1BmO,OAAO,EACPzrB,SAAUo7D,KAGZt7C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOI,OAAO/M,MAAMrF,WAAWyZ,aACrCgO,OAAO,EACPzrB,SAAUs7D,KAGZx7C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOI,OAAO/M,MAAMrF,WAAW2Z,gBACrC8N,OAAO,EACPzrB,SAAUw7D,KAGZ17C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOI,OAAOyH,OAAOP,WAC3BmO,OAAO,EACPzrB,SAAU07D,KAGZ57C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOI,OAAOyH,OAAO7Z,WAAWyZ,aACtCgO,OAAO,EACPzrB,SAAU27D,KAGZ77C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOI,OAAOyH,OAAO7Z,WAAW2Z,gBACtC8N,OAAO,EACPzrB,SAAU47D,KAGZ97C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOI,OAAO6H,UAAUC,MAC9BuN,OAAO,EACPzrB,SAAU+6D,KAGZj7C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOI,OAAO6H,UAAUG,QAAQd,WACtCmO,OAAO,EACPzrB,SAAU67D,KAGZ/7C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOI,OAAO6H,UAAUG,QAAQpa,WAAWyZ,aACjDgO,OAAO,EACPzrB,SAAU87D,KAGZh8C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOI,OAAO6H,UAAUG,QAAQpa,WAAW2Z,gBACjD8N,OAAO,EACPzrB,SAAU+7D,KAGZj8C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOI,OAAO6H,UAAUO,SAASxa,WAAWyZ,aAClDgO,OAAO,EACPzrB,SAAUi8D,KAGZn8C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOI,OAAO6H,UAAUO,SAASxa,WAAW2Z,gBAClD8N,OAAO,EACPzrB,SAAUm8D,KAGZr8C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOI,OAAO6H,UAAUU,eAC9B8M,OAAO,EACPzrB,SAAUk7D,QC/lBdH,GACJj7C,EAAA,cAACk7C,GAAD,CACEpnB,WAAYqD,KAAUvgC,KACtBuhD,mBAAoB,SAAC9zD,EAAUi3C,EAAGt/C,GAAd,OAClBm7C,KAAUlzC,YAAYob,KAAKf,QAAQd,WAAnC5e,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEyF,SAAQ,GAAA7C,OAAK6C,IACVi3C,EACAt/C,KAGPq8D,iCAAkC,SAACD,EAAS1zD,EAAM42C,EAAGt/C,GAAnB,OAChCm7C,KAAUlzC,YAAYob,KAAKX,SAASxa,WAAW2Z,gBAA/Cjf,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEmF,SAAUW,EAAKP,OAAQG,GACvBJ,WAAYQ,EAAKR,WACjBG,SAAQ,GAAA7C,OAAK42D,IACV9c,EACAt/C,KAGPouB,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA8Bz2D,KAAM,IAC5CsvC,SAAU,SAACsH,EAAGt/C,GAAJ,OACRm7C,KAAUlzC,YAAYob,KAAKR,eAA3BjgB,OAAAwnD,EAAA,EAAAxnD,CAAA,GACK08C,EACAt/C,OAMLwgE,GACJx8C,EAAA,cAACu7C,GAAD,CACEznB,WAAY,SAACwH,EAAGt/C,GAAJ,OAAUm7C,KAAUlzC,YAAYob,KAAKjB,MAA3Bxf,OAAAwnD,EAAA,EAAAxnD,CAAA,GAAsC08C,EAAMt/C,KAClEouB,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA8Bz2D,KAAM,IAC5Co2D,gBAAiB,SAACxf,EAAGt/C,GAAJ,MAAW,CAAEkwB,SAAU,SACxC6uC,eAAgB,SAAC72D,EAAYo3C,EAAGt/C,GAAhB,OACdm7C,KAAUlzC,YAAYob,KAAKf,QAAQpa,WAAWyZ,aAA9C/e,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEsF,cACGo3C,EACAt/C,KAGPquB,QAAS,SAAAlU,GAAA,IAAGxK,EAAHwK,EAAGxK,MAAO0uC,EAAVlkC,EAAUkkC,YAAV,OACPr6B,EAAA,cAACm7C,GAAA,EAAD,CACExvD,MAAOA,EACP4uC,WAAYF,EACZK,aAAY,GAAAl5C,OAAK64C,EAAc,EAAnB,WACZM,eAAgB,QAChBC,mBAAoB,2BAMtBwgB,GACJp7C,EAAA,cAACq7C,GAAD,CACEtnB,SAAU,SAACuH,EAAGt/C,GAAJ,OAAUm7C,KAAUlzC,YAAYob,KAAKjB,MAA3Bxf,OAAAwnD,EAAA,EAAAxnD,CAAA,GAAsC08C,EAAMt/C,KAChE83C,WAAYqD,KAAUvgC,KACtBwT,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA8Bz2D,KAAM,IAC5Co1D,aAAc3iB,KAAUvgC,OAItBolD,GACJh8C,EAAA,cAACy7C,GAAD,CACE3nB,WAAY,SAACwH,EAAGt/C,GAAJ,OAAUm7C,KAAUlzC,YAAYob,KAAKjB,MAA3Bxf,OAAAwnD,EAAA,EAAAxnD,CAAA,GAAsC08C,EAAMt/C,KAClEouB,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA8Bz2D,KAAM,IAC5C2lB,QAAS,SAAAtT,GAAA,IAAG7S,EAAH6S,EAAG7S,WAAYyH,EAAfoL,EAAepL,MAAO0uC,EAAtBtjC,EAAsBsjC,YAAtB,OACPr6B,EAAA,cAACm7C,GAAA,EAAD,CACExvD,MAAOA,EACP4uC,WAAYF,EACZI,QACEz6B,EAAA,qBACEsE,IAAK5Z,4BAAkBmwC,kDAAwB32C,GAC/C2V,OAAQ,GACRD,MAAO,KAGX8gC,aAAY,GAAAl5C,OAAK64C,EAAc,EAAnB,MAAA74C,OAAyB0C,EAAW4F,UAAWvC,MAC3DozC,eAAc,GAAAn5C,OAAK64C,EAAc,EAAnB,MAAA74C,OAAyB0C,EAAWqD,MAClDqzC,mBAAoB,sBAGxB+e,WAAY,SAAC51D,EAAUu3C,EAAGt/C,GAAd,OACVm7C,KAAUlzC,YAAYob,KAAKf,QAAQpa,WAAW2Z,gBAA9Cjf,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEmF,YACGu3C,EACAt/C,OAMLigE,GACJj8C,EAAA,cAAC27C,GAAD,CACE5nB,SAAU,SAACuH,EAAGt/C,GAAJ,OACRm7C,KAAUlzC,YAAYob,KAAKf,QAAQpa,WAAWyZ,aAA9C/e,OAAAwnD,EAAA,EAAAxnD,CAAA,GAAgE08C,EAAMt/C,KAExE83C,WAAY,SAACwH,EAAGt/C,GAAJ,OAAUm7C,KAAUlzC,YAAYob,KAAKjB,MAA3Bxf,OAAAwnD,EAAA,EAAAxnD,CAAA,GAAsC08C,EAAMt/C,KAClEouB,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA8Bz2D,KAAM,IAC5C5F,KAAM,SACNy6D,aAAc,SAACje,EAAGt/C,GAAJ,OACZm7C,KAAUlzC,YAAYob,KAAKf,QAAQpa,WAAW2Z,gBAA9Cjf,OAAAwnD,EAAA,EAAAxnD,CAAA,GACK08C,EACAt/C,KAGPquB,QAAS,SAAApT,GAAA,IAAG/S,EAAH+S,EAAG/S,WAAYyH,EAAfsL,EAAetL,MAAO0uC,EAAtBpjC,EAAsBojC,YAAtB,OACPr6B,EAAA,cAACm7C,GAAA,EAAD,CACExvD,MAAOA,EACP4uC,WAAYF,EACZI,QACEz6B,EAAA,qBACEsE,IAAK5Z,4BAAkBmwC,kDAAwB32C,GAC/C2V,OAAQ,GACRD,MAAO,KAGX8gC,aAAY,GAAAl5C,OAAK64C,EAAc,EAAnB,MAAA74C,OAAyB0C,EAAW4F,UAAWvC,MAC3DozC,eAAc,GAAAn5C,OAAK64C,EAAc,EAAnB,MAAA74C,OAAyB0C,EAAWqD,MAClDqzC,mBAAoB,0BAGxB4e,kBAAmB,SAACv1D,EAAamS,GAAd,OACjB+gC,KAAUlzC,YAAYob,KAAKjB,MAA3Bxf,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEqF,eACGmS,OAML+lD,GACJn8C,EAAA,cAACy7C,GAAD,CACE3nB,WAAY,SAACwH,EAAGt/C,GAAJ,OAAUm7C,KAAUlzC,YAAYob,KAAKjB,MAA3Bxf,OAAAwnD,EAAA,EAAAxnD,CAAA,GAAsC08C,EAAMt/C,KAClEouB,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA8Bz2D,KAAM,IAC5C2lB,QAAS,SAAAzN,GAAA,IAAGjR,EAAHiR,EAAGjR,MAAO0uC,EAAVz9B,EAAUy9B,YAAV,OACPr6B,EAAA,cAACm7C,GAAA,EAAD,CAA0BxvD,MAAOA,EAAO0uC,YAAaA,KAEvDsf,WAAY,SAAC51D,EAAUu3C,EAAGt/C,GAAd,OACVm7C,KAAUlzC,YAAYob,KAAKX,SAASxa,WAAW2Z,gBAA/Cjf,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEmF,YACGu3C,EACAt/C,OAMLqgE,GACJr8C,EAAA,cAAC27C,GAAD,CACE5nB,SAAU,SAACuH,EAAGt/C,GAAJ,OACRm7C,KAAUlzC,YAAYob,KAAKX,SAASxa,WAAWyZ,aAA/C/e,OAAAwnD,EAAA,EAAAxnD,CAAA,GACK08C,EACAt/C,KAGP83C,WAAY,SAACwH,EAAGt/C,GAAJ,OAAUm7C,KAAUlzC,YAAYob,KAAKjB,MAA3Bxf,OAAAwnD,EAAA,EAAAxnD,CAAA,GAAsC08C,EAAMt/C,KAClEouB,OAAQpK,EAAA,cAACm7C,GAAA,EAAD,CAA8Bz2D,KAAM,IAC5C5F,KAAM,UACNy6D,aAAc,SAACje,EAAGt/C,GAAJ,OACZm7C,KAAUlzC,YAAYob,KAAKX,SAASxa,WAAW2Z,gBAA/Cjf,OAAAwnD,EAAA,EAAAxnD,CAAA,GACK08C,EACAt/C,KAGPquB,QAAS,SAAAvL,GAAA,IAAGnT,EAAHmT,EAAGnT,MAAO0uC,EAAVv7B,EAAUu7B,YAAV,OACPr6B,EAAA,cAACm7C,GAAA,EAAD,CAA0BxvD,MAAOA,EAAO0uC,YAAaA,KAEvDmf,kBAAmB,SAACv1D,EAAamS,GAAd,OACjB+gC,KAAUlzC,YAAYob,KAAKjB,MAA3Bxf,OAAAwnD,EAAA,EAAAxnD,CAAA,CACEqF,eACGmS,OA8BEqmD,GAAgD,WAC3D,OACEz8C,EAAA,cAACg2B,EAAA,cAAD,KACG,SAAC39B,EAAD4G,GAAA,IAAMhb,EAANgb,EAAMhb,YAAN,OACC+b,EAAA,cAACvE,EAAA,EAAD,KACEuE,EAAA,cAACG,EAAA,WAAD,KACEH,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,KAAUvgC,QAApB,gBACAoJ,EAAA,cAACkL,EAAA,EAAD,CACEC,GAAIgsB,KAAUlzC,YAAY6S,QAAQ,CAChCtR,cAAevB,EAAYK,MAG5BL,EAAYsD,MAEfyY,EAAA,iDAEFA,EAAA,cAACwT,EAAA,EAAD,KACExT,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOjS,YAAYob,KAAKjB,MAC9BuN,OAAO,EACPzrB,SAAU+6D,KAEZj7C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOjS,YAAYob,KAAKf,QAAQd,WACtCmO,OAAO,EACPzrB,SAAUs8D,KAEZx8C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOjS,YAAYob,KAAKf,QAAQpa,WAAWyZ,aACjDgO,OAAO,EACPzrB,SAAU87D,KAEZh8C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOjS,YAAYob,KAAKf,QAAQpa,WAAW2Z,gBACjD8N,OAAO,EACPzrB,SAAU+7D,KAEZj8C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOjS,YAAYob,KAAKX,SAASxa,WAAWyZ,aAClDgO,OAAO,EACPzrB,SAAUi8D,KAEZn8C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOjS,YAAYob,KAAKX,SAASxa,WAAW2Z,gBAClD8N,OAAO,EACPzrB,SAAUm8D,KAEZr8C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOjS,YAAYob,KAAKR,eAC9B8M,OAAO,EACPzrB,SAAUk7D,UCvPXsB,GAAb,SAAA/7C,GAAA,SAAA+7C,IAAA,OAAA99D,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAA2gE,GAAA99D,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAA89D,GAAA37C,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAA89D,EAAA/7C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAA89D,EAAA,EAAAtnD,IAAA,SAAA9Y,MAAA,WAEI,OACE0jB,EAAA,cAACg2B,EAAA,cAAD,KACG,SAAA7/B,EAAAY,EAAAE,GAAqDd,EAAlD3Q,cAAkD,IAA/BvB,EAA+B8S,EAA/B9S,YAA+BgT,EAAdiwC,QACtC,OACElnC,EAAA,yBACEA,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,cAAe,WAC9B,SAAAoE,GAAC,OAAIF,EAAA,cAAC28C,GAAD,CAAyB14D,YAAaA,MAE9C+b,EAAA,+EAVd08C,EAAA,CAAkCjhE,aCoDrBmhE,GAAb,SAAAj8C,GAIE,SAAAi8C,EAAmB19D,GAAqC,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAA6gE,IACtDvgE,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAg+D,GAAAr6C,KAAAxmB,KAAMmD,KACDpD,MAAQ,CACX+gE,kBAAkB,GAEpBxgE,EAAKm6C,aAAen6C,EAAKm6C,aAAap3C,KAAlBR,OAAA42C,GAAA,EAAA52C,CAAAvC,IACpBA,EAAKo6C,mBAAqBp6C,EAAKo6C,mBAAmBr3C,KAAxBR,OAAA42C,GAAA,EAAA52C,CAAAvC,IAC1BA,EAAKq6C,gBAAkBr6C,EAAKq6C,gBAAgBt3C,KAArBR,OAAA42C,GAAA,EAAA52C,CAAAvC,IAP+BA,EAJ1D,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAAg+D,EAAAj8C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAg+D,EAAA,EAAAxnD,IAAA,qBAAA9Y,MAAA,WAeIP,KAAKqE,SAAS,CACZy8D,kBAAkB,MAhBxB,CAAAznD,IAAA,eAAA9Y,MAAA,WAqBI,IAAM6H,EAASpI,KAAKD,MAAM06C,aAI1B,GAHAz6C,KAAKqE,SAAS,CACZy8D,kBAAkB,IAEE,oBAAX14D,EAGT,MAAM3D,MAAM,gDAFZ2D,EAAO4c,MAAMhlB,QA1BnB,CAAAqZ,IAAA,kBAAA9Y,MAAA,SAgCyB8e,GACrBrf,KAAKqE,SAALxB,OAAAwnD,EAAA,EAAAxnD,CAAA,GACKwc,EADL,CAEEyhD,kBAAkB,OAnCxB,CAAAznD,IAAA,SAAA9Y,MAAA,WAuCkB,IAAA+W,EAAAtX,KACd,OACEikB,EAAA,cAACg2B,EAAA,cAAD,KACG,SAAA7/B,GAAuB,IAApB3Q,EAAoB2Q,EAApB3Q,cACF,OACEwa,EAAA,cAACmnC,EAAA,uBAAD,KACG,SAAApwC,GAKK,IAJJ3T,EAII2T,EAJJ3T,kBACAC,EAGI0T,EAHJ1T,kBACAC,EAEIyT,EAFJzT,kBACAG,EACIsT,EADJtT,oBAEA,OACEuc,EAAA,cAACmnC,EAAA,gBAAD,CAAiB3hD,cAAeA,GAC7B,SAAAyR,GAAA,IAAG5X,EAAH4X,EAAG5X,KAAMG,EAATyX,EAASzX,QAAS1B,EAAlBmZ,EAAkBnZ,MAAlB,OACCkiB,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAOA,EACP2B,SAAUD,EACVy2C,eAAgBj2B,EAAA,cAACG,EAAA,OAAD,MAChB+1B,cAAel2B,EAAA,kCAEd,kBACCA,EAAA,yBACEA,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,eAAgB,WAC/B,SAAAoE,GACC,IAAM65B,EAAc16C,EAAK06C,YACrB16C,EAAK06C,YACL,GACE1C,EAAiC,CACrC9yB,KAAM4yB,KAAUlzC,YAAYob,KAAKjB,MAAM,CACrCha,OAAQ,IACRH,YAAa5E,IAEf2sB,MAAO,QAEHsrB,EAAkC,CACtCtrB,MAAO,QACPZ,QAAS,kBACP/X,EAAKqjC,gBAAgB,CACnBF,aAAc,kBACZnzC,EACEhE,EAAKiF,GACLjF,EAAKgG,SACL,IAEJ6yC,wBACE/yB,0BAAwBqgB,OAC1BoR,uBAAwB12B,EAAE,gBAC1B22B,iBACE3xB,uBAAqBM,KACvBsxB,iBAAkB52B,EAChB,uCACA,CAAE3Y,KAAMlI,EAAKkI,OAEfwvC,kBAAmB72B,EACjB,iDAIFi4B,EAAiC,CACrCnsB,MAAO,OACPZ,QAAS,kBACP/X,EAAKqjC,gBAAgB,CACnBF,aAAc,kBACZ/yC,EACEpE,EAAKiF,GACLjF,EAAKgG,UAET6yC,wBACE/yB,0BAAwBqgB,OAC1BoR,uBAAwB12B,EAAE,eAC1B22B,iBACE3xB,uBAAqBM,KACvBsxB,iBAAkB52B,EAChB,yCACA,CAAE3Y,KAAMlI,EAAKkI,OAEfwvC,kBAAmB72B,EACjB,mDAIFs4B,EAAmC,CACvCxsB,MAAO,SACPZ,QAAS,kBACP/X,EAAKqjC,gBAAgB,CACnBF,aAAc,kBACZpzC,EAAkB/D,EAAKiF,KACzB4zC,wBACE/yB,0BAAwBsQ,OAC1BmhB,uBAAwB12B,EACtB,iBAEF22B,iBACE3xB,uBAAqBuQ,OACvBqhB,iBAAkB52B,EAChB,sCACA,CAAE3Y,KAAMlI,EAAKkI,OAEfwvC,kBAAmB72B,EACjB,gDAIF04B,EAAmC,CACvC5sB,MAAO,SACPZ,QAAS,kBACP9nB,EACEjE,EAAKiF,GADU,GAAA9C,OAEZnC,EAAKkI,KAFO,kBAMfK,EAAgC,GAatC,OAZImxC,kBAAQ15C,IACVuI,EAAQoxC,KAAK3B,GAEX4B,sBAAY55C,IACduI,EAAQoxC,KAAK1B,GAEX4B,wBAAc75C,IAChBuI,EAAQoxC,KAAKb,GAEfvwC,EAAQoxC,KAAKR,GACb5wC,EAAQoxC,KAAKJ,GAGX54B,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,mBAAD,CACE8F,YACEd,0BAAwBqgB,OAE1Blf,qBAAsBpG,EAAE,iBACxB6F,sBACE1S,EAAKvX,MAAM86C,uBAEbzwB,wBACE9S,EAAKvX,MAAMg7C,iBAEb12B,UAAW/M,EAAKvX,MAAMi7C,kBACtBpsC,KAAM0I,EAAKvX,MAAM+6C,iBACjBnwB,WAAYrT,EAAKvX,MAAM+gE,iBACvBl3C,SAAUtS,EAAKojC,mBACf5wB,UAAWxS,EAAKmjC,eAElBx2B,EAAA,cAACG,EAAA,sBAAD,CACE5Y,KAAMlI,EAAKkI,KACXlC,QAAShG,EAAKgG,UAEhB2a,EAAA,cAAC28C,GAAD,CACE14D,YAAa5E,IAEf2gB,EAAA,cAACm7C,GAAA,EAAD,CACExvD,MAAOusD,mBAAS74D,EAAMA,EAAKsF,MAAO,GAAGL,MAEvC0b,EAAA,cAACG,EAAA,6BAAD,CACEzT,YAAarN,EAAKqN,YAClBu8B,kBAAmB/oB,EACjB,uCAGJF,EAAA,cAACG,EAAA,iCAAD,CACEkpB,WAAY0Q,EAAY9oC,OAAS,EACjC1I,QAASlJ,EAAKkJ,QACdu0D,gBAAiB58C,EAAE,eACnB68C,mBAAoB78C,EAAE,kBACtBkpB,cAAelpB,EAAE,gBACjB88C,gBAAiB98C,EACf,+BAEFhgB,SACE8f,EAAA,cAACm7C,GAAA,EAAD,CACEvzD,QAASA,EACTmyC,YAAaA,EACbv0C,cAAenG,EAAKiF,GACpBklC,UAAWnqC,EAAKmqC,UAChBnkC,QAAShG,EAAKgG,4BAvNxDu3D,EAAA,CAAiCnhE,aCpDpBwhE,GAAb,SAAAt8C,GAAA,SAAAs8C,IAAA,OAAAr+D,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAkhE,GAAAr+D,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAq+D,GAAAl8C,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAq+D,EAAAt8C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAq+D,EAAA,EAAA7nD,IAAA,SAAA9Y,MAAA,WAEI,OACE0jB,EAAA,cAACg2B,EAAA,cAAD,KACG,SAAA7/B,EAAAY,EAAAE,GAAqDd,EAAlD3Q,cAAkD,IAA/BvB,EAA+B8S,EAA/B9S,YAA+BgT,EAAdiwC,QACtC,OACElnC,EAAA,yBACEA,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,cAAe,WAC9B,SAAAoE,GAAC,OAAIF,EAAA,cAAC28C,GAAD,CAAyB14D,YAAaA,MAE9C+b,EAAA,8EAVdi9C,EAAA,CAAiCxhE,aCVpByhE,GAAb,SAAAv8C,GACE,SAAAu8C,EAAYh+D,GAAW,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAmhE,IACrB7gE,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAs+D,GAAA36C,KAAAxmB,KAAMmD,KACDpD,MAAQ,CACXosB,iBAAiB,GAHE7rB,EADzB,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAAs+D,EAAAv8C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAs+D,EAAA,EAAA9nD,IAAA,SAAA9Y,MAAA,WAOkB,IAAA+W,EAAAtX,KACd,OACEikB,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,eAAgB,WAC/B,SAAAoE,GAAC,OACAF,EAAA,cAACmnC,EAAA,uBAAD,KACG,SAAAhxC,GAA2B,IAAxB5S,EAAwB4S,EAAxB5S,kBACI45D,EAAoB,eAAApmD,EAAAnY,OAAA44C,EAAA,EAAA54C,CAAA64C,EAAAjtC,EAAAktC,KAAG,SAAAC,EAAO3wB,GAAP,IAAAo2C,EAAAC,EAAAtN,EAAAC,EAAAC,EAAAE,EAAAD,EAAAlrD,EAAA,OAAAyyC,EAAAjtC,EAAAotC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACvBqlB,EAAwB,GACxBC,EAAuB,GAC3BhqD,EAAKjT,SAAS,CACZ8nB,iBAAiB,EACjBo1C,qBAAsBF,EACtBG,sBAAuBF,IANEtN,GAAA,EAAAC,GAAA,EAAAC,OAAAjpD,EAAA6wC,EAAAC,KAAA,EAAAqY,EAQRnpC,EARQtpB,OAAAmwD,YAAA,UAAAkC,GAAAG,EAAAC,EAAApY,QAAAv6C,KAAA,CAAAq6C,EAAAE,KAAA,gBAQhB/yC,EARgBkrD,EAAA5zD,MAAAu7C,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAUjBx0C,EAAkByB,GAVD,QAWvBq4D,EAAaA,EAAW77D,OAAO,CAC7Bua,IAAKmE,EAAE,0CAA2C,CAChDjb,SAAUD,EAAKuC,SAbIswC,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAG,GAAAH,EAAA,UAiBvBulB,EAAcA,EAAY57D,OAAO,CAC/Bua,IAAKmE,EAAE,yCAA0C,CAC/Cjb,SAAUD,EAAKuC,SAnBI,QAuBzB8L,EAAKjT,SAAS,CACZk9D,qBAAsBF,EACtBG,sBAAuBF,IAzBA,QAAAtN,GAAA,EAAAlY,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA4T,GAAA5T,EAAA,SAAAmY,GAAA,EAAAC,EAAApY,EAAA4T,GAAA,QAAA5T,EAAAC,KAAA,GAAAD,EAAAC,KAAA,GAAAiY,GAAA,MAAAI,EAAAzB,QAAAyB,EAAAzB,SAAA,WAAA7W,EAAAC,KAAA,IAAAkY,EAAA,CAAAnY,EAAAE,KAAA,eAAAkY,EAAA,eAAApY,EAAA95B,OAAA,mBAAA85B,EAAA95B,OAAA,YA4B3B1K,EAAKjT,SAAS,CACZ8nB,iBAAiB,IA7BQ,yBAAA2vB,EAAAI,SAAAN,EAAA,4CAAH,gBAAAgN,GAAA,OAAA5tC,EAAAgK,MAAAhlB,KAAAilB,YAAA,GAqC1B,OACEhB,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACvE,EAAA,EAAD,CAAWmG,MAAO1B,EAAE,mBACpBF,EAAA,cAACG,EAAA,WAAD,KACEH,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,KAAUvgC,QACjBsJ,EAAE,wBAELF,EAAA,0BAAOE,EAAE,oCAEXF,EAAA,cAACG,EAAA,aAAD,CACE2kB,cAAe5kB,EAAE,kCACjB6kB,oBAAqB7kB,EACnB,6CAEFmH,0BAA2BnH,EACzB,4CAEFgJ,sBAAuBhJ,EACrB,wCAEF8I,iBAAkB9I,EAChB,8CAEFkc,gBAAiBlc,EAAE,kCACnBuH,0BAA2BpU,EAAKvX,MAAMyhE,sBACtC71C,yBAA0BrU,EAAKvX,MAAMwhE,qBACrC1gC,iBA/BuB,SAAC4gC,GAC5B,OAAOzhD,IAAKmE,EAAE,8CAA+C,CAC3Djb,SAAUu4D,KA8BR51C,iBAAkBu1C,aA7EtCD,EAAA,CAAgCzhE,aCoDhC,IAAMypD,GAAe,CACnBh1B,WAAY,OACZ5rB,GAAI,OACJoM,YAAaqL,IAAKmE,EAAE,kCACpB0B,MAAO7F,IAAKmE,EAAE,gBAGVu9C,GAAqB,CACzBvtC,WAAY,SACZF,aAAc,GACd1rB,GAAI,aACJoM,YAAaqL,IAAKmE,EAAE,iCACpB0B,MAAO7F,IAAKmE,EAAE,sBAgBhB,IAAMilC,GAAa,CACjB7gD,GAAI,OACJ2sB,WAAW,EACXrP,MAAO7F,IAAKmE,EAAE,gBAGVw9C,GAAe,CACnBp5D,GAAI,SACJ2sB,WAAW,EACXrP,MAAO7F,IAAKmE,EAAE,kBAGV0Q,GAAyB,CAACu0B,GAAYuY,IAE/BC,GAAb,SAAAh9C,GAAA,SAAAg9C,IAAA,OAAA/+D,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAA4hE,GAAA/+D,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAA++D,GAAA58C,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAA++D,EAAAh9C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAA++D,EAAA,EAAAvoD,IAAA,SAAA9Y,MAAA,WAEI,OACE0jB,EAAA,cAACmnC,EAAA,0BAAD,KACG,SAAAhxC,GAAA,IAASynD,EAATznD,EAAG9W,KAAwBG,EAA3B2W,EAA2B3W,QAAS1B,EAApCqY,EAAoCrY,MAApC,OACCkiB,EAAA,cAACmnC,EAAA,gBAAD,KACG,SAAApwC,GAAA,IAASkjD,EAATljD,EAAG1X,KAAH,OACC2gB,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,eAAgB,WAC/B,SAAAoE,GAAC,OACAF,EAAA,cAACg2B,EAAA,2BAAD,CACEqN,kBAAmB6B,GACnB5B,gBAAiB6B,IAEhB,SAAAE,GACC,IAzCE37C,EAyCIm0D,EA1G5B,SACEj1D,EACA2oB,EACAV,EACAM,GAEA,IAAI0sC,EAAgCj1D,EAyCpC,OAxCA2oB,EAAcriB,QAAQ,SAACnJ,GACrB,IAAMw/C,EAAex/C,EAAOzJ,MAAM4U,cAClC2sD,EAAgCA,EAA8B93D,OAC5D,SAACqxC,GACC,MAAqB,SAAjBrxC,EAAO6b,MACFw1B,EAAGnzC,YAAYsD,KAAK2J,cAAcs0C,SAASD,GAE/B,eAAjBx/C,EAAO6b,OACew1B,EAAGnzC,YAAaU,MAAO08C,OAC7C,SAACta,EAAK57B,GAAN,SAAA3J,OAAA5C,OAAA+9C,GAAA,EAAA/9C,CACKmoC,GADLnoC,OAAA+9C,GAAA,EAAA/9C,CAEKuM,EACAQ,MAAO5F,OAAO,SAAA/J,GAAC,OAAIA,EAAEkI,aACrBU,IAAI,SAAA5I,GAAC,OAAIA,EAAEkI,WAAYqD,KAAK2J,mBAEjC,IAEqBmwC,OACrB,SAACyc,EAAOrhB,GAAR,OAAcqhB,GAASrhB,EAAE+I,SAASD,KAClC,OAQVsY,EAAgCA,EAA8Btc,KAC5D,SAACkE,EAAKC,GACJ,IAAMqY,EAAO5sC,EAAkBs0B,EAAMC,EAC/BC,EAAQx0B,EAAkBu0B,EAAMD,EACtC,MAAwB,SAApB50B,EACKktC,EAAK95D,YAAYsD,KAAKq+C,cAAcD,EAAM1hD,YAAYsD,MAExDw2D,EAAK95D,YAAaooC,aAAcuZ,cACrCD,EAAM1hD,YAAaooC,gBAgEiC2xB,CACpCJ,EAAiBz3D,MACjBk/C,EAAQ9zB,cACR8zB,EAAQx0B,gBACRw0B,EAAQl0B,iBAGV,OACEnR,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACvE,EAAA,EAAD,CAAWmG,MAAO1B,EAAE,yBACpBF,EAAA,cAACG,EAAA,qBAADvhB,OAAAC,OAAA,CACE6vC,wBAAyB,uBACzBF,iBAAkB2I,KAAU/5B,WAAWjG,OACvCmpB,0BAA2B6W,KAAU7gC,OAAO/M,MAAMiU,aAClDgT,aAvDJ9mB,EAwDMuwD,EAAgB/vD,sBAvDrC,CACLg7C,GADKtmD,OAAAwnD,EAAA,EAAAxnD,CAAA,GAGA6+D,GAHA,CAIHztC,aAActmB,EAAY9E,IAAI,SAAA+E,GAAC,MAAK,CAClCrF,GAAIqF,EAAErF,GACNsd,MAAOjY,EAAEpC,YAmDWqpB,UAAWA,GACXiT,aAAcg6B,EAA8B5sD,QACxCo0C,EATN,CAUE5nB,WAAYvd,EAAE,iBACduuB,eAAgBvuB,EAAE,2BAClB4lC,yBAA0B5lC,EACxB,gCAEFoR,iBAAkBpR,EAAE,sBAAuB,CACzC8R,MAAO6rC,EAA8B5sD,WAGvC+O,EAAA,cAACm7C,GAAA,EAAD,CACEr9D,MAAOA,EACP2B,SAAUD,EACVoJ,aAAci1D,kBA9C5CF,EAAA,CAAsCliE,uBChGzBwiE,GAAb,SAAAt9C,GAME,SAAAs9C,EAAY/+D,GAAW,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAkiE,IACrB5hE,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAq/D,GAAA17C,KAAAxmB,KAAMmD,KAHDpD,MAAgC,GAIrCO,EAAK6hE,QAAU7hE,EAAK6hE,QAAQ9+D,KAAbR,OAAA42C,GAAA,EAAA52C,CAAAvC,IACfA,EAAK0c,WAAa1c,EAAK0c,WAAW3Z,KAAhBR,OAAA42C,GAAA,EAAA52C,CAAAvC,IAHGA,EANzB,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAAq/D,EAAAt9C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAq/D,EAAA,EAAA7oD,IAAA,UAAA9Y,MAAA,WAaIP,KAAKqE,SAAS,CACZ4Y,cAAUhS,MAdhB,CAAAoO,IAAA,aAAA9Y,MAAA,SAkBoB0c,GAChBjd,KAAKqE,SAAS,CACZ4Y,eApBN,CAAA5D,IAAA,SAAA9Y,MAAA,WAyBI,OACE0jB,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACG,EAAA,UAAD,KACEH,EAAA,qBAAK0E,UAAU,kBACb1E,EAAA,qBAAK0E,UAAU,aACb1E,EAAA,qBAAK0E,UAAU,sBACb1E,EAAA,qBAAK0E,UAAU,cACb1E,EAAA,cAACG,EAAA,WAAD,KACEH,EAAA,kCACAA,EAAA,qCACAA,EAAA,oCAGJA,EAAA,qBAAK0E,UAAU,2BACb1E,EAAA,qBAAK0E,UAAU,aAAa/K,MAAO,CAAE6mB,UAAW,QAC9CxgB,EAAA,cAACG,EAAA,WAAD,eACAH,EAAA,cAACG,EAAA,WAAD,CACE8H,UAAWlsB,KAAKD,MAAMkd,SACtBoS,QAASrvB,KAAKmiE,SAFhB,SAMAl+C,EAAA,cAACG,EAAA,WAAD,CAAYsE,GAAI,UAAWwD,UAAWlsB,KAAKD,MAAMkd,UAAjD,cASZgH,EAAA,qBACErG,MAAO,CACLwkD,QAAS,OACTC,SAAU,SACVvkD,OAAQ,sBAGVmG,EAAA,cAACq+C,GAAA,kBAAD,CACEplD,WAAY,uBACZI,UAAW,aACXH,iBAAkB,qCAClBC,kBAAmB/B,gBAAa3Y,KAChC2a,oBAAqB/B,kBAAeinD,OACpC/sD,eACE,sOAEFkI,WAAY,qBACZH,kBAAmB,4CACnBC,mBAAoBnC,gBAAa3Y,KACjC+a,qBAAsBnC,kBAAeinD,OACrC9sD,gBACE,uaAEFwH,SAAUjd,KAAKD,MAAMkd,SACrBD,WAAYhd,KAAKgd,mBAhF7BklD,EAAA,CAAsCxiE,aC+BtC,IAAMypD,GAAe,CACnBh1B,WAAY,OACZ5rB,GAAI,OACJoM,YAAaqL,IAAKmE,EAAE,kCACpB0B,MAAO7F,IAAKmE,EAAE,gBAGVsQ,GAAc,CAAC00B,IAEfC,GAAa,CACjB7gD,GAAI,OACJ2sB,WAAW,EACXrP,MAAO7F,IAAKmE,EAAE,gBAGV0Q,GAAyB,CAACu0B,IAEhC,SAASoZ,GAA0Bh3D,GACjC,OAAOwU,IAAKmE,EAAE,gCAAiC,CAAEs+C,IAAKj3D,IAOjD,IAAMk3D,GAAb,SAAA99C,GACE,SAAA89C,EAAYv/D,GAAY,IAAA7C,EAAA,OAAAuC,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAA0iE,IACtBpiE,EAAAuC,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAA6/D,GAAAl8C,KAAAxmB,KAAMmD,KACDpD,MAAQ,CACXspC,oBAAqB5M,yBAAuBkK,UAHxBrmC,EAD1B,OAAAuC,OAAAqiB,EAAA,EAAAriB,CAAA6/D,EAAA99C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAA6/D,EAAA,EAAArpD,IAAA,SAAA9Y,MAAA,WAOkB,IAAA+W,EAAAtX,KACd,OACEikB,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,eAAgB,WAC/B,SAAAoE,GAAC,OACAF,EAAA,cAACmnC,EAAA,iBAAD,KACG,SAAAhxC,GAAA,IAAG9W,EAAH8W,EAAG9W,KAAMG,EAAT2W,EAAS3W,QAAS1B,EAAlBqY,EAAkBrY,MAAOqB,EAAzBgX,EAAyBhX,KAAzB,OACC6gB,EAAA,cAACg2B,EAAA,2BAAD,CACEqN,kBAAmB6B,GACnB5B,gBAAiB6B,IAEhB,SAAAE,GACC,IAAMqZ,EAjExB,SACEj5D,EACA8rB,EACAV,EACAM,GAEA,IAAI6yB,EAASv+C,EAUb,OATA8rB,EAAcriB,QAAQ,SAACnJ,GACrB,IAAMw/C,EAAex/C,EAAOzJ,MAAM4U,cAClC8yC,EAASA,EAAOj+C,OAAO,SAAAwB,GAAI,OAAIA,EAAK2J,cAAcs0C,SAASD,QAE7DvB,EAASA,EAAOzC,KAAK,SAAC/2C,EAAGg3C,GACvB,IACMmE,EAAQx0B,EAAkBqwB,EAAIh3C,EACpC,OAFa2mB,EAAkB3mB,EAAIg3C,GAEvBoE,cAAcD,MAEd/gD,IAAI,SAAA2C,GAAI,MAAK,CACzBo8B,aAAc,GACdp8B,UA+CoDo3D,CACpCt/D,EACAgmD,EAAQ9zB,cACR8zB,EAAQx0B,gBACRw0B,EAAQl0B,iBAEJytC,EAAqB,SAACr3D,GACrBA,GAAiB,KAATA,GAIsB,IAAxBlI,EAAKqB,QAAQ6G,GACtB8L,EAAKjT,SAAS,CACZglC,oBAAqB5M,yBAAuBuK,YAG9C1vB,EAAKjT,SAAS,CACZglC,oBAAqB5M,yBAAuBkK,WAT9CrvB,EAAKjT,SAAS,CACZglC,oBAAqB5M,yBAAuBqK,UAYlD,OACE7iB,EAAA,cAACmnC,EAAA,uBAAD,KACG,SAAApwC,GAAA,IACC3P,EADD2P,EACC3P,kBACAC,EAFD0P,EAEC1P,kBACAC,EAHDyP,EAGCzP,kBAHD,OAKC0Y,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACvE,EAAA,EAAD,CAAWmG,MAAO1B,EAAE,6BACpBF,EAAA,cAACG,EAAA,WAAD,KACEH,EAAA,cAACkL,EAAA,EAAD,CAAMC,GAAIgsB,KAAUvgC,QACjBsJ,EAAE,wBAELF,EAAA,0BAAOE,EAAE,6BAEXF,EAAA,cAACG,EAAA,iBAADvhB,OAAAC,OAAA,CACE6lC,WAAY,SAACn9B,EAAcE,GAAf,OACVH,EAAkBC,EAAME,GAASo3D,QAAQ1/D,IAE3CylC,UAAW,SAACr9B,GAAD,OACTH,EAAkBG,GAAMs3D,QAAQ1/D,IAElC0lC,aAAc,SAACt9B,GAAD,OACZF,EAAkBE,GAAMs3D,QAAQ1/D,IAElCkmC,eAAgBu5B,EAChBpuC,YAAaA,GACbI,UAAWA,IACPy0B,EAbN,CAcExhB,aAAc66B,EAA8BztD,OAC5CqgB,iBAAkBpR,EAAE,sBAAuB,CACzC8R,MAAO0sC,EAA8BztD,SAEvCoyB,qBAAsBnjB,EAAE,iBACxB4kB,cAAe5kB,EAAE,2BACjBoG,qBAAsBpG,EAAE,iBACxBilB,mBAAoBjlB,EAAE,eACtBwlB,4BAA6BxlB,EAAE,cAC/BulB,4BAA6BvlB,EAAE,aAC/BylB,8BACE44B,GAEF34B,4BAA6B1lB,EAC3B,wBAEF2lB,oCAAqC3lB,EACnC,uCAEF8kB,sBAAuB9kB,EACrB,kCAEF+kB,4BAA6B/kB,EAC3B,wCAEFolB,uBAAwBplB,EACtB,mCAEFqlB,6BAA8BrlB,EAC5B,yCAEFglB,kBAAmBhlB,EAAE,wBACrB6kB,oBAAqB7kB,EACnB,sCAEFklB,oBAAqB/xB,EAAKvX,MAAMspC,oBAChCtC,gBAAiB5iB,EACf,oCAEF8iB,mBAAoB9iB,EAClB,qCAGD,SAAAjJ,GAAA,IACCitB,EADDjtB,EACCitB,cACAE,EAFDntB,EAECmtB,eACAE,EAHDrtB,EAGCqtB,iBAHD,OAKCtkB,EAAA,cAACg2B,EAAA,WAAD,CACEl4C,MAAOA,EACP2B,SAAUD,EACVy2C,eACEj2B,EAAA,cAACG,EAAA,SAAD,CAAUjgB,SAAU8f,EAAA,cAACG,EAAA,iBAAD,QAEtB+1B,cAAel2B,EAAA,cAACvE,EAAA,EAAD,OAEd,kBACCuE,EAAA,cAAAA,EAAA,cAEI,IADD0+C,EAA8BztD,QAE7B+O,EAAA,cAACG,EAAA,SAAD,CACEjgB,SAAUw+D,EAA8B95D,IACtC,SAACk6D,EAAU1gD,GAAX,OACE4B,EAAA,cAACG,EAAA,aAAD,CACE/K,IAAKgJ,EACLqlB,cAAeW,EACfV,gBAAiBY,EACjBy6B,mBAAoB7+C,EAClB,eAEF8+C,qBAAsB9+C,EACpB,iBAEF3Y,KAAMu3D,EAASv3D,KACfo8B,aACEm7B,EAASn7B,mBAQnB,IADD+6B,EAA8BztD,QAE7B+O,EAAA,cAACG,EAAA,mBAAD,CACEijB,SAAUc,EACV9jB,UAAWF,EACT,wCAEFmjB,qBAAsBnjB,EACpB,iBAEFG,SAAUH,EACR,gEAjK1Cu+C,EAAA,CAAoChjE,aCpCvBwjE,GAAb,SAAAt+C,GAAA,SAAAs+C,IAAA,OAAArgE,OAAAgiB,EAAA,EAAAhiB,CAAA7C,KAAAkjE,GAAArgE,OAAAiiB,EAAA,EAAAjiB,CAAA7C,KAAA6C,OAAAkiB,EAAA,EAAAliB,CAAAqgE,GAAAl+C,MAAAhlB,KAAAilB,YAAA,OAAApiB,OAAAqiB,EAAA,EAAAriB,CAAAqgE,EAAAt+C,GAAA/hB,OAAAsiB,EAAA,EAAAtiB,CAAAqgE,EAAA,EAAA7pD,IAAA,SAAA9Y,MAAA,WAEI,OACE0jB,EAAA,cAACwT,EAAA,EAAD,KACExT,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOkH,WAAWjG,KACxBwU,OAAO,EACPuyB,UAAWugB,KAEbz+C,EAAA,cAACoM,EAAA,EAAD,CAAOH,KAAM/V,KAAOgB,OAAOC,KAAMwU,OAAO,EAAMuyB,UAAWgf,KACzDl9C,EAAA,cAACoM,EAAA,EAAD,CAAOH,KAAM/V,KAAOI,OAAOa,KAAM+mC,UAAWqe,KAC5Cv8C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOjS,YAAYob,KAAKlI,KAC9B+mC,UAAWue,KAEbz8C,EAAA,cAACoM,EAAA,EAAD,CAAOH,KAAM/V,KAAOU,KAAM+U,OAAO,EAAMuyB,UAAWyf,KAClD39C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM,yBACNN,OAAO,EACPuyB,UAAW+f,KAEbj+C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOjS,YAAY6S,QACzB6U,OAAO,EACPuyB,UAAW0e,KAEb58C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOjS,YAAY+a,SACzB2M,OAAO,EACPuyB,UAAWwe,KAEb18C,EAAA,cAACoM,EAAA,EAAD,CACEH,KAAM/V,KAAOjS,YAAY4b,QACzB8L,OAAO,EACPuyB,UAAW+e,UAlCrBgC,EAAA,CAAwCxjE,aCrBlCyjE,GAAcC,QACW,cAA7B1qB,OAAO5oB,SAASuzC,UAEe,UAA7B3qB,OAAO5oB,SAASuzC,UAEhB3qB,OAAO5oB,SAASuzC,SAAS/yC,MACvB,2DAyCN,SAASgzC,GAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT7iE,KAAK,SAAAijE,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WAClCD,IACFA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9jE,QACfyjE,UAAUC,cAAcO,WAK1B3+C,QAAQ4+C,IAAI,6CAKZ5+C,QAAQ4+C,IAAI,4CAOvBC,MAAM,SAAAniE,GACLsjB,QAAQtjB,MAAM,4CAA6CA,KCvEjEoiE,SACElgD,EAAA,cAACmgD,EAAA,EAAD,KACEngD,EAAA,cAACC,EAAA,EAAD,CAAiBlE,KAAMA,KACrBiE,EAAA,cAACC,EAAA,EAAD,CAAanE,GAAI,CAAC,WACf,SAAAoE,GAAC,OACAF,EAAA,cAAC7F,EAAA,EAAD,CACEjE,OAAQ,CACN,CACEgoC,UAAW2O,GACXlhC,OAAO,EACPhhB,KAAM,uBACNqhB,MAAO9L,EAAE,QACTiL,GAAI,KAEN,CACE+yB,UAAW+gB,GACXt0D,KAAM,4BACNqhB,MAAO9L,EAAE,gBACTiL,GAAI,iBAEN,CACE+yB,UAAWkL,EACXz+C,KAAM,wBACNqhB,MAAO9L,EAAE,eACTiL,GAAI,gBAEN,CACE+yB,UAAWsO,GACX7hD,KAAM,aACNqhB,MAAO9L,EAAE,kBACTiL,GAAI,mBAEN,CACE+yB,UAAW8Z,GACXrtD,KAAM,iBACNqhB,MAAO9L,EAAE,QACTiL,GAAI,gBAclBi1C,SAASC,eAAe,SD3CX,WACb,GAA6C,kBAAmBd,UAAW,CAMzE,GAJkB,IAAIz0D,IACpB+vC,kDACApG,OAAO5oB,SAAS+wB,YAEJ0jB,SAAW7rB,OAAO5oB,SAASy0C,OAIvC,OAGF7rB,OAAOnlC,iBAAiB,OAAQ,WAC9B,IAAMgwD,EAAK,GAAA99D,OAAMq5C,kDAAN,sBAEPqkB,IAmDV,SAAiCI,GAE/BhhE,MAAMghE,GACH7iE,KAAK,SAAA0D,GAGkB,MAApBA,EAAS4oC,SACwD,IAAjE5oC,EAAS5E,QAAQglE,IAAI,gBAAiB7/D,QAAQ,cAG9C6+D,UAAUC,cAAcgB,MAAM/jE,KAAK,SAAAijE,GACjCA,EAAae,aAAahkE,KAAK,WAC7Bg4C,OAAO5oB,SAAS60C,aAKpBrB,GAAgBC,KAGnBW,MAAM,WACL7+C,QAAQ4+C,IACN,mEAvEAW,CAAwBrB,GAIxBC,UAAUC,cAAcgB,MAAM/jE,KAAK,WACjC2kB,QAAQ4+C,IACN,+GAMJX,GAAgBC,MCcxBsB,oCClEA,IAAAjrD,EAAAC,EAAA,GAAAC,EAAAD,EAAA,IAMeE,EAAA,GACbylC,gBAAiB,CACfG,MAAO,CACLvkC,KAAMlB,uBACJC,IAAOqlC,gBAAgBtoC,eAAeyoC,MAAMvkC,KAC5C,SAAAhB,GAAA,IAAGlD,EAAHkD,EAAGlD,eAAH,MAAyB,CACvBmD,OAAQ,CACNhC,iBAAkBnB,EAAeH,UAEnChX,MAAO,CACLmX,qBAIN0oC,aAAc,CACZxkC,KAAMX,+BACJN,IAAOqlC,gBAAgBtoC,eAAeyoC,MAAMC,aAAaxkC,MAE3DykC,iBAAkB3lC,uBAChBC,IAAOqlC,gBAAgBtoC,eAAeyoC,MAAMC,aACzCC,iBACH,SAAA7kC,GAAA,IAAG9D,EAAH8D,EAAG9D,eAAH,MAAyB,CACvBmD,OAAQ,CACNhC,iBAAkBnB,EAAeH,UAEnChX,MAAO,CACLmX,qBAIN4oC,YAAa5lC,uBAIXC,IAAOqlC,gBAAgBtoC,eAAeyoC,MAAMC,aAAaE,YACzD,SAAA5kC,GAAA,IAAGnT,EAAHmT,EAAGnT,aAAcmP,EAAjBgE,EAAiBhE,eAAjB,MAAuC,CACrCmD,OAAQ,CACNhC,iBAAkBnB,EAAeH,UAEnChX,MAAO,CACLgI,eACAmP,uBAMVuoC,aAAcvlC,uBACZC,IAAOqlC,gBAAgBtoC,eAAeuoC,aACtC,SAAA5+B,GAAA,IAAG3J,EAAH2J,EAAG3J,eAAH,MAAyB,CACvBmD,OAAQ,CACNhC,iBAAkBnB,EAAeH,UAEnChX,MAAO,CACLmX,qBAINwoC,UAAWxlC,uBACTC,IAAOqlC,gBAAgBtoC,eAAewoC,UACtC,SAAA38B,GAAA,IAAG7L,EAAH6L,EAAG7L,eAAH,MAAyB,CACvBmD,OAAQ,CACNhC,iBAAkBnB,EAAeH,UAEnChX,MAAO,CACLmX,qBAIN4M,QAAS5J,uBACPC,IAAOqlC,gBAAgBtoC,eAAe4M,QACtC,SAAAZ,GAAA,IAAGhM,EAAHgM,EAAGhM,eAAH,MAAyB,CACvBmD,OAAQ,CACNhC,iBAAkBnB,EAAeH,UAEnChX,MAAO,CACLmX,qBAINqD,OAAQE,+BAAqBN,IAAOqlC,gBAAgBjlC,QACpDY,OAAQV,+BAAqBN,IAAOqlC,gBAAgBrkC,QACpDN,KAAMJ,+BAAqBN,IAAOqlC,gBAAgB3kC,OAEpDO,KAAMX,+BAAqBN,IAAOqlC,gBAAgB3kC","file":"static/js/main.91ff9dc7.chunk.js","sourcesContent":["import * as React from 'react';\n\nexport interface IApiContext {\n  apiUri: string;\n  dvApiUri: string;\n  headers: { [name: string]: string };\n}\n\nexport const ApiContextDefaultValue = {\n  apiUri: 'http://example.com',\n  dvApiUri: 'http://example.com',\n  headers: {},\n} as IApiContext;\n\nexport const ApiContext = React.createContext<IApiContext>(\n  ApiContextDefaultValue\n);\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = (function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof Symbol !== \"undefined\") {\n\t\tvar iteratorSymbol = Symbol.iterator;\n\t\tif (iteratorSymbol && (iteratorSymbol in target)) {\n\t\t\tvar iterator = target[iteratorSymbol](), step, pact, reject;\n\t\t\tfunction _cycle(result) {\n\t\t\t\ttry {\n\t\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (pact) {\n\t\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpact = result;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t_cycle();\n\t\t\tif (iterator.return) {\n\t\t\t\tvar _fixup = function(value) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\t\titerator.return();\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch(e) {\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\tif (pact && pact.then) {\n\t\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t_fixup();\n\t\t\t}\n\t\t\treturn pact;\n\t\t}\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"value is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof Symbol !== \"undefined\") {\n\t\tvar asyncIteratorSymbol = Symbol.asyncIterator;\n\t\tif (asyncIteratorSymbol && (asyncIteratorSymbol in target)) {\n\t\t\tvar pact = new _Pact();\n\t\t\tvar iterator = target[asyncIteratorSymbol]();\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t\treturn pact;\n\t\t\tfunction _resumeAfterBody(result) {\n\t\t\t\tif (check && !check()) {\n\t\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t\t}\n\t\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t\t}\n\t\t\tfunction _resumeAfterNext(step) {\n\t\t\t\tif (step.done) {\n\t\t\t\t\t_settle(pact, 1);\n\t\t\t\t} else {\n\t\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction _reject(error) {\n\t\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t\t}\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = (function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype[Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))] = function() {\n\t\treturn this;\n\t};\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","export interface IFetchHeaders {\n  [s: string]: string;\n}\nexport interface IFetch {\n  url: string;\n  method: 'GET' | 'PUT' | 'POST' | 'DELETE';\n  headers?: IFetchHeaders;\n  body?: any;\n\n  /**\n   * Indicates if the content type should be included in the headers. Defaults to `true`. When using a\n   * content type of 'multipart/form-data' this should be set to `false` but you still need to set the\n   * content type.\n   */\n  includeContentType?: boolean;\n\n  /**\n   * Defaults to 'application/json; charset=utf-8' if not set.\n   */\n  contentType?: string;\n\n  /**\n   * Indicates if 'accept' should be included in the headers. Defaults to `true`.\n   */\n  includeAccept?: boolean;\n\n  /**\n   * Defaults to 'application/json,text/plain,*&#47*' if not set.\n   */\n  accept?: string;\n\n  /**\n   * Indicates if a 'Referer Policy' of 'no-referrer' should be included.\n   */\n  includeReferrerPolicy?: boolean;\n\n  /**\n   * Whether or not to stringify the data to JSON, overrides the content type\n   */\n  stringifyBody?: boolean;\n}\n\nexport function callFetch({\n  url,\n  method,\n  headers = {},\n  body,\n  includeContentType = true,\n  contentType = 'application/json; charset=utf-8',\n  includeAccept = true,\n  accept = 'application/json,text/plain,*/*',\n  includeReferrerPolicy = true,\n  stringifyBody = true,\n}: IFetch) {\n  if (includeAccept) {\n    const acceptId = 'Accept';\n    headers[acceptId] = accept;\n  }\n\n  if (includeContentType) {\n    const contentTypeId = 'Content-Type';\n    headers[contentTypeId] = contentType;\n  }\n\n  if (includeReferrerPolicy) {\n    const referrerPolicyId = 'referrerPolicy';\n    headers[referrerPolicyId] = 'no-referrer';\n  }\n\n  return fetch(url, {\n    body:\n      contentType.includes('application/json') && stringifyBody\n        ? JSON.stringify(body)\n        : body,\n    cache: 'no-cache',\n    credentials: 'include',\n    headers: {\n      ...headers,\n    },\n    method,\n    mode: 'cors',\n    redirect: 'follow',\n  });\n}\n","import deepmerge from 'deepmerge';\nimport * as React from 'react';\nimport equal from 'react-fast-compare';\nimport { callFetch, IFetchHeaders } from './callFetch';\n\nexport interface IFetchState<T> {\n  data: T;\n  error: boolean;\n  errorMessage?: string;\n  hasData: boolean;\n  loading: boolean;\n}\n\nexport interface IFetchRenderProps<T> {\n  response: IFetchState<T>;\n  read(): Promise<void>;\n}\n\nexport interface IFetchProps<T> {\n  baseUrl: string;\n  url: string;\n  headers?: IFetchHeaders;\n  contentType?: string;\n  defaultValue: T;\n  initialValue?: T;\n  children(props: IFetchRenderProps<T>): any;\n}\n\nexport class Fetch<T> extends React.Component<IFetchProps<T>, IFetchState<T>> {\n  public constructor(props: IFetchProps<T>) {\n    super(props);\n    this.read = this.read.bind(this);\n    this.state = {\n      data: this.props.initialValue || this.props.defaultValue,\n      error: false,\n      hasData: !!this.props.initialValue,\n      loading: true,\n    };\n  }\n\n  public async componentDidMount() {\n    this.read();\n  }\n\n  public async componentDidUpdate(prevProps: IFetchProps<T>) {\n    if (prevProps.url !== this.props.url) {\n      this.read();\n    }\n  }\n\n  public shouldComponentUpdate(\n    nextProps: IFetchProps<T>,\n    nextState: IFetchState<T>\n  ): boolean {\n    return !equal(this.props, nextProps) || !equal(this.state, nextState);\n  }\n\n  public render() {\n    return this.props.children({\n      read: this.read,\n      response: this.state,\n    });\n  }\n\n  public async read() {\n    try {\n      this.setState({ loading: true });\n      const response = await callFetch({\n        contentType: this.props.contentType,\n        headers: this.props.headers,\n        method: 'GET',\n        url: `${this.props.baseUrl}${this.props.url}`,\n      });\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      let data;\n      if (\n        !this.props.contentType ||\n        this.props.contentType.indexOf('application/json') === 0\n      ) {\n        data = await response.json();\n        if (this.props.defaultValue) {\n          data = deepmerge(this.props.defaultValue, data);\n        }\n      } else {\n        data = await response.text();\n      }\n      this.setState({ data, hasData: true, loading: false });\n    } catch (e) {\n      this.setState({\n        data: this.props.defaultValue,\n        error: true,\n        errorMessage: e.message,\n        hasData: false,\n        loading: false,\n      });\n    }\n  }\n}\n","import { callFetch } from './callFetch';\nimport { Fetch, IFetchProps } from './Fetch';\n\nexport class Stream extends Fetch<string[]> {\n  protected reader: ReadableStreamReader | undefined;\n\n  public async componentDidUpdate(prevProps: IFetchProps<string[]>) {\n    if (prevProps.url !== this.props.url) {\n      if (this.reader) {\n        this.reader.cancel();\n      }\n      this.read();\n    }\n  }\n\n  public componentWillUnmount() {\n    if (this.reader) {\n      this.reader.cancel();\n    }\n  }\n\n  public read = async () => {\n    try {\n      this.setState({\n        loading: true,\n      });\n\n      callFetch({\n        contentType: this.props.contentType,\n        headers: this.props.headers,\n        method: 'GET',\n        url: `${this.props.baseUrl}${this.props.url}`,\n      })\n        .then(response => response.body)\n        .then(body => {\n          this.reader = body!.getReader();\n          const textDecoder = new TextDecoder('utf-8');\n          const pushData = ({\n            done,\n            value,\n          }: {\n            done: boolean;\n            value: Uint8Array;\n          }) => {\n            if (done) {\n              this.setState({\n                loading: false,\n              });\n            } else {\n              this.setState({\n                data: [...(this.state.data || []), textDecoder.decode(value)],\n              });\n\n              this.reader!.read().then(pushData);\n            }\n          };\n\n          this.reader.read().then(pushData);\n        });\n    } catch (e) {\n      this.setState({\n        error: true,\n        errorMessage: e.message,\n        loading: false,\n      });\n    }\n  };\n\n  public onSave = async () => {\n    throw new Error(`Can't save from a stream`);\n  };\n}\n","import * as React from 'react';\nimport { ApiContext } from './ApiContext';\nimport { Fetch, IFetchRenderProps } from './Fetch';\nimport { Stream } from './Stream';\n\nexport interface ISyndesisFetchProps<T> {\n  autoload?: boolean;\n  contentType?: string;\n  url: string;\n  stream?: boolean;\n  defaultValue: T;\n  initialValue?: T;\n  children(props: IFetchRenderProps<T>): any;\n}\n\nexport class SyndesisFetch<T> extends React.Component<ISyndesisFetchProps<T>> {\n  public render() {\n    const { url, stream, ...props } = this.props;\n\n    const FetchOrStream = stream ? Stream : Fetch;\n\n    return (\n      <ApiContext.Consumer>\n        {({ apiUri, headers }) => (\n          <FetchOrStream\n            baseUrl={apiUri}\n            url={url}\n            headers={headers}\n            {...props}\n          />\n        )}\n      </ApiContext.Consumer>\n    );\n  }\n}\n","import * as React from 'react';\nimport { ApiContext } from './ApiContext';\nimport { Fetch, IFetchRenderProps } from './Fetch';\n\nexport interface IDVFetchProps<T> {\n  autoload?: boolean;\n  contentType?: string;\n  url: string;\n  stream?: boolean;\n  defaultValue: T;\n  initialValue?: T;\n  children(props: IFetchRenderProps<T>): any;\n}\n\nexport class DVFetch<T> extends React.Component<IDVFetchProps<T>> {\n  public render() {\n    const { url, stream, ...props } = this.props;\n\n    return (\n      <ApiContext.Consumer>\n        {({ apiUri, dvApiUri, headers }) => (\n          <Fetch baseUrl={dvApiUri} url={url} headers={{}} {...props} />\n        )}\n      </ApiContext.Consumer>\n    );\n  }\n}\n","// Enum for the LeveledMessage level field\nexport enum MessageLevel {\n  INFO = 'INFO',\n  WARN = 'WARN',\n  ERROR = 'ERROR',\n}\n\n// Data shape kind enum when working with the DataShape type\nexport enum DataShapeKinds {\n  ANY = 'any',\n  JAVA = 'java',\n  JSON_SCHEMA = 'json-schema',\n  JSON_INSTANCE = 'json-instance',\n  XML_SCHEMA = 'xml-schema',\n  XML_SCHEMA_INSPECTED = 'xml-schema-inspected',\n  XML_INSTANCE = 'xml-instance',\n  NONE = 'none',\n}\n\n// These are message codes that we know about\nexport enum MessageCode {\n  SYNDESIS000 = 'SYNDESIS000', // generic message\n  SYNDESIS001 = 'SYNDESIS001', // One or more properties have been updated\n  SYNDESIS002 = 'SYNDESIS002', // One or more properties have been added or removed\n  SYNDESIS003 = 'SYNDESIS003', // Connector has been deleted\n  SYNDESIS004 = 'SYNDESIS004', // Extension has been deleted\n  SYNDESIS005 = 'SYNDESIS005', // Action has been deleted\n  SYNDESIS006 = 'SYNDESIS006', // One or more required properties is not set\n  SYNDESIS007 = 'SYNDESIS007', // Secrets update needed\n  SYNDESIS008 = 'SYNDESIS008', // Validation Error\n}\n\n// Integration status types and consts\nexport const PENDING = 'Pending';\nexport const PUBLISHED = 'Published';\nexport const UNPUBLISHED = 'Unpublished';\nexport const ERROR = 'Error';\n\nexport type IntegrationStatus =\n  | 'Pending'\n  | 'Published'\n  | 'Unpublished'\n  | 'Error';\n\nexport enum IntegrationType {\n  SingleFlow = 'SingleFlow',\n  ApiProvider = 'ApiProvider',\n  MultiFlow = 'MultiFlow',\n}\n\n// These types are for the integration detailed state\n// TODO: this should come from the swagger but it's missing\nexport enum ConsoleLinkType {\n  Events = 'EVENTS',\n  Logs = 'LOGS',\n}\n\nexport enum DetailedStatus {\n  Assembling = 'ASSEMBLING',\n  Building = 'BUILDING',\n  Deploying = 'DEPLOYING',\n  Starting = 'STARTING',\n}\n\n// Special sekret connection metadata keys\nexport const HIDE_FROM_STEP_SELECT = 'hide-from-step-select';\nexport const HIDE_FROM_CONNECTION_PAGES = 'hide-from-connection-pages';\n\n// stuff used by the ui to compute the StepKinds\nexport const EXTENSION = 'extension';\nexport const ENDPOINT = 'endpoint';\nexport const CONNECTION = ENDPOINT;\nexport const DATA_MAPPER = 'mapper';\nexport const BASIC_FILTER = 'ruleFilter';\nexport const ADVANCED_FILTER = 'expressionFilter';\nexport const STORE_DATA = 'storeData';\nexport const SET_DATA = 'setData';\nexport const CALL_ROUTE = 'callRoute';\nexport const CONDITIONAL_PROCESSING = 'conditionalProcessing';\nexport const SPLIT = 'split';\nexport const AGGREGATE = 'aggregate';\nexport const LOG = 'log';\nexport const TEMPLATE = 'template';\n","import * as React from 'react';\nimport { IChangeEvent, IMessageEvent } from './WithServerEvents';\n\nexport interface IServerEventsContext {\n  registerChangeListener: (listener: (event: IChangeEvent) => void) => void;\n  registerMessageListener: (listener: (event: IMessageEvent) => void) => void;\n  unregisterChangeListener: (listener: (event: IChangeEvent) => void) => void;\n  unregisterMessageListener: (listener: (event: IMessageEvent) => void) => void;\n}\n\nexport const ServerEventsContextDefaultValue = {} as IServerEventsContext;\n\nexport const ServerEventsContext = React.createContext<IServerEventsContext>(\n  ServerEventsContextDefaultValue\n);\n","import {\n  Action,\n  ActionDescriptor,\n  Connection,\n  Integration,\n  Step,\n} from '@syndesis/models';\nimport { saveAs } from 'file-saver';\nimport produce from 'immer';\nimport * as React from 'react';\nimport { ApiContext, IApiContext } from './ApiContext';\nimport { callFetch } from './callFetch';\nimport { PUBLISHED, UNPUBLISHED } from './constants';\n\ntype UpdateOrAddConnection = (\n  integration: Integration,\n  connection: Connection,\n  action: Action,\n  flowId: string,\n  position: number,\n  configuredProperties: any\n) => Promise<Integration>;\n\nexport interface IWithIntegrationHelpersChildrenProps {\n  /**\n   * adds a step of type connection to the provided integration object.\n   *\n   * @param integration - the integration object to modify\n   * @param connection - the connection object that's been used to set up the\n   * step\n   * @param action - the action that's been used to set up the step\n   * @param flow - the zero-based index of the flow where to add the step\n   * @param position - the zero-based index of the steps where to add the step\n   * @param configuredProperties - the values configured by the user for the step\n   *\n   * @todo should we check `flow` and `position` to see if they are valid?\n   * @todo perhaps rename it with a better name\n   */\n  addConnection: UpdateOrAddConnection;\n  /**\n   * updates a step of type connection to the provided integration object.\n   *\n   * @param integration - the integration object to modify\n   * @param connection - the connection object that's been used to set up the\n   * step\n   * @param action - the action that's been used to set up the step\n   * @param flow - the zero-based index of the flow where to add the step\n   * @param position - the zero-based index of the steps where to add the step\n   * @param configuredProperties - the values configured by the user for the step\n   *\n   * @todo perhaps rename it with a better name\n   * @todo should we check `flow` and `position` to see if they are valid?\n   */\n  updateConnection: UpdateOrAddConnection;\n  /**\n   * updates a step of type connection to the provided integration object if\n   * a step exists at the provided `flow` and `position` indexes; a new step is\n   * added otherwise.\n   *\n   * @param integration - the integration object to modify\n   * @param connection - the connection object that's been used to set up the\n   * step\n   * @param action - the action that's been used to set up the step\n   * @param flow - the zero-based index of the flow where to add the step\n   * @param position - the zero-based index of the steps where to add the step\n   * @param configuredProperties - the values configured by the user for the step\n   *\n   * @todo perhaps rename it with a better name\n   * @todo should we check `flow` and `position` to see if they are valid?\n   */\n  updateOrAddConnection: UpdateOrAddConnection;\n  /**\n   * Delete the integration with the specified ID, empty response is returned\n   * @param id\n   */\n  deleteIntegration(id: string): Promise<void>;\n  /**\n   * Deploy the integration with the specified ID and version.  Empty response is returned\n   *\n   * @param id\n   * @param version\n   * @param isIntegrationDeployment\n   */\n  deployIntegration(\n    id: string,\n    version: string | number,\n    isIntegrationDeployment?: boolean\n  ): Promise<void>;\n  /**\n   * Uploads and imports the supplied file as a new integration\n   * @param file\n   */\n  importIntegration(file: File): Promise<void>;\n  /**\n   * Requests a .zip file of the integration, using the specified filename\n   * @param id\n   * @param fileName\n   */\n  exportIntegration(id: string, fileName: string): Promise<void>;\n  /**\n   * asynchronously saves the provided integration, returning the saved\n   * integration in case of success.\n   *\n   * @param integration\n   *\n   * @todo make the returned object immutable to avoid uncontrolled changes\n   */\n  saveIntegration(integration: Integration): Promise<Integration>;\n  /**\n   * Tags the integration with the given CI/CD environments\n   * @param integrationId\n   * @param environments\n   */\n  tagIntegration(\n    integrationId: string,\n    environments: string[]\n  ): Promise<Response>;\n  /**\n   * Request that the given integration ID at the given version be deactivated, empty response is returned\n   * @param id\n   * @param version\n   */\n  undeployIntegration(id: string, version: string | number): Promise<void>;\n}\n\nexport interface IWithIntegrationHelpersProps {\n  children(props: IWithIntegrationHelpersChildrenProps): any;\n}\n\nexport class WithIntegrationHelpersWrapped extends React.Component<\n  IWithIntegrationHelpersProps & IApiContext\n> {\n  constructor(props: IWithIntegrationHelpersProps & IApiContext) {\n    super(props);\n    this.addConnection = this.addConnection.bind(this);\n    this.deleteIntegration = this.deleteIntegration.bind(this);\n    this.deployIntegration = this.deployIntegration.bind(this);\n    this.exportIntegration = this.exportIntegration.bind(this);\n    this.importIntegration = this.importIntegration.bind(this);\n    this.saveIntegration = this.saveIntegration.bind(this);\n    this.undeployIntegration = this.undeployIntegration.bind(this);\n    this.updateConnection = this.updateConnection.bind(this);\n    this.updateOrAddConnection = this.updateOrAddConnection.bind(this);\n    this.tagIntegration = this.tagIntegration.bind(this);\n  }\n\n  public async getActionDescriptor(\n    connectionId: string,\n    actionId: string,\n    configuredProperties: any\n  ): Promise<ActionDescriptor | null> {\n    if (configuredProperties) {\n      const response = await callFetch({\n        body: configuredProperties,\n        headers: this.props.headers,\n        method: 'POST',\n        url: `${\n          this.props.apiUri\n        }/connections/${connectionId}/actions/${actionId}`,\n      });\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return (await response.json()) as ActionDescriptor;\n    } else {\n      return null;\n    }\n  }\n\n  public async addConnection(\n    integration: Integration,\n    connection: Connection,\n    action: Action,\n    flowId: string,\n    position: number,\n    configuredProperties: any\n  ): Promise<Integration> {\n    const actionDescriptor = await this.getActionDescriptor(\n      connection.id!,\n      action.id!,\n      configuredProperties\n    );\n    return produce(integration, draft => {\n      const step: Step = {\n        action,\n        configuredProperties,\n        connection,\n        id: flowId,\n      };\n      if (actionDescriptor) {\n        step.action!.descriptor = actionDescriptor;\n      }\n      step.stepKind = 'endpoint';\n      draft.flows = draft.flows!.map(f => {\n        if (f.id === flowId) {\n          f.steps!.splice(position, 0, step);\n        }\n        return f;\n      });\n      draft.tags = Array.from(new Set([...(draft.tags || []), connection.id!]));\n    });\n  }\n\n  public async deleteIntegration(id: string) {\n    const response = await callFetch({\n      headers: this.props.headers,\n      method: 'DELETE',\n      url: `${this.props.apiUri}/integrations/${id}`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n  }\n\n  public async importIntegration(file: File) {\n    const response = await callFetch({\n      body: file,\n      contentType: 'application/zip',\n      headers: this.props.headers,\n      includeContentType: false,\n      method: 'POST',\n      url: `${this.props.apiUri}/integration-support/import`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n  }\n\n  public async exportIntegration(id: string, fileName: string) {\n    return callFetch({\n      headers: this.props.headers,\n      method: 'GET',\n      url: `${this.props.apiUri}/integration-support/export.zip?id=${id}`,\n    }).then(async body => saveAs(await body.blob(), fileName));\n  }\n\n  public async deployIntegration(\n    id: string,\n    version: string | number,\n    isIntegrationDeployment = false\n  ) {\n    const response = await callFetch({\n      body: isIntegrationDeployment ? { targetState: PUBLISHED } : {},\n      headers: this.props.headers,\n      method: isIntegrationDeployment ? 'POST' : 'PUT',\n      url: isIntegrationDeployment\n        ? `${\n            this.props.apiUri\n          }/integrations/${id}/deployments/${version}/targetState`\n        : `${this.props.apiUri}/integrations/${id}/deployments`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n  }\n\n  public async undeployIntegration(id: string, version: string | number) {\n    const response = await callFetch({\n      body: { targetState: UNPUBLISHED },\n      headers: this.props.headers,\n      method: 'POST',\n      url: `${\n        this.props.apiUri\n      }/integrations/${id}/deployments/${version}/targetState`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n  }\n\n  public async updateConnection(\n    integration: Integration,\n    connection: Connection,\n    action: Action,\n    flowId: string,\n    position: number,\n    configuredProperties: any\n  ): Promise<Integration> {\n    const actionDescriptor = await this.getActionDescriptor(\n      connection.id!,\n      action.id!,\n      configuredProperties\n    );\n    return produce(integration, draft => {\n      const step: Step = {\n        action,\n        configuredProperties,\n        connection,\n        id: flowId,\n      };\n      if (actionDescriptor) {\n        step.action!.descriptor = actionDescriptor;\n      }\n      step.stepKind = 'endpoint';\n      draft.flows = draft.flows!.map(f => {\n        if (f.id === flowId) {\n          f.steps![position] = step;\n        }\n        return f;\n      });\n    });\n  }\n  public async updateOrAddConnection(\n    integration: Integration,\n    connection: Connection,\n    action: Action,\n    flowId: string,\n    position: number,\n    configuredProperties: any\n  ): Promise<Integration> {\n    const actionDescriptor = await this.getActionDescriptor(\n      connection.id!,\n      action.id!,\n      configuredProperties\n    );\n    return produce(integration, draft => {\n      const step: Step = {\n        action,\n        configuredProperties,\n        connection,\n        id: flowId,\n      };\n      if (actionDescriptor) {\n        step.action!.descriptor = actionDescriptor;\n      }\n      step.stepKind = 'endpoint';\n      draft.flows = draft.flows!.map(f => {\n        if (f.id === flowId) {\n          if (f.steps![position]) {\n            f.steps![position] = step;\n          } else {\n            f.steps!.splice(position, 0, step);\n            draft.tags = Array.from(\n              new Set([...(draft.tags || []), connection.id!])\n            );\n          }\n        }\n        return f;\n      });\n    });\n  }\n\n  public async saveIntegration(integration: Integration): Promise<Integration> {\n    const response = await callFetch({\n      body: integration,\n      headers: this.props.headers,\n      method: integration.id ? 'PUT' : 'POST',\n      url: integration.id\n        ? `${this.props.apiUri}/integrations/${integration.id}`\n        : `${this.props.apiUri}/integrations`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return !integration.id\n      ? ((await response.json()) as Integration)\n      : Promise.resolve(integration);\n  }\n\n  public async tagIntegration(integrationId: string, environments: []) {\n    return callFetch({\n      body: environments,\n      headers: this.props.headers,\n      method: 'PUT',\n      url: `${this.props.apiUri}/public/integrations/${integrationId}/tags`,\n    });\n  }\n\n  public render() {\n    return this.props.children({\n      addConnection: this.addConnection,\n      deleteIntegration: this.deleteIntegration,\n      deployIntegration: this.deployIntegration,\n      exportIntegration: this.exportIntegration,\n      importIntegration: this.importIntegration,\n      saveIntegration: this.saveIntegration,\n      tagIntegration: this.tagIntegration,\n      undeployIntegration: this.undeployIntegration,\n      updateConnection: this.updateConnection,\n      updateOrAddConnection: this.updateOrAddConnection,\n    });\n  }\n}\n\n/**\n * This component provides through a render prop a number of helper\n * functions useful when working with an integration.\n *\n * Some of these helpers are available also as stand-alone functions\n * (packages/api/src/integrationHelpers/index.ts), but this component provides\n * methods like `saveIntegration` that can talk with the backend without any\n * additional information provided.\n *\n * Methods that modify an integration return a immutable copy of the original\n * object, to reduce the risk of bugs.\n *\n * @see [addConnection]{@link IWithIntegrationHelpersChildrenProps#addConnection}\n * @see [updateConnection]{@link IWithIntegrationHelpersChildrenProps#updateConnection}\n * @see [updateOrAddConnection]{@link IWithIntegrationHelpersChildrenProps#updateOrAddConnection}\n * @see [saveIntegration]{@link IWithIntegrationHelpersChildrenProps#saveIntegration}\n */\nexport const WithIntegrationHelpers: React.FunctionComponent<\n  IWithIntegrationHelpersProps\n> = props => (\n  <ApiContext.Consumer>\n    {apiContext => <WithIntegrationHelpersWrapped {...props} {...apiContext} />}\n  </ApiContext.Consumer>\n);\n","import * as React from 'react';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IWithChangeListenerProps {\n  filter: (change: IChangeEvent) => boolean;\n  read: () => void;\n  registerChangeListener: (listener: (event: IChangeEvent) => void) => void;\n  unregisterChangeListener: (listener: (event: IChangeEvent) => void) => void;\n  children(): any;\n}\n\nexport class WithChangeListener extends React.Component<\n  IWithChangeListenerProps\n> {\n  public constructor(props: IWithChangeListenerProps) {\n    super(props);\n    this.changeListener = this.changeListener.bind(this);\n  }\n\n  public render() {\n    return this.props.children();\n  }\n\n  public async componentDidMount() {\n    this.props.registerChangeListener(this.changeListener);\n  }\n\n  public async componentWillUnmount() {\n    this.props.unregisterChangeListener(this.changeListener);\n  }\n\n  public changeListener(event: IChangeEvent) {\n    if (this.props.filter(event)) {\n      this.props.read();\n    }\n  }\n}\n","import { Connector } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IApiConnectorsResponse {\n  items: Connector[];\n  totalCount: number;\n}\n\nexport interface IWithApiConnectorsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IApiConnectorsResponse>): any;\n}\n\nexport class WithApiConnectors extends React.Component<\n  IWithApiConnectorsProps\n> {\n  public changeFilter(change: IChangeEvent) {\n    return change.kind.startsWith('connector');\n  }\n\n  public render() {\n    return (\n      <SyndesisFetch<IApiConnectorsResponse>\n        url={'/connectors?query=connectorGroupId%3Dswagger-connector-template'}\n        defaultValue={{\n          items: [],\n          totalCount: 0,\n        }}\n      >\n        {({ read, response }) => {\n          if (this.props.disableUpdates) {\n            return this.props.children(response);\n          }\n          return (\n            <ServerEventsContext.Consumer>\n              {({ registerChangeListener, unregisterChangeListener }) => (\n                <WithChangeListener\n                  read={read}\n                  registerChangeListener={registerChangeListener}\n                  unregisterChangeListener={unregisterChangeListener}\n                  filter={this.changeFilter}\n                >\n                  {() => this.props.children(response)}\n                </WithChangeListener>\n              )}\n            </ServerEventsContext.Consumer>\n          );\n        }}\n      </SyndesisFetch>\n    );\n  }\n}\n","import * as React from 'react';\n\nexport interface IWithPollingProps {\n  polling: number;\n  read: () => void;\n  children(): any;\n}\n\nexport class WithPolling extends React.Component<IWithPollingProps> {\n  public pollingTimer?: number;\n\n  public constructor(props: IWithPollingProps) {\n    super(props);\n    this.poller = this.poller.bind(this);\n  }\n\n  public async componentDidMount() {\n    this.startPolling();\n  }\n\n  public async componentWillUnmount() {\n    this.stopPolling();\n  }\n\n  public render() {\n    return this.props.children();\n  }\n\n  public poller() {\n    this.props.read();\n  }\n\n  public setPoller(func: () => void) {\n    this.poller = func;\n  }\n\n  private startPolling() {\n    this.stopPolling();\n    if (this.props.polling) {\n      this.pollingTimer = setInterval(this.poller, this.props.polling) as any;\n    }\n  }\n\n  private stopPolling() {\n    if (this.pollingTimer) {\n      clearInterval(this.pollingTimer);\n      this.pollingTimer = undefined;\n    }\n  }\n}\n","import * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithPolling } from './WithPolling';\n\nexport interface IWithEnvironmentsRenderProps extends IFetchState<string[]> {\n  read(): Promise<void>;\n}\n\nexport interface IWithEnvironmentsProps {\n  disableUpdates?: boolean;\n  children(props: IWithEnvironmentsRenderProps): any;\n}\n\nexport class WithEnvironments extends React.Component<IWithEnvironmentsProps> {\n  public render() {\n    return (\n      <SyndesisFetch<string[]> url={'/public/environments'} defaultValue={[]}>\n        {({ read, response }) => {\n          if (this.props.disableUpdates) {\n            return this.props.children({ ...response, read });\n          }\n          return (\n            <WithPolling read={read} polling={5000}>\n              {() => this.props.children({ ...response, read })}\n            </WithPolling>\n          );\n        }}\n      </SyndesisFetch>\n    );\n  }\n}\n","import * as React from 'react';\nimport { ApiContext, IApiContext } from './ApiContext';\nimport { callFetch } from './callFetch';\n\n/**\n *\n */\nexport interface IWithEnvironmentHelpersChildrenProps {\n  deleteEnvironment(name: string): Promise<any>;\n  createEnvironment(name: string): Promise<any>;\n  renameEnvironment(name: string, newName: string): Promise<any>;\n}\n\nexport interface IWithEnvironmentHelpersProps {\n  children(props: IWithEnvironmentHelpersChildrenProps): any;\n}\n\nexport class WithEnvironmentHelpersWrapped extends React.Component<\n  IWithEnvironmentHelpersProps & IApiContext\n> {\n  constructor(props: IWithEnvironmentHelpersProps & IApiContext) {\n    super(props);\n    this.createEnvironment = this.createEnvironment.bind(this);\n    this.deleteEnvironment = this.deleteEnvironment.bind(this);\n    this.renameEnvironment = this.renameEnvironment.bind(this);\n  }\n\n  public async createEnvironment(name: string) {\n    const response = await callFetch({\n      body: name,\n      headers: this.props.headers,\n      method: 'PUT' /* @todo this won't actually work */,\n      stringifyBody: false,\n      url: `${this.props.apiUri}/public/environments/${name}`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return await response.body;\n  }\n\n  public async deleteEnvironment(name: string) {\n    const response = await callFetch({\n      headers: this.props.headers,\n      method: 'DELETE',\n      url: `${this.props.apiUri}/public/environments/${name}`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return await response.body;\n  }\n\n  public async renameEnvironment(name: string, newName: string) {\n    const response = await callFetch({\n      body: newName,\n      headers: this.props.headers,\n      method: 'PUT',\n      stringifyBody: false,\n      url: `${this.props.apiUri}/public/environments/${name}`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return await response.body;\n  }\n\n  public render() {\n    return this.props.children({\n      createEnvironment: this.createEnvironment,\n      deleteEnvironment: this.deleteEnvironment,\n      renameEnvironment: this.renameEnvironment,\n    });\n  }\n}\n\nexport const WithEnvironmentHelpers: React.FunctionComponent<\n  IWithEnvironmentHelpersProps\n> = props => (\n  <ApiContext.Consumer>\n    {apiContext => <WithEnvironmentHelpersWrapped {...props} {...apiContext} />}\n  </ApiContext.Consumer>\n);\n","import { Extension } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { SyndesisFetch } from './SyndesisFetch';\n\nexport interface IWithExtensionProps {\n  extensionId: string;\n  initialValue?: Extension;\n  children(props: IFetchState<Extension>): any;\n}\n\n/**\n * A component that fetches the extension with the specified identifier.\n * @see [extensionId]{@link IWithExtensionProps#extensionId}\n */\nexport class WithExtension extends React.Component<IWithExtensionProps> {\n  public render() {\n    return (\n      <SyndesisFetch<Extension>\n        url={`/extensions/${this.props.extensionId}`}\n        defaultValue={{\n          actions: [],\n          extensionType: 'Steps',\n          name: '',\n          schemaVersion: '',\n        }}\n        initialValue={this.props.initialValue}\n      >\n        {({ response }) => this.props.children(response)}\n      </SyndesisFetch>\n    );\n  }\n}\n","import { Extension } from '@syndesis/models';\nimport * as React from 'react';\nimport { ApiContext, IApiContext } from './ApiContext';\nimport { callFetch } from './callFetch';\n\nexport interface IWithExtensionHelpersChildrenProps {\n  deleteExtension(extensionId: string): Promise<void>;\n  importExtension(extensionId: string): Promise<void>;\n  uploadExtension(file: File, extensionId?: string): Promise<Extension>;\n}\n\nexport interface IWithExtensionHelpersProps {\n  children(props: IWithExtensionHelpersChildrenProps): any;\n}\n\nexport class WithExtensionHelpersWrapped extends React.Component<\n  IWithExtensionHelpersProps & IApiContext\n> {\n  constructor(props: IWithExtensionHelpersProps & IApiContext) {\n    super(props);\n    this.deleteExtension = this.deleteExtension.bind(this);\n    this.importExtension = this.importExtension.bind(this);\n    this.uploadExtension = this.uploadExtension.bind(this);\n  }\n\n  /**\n   * Deletes the extension with the specified identifier.\n   * @param extensionId the ID of the extension being deleted\n   */\n  public async deleteExtension(extensionId: string): Promise<void> {\n    const response = await callFetch({\n      headers: this.props.headers,\n      method: 'DELETE',\n      url: `${this.props.apiUri}/extensions/${extensionId}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Imports the extension with the specified identifier.\n   * @param extensionId the ID of the extension being imported\n   */\n  public async importExtension(extensionId: string): Promise<void> {\n    const response = await callFetch({\n      headers: this.props.headers,\n      method: 'POST',\n      url: `${this.props.apiUri}/extensions/${extensionId}/install`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Updates the extension with the specified identifier or creates a new extension if there is no identifier.\n   * @param extensionId the ID of the extension being uploaded\n   */\n  public async uploadExtension(\n    file: File,\n    extensionId?: string\n  ): Promise<Extension> {\n    const data = new FormData();\n    data.append('file', file, file.name);\n\n    const url = `${this.props.apiUri}/extensions`;\n\n    const response = await callFetch({\n      body: data,\n      contentType: 'multipart/form-data',\n      headers: this.props.headers,\n      includeAccept: false,\n      includeContentType: false,\n      includeReferrerPolicy: false,\n      method: 'POST',\n      url: extensionId ? `${url}?updatedId=${extensionId}` : url,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return (await response.json()) as Extension;\n  }\n\n  public render() {\n    return this.props.children({\n      deleteExtension: this.deleteExtension,\n      importExtension: this.importExtension,\n      uploadExtension: this.uploadExtension,\n    });\n  }\n}\n\nexport const WithExtensionHelpers: React.FunctionComponent<\n  IWithExtensionHelpersProps\n> = props => (\n  <ApiContext.Consumer>\n    {apiContext => <WithExtensionHelpersWrapped {...props} {...apiContext} />}\n  </ApiContext.Consumer>\n);\n","import { IntegrationOverview } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IWithExtensionIntegrationsProps {\n  extensionId: string;\n  disableUpdates?: boolean;\n  children(props: IFetchState<IntegrationOverview[]>): any;\n}\n\n/**\n * A component that fetches the integrations that a specified extension is used by.\n * @see [extensionId]{@link IWithExtensionIntegrationsProps#extensionId}\n */\nexport class WithExtensionIntegrations extends React.Component<\n  IWithExtensionIntegrationsProps\n> {\n  public changeFilter(change: IChangeEvent) {\n    return (\n      // rerun fetch if there was a change in integrations\n      change.kind === 'integration' || change.kind === 'integration-deployment'\n    );\n  }\n\n  public render() {\n    return (\n      <SyndesisFetch<IntegrationOverview[]>\n        url={`/extensions/${this.props.extensionId}/integrations`}\n        defaultValue={[]}\n      >\n        {({ read, response }) =>\n          this.props.disableUpdates ? (\n            this.props.children(response)\n          ) : (\n            <ServerEventsContext.Consumer>\n              {({ registerChangeListener, unregisterChangeListener }) => (\n                <WithChangeListener\n                  read={read}\n                  registerChangeListener={registerChangeListener}\n                  unregisterChangeListener={unregisterChangeListener}\n                  filter={this.changeFilter}\n                >\n                  {() => this.props.children(response)}\n                </WithChangeListener>\n              )}\n            </ServerEventsContext.Consumer>\n          )\n        }\n      </SyndesisFetch>\n    );\n  }\n}\n","import { Extension } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IExtensionsResponse {\n  items: Extension[];\n  totalCount: number;\n}\n\nexport interface IWithExtensionsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IExtensionsResponse>): any;\n}\n\n/**\n * A component that fetches all the extensions.\n */\nexport class WithExtensions extends React.Component<IWithExtensionsProps> {\n  public changeFilter(change: IChangeEvent) {\n    return change.kind === 'extension';\n  }\n\n  public render() {\n    return (\n      <SyndesisFetch<IExtensionsResponse>\n        url={'/extensions'}\n        defaultValue={{ items: [], totalCount: 0 }}\n      >\n        {({ read, response }) =>\n          this.props.disableUpdates ? (\n            this.props.children(response)\n          ) : (\n            <ServerEventsContext.Consumer>\n              {({ registerChangeListener, unregisterChangeListener }) => (\n                <WithChangeListener\n                  read={read}\n                  registerChangeListener={registerChangeListener}\n                  unregisterChangeListener={unregisterChangeListener}\n                  filter={this.changeFilter}\n                >\n                  {() => this.props.children(response)}\n                </WithChangeListener>\n              )}\n            </ServerEventsContext.Consumer>\n          )\n        }\n      </SyndesisFetch>\n    );\n  }\n}\n","import { IIntegrationOverviewWithDraft } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { SyndesisFetch } from './SyndesisFetch';\n\nexport interface IWithIntegrationProps {\n  integrationId: string;\n  initialValue?: IIntegrationOverviewWithDraft;\n  children(props: IFetchState<IIntegrationOverviewWithDraft>): any;\n}\n\n/**\n * A component that fetches the integration with the specified identifier.\n * @see [integrationId]{@link IWithIntegrationProps#integrationId}\n */\nexport class WithIntegration extends React.Component<IWithIntegrationProps> {\n  public render() {\n    return (\n      <SyndesisFetch<IIntegrationOverviewWithDraft>\n        url={`/integrations/${this.props.integrationId}`}\n        defaultValue={{\n          isDraft: true,\n          name: '',\n        }}\n        initialValue={this.props.initialValue}\n      >\n        {({ response }) => this.props.children(response)}\n      </SyndesisFetch>\n    );\n  }\n}\n","import { IntegrationOverview } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IIntegrationsResponse {\n  items: IntegrationOverview[];\n  totalCount: number;\n}\n\nexport interface IWithIntegrationsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IIntegrationsResponse>): any;\n}\n\nexport class WithIntegrations extends React.Component<IWithIntegrationsProps> {\n  public changeFilter(change: IChangeEvent) {\n    return (\n      change.kind === 'integration' || change.kind === 'integration-deployment'\n    );\n  }\n\n  public render() {\n    return (\n      <SyndesisFetch<IIntegrationsResponse>\n        url={'/integrations'}\n        defaultValue={{ items: [], totalCount: 0 }}\n      >\n        {({ read, response }) =>\n          this.props.disableUpdates ? (\n            this.props.children(response)\n          ) : (\n            <ServerEventsContext.Consumer>\n              {({ registerChangeListener, unregisterChangeListener }) => (\n                <WithChangeListener\n                  read={read}\n                  registerChangeListener={registerChangeListener}\n                  unregisterChangeListener={unregisterChangeListener}\n                  filter={this.changeFilter}\n                >\n                  {() => this.props.children(response)}\n                </WithChangeListener>\n              )}\n            </ServerEventsContext.Consumer>\n          )\n        }\n      </SyndesisFetch>\n    );\n  }\n}\n","import * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { SyndesisFetch } from './SyndesisFetch';\n\nexport interface IWithIntegrationTagsProps {\n  integrationId: string;\n  initialValue?: Map<string, any>;\n  children(props: IFetchState<Map<string, any>>): any;\n}\n\nexport class WithIntegrationTags extends React.Component<\n  IWithIntegrationTagsProps\n> {\n  public render() {\n    return (\n      <SyndesisFetch<Map<string, any>>\n        url={`/public/integrations/${this.props.integrationId}/tags`}\n        defaultValue={{} as Map<string, any>}\n        initialValue={this.props.initialValue}\n      >\n        {({ response }) => this.props.children(response)}\n      </SyndesisFetch>\n    );\n  }\n}\n","import {\n  Integration,\n  IntegrationMonitoring,\n  IntegrationWithMonitoring,\n} from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IIntegrationsResponse, WithIntegrations } from './WithIntegrations';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IMonitoredIntegrationsResponse {\n  items: IntegrationWithMonitoring[];\n  totalCount: number;\n}\n\nexport interface IWithMonitoredIntegrationsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IMonitoredIntegrationsResponse>): any;\n}\n\nexport class WithMonitoredIntegrations extends React.Component<\n  IWithMonitoredIntegrationsProps\n> {\n  public changeFilter(change: IChangeEvent) {\n    return (\n      change.kind === 'integration-deployment' ||\n      change.kind === 'integration-deployment-state-details'\n    );\n  }\n  public getMonitoredIntegrations(\n    integrations: IIntegrationsResponse,\n    response: IFetchState<IntegrationMonitoring[]>\n  ) {\n    return {\n      items: integrations.items.map(\n        (i: Integration): IntegrationWithMonitoring => ({\n          integration: i,\n          monitoring: response.data.find(\n            (o: IntegrationMonitoring) => o.integrationId === i.id\n          ),\n        })\n      ),\n      totalCount: integrations.totalCount,\n    } as IMonitoredIntegrationsResponse;\n  }\n  public render() {\n    return (\n      <WithIntegrations disableUpdates={this.props.disableUpdates}>\n        {({ data: integrations, ...props }) => (\n          <SyndesisFetch<IntegrationMonitoring[]>\n            url={'/monitoring/integrations'}\n            defaultValue={[]}\n          >\n            {({ read, response }) => {\n              if (this.props.disableUpdates) {\n                const data = this.getMonitoredIntegrations(\n                  integrations,\n                  response\n                );\n                return this.props.children({ ...props, data });\n              }\n              return (\n                <ServerEventsContext.Consumer>\n                  {({ registerChangeListener, unregisterChangeListener }) => (\n                    <WithChangeListener\n                      read={read}\n                      registerChangeListener={registerChangeListener}\n                      unregisterChangeListener={unregisterChangeListener}\n                      filter={this.changeFilter}\n                    >\n                      {() => {\n                        const data = this.getMonitoredIntegrations(\n                          integrations,\n                          response\n                        );\n                        return this.props.children({ ...props, data });\n                      }}\n                    </WithChangeListener>\n                  )}\n                </ServerEventsContext.Consumer>\n              );\n            }}\n          </SyndesisFetch>\n        )}\n      </WithIntegrations>\n    );\n  }\n}\n","import { IntegrationMetricsSummary } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithPolling } from './WithPolling';\n\nexport interface IWithIntegrationsMetricsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IntegrationMetricsSummary>): any;\n}\n\nexport class WithIntegrationsMetrics extends React.Component<\n  IWithIntegrationsMetricsProps\n> {\n  public render() {\n    return (\n      <SyndesisFetch<IntegrationMetricsSummary>\n        url={'/metrics/integrations'}\n        defaultValue={{\n          errors: 0, // int64\n          id: '-1',\n          integrationDeploymentMetrics: [],\n          lastProcessed: `${Date.now()}`, // date-time\n          messages: 0, // int64\n          metricsProvider: 'null',\n          start: `${Date.now()}`, // date-time\n          topIntegrations: {},\n        }}\n      >\n        {({ read, response }) => {\n          if (this.props.disableUpdates) {\n            return this.props.children(response);\n          }\n          return (\n            <WithPolling read={read} polling={5000}>\n              {() => this.props.children(response)}\n            </WithPolling>\n          );\n        }}\n      </SyndesisFetch>\n    );\n  }\n}\n","import { ConnectionOverview } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport function getConnectionsForDisplay(connections: ConnectionOverview[]) {\n  return connections.filter(\n    c => !c.metadata || !c.metadata['hide-from-connection-pages']\n  );\n}\n\nexport function getConnectionsWithFromAction(\n  connections: ConnectionOverview[]\n) {\n  return connections.filter(connection => {\n    if (!connection.connector) {\n      // safety net\n      return true;\n    }\n    return connection.connector.actions.some(action => {\n      return action.pattern === 'From';\n    });\n  });\n}\n\nexport function getConnectionsWithToAction(connections: ConnectionOverview[]) {\n  return connections.filter(connection => {\n    if (!connection.connector) {\n      // safety net\n      return true;\n    }\n    if (connection.connectorId === 'api-provider') {\n      // api provider can be used only for From actions\n      return false;\n    }\n    return connection.connector.actions.some(action => {\n      return action.pattern === 'To';\n    });\n  });\n}\n\nexport interface IConnectionsFetchResponse {\n  readonly items: ConnectionOverview[];\n  readonly totalCount: number;\n}\n\nexport interface IConnectionsResponse {\n  readonly connectionsForDisplay: ConnectionOverview[];\n  readonly connectionsWithToAction: ConnectionOverview[];\n  readonly connectionsWithFromAction: ConnectionOverview[];\n  readonly dangerouslyUnfilteredConnections: ConnectionOverview[];\n  readonly totalCount: number;\n}\n\nexport interface IWithConnectionsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IConnectionsResponse>): any;\n}\n\nexport function transformResponse(\n  response: IFetchState<IConnectionsFetchResponse>\n): IFetchState<IConnectionsResponse> {\n  return {\n    ...response,\n    data: {\n      connectionsForDisplay: getConnectionsForDisplay(response.data.items),\n      connectionsWithFromAction: getConnectionsWithFromAction(\n        response.data.items\n      ),\n      connectionsWithToAction: getConnectionsWithToAction(response.data.items),\n      dangerouslyUnfilteredConnections: response.data.items,\n      totalCount: response.data.totalCount,\n    },\n  };\n}\n\nexport class WithConnections extends React.Component<IWithConnectionsProps> {\n  public changeFilter(change: IChangeEvent) {\n    return change.kind.startsWith('connection');\n  }\n\n  public render() {\n    return (\n      <SyndesisFetch<IConnectionsFetchResponse>\n        url={'/connections'}\n        defaultValue={{\n          items: [],\n          totalCount: 0,\n        }}\n      >\n        {({ read, response }) => {\n          if (this.props.disableUpdates) {\n            return this.props.children(transformResponse(response));\n          }\n          return (\n            <ServerEventsContext.Consumer>\n              {({ registerChangeListener, unregisterChangeListener }) => (\n                <WithChangeListener\n                  read={read}\n                  registerChangeListener={registerChangeListener}\n                  unregisterChangeListener={unregisterChangeListener}\n                  filter={this.changeFilter}\n                >\n                  {() => this.props.children(transformResponse(response))}\n                </WithChangeListener>\n              )}\n            </ServerEventsContext.Consumer>\n          );\n        }}\n      </SyndesisFetch>\n    );\n  }\n}\n","import {\n  Action,\n  ActionDescriptor,\n  ActionDescriptorStep,\n  ConfigurationProperty,\n  ConnectionOverview,\n  Connector,\n  IConnectionWithIconFile,\n} from '@syndesis/models';\n\nexport function getActionsWithFrom(actions: Action[] = []) {\n  return actions.filter(a => a.pattern === 'From');\n}\n\nexport function getActionsWithTo(actions: Action[] = []) {\n  return actions.filter(a => a.pattern === 'To');\n}\n\nexport function getConnectionConnector(\n  connection: ConnectionOverview\n): Connector {\n  if (!connection.connector) {\n    throw Error(`FATAL: Connection ${connection.id} doesn't have a connector`);\n  }\n  return connection.connector;\n}\n\nexport function getConnectorActions(connector: Connector): Action[] {\n  return connector.actions;\n}\n\nexport function getActionById(actions: Action[], actionId: string): Action {\n  const action = actions.find(a => a.id === actionId);\n  if (!action) {\n    throw Error(`FATAL: Action ${actionId} not found`);\n  }\n  return action;\n}\n\nexport function getActionDescriptor(action: Action): ActionDescriptor {\n  if (!action.descriptor) {\n    throw Error(`FATAL: Action ${action.id} doesn't have any descriptor`);\n  }\n  return action.descriptor;\n}\n\nexport function getActionSteps(\n  descriptor: ActionDescriptor\n): ActionDescriptorStep[] {\n  if (!descriptor.propertyDefinitionSteps) {\n    throw Error(`FATAL: Descriptor doesn't have any definition`);\n  }\n  return descriptor.propertyDefinitionSteps;\n}\n\nexport function getActionStep(\n  steps: ActionDescriptorStep[],\n  step: number\n): ActionDescriptorStep {\n  if (step > steps.length - 1) {\n    throw Error(`FATAL: Step ${step} does not exist in the descriptor steps`);\n  }\n  return steps[step];\n}\n\nexport function getActionStepDefinition(\n  step: ActionDescriptorStep\n): {\n  [name: string]: ConfigurationProperty;\n} {\n  if (!step.properties) {\n    throw Error(`FATAL: Step ${step} does not have valid properties`);\n  }\n  return step.properties;\n}\n\nexport function getConnectionIcon(\n  apiUri: string,\n  connection: IConnectionWithIconFile\n) {\n  if (\n    typeof connection.icon === 'undefined' &&\n    typeof connection.iconFile === 'undefined'\n  ) {\n    // The connection has no icon for whatever reason\n    // TODO: sensible default icon\n    return '';\n  }\n  // Connections created from the API client connector can have a custom icon file\n  if (connection.iconFile || connection.icon instanceof File) {\n    const file = connection.iconFile || connection.icon;\n    const tempIconBlobPath = URL.createObjectURL(file);\n    return tempIconBlobPath;\n  }\n  // The connection has an embedded icon\n  if (connection.icon.toLowerCase().startsWith('data:')) {\n    return connection.icon;\n  }\n  // The connection's icon is stored in the DB in some weird way\n  if (\n    connection.icon.toLowerCase().startsWith('db:') ||\n    connection.icon.toLowerCase().startsWith('extension:')\n  ) {\n    return `${apiUri}/connectors/${connection.id}/icon?${connection.icon}`;\n  }\n  // Legacy connections rely on the icon being in the UI's assets\n  return `./../../icons/${connection.icon}.connection.png`;\n}\n","import {\n  Extension,\n  IConnectionWithIconFile,\n  Integration,\n  IntegrationOverview,\n  Step,\n} from '@syndesis/models';\nimport { Connection, ConnectorAction, StepKind } from '@syndesis/models/src';\nimport { key } from '@syndesis/utils';\nimport produce from 'immer';\nimport {\n  ADVANCED_FILTER,\n  AGGREGATE,\n  BASIC_FILTER,\n  DATA_MAPPER,\n  ENDPOINT,\n  HIDE_FROM_STEP_SELECT,\n  SPLIT,\n  TEMPLATE,\n} from '../constants';\nimport { getConnectionIcon } from './connectionFunctions';\n\nexport const NEW_INTEGRATION = {\n  name: '',\n  tags: [],\n} as Integration;\n\n/**\n * returns an empty integration object.\n *\n * @todo make the returned object immutable to avoid uncontrolled changes\n */\nexport function getEmptyIntegration(): Integration {\n  return produce(NEW_INTEGRATION, draft => {\n    draft.flows = [\n      {\n        id: key(),\n        name: '',\n        steps: [],\n      },\n    ];\n  });\n}\n\n/**\n * updates the name of an integration.\n *\n * @param integration\n * @param name\n */\n\nexport function setIntegrationName(\n  integration: Integration,\n  name: string\n): Integration {\n  return produce(integration, nextIntegration => {\n    nextIntegration.name = name;\n  });\n}\n\n/**\n * returns true if the provided integration can be published; returns false\n * otherwise.\n *\n * @param integration\n */\nexport function canPublish(integration: IntegrationOverview) {\n  return integration.currentState !== 'Pending';\n}\n\n/**\n * returns true if the provided integration can be activated; returns false\n * otherwise.\n *\n * @param integration\n */\nexport function canActivate(integration: IntegrationOverview) {\n  return (\n    integration.currentState !== 'Pending' &&\n    integration.currentState !== 'Published'\n  );\n}\n\n/**\n * returns true if the provided integration can be edited; returns false\n * otherwise.\n *\n * @param integration\n */\nexport function canEdit(integration: IntegrationOverview) {\n  return integration.currentState !== 'Pending';\n}\n\n/**\n * returns true if the provided integration can be deactivated; returns false\n * otherwise.\n *\n * @param integration\n */\nexport function canDeactivate(integration: IntegrationOverview) {\n  return integration.currentState !== 'Unpublished';\n}\n\n/**\n * returns the list of steps of the provided integration.\n *\n * @param integration\n * @param flowId\n *\n * @todo make the returned object immutable to avoid uncontrolled changes\n */\nexport function getSteps(integration: Integration, flowId: string): Step[] {\n  try {\n    const flow = getFlow(integration, flowId);\n    return flow!.steps!;\n  } catch (e) {\n    return [];\n  }\n}\n\n/**\n * returns a specific step of the provided integration.\n *\n * @param integration\n * @param flowId\n * @param step\n *\n * @todo make the returned object immutable to avoid uncontrolled changes\n */\n\nexport function getStep(\n  integration: Integration,\n  flowId: string,\n  step: number\n): Step {\n  try {\n    const flow = getFlow(integration, flowId);\n    return flow!.steps![step];\n  } catch (e) {\n    throw new Error(\n      `Can't find a step ${step} for flow ${flowId} in integration ${\n        integration.id\n      }`\n    );\n  }\n}\n\n/**\n * Returns the start icon representing the provided integration\n * @param integration\n */\nexport function getStartIcon(apiUri: string, integration: Integration) {\n  const flow = integration.flows![0];\n  return getStepIcon(apiUri, integration, flow.id!, 0);\n}\n\n/**\n * Returns the ending icon representing the provided integration\n * @param integration\n */\nexport function getFinishIcon(apiUri: string, integration: Integration) {\n  const flow = integration.flows![0];\n  return getStepIcon(apiUri, integration, flow.id!, flow.steps!.length - 1);\n}\n\nexport function getExtensionIcon(extension: Extension) {\n  return extension.icon || ''; // TODO: a default icon?\n}\n\nexport function getStepKindIcon(stepKind: Step['stepKind']) {\n  return `/icons/steps/${stepKind}.svg`;\n}\n\n/**\n * Returns the icon for the supplied step index of the supplied flow index\n * @param apiUri\n * @param integration\n * @param flowId\n * @param stepIndex\n */\nexport function getStepIcon(\n  apiUri: string,\n  integration: Integration,\n  flowId: string,\n  stepIndex: number\n): string {\n  const step = getStep(integration, flowId, stepIndex);\n  // The step is a connection\n  if (step.connection) {\n    const connection = step.connection as IConnectionWithIconFile;\n    return getConnectionIcon(apiUri, connection);\n  }\n  // The step is an extension\n  if (step.extension) {\n    return getExtensionIcon(step.extension);\n  }\n  // It's just a step\n  return getStepKindIcon(step.stepKind);\n}\n\n/**\n * Returns the flow object with the given ID\n * @param integration\n * @param flowId\n */\nexport function getFlow(integration: Integration, flowId: string) {\n  // TODO some code relies on these semantics\n  if (!integration || !integration.flows || !flowId) {\n    return undefined;\n  }\n  return integration.flows.find(flow => flow.id === flowId);\n}\n\n/**\n * Returns the last index of the step array of the given flow or undefined if it hasn't been created\n * @param integration\n * @param flowId\n */\nexport function getLastPosition(integration: Integration, flowId: string) {\n  if (!flowId) {\n    return undefined;\n  }\n  const flow = getFlow(integration, flowId);\n  if (!flow) {\n    return undefined;\n  }\n  // TODO preserve this block for now\n  if (!flow.steps) {\n    return undefined;\n  }\n  if (flow.steps.length <= 1) {\n    return 1;\n  }\n  return flow.steps.length - 1;\n}\n\n/**\n * Filters connections based on the supplied position in the step array\n * @param steps\n * @param position\n */\nexport function filterStepsByPosition(\n  integration: Integration,\n  flowId: string,\n  steps: StepKind[],\n  position: number\n) {\n  if (typeof position === 'undefined' || !steps) {\n    // safety net\n    return steps;\n  }\n  const atStart = position === 0;\n  const atEnd = getLastPosition(integration, flowId) === position;\n  return steps.filter(step => {\n    // Hide steps that are marked as such, and specifically the log connection\n    if (\n      (typeof step.connection !== 'undefined' &&\n        typeof step.connection.metadata !== 'undefined' &&\n        step.connection.metadata[HIDE_FROM_STEP_SELECT]) ||\n      (typeof step.metadata !== 'undefined' &&\n        step.metadata[HIDE_FROM_STEP_SELECT]) ||\n      (step as Connection).connectorId === 'log'\n    ) {\n      return false;\n    }\n    // Special handling for the beginning of a flow\n    if (atStart) {\n      // At the moment only endpoints can be at the start\n      if (step.stepKind) {\n        return false;\n      }\n      if ((step as Connection).connector) {\n        return (step as Connection).connector!.actions.some(\n          (action: ConnectorAction) => {\n            return action.pattern === 'From';\n          }\n        );\n      }\n      // it's not a connection\n      return true;\n    }\n    // Special handling for the end of a flow\n    if (atEnd) {\n      // Several step kinds aren't usable at the end of a flow\n      switch ((step as Step).stepKind) {\n        case DATA_MAPPER:\n        case BASIC_FILTER:\n        case ADVANCED_FILTER:\n        case SPLIT:\n        case AGGREGATE:\n        case TEMPLATE:\n          return false;\n        default:\n      }\n    }\n    if ((step as Connection).connectorId === 'api-provider') {\n      // api provider can be used only for From actions\n      return false;\n    }\n    // All non-connection steps can be shown, except the above\n    if (step.stepKind !== ENDPOINT) {\n      return true;\n    }\n    // Only show connections that have at least one action that accepts data\n    if ((step as Connection).connector) {\n      return (step as Connection).connector!.actions.some(\n        (action: ConnectorAction) => {\n          return action.pattern === 'To';\n        }\n      );\n    }\n    return true;\n  });\n}\n\n/**\n * Filters connections based on the supplied position in the step array and their\n * visibility status\n * @param steps\n * @param position\n */\nexport function visibleStepsByPosition(\n  integration: Integration,\n  flowId: string,\n  steps: StepKind[],\n  position: number\n) {\n  const previousSteps = getPreviousSteps(integration, flowId, position);\n  const subsequentSteps = getSubsequentSteps(integration, flowId, position);\n  return filterStepsByPosition(integration, flowId, steps, position).filter(s =>\n    s.visible\n      ? typeof s.visible === 'function'\n        ? s.visible(position, previousSteps, subsequentSteps)\n        : s.visible\n      : true\n  );\n}\n\n/**\n * Get an array of steps from the flow before the given position\n * @param integration\n * @param flowId\n * @param position\n */\nexport function getPreviousSteps(\n  integration: Integration,\n  flowId: string,\n  position: number\n) {\n  const flow = getFlow(integration, flowId);\n  if (!flow || !flow.steps) {\n    // TODO following semantics for now, this should throw an error\n    return [];\n  }\n  return flow.steps.slice(0, position);\n}\n\n/**\n * Get an array of steps from the flow after the given position\n * @param integration\n * @param flowId\n * @param position\n */\nexport function getSubsequentSteps(\n  integration: Integration,\n  flowId: string,\n  position: number\n) {\n  const flow = getFlow(integration, flowId);\n  if (!flow || !flow.steps) {\n    // TODO following semantics for now, this should throw an error\n    return [];\n  }\n  return flow.steps.slice(position + 1);\n}\n","import { Action, ConnectionOverview } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { getActionsWithFrom, getActionsWithTo } from './helpers';\nimport { SyndesisFetch } from './SyndesisFetch';\n\nexport interface IConnectionOverviewExtended extends ConnectionOverview {\n  readonly actionsWithFrom: Action[];\n  readonly actionsWithTo: Action[];\n}\n\nexport interface IWithConnectionProps {\n  id: string;\n  initialValue?: ConnectionOverview;\n  children(props: IFetchState<IConnectionOverviewExtended>): any;\n}\n\nexport class WithConnection extends React.Component<IWithConnectionProps> {\n  public render() {\n    return (\n      <SyndesisFetch<ConnectionOverview>\n        url={`/connections/${this.props.id}`}\n        defaultValue={{\n          name: '',\n        }}\n        initialValue={this.props.initialValue}\n      >\n        {({ response }) =>\n          this.props.children({\n            ...response,\n            data: {\n              ...response.data,\n              actionsWithFrom: getActionsWithFrom(\n                response.data.connector ? response.data.connector.actions : []\n              ),\n              actionsWithTo: getActionsWithTo(\n                response.data.connector ? response.data.connector.actions : []\n              ),\n            },\n          })\n        }\n      </SyndesisFetch>\n    );\n  }\n}\n","import { Connection, Connector } from '@syndesis/models';\nimport produce from 'immer';\nimport * as React from 'react';\nimport { ApiContext, IApiContext } from './ApiContext';\nimport { callFetch } from './callFetch';\n\nexport interface IConfigurationValidationViolation {\n  code: string;\n  description: string;\n  parameters: string[];\n  attributes: { [key: string]: string };\n}\n\nexport interface IConfigurationValidation {\n  status: 'OK' | 'ERROR';\n  scope: 'PARAMETERS' | 'CONNECTIVITY';\n  errors?: IConfigurationValidationViolation[];\n}\n\nexport interface IValidationResult {\n  isError: boolean;\n  error?: string;\n  message?: string;\n  property?: string;\n}\n\nexport interface IWithConnectionHelpersChildrenProps {\n  /**\n   * asynchronously saves the provided connection, returning the saved\n   * connection in case of success.\n   *\n   * @param connection\n   *\n   * @todo make the returned object immutable to avoid uncontrolled changes\n   */\n  validateConfiguration(\n    connectionId: string,\n    values: { [key: string]: string }\n  ): Promise<IConfigurationValidation[]>;\n  /**\n   * create a new Connection object starting from a Connector.\n   *\n   * @param connector\n   * @param name\n   * @param description\n   */\n  createConnection(\n    connector: Connector,\n    name: string,\n    description: string,\n    configuredProperties: { [key: string]: string }\n  ): Connection;\n  /**\n   * asynchronously saves the provided connection, returning the saved\n   * connection in case of success.\n   *\n   * @param connection\n   *\n   * @todo make the returned object immutable to avoid uncontrolled changes\n   */\n  saveConnection(connection: Connection): Promise<Connection>;\n  /**\n   * create a new Connection object starting from an existing Connection.\n   *\n   * @param connection\n   * @param name\n   * @param description\n   * @param configuredProperties\n   */\n  updateConnection(\n    connection: Connection,\n    name?: string,\n    description?: string,\n    configuredProperties?: { [key: string]: string }\n  ): Connection;\n  /**\n   * asynchronously deletes the provided connection.\n   *\n   * @param connectionId the connection ID\n   */\n  deleteConnection(connectionId: string): Promise<void>;\n  /**\n   *  Asynchronously validates the proposed connection name.\n   *\n   * @param connection the connection whose name is being changed\n   * @param proposedName the name being validated\n   * @returns a validation result\n   */\n  validateName(\n    connection: Connection,\n    proposedName: string\n  ): Promise<IValidationResult>;\n}\n\nexport interface IWithConnectionHelpersProps {\n  children(props: IWithConnectionHelpersChildrenProps): any;\n}\n\nexport class WithConnectionHelpersWrapped extends React.Component<\n  IWithConnectionHelpersProps & IApiContext\n> {\n  constructor(props: IWithConnectionHelpersProps & IApiContext) {\n    super(props);\n    this.createConnection = this.createConnection.bind(this);\n    this.deleteConnection = this.deleteConnection.bind(this);\n    this.updateConnection = this.updateConnection.bind(this);\n    this.validateConfiguration = this.validateConfiguration.bind(this);\n    this.saveConnection = this.saveConnection.bind(this);\n    this.validateName = this.validateName.bind(this);\n  }\n\n  public createConnection(\n    connector: Connector,\n    name: string,\n    description: string,\n    configuredProperties: { [key: string]: string }\n  ): Connection {\n    const connection = {} as Connection;\n    return produce(connection, draft => {\n      connection.name = name;\n      connection.description = description;\n      connection.configuredProperties = configuredProperties;\n      connection.connector = connector;\n      connection.connectorId = connector.id;\n      connection.icon = connector.icon;\n    });\n  }\n\n  public async deleteConnection(connectionId: string): Promise<void> {\n    const response = await callFetch({\n      headers: this.props.headers,\n      method: 'DELETE',\n      url: `${this.props.apiUri}/connections/${connectionId}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  public updateConnection(\n    connection: Connection,\n    name?: string,\n    description?: string,\n    configuredProperties?: { [key: string]: string }\n  ): Connection {\n    return produce(connection, draft => {\n      connection.name = name || connection.name;\n      // allow empty descriptions\n      connection.description =\n        description === undefined ? connection.description : description;\n      connection.configuredProperties =\n        configuredProperties || connection.configuredProperties;\n    });\n  }\n\n  public async validateConfiguration(\n    connectorId: string,\n    values: { [key: string]: string }\n  ): Promise<IConfigurationValidation[]> {\n    const response = await callFetch({\n      body: values,\n      headers: this.props.headers,\n      method: 'POST',\n      url: `${this.props.apiUri}/connectors/${connectorId}/verifier`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return (await response.json()) as IConfigurationValidation[];\n  }\n\n  public async saveConnection(connection: Connection): Promise<Connection> {\n    const response = await callFetch({\n      body: connection,\n      headers: this.props.headers,\n      method: connection.id ? 'PUT' : 'POST',\n      url: connection.id\n        ? `${this.props.apiUri}/connections/${connection.id}`\n        : `${this.props.apiUri}/connections`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return !connection.id\n      ? ((await response.json()) as Connection)\n      : Promise.resolve(connection);\n  }\n\n  public async validateName(\n    connection: Connection,\n    proposedName: string\n  ): Promise<IValidationResult> {\n    // short circuit if name has not changed\n    if (connection.name === proposedName) {\n      return {\n        isError: false,\n      };\n    }\n\n    const testConn = { name: proposedName };\n    const response = await callFetch({\n      body: testConn,\n      headers: this.props.headers,\n      method: 'POST',\n      url: `${this.props.apiUri}/connections/validation`,\n    });\n\n    if (response.ok) {\n      return {\n        isError: false,\n      };\n    }\n\n    // return the first error\n    const result = await response.json();\n    return {\n      isError: true,\n      ...result[0],\n    };\n  }\n\n  public render() {\n    return this.props.children({\n      createConnection: this.createConnection,\n      deleteConnection: this.deleteConnection,\n      saveConnection: this.saveConnection,\n      updateConnection: this.updateConnection,\n      validateConfiguration: this.validateConfiguration,\n      validateName: this.validateName,\n    });\n  }\n}\n\n/**\n * This component provides provides through a render propr a number of helper\n * functions useful when working with a connection.\n *\n * Methods that modify a connection return a immutable copy of the original\n * object, to reduce the risk of bugs.\n *\n * @see [saveConnection]{@link IWithConnectionHelpersChildrenProps#saveConnection}\n */\nexport const WithConnectionHelpers: React.FunctionComponent<\n  IWithConnectionHelpersProps\n> = props => (\n  <ApiContext.Consumer>\n    {apiContext => <WithConnectionHelpersWrapped {...props} {...apiContext} />}\n  </ApiContext.Consumer>\n);\n","import { Connector } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { SyndesisFetch } from './SyndesisFetch';\n\nexport interface IWithConnectorProps {\n  id: string;\n  initialValue?: Connector;\n  children(props: IFetchState<Connector>): any;\n}\n\nexport class WithConnector extends React.Component<IWithConnectorProps> {\n  public render() {\n    return (\n      <SyndesisFetch<Connector>\n        url={`/connectors/${this.props.id}`}\n        defaultValue={{\n          actions: [],\n          name: '',\n        }}\n        initialValue={this.props.initialValue}\n      >\n        {({ response }) => this.props.children(response)}\n      </SyndesisFetch>\n    );\n  }\n}\n","import { Connector } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IConnectorsFetchResponse {\n  readonly items: Connector[];\n  readonly totalCount: number;\n}\n\nexport interface IConnectorsResponse {\n  readonly connectorsForDisplay: Connector[];\n  readonly dangerouslyUnfilteredConnections: Connector[];\n  readonly totalCount: number;\n}\n\nexport interface IWithConnectorsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IConnectorsResponse>): any;\n}\n\nexport function getConnectorsForDisplay(connectors: Connector[]) {\n  return connectors.filter(\n    c => !c.metadata || !c.metadata['hide-from-connection-pages']\n  );\n}\n\nexport function transformConnectorsResponse(\n  response: IFetchState<IConnectorsFetchResponse>\n): IFetchState<IConnectorsResponse> {\n  return {\n    ...response,\n    data: {\n      connectorsForDisplay: getConnectorsForDisplay(response.data.items),\n      dangerouslyUnfilteredConnections: response.data.items,\n      totalCount: response.data.totalCount,\n    },\n  };\n}\n\nexport class WithConnectors extends React.Component<IWithConnectorsProps> {\n  public changeFilter(change: IChangeEvent) {\n    return change.kind.startsWith('connector');\n  }\n  public render() {\n    return (\n      <SyndesisFetch<IConnectorsFetchResponse>\n        url={'/connectors'}\n        defaultValue={{\n          items: [],\n          totalCount: 0,\n        }}\n      >\n        {({ read, response }) => {\n          if (this.props.disableUpdates) {\n            return this.props.children(transformConnectorsResponse(response));\n          }\n          return (\n            <ServerEventsContext.Consumer>\n              {({ registerChangeListener, unregisterChangeListener }) => (\n                <WithChangeListener\n                  read={read}\n                  registerChangeListener={registerChangeListener}\n                  unregisterChangeListener={unregisterChangeListener}\n                  filter={this.changeFilter}\n                >\n                  {() =>\n                    this.props.children(transformConnectorsResponse(response))\n                  }\n                </WithChangeListener>\n              )}\n            </ServerEventsContext.Consumer>\n          );\n        }}\n      </SyndesisFetch>\n    );\n  }\n}\n","/* tslint:disable:object-literal-sort-keys */\nimport { Step, StepKind } from '@syndesis/models';\nimport {\n  ADVANCED_FILTER,\n  AGGREGATE,\n  BASIC_FILTER,\n  DATA_MAPPER,\n  DataShapeKinds,\n  LOG,\n  SPLIT,\n  TEMPLATE,\n} from './constants';\n\nconst ALL_STEPS: StepKind[] = [\n  requiresInputOutputDataShapes(\n    {\n      id: undefined,\n      connection: undefined,\n      action: undefined,\n      name: 'Data Mapper',\n      description: 'Map fields from the input type to the output type.',\n      stepKind: DATA_MAPPER,\n      properties: {},\n      configuredProperties: undefined,\n    },\n    true,\n    false\n  ),\n  requiresOutputDataShape(\n    {\n      id: undefined,\n      connection: undefined,\n      action: undefined,\n      name: 'Basic Filter',\n      description:\n        'Continue the integration only if criteria you specify in simple input fields are met. Suitable for' +\n        ' most integrations.',\n      stepKind: BASIC_FILTER,\n      properties: undefined,\n      configuredProperties: undefined,\n    },\n    true\n  ),\n  requiresOutputDataShape({\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Template',\n    stepKind: TEMPLATE,\n    description:\n      'Upload or create a Freemarker, Mustache or Velocity template to define consistent output data.',\n    configuredProperties: undefined,\n    properties: undefined,\n  }),\n  noCollectionSupport({\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Advanced Filter',\n    description:\n      'Continue the integration only if criteria you define in scripting language expressions are met.',\n    stepKind: ADVANCED_FILTER,\n    properties: {\n      filter: {\n        type: 'textarea',\n        displayName: 'Only continue if',\n        placeholder: `Examples of Simple Language filter expressions:\n$\\{in.header.type\\} == 'widget' // Evaluates true when type = widget\n$\\{in.body.title\\} // Evaluates true when body contains title.\n`,\n        required: true,\n        rows: 10,\n      },\n    },\n    configuredProperties: undefined,\n  }),\n  {\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Log',\n    stepKind: LOG,\n    description: \"Send a message to the integration's log.\",\n    configuredProperties: undefined,\n    properties: {\n      contextLoggingEnabled: {\n        type: 'boolean',\n        displayName: 'Message Context',\n        required: false,\n      },\n      bodyLoggingEnabled: {\n        type: 'boolean',\n        displayName: 'Message Body',\n        required: false,\n      },\n      customText: {\n        type: 'string',\n        displayName: 'Custom Text',\n        required: false,\n      },\n      /*\n      loggingLevel: {\n        type: 'select',\n        displayName: 'Level',\n        value: 'INFO',\n        required: true,\n        enum: [\n          { value: 'INFO', label: 'INFO' },\n          { value: 'WARN', label: 'WARN' },\n          { value: 'ERROR', label: 'ERROR'},\n          {value: 'DEBUG', label: 'DEBUG'},\n          {value: 'TRACE', label: 'TRACE'}],\n      },\n      */\n    },\n  },\n  requiresOutputDataShape({\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Split',\n    description: 'Process each item in a set of data individually',\n    stepKind: SPLIT,\n    properties: {},\n    configuredProperties: undefined,\n  }),\n  requiresConsistentSplitAggregate({\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Aggregate',\n    description: 'End processing items in a foreach',\n    stepKind: AGGREGATE,\n    properties: {},\n    configuredProperties: undefined,\n  }),\n  /*\n  {\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Store Data',\n    stepKind: STORE_DATA,\n    description:\n      'Store data from an invocation to be used later in the integration',\n    properties: {},\n    configuredProperties: undefined,\n  },\n  {\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Set Data',\n    stepKind: SET_DATA,\n    description: 'Enrich data used within an integration',\n    properties: {},\n    configuredProperties: undefined,\n  },\n  {\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Call Route',\n    stepKind: CALL_ROUTE,\n    description:\n      'Call a child integration route from the main integration flow',\n    properties: {},\n    configuredProperties: undefined,\n  },\n  {\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Conditional Processing',\n    stepKind: CONDITIONAL_PROCESSING,\n    description: 'Add conditions and multiple paths for processing data',\n    properties: {},\n    configuredProperties: undefined,\n  }\n  */\n];\n\nfunction stepsHaveOutputDataShape(steps: Step[]): boolean {\n  return (\n    steps.filter(\n      s =>\n        s &&\n        s.action &&\n        s.action.descriptor &&\n        s.action.descriptor.outputDataShape &&\n        s.action.descriptor.outputDataShape.kind &&\n        s.action.descriptor.outputDataShape.kind.toLowerCase() !==\n          DataShapeKinds.NONE &&\n        s.action.descriptor.outputDataShape.kind.toLowerCase() !==\n          DataShapeKinds.ANY\n    ).length > 0\n  );\n}\n\nfunction stepsHaveInputDataShape(steps: Step[]): boolean {\n  return (\n    steps.filter(\n      s =>\n        s &&\n        s.action &&\n        s.action.descriptor &&\n        s.action.descriptor.inputDataShape &&\n        s.action.descriptor.inputDataShape.kind &&\n        s.action.descriptor.inputDataShape.kind.toLowerCase() !==\n          DataShapeKinds.NONE &&\n        s.action.descriptor.inputDataShape.kind.toLowerCase() !==\n          DataShapeKinds.ANY\n    ).length > 0\n  );\n}\n\nfunction requiresInputOutputDataShapes(\n  obj: StepKind,\n  anyPrevious = true,\n  anySubsequent = true\n): StepKind {\n  obj.visible = (\n    position: number,\n    previousSteps: Step[],\n    subsequentSteps: Step[]\n  ) => {\n    if (!anyPrevious) {\n      // only test the first previous step that has some kind of data shape\n      const previousStep = previousSteps\n        .reverse()\n        .find(s => dataShapeExists(s));\n      previousSteps = previousStep ? [previousStep] : [];\n    }\n    if (!anySubsequent) {\n      // only test the next subsequent step that has a data shape\n      const subsequentStep = previousSteps.find(s => dataShapeExists(s, true));\n      subsequentSteps = subsequentStep ? [subsequentStep] : [];\n    }\n    return (\n      stepsHaveOutputDataShape(previousSteps) &&\n      stepsHaveInputDataShape(subsequentSteps)\n    );\n  };\n  return obj;\n}\n\nfunction dataShapeExists(step: Step, input = false): boolean {\n  if (input) {\n    return !!(\n      step &&\n      step.action &&\n      step.action.descriptor &&\n      step.action.descriptor.inputDataShape\n    );\n  } else {\n    return !!(\n      step &&\n      step.action &&\n      step.action.descriptor &&\n      step.action.descriptor.outputDataShape\n    );\n  }\n}\n\nfunction hasPrecedingCollection(previousSteps: Step[]) {\n  const previousDataShape = previousSteps\n    .reverse()\n    .find(s => dataShapeExists(s));\n  return (\n    previousDataShape &&\n    previousDataShape.action &&\n    previousDataShape.action.descriptor &&\n    previousDataShape.action.descriptor.outputDataShape &&\n    previousDataShape.action.descriptor.outputDataShape.metadata &&\n    previousDataShape.action.descriptor.outputDataShape.metadata.variant ===\n      'collection'\n  );\n}\n\nfunction noCollectionSupport(obj: StepKind) {\n  obj.visible = (\n    position: number,\n    previousSteps: Step[],\n    subsequentSteps: Step[]\n  ) => {\n    return !hasPrecedingCollection(previousSteps);\n  };\n  return obj;\n}\n\nfunction requiresOutputDataShape(\n  obj: StepKind,\n  noCollectionSupportP = false\n): StepKind {\n  if (noCollectionSupportP) {\n    obj.visible = (\n      position: number,\n      previousSteps: Step[],\n      subsequentSteps: Step[]\n    ) => {\n      return (\n        stepsHaveOutputDataShape(previousSteps) &&\n        !hasPrecedingCollection(previousSteps)\n      );\n    };\n  } else {\n    obj.visible = (\n      position: number,\n      previousSteps: Step[],\n      subsequentSteps: Step[]\n    ) => {\n      return stepsHaveOutputDataShape(previousSteps);\n    };\n  }\n  return obj;\n}\n\nfunction requiresConsistentSplitAggregate(obj: StepKind): StepKind {\n  obj.visible = (\n    position: number,\n    previousSteps: Step[],\n    subsequentSteps: Step[]\n  ) => {\n    const countPreviousSplit = previousSteps.filter(s => s.stepKind === SPLIT)\n      .length;\n    const countPreviousAggregate = previousSteps.filter(\n      s => (s.stepKind || '').toLowerCase() === AGGREGATE\n    ).length;\n\n    if (countPreviousSplit <= countPreviousAggregate) {\n      return false;\n    }\n\n    const positionNextSplit = subsequentSteps.findIndex(\n      s => s.stepKind === SPLIT\n    );\n    const positionNextAggregate = subsequentSteps.findIndex(\n      s => s.stepKind === AGGREGATE\n    );\n\n    if (positionNextSplit === -1) {\n      return positionNextAggregate === -1;\n    }\n\n    return (\n      positionNextAggregate === -1 || positionNextSplit < positionNextAggregate\n    );\n  };\n  return obj;\n}\n\nexport interface IStepsResponse {\n  items: StepKind[];\n}\n\nexport interface IWithStepsProps {\n  disableUpdates?: boolean;\n  children(props: IStepsResponse): any;\n}\n\nexport const WithSteps: React.FunctionComponent<IWithStepsProps> = ({\n  children,\n}) => {\n  return children({\n    items: ALL_STEPS,\n  });\n};\n","import * as React from 'react';\nimport { callFetch, IFetchHeaders } from './callFetch';\n\nexport interface IChangeEvent {\n  action: string;\n  kind: string;\n  id: string;\n}\n\nexport interface IMessageEvent {\n  id: string;\n  data: string;\n  event: string;\n}\n\nexport interface IWithEventsProps {\n  apiUri: string;\n  headers: IFetchHeaders;\n  children(props: IWithEventsState): any;\n}\n\nexport interface IWithEventsState {\n  registerChangeListener: (listener: (event: IChangeEvent) => void) => void;\n  registerMessageListener: (listener: (event: IMessageEvent) => void) => void;\n  unregisterChangeListener: (listener: (event: IChangeEvent) => void) => void;\n  unregisterMessageListener: (listener: (event: IMessageEvent) => void) => void;\n}\n\nconst RECONNECT_TIME = 5000;\n\nexport class WithServerEvents extends React.Component<\n  IWithEventsProps,\n  IWithEventsState\n> {\n  private starting = false;\n  private started = false;\n  private unmounting = false;\n  private retries = 0;\n  private preferredProtocol: string = '';\n  private eventSource: EventSource | undefined;\n  private webSocket: WebSocket | undefined;\n  private changeListeners: Array<(event: IChangeEvent) => void>;\n  private messageListeners: Array<(event: IMessageEvent) => void>;\n\n  public constructor(props: IWithEventsProps) {\n    super(props);\n    this.changeListeners = [];\n    this.messageListeners = [];\n    this.registerChangeListener = this.registerChangeListener.bind(this);\n    this.registerMessageListener = this.registerMessageListener.bind(this);\n    this.unregisterChangeListener = this.unregisterChangeListener.bind(this);\n    this.unregisterMessageListener = this.unregisterMessageListener.bind(this);\n  }\n\n  public registerChangeListener(listener: (event: IChangeEvent) => void) {\n    this.changeListeners = [...this.changeListeners, listener];\n  }\n\n  public registerMessageListener(listener: (event: IMessageEvent) => void) {\n    this.messageListeners = [...this.messageListeners, listener];\n  }\n\n  public unregisterChangeListener(listener: (event: IChangeEvent) => void) {\n    this.changeListeners = this.changeListeners.filter(l => l !== listener);\n  }\n\n  public unregisterMessageListener(listener: (event: IMessageEvent) => void) {\n    this.messageListeners = this.messageListeners.filter(l => l !== listener);\n  }\n\n  public async componentDidMount() {\n    this.start();\n  }\n\n  public async componentWillUnmount() {\n    this.unmounting = true;\n    this.close();\n    this.changeListeners = [];\n    this.messageListeners = [];\n  }\n\n  public render() {\n    return this.props.children({\n      registerChangeListener: this.registerChangeListener,\n      registerMessageListener: this.registerMessageListener,\n      unregisterChangeListener: this.unregisterChangeListener,\n      unregisterMessageListener: this.unregisterMessageListener,\n    });\n  }\n\n  private close() {\n    this.started = false;\n    this.starting = false;\n    if (this.webSocket) {\n      this.webSocket.close();\n      this.webSocket = undefined;\n    }\n    if (this.eventSource) {\n      this.eventSource.close();\n      this.eventSource = undefined;\n    }\n  }\n\n  private start() {\n    this.startConnection(this.retries % 2 === 0);\n  }\n\n  private onFailure(error: any) {\n    this.close();\n    if (this.unmounting) {\n      return;\n    }\n    this.retries++;\n    // Initialy retry very quickly.\n    let reconnectIn = RECONNECT_TIME;\n    if (this.retries < 3) {\n      reconnectIn = 1;\n    }\n    setTimeout(() => {\n      // console.log('Reconnecting');\n      switch (this.preferredProtocol) {\n        // Once we find a protocol that works, keep using it.\n        case 'ws':\n          this.startConnection(true);\n          break;\n        case 'es':\n          this.startConnection(false);\n          break;\n        default:\n          // Keep flipping between WS and ES untill we find one that works.\n          this.startConnection(this.retries % 2 === 0);\n          break;\n      }\n    }, reconnectIn);\n  }\n\n  private async startConnection(connectUsingWebSockets: boolean) {\n    if (this.starting || this.started || this.unmounting) {\n      return;\n    }\n    this.starting = true;\n    try {\n      const response = await callFetch({\n        body: '',\n        headers: this.props.headers,\n        method: 'POST',\n        url: `${this.props.apiUri}/event/reservations`,\n      });\n      let reservation = await response.json();\n      reservation = reservation.data;\n      if (connectUsingWebSockets) {\n        let wsApiEndpoint = this.props.apiUri.replace(/^http/, 'ws');\n        wsApiEndpoint += '/event/streams.ws/' + reservation;\n        // console.log('Connecting using web socket');\n        this.starting = false;\n        this.started = true;\n        this.connectWebSocket(wsApiEndpoint);\n      } else {\n        this.starting = false;\n        this.started = true;\n        // console.log('Connecting using server side events');\n        this.connectEventSource(\n          this.props.apiUri + '/event/streams/' + reservation\n        );\n      }\n    } catch (error) {\n      this.onFailure(error);\n      throw error;\n    }\n  }\n\n  private postMessageEvent(messageEvent: IMessageEvent) {\n    this.messageListeners.forEach(listener => {\n      listener(messageEvent);\n    });\n  }\n\n  private postChangeEvent(changeEvent: IChangeEvent) {\n    this.changeListeners.forEach(listener => {\n      listener(changeEvent);\n    });\n  }\n\n  private connectEventSource(url: string) {\n    this.eventSource = new EventSource(url);\n    this.eventSource.addEventListener('message', (event: any) => {\n      this.started = true;\n      this.starting = false;\n      this.preferredProtocol = 'es';\n      // console.log('sse.message: ', event.data);\n      this.postMessageEvent(event);\n    });\n    this.eventSource.addEventListener('change-event', (event: any) => {\n      this.started = true;\n      const value = JSON.parse(event.data) as IChangeEvent;\n      // console.log('sse.change-event: ', value);\n      this.postChangeEvent(value);\n    });\n    const onError = (event: any) => {\n      // console.log('sse.close: ', event);\n      this.onFailure(event);\n    };\n    this.eventSource.addEventListener('close', onError);\n    this.eventSource.addEventListener('error', onError);\n    return this.eventSource;\n  }\n\n  private connectWebSocket(url: string) {\n    this.webSocket = new WebSocket(url);\n    this.webSocket.onmessage = event => {\n      this.started = true;\n      this.starting = false;\n      const messageEvent = JSON.parse(event.data) as IMessageEvent;\n      switch (messageEvent.event) {\n        case 'message':\n          this.preferredProtocol = 'ws';\n          // console.log('ws.message: ', messageEvent.data);\n          this.postMessageEvent(messageEvent);\n          break;\n        case 'change-event':\n          const value = JSON.parse(messageEvent.data) as IChangeEvent;\n          // console.log('ws.change-event: ', value);\n          this.postChangeEvent(value);\n          break;\n        default:\n        // I guess we don't care what happens here...\n        // console.log('ws.unknown-message: ', event);\n      }\n    };\n    this.webSocket.onclose = event => {\n      // console.log('ws.onclose: ', event);\n      this.onFailure(event);\n    };\n    return this.webSocket;\n  }\n}\n","import { RestViewDefinition } from '@syndesis/models';\nimport * as React from 'react';\nimport { DVFetch } from './DVFetch';\nimport { IFetchState } from './Fetch';\n\nexport interface IWithViewProps {\n  vdbId: string;\n  initialValue?: RestViewDefinition[];\n  children(props: IFetchState<RestViewDefinition[]>): any;\n}\n\n/**\n * A component that fetches the specified VDB views.\n * @see [vdbId]{@link IWithViewProps#vdbId}\n */\nexport class WithViews extends React.Component<IWithViewProps> {\n  public render() {\n    return (\n      <DVFetch<RestViewDefinition[]>\n        url={`workspace/vdbs/${this.props.vdbId}/Models/views/Views`}\n        defaultValue={[]}\n        initialValue={this.props.initialValue}\n      >\n        {({ read, response }) => this.props.children(response)}\n      </DVFetch>\n    );\n  }\n}\n","import { ViewEditorState } from '@syndesis/models';\nimport * as React from 'react';\nimport { DVFetch } from './DVFetch';\nimport { IFetchState } from './Fetch';\n\nexport interface IWithViewEditorStatesRenderProps\n  extends IFetchState<ViewEditorState[]> {\n  read(): Promise<void>;\n}\n\nexport interface IWithViewEditorStatesProps {\n  idPattern?: string;\n  children(props: IWithViewEditorStatesRenderProps): any;\n}\n\nexport class WithViewEditorStates extends React.Component<\n  IWithViewEditorStatesProps\n> {\n  public render() {\n    return (\n      <DVFetch<ViewEditorState[]>\n        url={\n          'service/userProfile/viewEditorState' +\n          (this.props.idPattern ? '?pattern=' + this.props.idPattern : '')\n        }\n        defaultValue={[]}\n      >\n        {({ read, response }) => this.props.children({ ...response, read })}\n      </DVFetch>\n    );\n  }\n}\n","import {\n  QueryResults,\n  RestDataService,\n  ViewEditorState,\n} from '@syndesis/models';\nimport * as React from 'react';\nimport { ApiContext, IApiContext } from './ApiContext';\nimport { callFetch } from './callFetch';\n\nconst WORKSPACE_ROOT = '/tko:komodo/tko:workspace/';\n\nexport interface IWithVirtualizationHelpersChildrenProps {\n  createVirtualization(\n    virtualizationName: string,\n    virtualizationDescription?: string\n  ): Promise<RestDataService>;\n  deleteView(virtualization: RestDataService, viewName: string): Promise<void>;\n  deleteViewEditorState(viewEditorStateId: string): Promise<void>;\n  deleteVirtualization(virtualizationName: string): Promise<void>;\n  publishVirtualization(virtualizationName: string): Promise<void>;\n  queryVirtualization(\n    virtualizationName: string,\n    query: string,\n    limit: number,\n    offset: number\n  ): Promise<QueryResults>;\n  refreshVirtualizationViews(\n    virtualizationName: string,\n    viewEditorStates: ViewEditorState[]\n  ): Promise<void>;\n  unpublishServiceVdb(vdbName: string): Promise<void>;\n  updateViewEditorStates(viewEditorStates: ViewEditorState[]): Promise<void>;\n}\n\nexport interface IWithVirtualizationHelpersProps {\n  username: string;\n  children(props: IWithVirtualizationHelpersChildrenProps): any;\n}\n\nexport class WithVirtualizationHelpersWrapped extends React.Component<\n  IWithVirtualizationHelpersProps & IApiContext\n> {\n  constructor(props: IWithVirtualizationHelpersProps & IApiContext) {\n    super(props);\n    this.createVirtualization = this.createVirtualization.bind(this);\n    this.updateViewEditorStates = this.updateViewEditorStates.bind(this);\n    this.deleteView = this.deleteView.bind(this);\n    this.deleteViewEditorState = this.deleteViewEditorState.bind(this);\n    this.deleteVirtualization = this.deleteVirtualization.bind(this);\n    this.publishVirtualization = this.publishVirtualization.bind(this);\n    this.queryVirtualization = this.queryVirtualization.bind(this);\n    this.refreshVirtualizationViews = this.refreshVirtualizationViews.bind(\n      this\n    );\n    this.unpublishServiceVdb = this.unpublishServiceVdb.bind(this);\n  }\n\n  /**\n   * Creates a virtualization with the specified name and description\n   * @param virtName the name of the virtualization to create\n   * @param virtDesc the description (optional) of the virtualization to create\n   */\n  public async createVirtualization(\n    virtName: string,\n    virtDesc?: string\n  ): Promise<RestDataService> {\n    const newVirtualization = {\n      keng__dataPath: `${WORKSPACE_ROOT}${this.props.username}/${virtName}`,\n      keng__id: `${virtName}`,\n      serviceVdbName: `${virtName}`.toLowerCase() + 'vdb',\n      tko__description: virtDesc ? `${virtDesc}` : '',\n    } as RestDataService;\n\n    const response = await callFetch({\n      body: newVirtualization,\n      headers: {},\n      method: 'POST',\n      url: `${this.props.dvApiUri}workspace/dataservices/${virtName}`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve(newVirtualization);\n  }\n\n  /**\n   * Deletes the specified virtualization view.\n   * @param virtualization the virtualization\n   * @param viewName the name of the view being deleted\n   */\n  public async deleteView(\n    virtualization: RestDataService,\n    viewName: string\n  ): Promise<void> {\n    const vdbName = virtualization.serviceVdbName;\n    const editorStateId = vdbName + '.' + viewName;\n    // Delete viewEditorState\n    await this.deleteViewEditorState(editorStateId);\n    // Delete virtualization view\n    const response = await callFetch({\n      headers: {},\n      method: 'DELETE',\n      url: `${\n        this.props.dvApiUri\n      }workspace/vdbs/${vdbName}/Models/views/Views/${viewName}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Deletes the virtualization with the specified name.\n   * @param virtualizationName the name of the virtualization being deleted\n   */\n  public async deleteVirtualization(virtualizationName: string): Promise<void> {\n    const response = await callFetch({\n      headers: {},\n      method: 'DELETE',\n      url: `${this.props.dvApiUri}workspace/dataservices/${virtualizationName}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Publish the virtualization with the specified name.\n   * @param virtualizationName the name of the virtualization being published\n   */\n  public async publishVirtualization(\n    virtualizationName: string\n  ): Promise<void> {\n    const pubVirtualization = {\n      name: `${virtualizationName}`,\n    };\n\n    const response = await callFetch({\n      body: pubVirtualization,\n      headers: {},\n      method: 'POST',\n      url: `${this.props.dvApiUri}metadata/publish`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Query the Service VDB with sql query and properties.\n   * @param virtualizationName the name of the virtualization associated with the service\n   * @param sqlQuery the sql query statement to execute against the virtualization\n   * @param rowlimit limit to number of rows to return\n   * @param rowOffset number of data rows to filter from the beginning of the result set\n   */\n  public async queryVirtualization(\n    virtualizationName: string,\n    sqlQuery: string,\n    rowlimit: number,\n    rowOffset: number\n  ): Promise<QueryResults> {\n    // The payload for the rest call\n    const queryBody = {\n      limit: rowlimit,\n      offset: rowOffset,\n      query: sqlQuery,\n      target: virtualizationName,\n    };\n\n    const response = await callFetch({\n      body: queryBody,\n      headers: {},\n      method: 'POST',\n      url: `${this.props.dvApiUri}metadata/query`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return (await response.json()) as QueryResults;\n  }\n\n  /**\n   * Unpublish the Service VDB with the specified name.\n   * @param vdbName the name of the vdb associated with the service\n   */\n  public async unpublishServiceVdb(vdbName: string): Promise<void> {\n    const response = await callFetch({\n      headers: {},\n      method: 'DELETE',\n      url: `${this.props.dvApiUri}metadata/publish/${vdbName}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Delete the specified ViewEditorState in the komodo user profile\n   * @param viewEditorState the view editor state\n   */\n  public async deleteViewEditorState(viewEditorStateId: string): Promise<void> {\n    const response = await callFetch({\n      headers: {},\n      method: 'DELETE',\n      url: `${\n        this.props.dvApiUri\n      }service/userProfile/viewEditorState/${viewEditorStateId}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Saves ViewEditorStates in the komodo user profile\n   * @param viewEditorStates the array of view editor states\n   */\n  public async updateViewEditorStates(\n    viewEditorStates: ViewEditorState[]\n  ): Promise<void> {\n    const response = await callFetch({\n      body: viewEditorStates,\n      headers: {},\n      method: 'PUT',\n      url: `${this.props.dvApiUri}service/userProfile/viewEditorStates`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Saves ViewEditorStates in the komodo user profile, then updates the virtualizations\n   * @param viewEditorStates the array of view editor states\n   */\n  public async refreshVirtualizationViews(\n    virtualizationName: string,\n    viewEditorStates: ViewEditorState[]\n  ): Promise<void> {\n    // Updates the view editor states\n    await this.updateViewEditorStates(viewEditorStates);\n    const response = await callFetch({\n      headers: {},\n      method: 'POST',\n      url: `${\n        this.props.dvApiUri\n      }workspace/dataservices/refreshViews/${virtualizationName}`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  public render() {\n    return this.props.children({\n      createVirtualization: this.createVirtualization,\n      deleteView: this.deleteView,\n      deleteViewEditorState: this.deleteViewEditorState,\n      deleteVirtualization: this.deleteVirtualization,\n      publishVirtualization: this.publishVirtualization,\n      queryVirtualization: this.queryVirtualization,\n      refreshVirtualizationViews: this.refreshVirtualizationViews,\n      unpublishServiceVdb: this.unpublishServiceVdb,\n      updateViewEditorStates: this.updateViewEditorStates,\n    });\n  }\n}\n\nexport const WithVirtualizationHelpers: React.FunctionComponent<\n  IWithVirtualizationHelpersProps\n> = props => (\n  <ApiContext.Consumer>\n    {apiContext => (\n      <WithVirtualizationHelpersWrapped {...props} {...apiContext} />\n    )}\n  </ApiContext.Consumer>\n);\n","import { RestDataService } from '@syndesis/models';\nimport * as React from 'react';\nimport { DVFetch } from './DVFetch';\nimport { IFetchState } from './Fetch';\n\nexport interface IWithVirtualizationProps {\n  virtualizationId: string;\n  initialValue?: RestDataService;\n  children(props: IFetchState<RestDataService>): any;\n}\n\n/**\n * A component that fetches the virtualization with the specified identifier.\n * @see [virtualizationId]{@link IWithVirtualizationProps#virtualizationId}\n */\nexport class WithVirtualization extends React.Component<\n  IWithVirtualizationProps\n> {\n  public render() {\n    return (\n      <DVFetch<RestDataService>\n        url={`workspace/dataservices/${this.props.virtualizationId}`}\n        defaultValue={{\n          connections: 0,\n          drivers: 0,\n          keng___links: [],\n          keng__baseUri: '',\n          keng__dataPath: '',\n          keng__hasChildren: false,\n          keng__id: '',\n          keng__kType: '',\n          publishedState: 'NOTFOUND',\n          serviceVdbName: '',\n          serviceVdbVersion: '',\n          serviceViewDefinitions: [],\n          serviceViewModel: '',\n          tko__description: '',\n        }}\n        initialValue={this.props.initialValue}\n      >\n        {({ response }) => this.props.children(response)}\n      </DVFetch>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport * as React from 'react';\nimport { DVFetch } from './DVFetch';\nimport { IFetchState } from './Fetch';\nimport { WithPolling } from './WithPolling';\n\nexport interface IWithVirtualizationsRenderProps\n  extends IFetchState<RestDataService[]> {\n  read(): Promise<void>;\n}\n\nexport interface IWithVirtualizationsProps {\n  children(props: IWithVirtualizationsRenderProps): any;\n}\n\nexport class WithVirtualizations extends React.Component<\n  IWithVirtualizationsProps\n> {\n  public render() {\n    return (\n      <DVFetch<RestDataService[]>\n        url={'workspace/dataservices'}\n        defaultValue={[]}\n      >\n        {({ read, response }) => {\n          return (\n            <WithPolling read={read} polling={5000}>\n              {() => this.props.children({ ...response, read })}\n            </WithPolling>\n          );\n        }}\n      </DVFetch>\n    );\n  }\n}\n","import { VirtualizationSourceStatus } from '@syndesis/models';\nimport * as React from 'react';\nimport { DVFetch } from './DVFetch';\nimport { IFetchState } from './Fetch';\n\nexport interface IWithVirtualizationConnectionStatusesProps {\n  children(props: IFetchState<VirtualizationSourceStatus[]>): any;\n}\n\nexport class WithVirtualizationConnectionStatuses extends React.Component<\n  IWithVirtualizationConnectionStatusesProps\n> {\n  public render() {\n    return (\n      <DVFetch<VirtualizationSourceStatus[]>\n        url={'metadata/syndesisSourceStatuses'}\n        defaultValue={[]}\n      >\n        {({ read, response }) => this.props.children(response)}\n      </DVFetch>\n    );\n  }\n}\n","import { SchemaNode } from '@syndesis/models';\nimport * as React from 'react';\nimport { DVFetch } from './DVFetch';\nimport { IFetchState } from './Fetch';\n\nexport interface IWithVirtualizationConnectionSchemaProps {\n  connectionId: string;\n  children(props: IFetchState<SchemaNode[]>): any;\n}\n\nexport class WithVirtualizationConnectionSchema extends React.Component<\n  IWithVirtualizationConnectionSchemaProps\n> {\n  public render() {\n    return (\n      <DVFetch<SchemaNode[]>\n        url={`metadata/${this.props.connectionId}/schema`}\n        defaultValue={[]}\n      >\n        {({ read, response }) => this.props.children(response)}\n      </DVFetch>\n    );\n  }\n}\n","import { Integration } from '@syndesis/models';\n\nexport const serializeIntegration = (i: Integration) =>\n  btoa(encodeURIComponent(JSON.stringify(i)));\n","import { Integration } from '@syndesis/models';\n\nexport const deserializeIntegration = (i: string) =>\n  JSON.parse(decodeURIComponent(atob(i))) as Integration;\n","/* tslint:disable:object-literal-sort-keys no-empty-interface */\nimport { Connector, Extension } from '@syndesis/models';\nimport { makeResolver, makeResolverNoParams } from '@syndesis/utils';\nimport routes from './routes';\n\nexport default {\n  apiConnectors: {\n    apiConnector: makeResolver<{ apiConnector: Connector }>(\n      routes.apiConnectors.apiConnector,\n      ({ apiConnector }) => ({\n        params: {\n          apiConnectorId: apiConnector.id,\n        },\n        state: {\n          apiConnector,\n        },\n      })\n    ),\n    create: {\n      upload: makeResolverNoParams(routes.apiConnectors.create.upload),\n      review: makeResolverNoParams(routes.apiConnectors.create.review),\n      security: makeResolverNoParams(routes.apiConnectors.create.security),\n      save: makeResolverNoParams(routes.apiConnectors.create.save),\n    },\n    list: makeResolverNoParams(routes.apiConnectors.list),\n  },\n  extensions: {\n    extension: {\n      details: makeResolver<{ extension: Extension }>(\n        routes.extensions.extension.details,\n        ({ extension }) => ({\n          params: {\n            extensionId: extension.id,\n          },\n          state: {\n            extension,\n          },\n        })\n      ),\n      update: makeResolver<{ extension: Extension }>(\n        routes.extensions.extension.update,\n        ({ extension }) => ({\n          params: {\n            extensionId: extension.id,\n          },\n          state: {\n            extension,\n          },\n        })\n      ),\n    },\n    import: makeResolverNoParams(routes.extensions.import),\n    list: makeResolverNoParams(routes.extensions.list),\n  },\n  root: makeResolverNoParams(routes.apiConnectors.list),\n};\n","import {\n  IInitMessagePayload,\n  IMappingsMessagePayload,\n} from '@syndesis/atlasmap-assembly/src/app/app.component';\nimport * as React from 'react';\nimport equal from 'react-fast-compare';\n\n/* tslint:disable */\nconst runtime = require('file-loader?name=atlasmap-runtime.js!@syndesis/atlasmap-assembly/dist/atlasmap/runtime.js');\nconst polyfills = require('file-loader?name=atlasmap-polyfills.js!@syndesis/atlasmap-assembly/dist/atlasmap/polyfills.js');\nconst styles = require('file-loader?name=atlasmap-styles.js!@syndesis/atlasmap-assembly/dist/atlasmap/styles.js');\nconst scripts = require('file-loader?name=atlasmap-scripts.js!@syndesis/atlasmap-assembly/dist/atlasmap/scripts.js');\nconst vendor = require('file-loader?name=atlasmap-vendor.js!@syndesis/atlasmap-assembly/dist/atlasmap/vendor.js');\nconst main = require('file-loader?name=atlasmap-main.js!@syndesis/atlasmap-assembly/dist/atlasmap/main.js');\n/* tslint:enable*/\n\nexport enum DocumentType {\n  JAVA = 'Java',\n  XML = 'XML',\n  XSD = 'XSD',\n  JSON = 'JSON',\n  CORE = 'Core',\n  CSV = 'CSV',\n  CONSTANT = 'Constants',\n  PROPERTY = 'Property',\n}\nexport enum InspectionType {\n  JAVA_CLASS = 'JAVA_CLASS',\n  SCHEMA = 'SCHEMA',\n  INSTANCE = 'INSTANCE',\n  UNKNOWN = 'UNKNOWN',\n}\n\nexport interface IDataMapperAdapterProps extends IInitMessagePayload {\n  onMappings(mappings: string): void;\n}\n\nexport class DataMapperAdapter extends React.Component<\n  IDataMapperAdapterProps\n> {\n  protected messageChannel: MessageChannel;\n  protected messagePort?: MessagePort;\n  protected iframe: HTMLIFrameElement | null = null;\n\n  constructor(props: IDataMapperAdapterProps) {\n    super(props);\n    this.messageChannel = new MessageChannel();\n    this.onIframeLoad = this.onIframeLoad.bind(this);\n    this.onMessages = this.onMessages.bind(this);\n  }\n\n  public componentDidMount() {\n    if (this.iframe) {\n      this.iframe.addEventListener('load', this.onIframeLoad);\n    }\n  }\n\n  public componentWillReceiveProps(nextProps: IDataMapperAdapterProps) {\n    const { onMappings: _, ...prevPayload } = this.props;\n    const { onMappings: __, ...nextPayload } = nextProps;\n    if (!equal(prevPayload, nextPayload)) {\n      this.updateDataMapperApp(nextPayload);\n    }\n  }\n\n  public shouldComponentUpdate() {\n    return false;\n  }\n\n  public componentWillUnmount() {\n    if (this.iframe) {\n      this.iframe.removeEventListener('load', this.onIframeLoad);\n    }\n  }\n\n  public onIframeLoad() {\n    this.messagePort = this.messageChannel.port1;\n    this.messagePort.onmessage = this.onMessages;\n    this.iframe!.contentWindow!.postMessage('init', '*', [\n      this.messageChannel.port2,\n    ]);\n  }\n\n  public onMessages(event: MessageEvent) {\n    switch (event.data.message) {\n      case 'ready': {\n        const { onMappings, ...payload } = this.props;\n        this.updateDataMapperApp(payload);\n        break;\n      }\n      case 'mappings': {\n        const payload: IMappingsMessagePayload = event.data.payload;\n        this.props.onMappings(payload.mappings);\n        break;\n      }\n    }\n  }\n\n  public updateDataMapperApp(props: IInitMessagePayload) {\n    if (this.messagePort) {\n      const message = {\n        message: 'update',\n        payload: {\n          documentId: props.documentId,\n          inputDataShape: props.inputDataShape,\n          inputDescription: props.inputDescription,\n          inputDocumentType: props.inputDocumentType,\n          inputInspectionType: props.inputInspectionType,\n          inputName: props.inputName,\n          mappings: props.mappings,\n          outputDataShape: props.outputDataShape,\n          outputDescription: props.outputDescription,\n          outputDocumentType: props.outputDocumentType,\n          outputInspectionType: props.outputInspectionType,\n          outputName: props.outputName,\n        },\n      };\n      this.messagePort.postMessage(message);\n    }\n  }\n\n  public render() {\n    const srcDoc = `<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Atlasmap</title>\n  <base href=\"/dm\">\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body style=\"background: transparent;\">\n  <app-root></app-root>\n  <script type=\"text/javascript\" src=\"${runtime}\"></script>\n  <script type=\"text/javascript\" src=\"${polyfills}\"></script>\n  <script type=\"text/javascript\" src=\"${styles}\"></script>\n  <script type=\"text/javascript\" src=\"${scripts}\"></script>\n  <script type=\"text/javascript\" src=\"${vendor}\"></script>\n  <script type=\"text/javascript\" src=\"${main}\"></script></body>\n</html>\n\n`;\n    // bypass some odd typing incompatibility with base React when using \"exotic\"\n    // html attributes\n    const extraProps = {\n      allowtransparency: '',\n    };\n    return (\n      <iframe\n        srcDoc={srcDoc}\n        style={{ width: '100%', height: '100%' }}\n        frameBorder={0}\n        {...extraProps}\n        ref={el => (this.iframe = el)}\n      />\n    );\n  }\n}\n","import appEn from '../../app/locales/app-translations.en.json';\nimport appIt from '../../app/locales/app-translations.it.json';\nimport connectionsEn from '../../modules/connections/locales/connections-translations.en.json';\nimport connectionsIt from '../../modules/connections/locales/connections-translations.it.json';\nimport customizationsEn from '../../modules/customizations/locales/customizations-translations.en.json';\nimport customizationsIt from '../../modules/customizations/locales/customizations-translations.it.json';\nimport dashboardEn from '../../modules/dashboard/locales/dashboard-translations.en.json';\nimport dashboardIt from '../../modules/dashboard/locales/dashboard-translations.it.json';\nimport dataEn from '../../modules/data/locales/data-translations.en.json';\nimport dataIt from '../../modules/data/locales/data-translations.it.json';\nimport integrationsEn from '../../modules/integrations/locales/integrations-translations.en.json';\nimport integrationsIt from '../../modules/integrations/locales/integrations-translations.it.json';\nimport en from './shared-translations.en.json';\nimport it from './shared-translations.it.json';\n\n// app\nen.en.app = appEn;\nit.it.app = appIt;\n\n// connections\nen.en.modules.connections = connectionsEn;\nit.it.modules.connections = connectionsIt;\n\n// customizations\nen.en.modules.customizations = customizationsEn;\nit.it.modules.customizations = customizationsIt;\n\n// dashboard\nen.en.modules.dashboard = dashboardEn;\nit.it.modules.dashboard = dashboardIt;\n\n// data\nen.en.modules.data = dataEn;\nit.it.modules.data = dataIt;\n\n// integrations\nen.en.modules.integrations = integrationsEn;\nit.it.modules.integrations = integrationsIt;\n\nexport { en, it };\n","import i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { en, it } from './locales';\n\nconst options = {\n  interpolation: {\n    escapeValue: false, // not needed for react!!\n  },\n\n  debug: false,\n\n  resources: {\n    en: {\n      app: en.en.app,\n      connections: en.en.modules.connections,\n      customizations: en.en.modules.customizations,\n      dashboard: en.en.modules.dashboard,\n      data: en.en.modules.data,\n      integrations: en.en.modules.integrations,\n      shared: en.en.shared,\n    },\n    it: {\n      app: it.it.app,\n      connections: it.it.modules.connections,\n      customizations: it.it.modules.customizations,\n      dashboard: it.it.modules.dashboard,\n      data: it.it.modules.data,\n      integrations: it.it.modules.integrations,\n      shared: it.it.shared,\n    },\n  },\n\n  defaultNS: 'shared',\n  fallbackLng: process.env.NODE_ENV === 'production' ? 'en' : 'it',\n  fallbackNS: ['shared'],\n  keySeparator: '.',\n  ns: ['shared', 'app', 'customizations', 'dashboard', 'integrations'],\n} as i18n.InitOptions;\n\ni18n.use(LanguageDetector).init(options);\nexport default i18n;\n","/* tslint:disable:object-literal-sort-keys no-empty-interface */\nimport { getEmptyIntegration, getStep } from '@syndesis/api';\nimport { ConnectionOverview, Integration } from '@syndesis/models';\nimport {\n  makeResolver,\n  makeResolverNoParams,\n  makeResolverNoParamsWithDefaults,\n} from '@syndesis/utils';\nimport {\n  IBaseRouteParams,\n  IBaseRouteState,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState,\n  ISaveIntegrationRouteParams,\n  ISaveIntegrationRouteState,\n  ISelectActionRouteParams,\n  ISelectActionRouteState,\n  ISelectConnectionRouteParams,\n  ISelectConnectionRouteState,\n} from './components/editor/interfaces';\nimport {\n  IActivityPageParams,\n  IActivityPageState,\n  IIntegrationDetailsRouteParams,\n  IMetricsPageParams,\n  IMetricsPageState,\n} from './pages/detail';\nimport routes from './routes';\n\ninterface IEditorIndex {\n  flowId: string;\n  integration: Integration;\n}\n\ninterface IEditorSelectConnection extends IEditorIndex {\n  position: string;\n}\n\ninterface IEditorSelectAction extends IEditorSelectConnection {\n  connection: ConnectionOverview;\n}\n\ninterface IEditorConfigureAction extends IEditorSelectAction {\n  actionId: string;\n  step?: string;\n  updatedIntegration?: Integration;\n}\n\nexport const configureIndexMapper = ({\n  flowId,\n  integration,\n}: IEditorIndex) => ({\n  params: {\n    flowId: flowId ? flowId : integration.flows![0].id!,\n    ...(integration && integration.id ? { integrationId: integration.id } : {}),\n  } as IBaseRouteParams,\n  state: {\n    integration,\n  } as IBaseRouteState,\n});\n\nexport const configureSelectConnectionMapper = ({\n  position,\n  ...rest\n}: IEditorSelectConnection) => {\n  const { params, state } = configureIndexMapper(rest);\n  return {\n    params: {\n      ...params,\n      position,\n    } as ISelectConnectionRouteParams,\n    state,\n  };\n};\n\nexport const configureSelectActionMapper = ({\n  connection,\n  ...rest\n}: IEditorSelectAction) => {\n  const { params, state } = configureSelectConnectionMapper(rest);\n  return {\n    params: {\n      ...params,\n      connectionId: connection.id!,\n    } as ISelectActionRouteParams,\n    state: {\n      ...state,\n      connection,\n    } as ISelectActionRouteState,\n  };\n};\n\nexport const configureConfigureActionMapper = ({\n  actionId,\n  flowId,\n  step,\n  integration,\n  updatedIntegration,\n  position,\n  ...rest\n}: IEditorConfigureAction) => {\n  const { params, state } = configureSelectActionMapper({\n    ...rest,\n    flowId,\n    integration,\n    position,\n  });\n  const positionAsNumber = parseInt(position, 10);\n  const stepObject = getStep(integration, flowId, positionAsNumber) || {};\n  return {\n    params: {\n      ...params,\n      actionId,\n      step: `${step || 0}`,\n    } as IConfigureActionRouteParams,\n    state: {\n      ...state,\n      updatedIntegration,\n      configuredProperties: stepObject.configuredProperties,\n    } as IConfigureActionRouteState,\n  };\n};\n\n// TODO: unit test every single one of these resolvers 😫\n\nexport const listResolver = makeResolverNoParams(routes.list);\n\nexport const manageCicdResolver = makeResolverNoParams(routes.manageCicd.root);\n\nexport const createRootResolver = makeResolverNoParams(routes.create.root);\n\nexport const createStartSelectStepResolver = makeResolverNoParamsWithDefaults<\n  ISelectConnectionRouteParams,\n  ISelectConnectionRouteState\n>(routes.create.start.selectStep, () => {\n  const integration = getEmptyIntegration();\n  return {\n    params: {\n      flowId: integration.flows![0].id!,\n      position: '0',\n    },\n    state: {\n      integration,\n    },\n  };\n});\n\nexport const createStartSelectActionResolver = makeResolver<\n  IEditorSelectAction,\n  ISelectActionRouteParams,\n  ISelectActionRouteState\n>(routes.create.start.connection.selectAction, configureSelectActionMapper);\n\nexport const createStartConfigureActionResolver = makeResolver<\n  IEditorConfigureAction,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState\n>(\n  routes.create.start.connection.configureAction,\n  configureConfigureActionMapper\n);\n\nexport const createFinishSelectStepResolver = makeResolver<\n  IEditorSelectConnection,\n  ISelectConnectionRouteParams,\n  ISelectConnectionRouteState\n>(routes.create.finish.selectStep, configureSelectConnectionMapper);\n\nexport const createFinishSelectActionResolver = makeResolver<\n  IEditorSelectAction,\n  ISelectActionRouteParams,\n  ISelectActionRouteState\n>(routes.create.finish.connection.selectAction, configureSelectActionMapper);\n\nexport const createFinishConfigureActionResolver = makeResolver<\n  IEditorConfigureAction,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState\n>(\n  routes.create.finish.connection.configureAction,\n  configureConfigureActionMapper\n);\n\nexport const createConfigureIndexResolver = makeResolver<\n  IEditorIndex,\n  IBaseRouteParams,\n  IBaseRouteState\n>(routes.create.configure.index, configureIndexMapper);\n\nexport const createConfigureAddStepSelectStepResolver = makeResolver<\n  IEditorSelectConnection,\n  ISelectConnectionRouteParams,\n  ISelectConnectionRouteState\n>(routes.create.configure.addStep.selectStep, configureSelectConnectionMapper);\n\nexport const createConfigureAddStepSelectActionResolver = makeResolver<\n  IEditorSelectAction,\n  ISelectActionRouteParams,\n  ISelectActionRouteState\n>(\n  routes.create.configure.addStep.connection.selectAction,\n  configureSelectActionMapper\n);\n\nexport const createConfigureAddStepConfigureActionResolver = makeResolver<\n  IEditorConfigureAction,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState\n>(\n  routes.create.configure.addStep.connection.configureAction,\n  configureConfigureActionMapper\n);\n\nexport const createConfigureEditStepSelectActionResolver = makeResolver<\n  IEditorSelectAction,\n  ISelectActionRouteParams,\n  ISelectActionRouteState\n>(\n  routes.create.configure.editStep.connection.selectAction,\n  configureSelectActionMapper\n);\n\nexport const createConfigureEditStepConfigureActionResolver = makeResolver<\n  IEditorConfigureAction,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState\n>(\n  routes.create.configure.editStep.connection.configureAction,\n  configureConfigureActionMapper\n);\n\nexport const createConfigureEditStepSaveAndPublishResolver = makeResolver<\n  { integration: Integration },\n  null,\n  ISaveIntegrationRouteState\n>(routes.create.configure.saveAndPublish, ({ integration }) => ({\n  params: null,\n  state: {\n    integration,\n  },\n}));\n\nexport const integrationActivityResolver = makeResolver<\n  { integration: Integration },\n  IActivityPageParams,\n  IActivityPageState\n>(routes.integration.activity, ({ integration }) => ({\n  params: {\n    integrationId: integration.id!,\n  },\n  state: {\n    integration,\n  },\n}));\n\nexport const integrationDetailsResolver = makeResolver<\n  { integrationId: string },\n  IIntegrationDetailsRouteParams,\n  null\n>(routes.integration.details, ({ integrationId }) => ({\n  params: {\n    integrationId,\n  },\n}));\n\nexport const integrationEditIndexResolver = makeResolver<\n  IEditorIndex,\n  IBaseRouteParams,\n  IBaseRouteState\n>(routes.integration.edit.index, configureIndexMapper);\n\nexport const integrationEditAddStepSelectStepResolver = makeResolver<\n  IEditorSelectConnection,\n  ISelectConnectionRouteParams,\n  ISelectConnectionRouteState\n>(routes.integration.edit.addStep.selectStep, configureSelectConnectionMapper);\n\nexport const integrationEditAddStepSelectActionResolver = makeResolver<\n  IEditorSelectAction,\n  ISelectActionRouteParams,\n  ISelectConnectionRouteState\n>(\n  routes.integration.edit.addStep.connection.selectAction,\n  configureSelectActionMapper\n);\n\nexport const integrationEditAddStepConfigureActionResolver = makeResolver<\n  IEditorConfigureAction,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState\n>(\n  routes.integration.edit.addStep.connection.configureAction,\n  configureConfigureActionMapper\n);\n\nexport const integrationEditEditStepSelectActionResolver = makeResolver<\n  IEditorSelectAction,\n  ISelectActionRouteParams,\n  ISelectActionRouteState\n>(\n  routes.integration.edit.editStep.connection.selectAction,\n  configureSelectActionMapper\n);\n\nexport const integrationEditEditStepConfigureActionResolver = makeResolver<\n  IEditorConfigureAction,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState\n>(\n  routes.integration.edit.editStep.connection.configureAction,\n  configureConfigureActionMapper\n);\n\nexport const integrationEditSaveAndPublish = makeResolver<\n  IEditorIndex,\n  ISaveIntegrationRouteParams,\n  ISaveIntegrationRouteState\n>(routes.integration.edit.saveAndPublish, configureIndexMapper);\n\nexport const metricsResolver = makeResolver<\n  { integration: Integration },\n  IMetricsPageParams,\n  IMetricsPageState\n>(routes.integration.metrics, ({ integration }) => ({\n  params: {\n    integrationId: integration.id!,\n  },\n  state: {\n    integration,\n  },\n}));\n\nexport default {\n  list: listResolver,\n  manageCicd: {\n    root: manageCicdResolver,\n  },\n  create: {\n    root: createRootResolver,\n    start: {\n      selectStep: createStartSelectStepResolver,\n      connection: {\n        selectAction: createStartSelectActionResolver,\n        configureAction: createStartConfigureActionResolver,\n      },\n    },\n    finish: {\n      selectStep: createFinishSelectStepResolver,\n      connection: {\n        selectAction: createFinishSelectActionResolver,\n        configureAction: createFinishConfigureActionResolver,\n      },\n    },\n    configure: {\n      index: createConfigureIndexResolver,\n      addStep: {\n        selectStep: createConfigureAddStepSelectStepResolver,\n        connection: {\n          selectAction: createConfigureAddStepSelectActionResolver,\n          configureAction: createConfigureAddStepConfigureActionResolver,\n        },\n      },\n      editStep: {\n        index: 'todo',\n        connection: {\n          selectAction: createConfigureEditStepSelectActionResolver,\n          configureAction: createConfigureEditStepConfigureActionResolver,\n        },\n      },\n      saveAndPublish: createConfigureEditStepSaveAndPublishResolver,\n    },\n  },\n  integration: {\n    activity: integrationActivityResolver,\n    details: integrationDetailsResolver,\n    edit: {\n      index: integrationEditIndexResolver,\n      addStep: {\n        selectStep: integrationEditAddStepSelectStepResolver,\n        connection: {\n          selectAction: integrationEditAddStepSelectActionResolver,\n          configureAction: integrationEditAddStepConfigureActionResolver,\n        },\n      },\n      editStep: {\n        index: 'todo',\n        connection: {\n          selectAction: integrationEditEditStepSelectActionResolver,\n          configureAction: integrationEditEditStepConfigureActionResolver,\n        },\n      },\n      saveAndPublish: integrationEditSaveAndPublish,\n    },\n    metrics: metricsResolver,\n  },\n};\n","import { UnrecoverableError } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\n\nexport interface IApiErrorProps {\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\nexport const ApiError: React.SFC<IApiErrorProps> = props => (\n  <Translation ns={['shared']}>\n    {t => (\n      <UnrecoverableError\n        i18nTitle={t('error.title')}\n        i18nInfo={'error.info'}\n        i18nHelp={'error.help'}\n        i18nRefreshLabel={'error.refreshButton'}\n        i18nReportIssue={'error.reportIssueButton'}\n        error={props.error}\n        errorInfo={props.errorInfo}\n      />\n    )}\n  </Translation>\n);\n","import { Loader, UnrecoverableError } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { LoadingComponentProps } from 'react-loadable';\n\nexport class ModuleLoader extends React.Component<LoadingComponentProps> {\n  public render() {\n    if (this.props.error || this.props.timedOut) {\n      console.error(this.props.error); // tslint:disable-line\n      return (\n        <Translation ns={['shared']}>\n          {t => (\n            <UnrecoverableError\n              i18nTitle={t('error.title')}\n              i18nInfo={t('error.info')}\n              i18nHelp={t('error.help')}\n              i18nRefreshLabel={t('error.refreshButton')}\n              i18nReportIssue={t('shared:error.reportIssueButton')}\n              i18nShowErrorInfoLabel={t('error.showErrorInfoButton')}\n              error={this.props.error}\n            />\n          )}\n        </Translation>\n      );\n    } else if (this.props.pastDelay) {\n      return <Loader />;\n    }\n    return null;\n  }\n}\n","import { UnrecoverableError } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\n\nexport const PageNotFound: React.FC = () => (\n  <Translation ns={['shared']}>\n    {t => (\n      <UnrecoverableError\n        i18nTitle={t('404.title')}\n        i18nInfo={t('404.info')}\n        i18nHelp={t('404.help')}\n        i18nRefreshLabel={t('404.refreshButton')}\n        i18nReportIssue={t('404.reportIssueButton')}\n      />\n    )}\n  </Translation>\n);\n","import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { AppContext } from '../app';\n\nexport interface IPageTitleProps {\n  /**\n   * The page title. Don't append or prepend the application name, the right one\n   * will be added automatically.\n   */\n  title: string;\n}\n\n/**\n * A component to set the title in the document metadata. This title will be\n * visible in the browser's title bar, tab and history.\n * @see [title]{@link IPageTitleProps#title}\n */\nexport class PageTitle extends React.PureComponent<IPageTitleProps> {\n  public render() {\n    return (\n      <AppContext.Consumer>\n        {({ config }) => (\n          <Helmet>\n            <title>{`${this.props.title} - ${config.title ||\n              'Syndesis'}`}</title>\n          </Helmet>\n        )}\n      </AppContext.Consumer>\n    );\n  }\n}\n","import * as React from 'react';\nimport { AppContext } from '../app';\n\n/**\n * This component will automatically close the app left navigation bar when\n * mounted in the DOM, and will reopen it when unmounted.\n *\n * If you need this behaviour for a whole section, keep this component high in\n * the DOM tree, ideally before any component that will re-render on his\n * lifecycle - like data fetching components - to avoid firing quick unmount/mount\n * events that will lead to a bad UX.\n */\nexport const WithClosedNavigation: React.FunctionComponent = ({ children }) => {\n  const context = React.useContext(AppContext);\n  React.useEffect(() => {\n    context.hideNavigation();\n\n    return () => {\n      context.showNavigation();\n    };\n  }, []);\n  return <>{children}</>;\n};\n","import { UnrecoverableError } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\n\nexport interface IWithErrorBoundaryState {\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n  errorComponent?: React.ReactElement<{\n    error: Error;\n    errorInfo: React.ErrorInfo;\n  }>;\n}\n\nexport class WithErrorBoundary extends React.Component<\n  any,\n  IWithErrorBoundaryState\n> {\n  public state: IWithErrorBoundaryState = {};\n\n  public componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n    this.setState({\n      error,\n      errorInfo,\n    });\n  }\n\n  public componentWillReceiveProps(\n    nextProps: Readonly<any>,\n    nextContext: any\n  ): void {\n    this.setState({\n      error: undefined,\n      errorInfo: undefined,\n    });\n  }\n\n  public render() {\n    return this.state.error && this.state.errorInfo ? (\n      this.props.errorComponent ? (\n        React.createElement(this.props.errorComponent, {\n          error: this.state.error,\n          errorInfo: this.state.errorInfo,\n        })\n      ) : (\n        <Translation ns={['shared']}>\n          {t => (\n            <UnrecoverableError\n              i18nTitle={t('error.title')}\n              i18nInfo={t('error.info')}\n              i18nHelp={t('error.help')}\n              i18nRefreshLabel={t('error.refreshButton')}\n              i18nReportIssue={t('shared:error.reportIssueButton')}\n              i18nShowErrorInfoLabel={t('error.showErrorInfoButton')}\n              error={this.state.error}\n              errorInfo={this.state.errorInfo}\n            />\n          )}\n        </Translation>\n      )\n    ) : (\n      this.props.children\n    );\n  }\n}\n","export * from './ApiError';\nexport * from './ModuleLoader';\nexport * from './PageNotFound';\nexport * from './PageTitle';\nexport * from './WithClosedNavigation';\nexport * from './WithErrorBoundary';\n","/* tslint:disable:object-literal-sort-keys */\nimport { include } from 'named-urls';\n\nconst stepRoutes = {\n  // step 1\n  selectStep: '',\n  // if selected step is api provider\n  apiProvider: include('api-provider', {\n    specification: 'specification',\n    review: 'review',\n    edit: 'edit',\n    save: 'save',\n  }),\n  // if selected step kind is data mapper\n  dataMapper: 'mapper',\n  // if selected step kind is basic filter\n  basicFilter: 'filter',\n  // if selected step kind is template\n  template: 'template',\n  // if selected step kind is step\n  step: 'step',\n  // if selected step kind is endpoint\n  connection: include('connection/:connectionId', {\n    selectAction: 'action',\n    configureAction: 'action/:actionId/step/:step',\n    // if 'any' data shape\n    describeData: 'describe-data/:position/:direction(input|output)',\n  }),\n};\n\n/**\n * Both the integration creator and editor share the same routes when the creator\n * reaches the third step in the wizard. This object is to keep them DRY.\n */\nconst editorRoutes = include('flow/:flowId', {\n  index: 'add-step',\n  addStep: include('position/:position/connection', stepRoutes),\n  editStep: include('position/:position/edit-connection', stepRoutes),\n  saveAndPublish: 'save',\n  root: '',\n});\n\nexport default include('/integrations', {\n  list: '',\n  manageCicd: include('manageCicd', { root: '' }),\n  import: include('import', { root: '' }),\n  create: include('create', {\n    start: include('start/flow/:flowId/position/:position', stepRoutes),\n    finish: include('finish/flow/:flowId/position/:position', stepRoutes),\n    configure: include('configure', editorRoutes),\n    root: '',\n  }),\n  integration: include(':integrationId', {\n    details: 'details',\n    activity: 'activity',\n    metrics: 'metrics',\n    edit: include('edit', editorRoutes),\n    root: '',\n  }),\n});\n","import { Step } from '@syndesis/models';\nimport {\n  ButtonLink,\n  IntegrationEditorStepsList,\n  IntegrationEditorStepsListItem,\n  IntegrationFlowAddStep,\n} from '@syndesis/ui';\nimport * as H from 'history';\nimport * as React from 'react';\n\nexport interface IIntegrationEditorStepAdderProps {\n  /**\n   * the list of steps to render.\n   */\n  steps: Step[];\n  /**\n   * a callback to get the `LocationDescriptor` that should be reached when\n   * clicking the Add Connection button\n   * @param idx - the zero-based index where a new connection should be added\n   */\n  addStepHref: (idx: number) => H.LocationDescriptor;\n  /**\n   * a callback to get the `LocationDescriptor` that should be reached when\n   * clicking the Edit Step button\n   * @param stepIdx - the zero-based index of the integration step that should\n   * be edited\n   * @param step - the integration step object that should be edited\n   */\n  // tslint:disable-next-line:react-unused-props-and-state\n  configureStepHref: (stepIdx: number, step: Step) => H.LocationDescriptor;\n}\n\n/**\n * A component to render the steps of an integration with the required action\n * buttons to add a new step, edit an existing one, etc.\n *\n * @see [steps]{@link IIntegrationEditorStepAdderProps#steps}\n * @see [addStepHref]{@link IIntegrationEditorStepAdderProps#addStepHref}\n * @see [addStepHref]{@link IIntegrationEditorStepAdderProps#addStepHref}\n * @see [configureStepHref]{@link IIntegrationEditorStepAdderProps#configureStepHref}\n *\n * @todo add the delete step button\n */\nexport class IntegrationEditorStepAdder extends React.Component<\n  IIntegrationEditorStepAdderProps\n> {\n  public render() {\n    return (\n      <IntegrationEditorStepsList>\n        {this.props.steps.map((s, idx) => {\n          return (\n            <React.Fragment key={idx}>\n              <IntegrationEditorStepsListItem\n                stepName={s.connection!.connector!.name}\n                stepDescription={s.action!.name}\n                icon={<img src={s.connection!.icon} width={24} height={24} />}\n                actions={\n                  <>\n                    <ButtonLink href={this.props.configureStepHref(idx, s)}>\n                      Configure\n                    </ButtonLink>\n                    <ButtonLink href={'#'} as={'danger'}>\n                      <i className=\"fa fa-trash\" />\n                    </ButtonLink>\n                  </>\n                }\n              />\n              {idx < this.props.steps.length - 1 && (\n                <IntegrationFlowAddStep\n                  active={false}\n                  showDetails={false}\n                  addStepHref={this.props.addStepHref(idx + 1)}\n                  i18nAddStep={'Add a step'}\n                />\n              )}\n            </React.Fragment>\n          );\n        })}\n      </IntegrationEditorStepsList>\n    );\n  }\n}\n","import { include } from 'named-urls';\n\nexport default include('/', {\n  root: '',\n});\n","/* tslint:disable:object-literal-sort-keys no-empty-interface */\nimport { reverse } from 'named-urls';\nimport routes from './routes';\n\n/**\n * Creates a function that takes a route and some `data` `T` that returns the\n * reversed URL.\n * @param route\n *\n * @todo perhaps move in the @syndesis/utils package?\n */\nfunction makeResolverNoParams(route: string) {\n  return () => reverse(route);\n}\n\n// TODO: unit test every single one of these resolvers 😫\nexport default {\n  root: makeResolverNoParams(routes.root),\n};\n","import connections from './connections/resolvers';\nimport customizations from './customizations/resolvers';\nimport dashboard from './dashboard/resolvers';\nimport data from './data/resolvers';\nimport integrations from './integrations/resolvers';\n\nexport default {\n  connections,\n  customizations,\n  dashboard,\n  data,\n  integrations,\n};\n","import { Icon, MessageDialog } from 'patternfly-react';\nimport * as React from 'react';\n\n/**\n * Icon type enum that maps to patternfly icon types\n */\nexport enum ConfirmationIconType {\n  DANGER = 'error-circle-o',\n  WARNING = 'warning-triangle-o',\n  INFO = 'info',\n  OK = 'ok',\n  NONE = 'NONE',\n}\n\n/**\n * Button style enum that maps to patternfly button classes\n */\nexport enum ConfirmationButtonStyle {\n  NORMAL = 'primary',\n  SUCCESS = 'success',\n  DANGER = 'danger',\n  WARNING = 'warning',\n  INFO = 'info',\n  LINK = 'link',\n}\n\n/**\n * A dialog that can be used to obtain user confirmation when deleting an object.\n */\nexport interface IConfirmationDialogProps {\n  /**\n   * The style of button to use for the primary action\n   */\n  buttonStyle: ConfirmationButtonStyle;\n  /**\n   * The localized cancel button text.\n   */\n  i18nCancelButtonText: string;\n\n  /**\n   * The localized confirmation button text.\n   */\n  i18nConfirmButtonText: string;\n\n  /**\n   * The localized confirmation message.\n   */\n  i18nConfirmationMessage: string;\n\n  /**\n   * An optional localized message providing more details.\n   */\n  i18nDetailsMessage?: string;\n\n  /**\n   * The localized dialog title.\n   */\n  i18nTitle: string;\n\n  /**\n   * The icon type to use, or unset for no icon\n   */\n  icon: ConfirmationIconType;\n\n  /**\n   * A callback for when the cancel button is clicked. Caller should hide dialog.\n   */\n  onCancel: () => void;\n\n  /**\n   * A callback for when the confirmation button is clicked. Caller should hide dialog.\n   */\n  onConfirm: () => void;\n\n  /**\n   * Indicates if the dialog should be visible.\n   */\n  showDialog: boolean;\n}\n\n/**\n * A modal dialog to display when an object is being deleted.\n */\nexport class ConfirmationDialog extends React.Component<\n  IConfirmationDialogProps\n> {\n  public render() {\n    return (\n      <MessageDialog\n        accessibleName=\"deleteConfirmationDialog\"\n        accessibleDescription=\"deleteConfirmationDialogContent\"\n        icon={\n          this.props.icon !== ConfirmationIconType.NONE && (\n            <Icon type=\"pf\" name={this.props.icon} />\n          )\n        }\n        onHide={this.props.onCancel}\n        primaryAction={this.props.onConfirm}\n        primaryActionButtonContent={this.props.i18nConfirmButtonText}\n        primaryActionButtonBsStyle={this.props.buttonStyle}\n        primaryContent={\n          <p className=\"lead\">{this.props.i18nConfirmationMessage}</p>\n        }\n        secondaryAction={this.props.onCancel}\n        secondaryActionButtonContent={this.props.i18nCancelButtonText}\n        secondaryContent={\n          this.props.i18nDetailsMessage ? (\n            <p>{this.props.i18nDetailsMessage}</p>\n          ) : (\n            undefined\n          )\n        }\n        show={this.props.showDialog}\n        title={this.props.i18nTitle}\n      />\n    );\n  }\n}\n","import { MessageDialog } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IDialogProps {\n  body: any;\n  footer: any;\n  onHide: () => void;\n  title: string;\n}\n\nexport class Dialog extends React.Component<IDialogProps> {\n  public render() {\n    return (\n      <MessageDialog\n        title={this.props.title}\n        primaryContent={this.props.body}\n        footer={this.props.footer}\n        show={true}\n        onHide={this.props.onHide}\n      />\n    );\n  }\n}\n","import classnames from 'classnames';\nimport * as React from 'react';\n\nexport interface IContainerProps {\n  className?: string;\n  [key: string]: any;\n}\n\nexport const Container: React.FunctionComponent<IContainerProps> = ({\n  children,\n  className,\n  ...props\n}) => (\n  <div className={classnames('container-fluid', className)} {...props}>\n    {children}\n  </div>\n);\n","import { Grid, Icon } from 'patternfly-react';\nimport * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport { Container } from '../Layout/Container';\nimport './DndFileChooser.css';\nimport { INotification, INotificationType } from './Notifications';\n\n/**\n * The properties of the `DndFileChooser`.\n */\nexport interface IDndFileChooserProps {\n  /**\n   * Indicates if multiple files can be added. Defaults to `false`.\n   */\n  allowMultiple?: boolean;\n\n  /**\n   * `true` if the dropzone should be disabled. Defaults to `false`.\n   */\n  disableDropzone: boolean;\n\n  /**\n   * A comma delimited string of file extensions. For example, '.jar,.txt'. Defaults to any file extension.\n   */\n  fileExtensions?: string;\n\n  /**\n   * The localized text that appears below the selected file information at the bottom of the drop area.\n   */\n  i18nHelpMessage?: string;\n\n  /**\n   * The localized text (may include HTML tags) that appears above the selected file information at the\n   * top of the drop area.\n   */\n  i18nInstructions: string;\n\n  /**\n   * The localized text that appears when no file has been selected.\n   */\n  i18nNoFileSelectedMessage: string;\n\n  /**\n   * The localized text for the label that appears before the selected file information.\n   */\n  i18nSelectedFileLabel: string;\n\n  /**\n   * A general, localized message for when a file upload failed. This message will be shown\n   * along with an error icon and appears next to the selected file message. If this property\n   * is set then `i18nUploadSuccessMessage` should not be set.\n   */\n  i18nUploadFailedMessage?: string;\n\n  /**\n   * A list of error messages for failed uploads\n   */\n  i18nUploadFailedMessages?: string[];\n\n  /**\n   * A general, localized message for when a file upload was successful. This message will be shown\n   * along with an OK icon and appear next to the selected file message. If this property\n   * is set then `i18nUploadFailedMessage` should not be set.\n   */\n  i18nUploadSuccessMessage?: string;\n\n  /**\n   * A list of error messages for successful uploads\n   */\n  i18nUploadSuccessMessages?: string[];\n\n  /**\n   * Obtains the localized text (may include HTML tags) that appears when the file upload was rejected. This\n   * will occur when a DnD of a file with the wrong extension is dropped. This message is presented\n   * as a timed toast notification.\n   */\n  onUploadRejected(fileName: string): string;\n\n  /**\n   * Callback for when one or more file uploads have been accepted. Caller should handler processing of the files.\n   */\n  onUploadAccepted(file: File[]): void;\n}\n\n/**\n * The state properties of the `DndFileChooser`.\n */\nexport interface IDndFileChooserState {\n  /**\n   * The files that were uploaded successfully. Defaults to an empty array.\n   */\n  files: File[];\n\n  /**\n   * The error notifications for rejected files. After a toast is displayed for a notification it is removed\n   * from the array.\n   */\n  notifications: INotification[];\n}\n\n/**\n * A component that can be used to upload files. Files can be uploaded by clicking in the drop zone or by\n * drag and dropping files into the drop zone.\n */\nexport class DndFileChooser extends React.Component<\n  IDndFileChooserProps,\n  IDndFileChooserState\n> {\n  // setup default prop values\n  public static defaultProps = {\n    allowMultiple: false,\n  };\n\n  public constructor(props: IDndFileChooserProps) {\n    super(props);\n\n    // set up initial state\n    this.state = {\n      files: [],\n      notifications: [],\n    };\n\n    this.handleAcceptedFiles = this.handleAcceptedFiles.bind(this);\n    this.handleRejectedFiles = this.handleRejectedFiles.bind(this);\n  }\n\n  /**\n   * Obtains an element that lists the names of the files that have been uploaded.\n   */\n  public getSelectedFileMessage(): JSX.Element {\n    // one file uploaded\n    if (this.state.files.length === 1) {\n      return <Container>{this.state.files[0].name}</Container>;\n    }\n\n    // multiple files uploaded\n    if (this.state.files.length > 1) {\n      return (\n        <ul>\n          {this.state.files.map((file, index) => (\n            <li key={index}>{file.name}</li>\n          ))}\n        </ul>\n      );\n    }\n\n    // no files uploaded\n    return <Container>{this.props.i18nNoFileSelectedMessage}</Container>;\n  }\n\n  /**\n   * Obtains an element that indicates the if the upload was successful.\n   */\n  public getUploadMessage(): JSX.Element {\n    if (this.props.i18nUploadSuccessMessage) {\n      return (\n        <span className=\"dnd-file-chooser__uploadMessage\">\n          <Icon type=\"pf\" name=\"ok\" />\n          &nbsp;{this.props.i18nUploadSuccessMessage}\n        </span>\n      );\n    }\n    if (this.props.i18nUploadFailedMessage) {\n      return (\n        <span className=\"dnd-file-chooser__uploadMessage\">\n          <Icon type=\"pf\" name=\"error-circle-o\" />\n          &nbsp;{this.props.i18nUploadFailedMessage}\n        </span>\n      );\n    }\n    if (\n      this.props.i18nUploadSuccessMessages &&\n      this.props.i18nUploadFailedMessages\n    ) {\n      return (\n        <ul>\n          {this.props.i18nUploadSuccessMessages!.map((message, idx) => (\n            <li\n              key={'success' + idx}\n              className=\"dnd-file-chooser__uploadMessage\"\n            >\n              <Icon type=\"pf\" name=\"ok\" />\n              &nbsp;{message}\n            </li>\n          ))}\n          {this.props.i18nUploadFailedMessages!.map((message, idx) => (\n            <li key={'fail' + idx} className=\"dnd-file-chooser__uploadMessage\">\n              <Icon type=\"pf\" name=\"error-circle-o\" />\n              &nbsp;{message}\n            </li>\n          ))}\n        </ul>\n      );\n    }\n    // no message\n    return <Container />;\n  }\n\n  /**\n   * Callback for when one or more files were uploaded successfully.\n   * @param acceptedFiles the files that have been uploaded\n   */\n  public handleAcceptedFiles(acceptedFiles: File[]) {\n    this.setState({ ...this.state, files: acceptedFiles });\n    this.props.onUploadAccepted(acceptedFiles); // notify callback\n  }\n\n  /**\n   * Callback for when one or more files were rejected.\n   * @param rejectedFiles the files that were rejected\n   */\n  public handleRejectedFiles(rejectedFiles: File[]) {\n    const notifications = rejectedFiles.map(file => ({\n      key: file.name,\n      message: this.props.onUploadRejected(file.name),\n      type: 'error' as INotificationType,\n    }));\n\n    // If single file dropped then all files will be cleared. If multiple allowed, and multiple dropped,\n    // and some are accepted and some are rejected, the accepted files will still be uploaded because the\n    // handleAcceptedFiles is called after this method.\n    this.setState({\n      ...this.state,\n      files: [],\n      notifications: [...this.state.notifications, ...notifications],\n    });\n  }\n\n  public render() {\n    return (\n      <Dropzone\n        accept={this.props.fileExtensions}\n        disabled={this.props.disableDropzone}\n        multiple={this.props.allowMultiple}\n        onDropAccepted={this.handleAcceptedFiles}\n        onDropRejected={this.handleRejectedFiles}\n      >\n        {({ getRootProps, getInputProps }) => (\n          <Container>\n            <Grid\n              disabled={this.props.disableDropzone}\n              fluid={true}\n              className=\"dnd-file-chooser\"\n              {...getRootProps({ refKey: 'dnd-file-chooser' })}\n            >\n              <Grid.Row>\n                <Grid.Col\n                  className=\"dnd-file-chooser__instructions\"\n                  dangerouslySetInnerHTML={{\n                    __html: this.props.i18nInstructions,\n                  }}\n                />\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col>\n                  <input {...getInputProps()} />\n                </Grid.Col>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col\n                  className=\"dnd-file-chooser__selectedFileLabel\"\n                  xs={3}\n                >\n                  {this.props.i18nSelectedFileLabel}\n                </Grid.Col>\n                <Grid.Col className=\"dnd-file-chooser__selectedFile\" xs={6}>\n                  {this.getSelectedFileMessage()}\n                </Grid.Col>\n                <Grid.Col xs={3}>{this.getUploadMessage()}</Grid.Col>\n              </Grid.Row>\n              {this.props.i18nHelpMessage ? (\n                <Grid.Row>\n                  <Grid.Col className=\"dnd-file-chooser__helpText\">\n                    {this.props.i18nHelpMessage}\n                  </Grid.Col>\n                </Grid.Row>\n              ) : null}\n            </Grid>\n          </Container>\n        )}\n      </Dropzone>\n    );\n  }\n}\n","import {\n  Nav,\n  NavList,\n  Page,\n  PageHeader,\n  PageSection,\n  PageSidebar,\n} from '@patternfly/react-core';\nimport * as React from 'react';\n\nexport interface ILayoutBase {\n  appTitle: string;\n  pictograph: any;\n  appNav: any;\n  verticalNav: any[];\n  logoHref: string;\n  showNavigation: boolean;\n  onNavigationCollapse(): void;\n  onNavigationExpand(): void;\n}\n\nexport interface ILayoutState {\n  isNavOpen: boolean;\n}\n\nexport class AppLayout extends React.Component<ILayoutBase, ILayoutState> {\n  public onNavToggle: () => void;\n  constructor(props: ILayoutBase) {\n    super(props);\n    this.state = {\n      isNavOpen: true,\n    };\n    this.onNavToggle = () => {\n      this.setState({\n        isNavOpen: !this.state.isNavOpen,\n      });\n    };\n  }\n\n  public componentDidMount() {\n    this.setState({\n      isNavOpen: this.props.showNavigation,\n    });\n  }\n\n  public render() {\n    const { isNavOpen } = this.state;\n\n    const Header = (\n      <PageHeader\n        logo={this.props.pictograph}\n        logoProps={{ href: '/' }}\n        toolbar={this.props.appNav}\n        showNavToggle={true}\n        isNavOpen={isNavOpen}\n        onNavToggle={this.onNavToggle}\n      />\n    );\n    const Sidebar = (\n      <PageSidebar\n        nav={\n          <Nav>\n            <NavList>{this.props.verticalNav}</NavList>\n          </Nav>\n        }\n        isNavOpen={isNavOpen}\n      />\n    );\n\n    return (\n      <Page header={Header} sidebar={Sidebar}>\n        <PageSection>{this.props.children}</PageSection>\n      </Page>\n    );\n  }\n}\n","import { Dropdown, DropdownToggle } from '@patternfly/react-core';\nimport * as React from 'react';\n\nexport interface IAppTopMenuProps {\n  username: string;\n  children: any;\n}\n\nexport interface IAppTopMenuState {\n  isOpen: boolean;\n}\n\n/**\n * A component to show the logged in user menu.\n */\nexport class AppTopMenu extends React.Component<\n  IAppTopMenuProps,\n  IAppTopMenuState\n> {\n  public state = {\n    isOpen: false,\n  };\n  public onToggle = (isOpen: boolean) => {\n    this.setState({\n      isOpen,\n    });\n  };\n  public onSelect = (event: React.SyntheticEvent<HTMLDivElement, Event>) => {\n    this.setState({\n      isOpen: !this.state.isOpen,\n    });\n  };\n  public render() {\n    const { children, username } = this.props;\n    return (\n      <Dropdown\n        isPlain={true}\n        onSelect={this.onSelect}\n        toggle={\n          <DropdownToggle onToggle={this.onToggle}>{username}</DropdownToggle>\n        }\n        isOpen={this.state.isOpen}\n        dropdownItems={React.Children.toArray(children)}\n      />\n    );\n  }\n}\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport classnames from 'classnames';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface IButtonLinkProps {\n  onClick?: (e: React.MouseEvent<any>) => void;\n  href?: H.LocationDescriptor;\n  className?: string;\n  disabled?: boolean;\n  as?:\n    | 'default'\n    | 'primary'\n    | 'success'\n    | 'info'\n    | 'warning'\n    | 'danger'\n    | 'link';\n  size?: 'lg' | 'sm' | 'xs';\n  [key: string]: any;\n}\n\nexport const ButtonLink: React.FunctionComponent<IButtonLinkProps> = ({\n  onClick,\n  href,\n  className,\n  disabled,\n  as = 'default',\n  size,\n  children,\n  ...props\n}) => {\n  className = classnames('btn', `btn-${as}`, className, {\n    'btn-lg': size === 'lg',\n    'btn-sm': size === 'sm',\n    'btn-xs': size === 'xs',\n  });\n  return href && !disabled ? (\n    <Link to={href} onClick={onClick} className={className} {...props}>\n      {children}\n    </Link>\n  ) : (\n    <button\n      onClick={onClick}\n      className={className}\n      disabled={disabled || (!onClick && !href)}\n    >\n      {children}\n    </button>\n  );\n};\n","import classnames from 'classnames';\nimport { Spinner } from 'patternfly-react';\nimport * as React from 'react';\n\nimport './Loader.css';\n\nexport interface ILoaderProps {\n  inline?: boolean;\n  inverse?: boolean;\n  loading?: boolean;\n  size?: 'lg' | 'md' | 'sm' | 'xs';\n}\n\nexport class Loader extends React.PureComponent<ILoaderProps> {\n  public static defaultProps = {\n    inline: false,\n    inverse: false,\n    loading: true,\n    size: 'lg',\n  };\n\n  public render() {\n    return (\n      <div\n        className={classnames('Loader', {\n          'is-block': !this.props.inline,\n          'is-inline': this.props.inline,\n        })}\n      >\n        <Spinner\n          loading={this.props.loading}\n          size={this.props.size}\n          inline={this.props.inline}\n          inverse={this.props.inverse}\n        />\n      </div>\n    );\n  }\n}\n","import * as H from 'history';\nimport * as React from 'react';\nimport { Route } from 'react-router';\nimport { Link } from 'react-router-dom';\n\ninterface INavLink {\n  activeClassName?: string;\n  activeStyle?: any;\n  className?: string;\n  exact?: boolean;\n  isActive?: (match: any, location: any) => boolean;\n  location?: any;\n  strict?: boolean;\n  style?: any;\n  to: H.LocationDescriptor;\n  label: any;\n  children?: any;\n}\n\nfunction joinClassnames(...classnames: Array<string | undefined>): string {\n  return classnames.filter(i => i).join(' ');\n}\n\nexport const PfNavLink = ({\n  activeClassName = 'active',\n  activeStyle,\n  className: classNameProp,\n  exact,\n  isActive: isActiveProp,\n  location,\n  strict,\n  style: styleProp,\n  to,\n  label,\n  children,\n  ...rest\n}: INavLink) => {\n  const path = typeof to === 'object' ? to.pathname : to;\n\n  // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n  const escapedPath = path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1');\n\n  const NavLinkChildren = ({\n    location: childLocation,\n    match,\n  }: {\n    location: any;\n    match: any;\n  }) => {\n    const isActive = !!(isActiveProp\n      ? isActiveProp(match, childLocation)\n      : match);\n\n    const className = isActive\n      ? joinClassnames(classNameProp, activeClassName)\n      : classNameProp;\n    const style = isActive ? { ...styleProp, ...activeStyle } : styleProp;\n\n    return (\n      <li className={className}>\n        <Link style={style} to={to} children={label} {...rest} />\n        {children}\n      </li>\n    );\n  };\n\n  return (\n    <Route\n      path={escapedPath}\n      exact={exact}\n      strict={strict}\n      location={location}\n      children={NavLinkChildren}\n    />\n  );\n};\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { Route } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nexport interface IPfVerticalNavItem {\n  className?: string;\n  exact?: boolean;\n  isActive?: (match: any, location: any) => boolean;\n  icon: string;\n  location?: any;\n  strict?: boolean;\n  to: string | any;\n  label: any;\n  children?: any;\n}\n\nfunction PfVerticalNavItem({\n  className,\n  exact,\n  isActive: isActiveProp,\n  icon,\n  location,\n  strict,\n  to,\n  label,\n  children,\n  ...rest\n}: IPfVerticalNavItem) {\n  const path = typeof to === 'object' ? to.pathname : to;\n\n  // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n  const escapedPath = path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1');\n\n  const NavLinkViewTemplate = ({\n    location: childLocation,\n    match,\n  }: {\n    location: any;\n    match: any;\n  }) => {\n    const isActive = !!(isActiveProp\n      ? isActiveProp(match, childLocation)\n      : match);\n\n    return (\n      <li className={'pf-c-nav__item'}>\n        <Link\n          to={to}\n          className={classNames('pf-c-nav__link', {\n            ['pf-m-current']: isActive,\n          })}\n          aria-current={isActive ? 'page' : undefined}\n          children={<>{label}</>}\n          {...rest}\n        />\n        {children}\n      </li>\n    );\n  };\n\n  return (\n    <Route\n      path={escapedPath}\n      exact={exact}\n      strict={strict}\n      location={location}\n      children={NavLinkViewTemplate}\n    />\n  );\n}\n\nPfVerticalNavItem.displayName = 'VerticalNav.Item';\n\nexport { PfVerticalNavItem };\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as H from 'history';\nimport * as React from 'react';\nimport { PfNavLink } from './PfNavLink';\n\nexport interface ITabBarItemProps {\n  label: string;\n  to: H.LocationDescriptor;\n  [key: string]: any;\n}\n\nexport const TabBarItem: React.FunctionComponent<ITabBarItemProps> = ({\n  label,\n  to,\n  ...props\n}) => <PfNavLink label={label} to={to} {...props} />;\n","import * as React from 'react';\n\ninterface IWizardStepsProps {\n  mainSteps: React.ReactNode;\n  altSteps: React.ReactNode;\n  /**\n   * Indicates if the user clicked on a step. Used to show\n   * sub-steps when browsing from a mobile device.\n   */\n  active: boolean;\n}\n\nexport class WizardSteps extends React.Component<IWizardStepsProps> {\n  public render() {\n    return (\n      <div className={'wizard-pf-steps'}>\n        <ul\n          className={`wizard-pf-steps-indicator wizard-pf-steps-alt-indicator ${\n            this.props.active ? 'active' : ''\n          }`}\n        >\n          {this.props.mainSteps}\n        </ul>\n        <ul\n          className={`wizard-pf-steps-alt ${this.props.active ? '' : 'hidden'}`}\n        >\n          {this.props.altSteps}\n        </ul>\n      </div>\n    );\n  }\n}\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport classnames from 'classnames';\nimport {\n  FormControl,\n  FormGroup,\n  HelpBlock,\n  Icon,\n  InlineEdit,\n  InputGroup,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { Omit } from 'react-router';\nimport { Loader } from '../Layout';\nimport './InlineTextEdit.css';\n\ninterface IReadWidget {\n  className?: string;\n  allowEditing: boolean;\n  value: string;\n  onEdit(): void;\n}\n\nconst ReadWidget: React.FunctionComponent<IReadWidget> = ({\n  className,\n  allowEditing,\n  value,\n  onEdit,\n}) => (\n  <div className={classnames('inline-text-readwidget', className)}>\n    {value}\n    {allowEditing ? (\n      <Icon\n        className=\"inline-text-editIcon\"\n        name=\"edit\"\n        onClick={onEdit}\n        type=\"pf\"\n      />\n    ) : null}\n  </div>\n);\n\ninterface IEditWidget extends React.InputHTMLAttributes<HTMLInputElement> {\n  className?: string;\n  value: string;\n  valid: boolean;\n  saving: boolean;\n  asTextarea: boolean;\n  errorMsg?: string;\n  onConfirm(): void;\n  onCancel(): void;\n}\n\nconst EditWidget: React.FunctionComponent<IEditWidget> = ({\n  valid,\n  value,\n  placeholder,\n  errorMsg,\n  saving,\n  asTextarea,\n  onChange,\n  onConfirm,\n  onCancel,\n}) => (\n  <div className={'inline-text-editwidget'}>\n    {asTextarea ? (\n      <>\n        <FormGroup\n          controlId=\"textarea\"\n          validationState={valid ? 'success' : 'error'}\n        >\n          <FormControl\n            componentClass=\"textarea\"\n            disabled={saving}\n            onChange={onChange}\n            placeholder={placeholder}\n            value={value}\n          />\n          {saving ? (\n            <span className=\"btn\">\n              <Loader inline={true} loading={saving} size={'sm'} />\n            </span>\n          ) : (\n            <InlineEdit.ConfirmButton\n              disabled={saving || !valid}\n              onClick={onConfirm}\n            />\n          )}\n          <InlineEdit.CancelButton disabled={saving} onClick={onCancel} />\n        </FormGroup>\n        {errorMsg && <HelpBlock>{errorMsg}</HelpBlock>}\n      </>\n    ) : (\n      <>\n        <FormGroup validationState={valid ? 'success' : 'error'}>\n          <InputGroup>\n            <FormControl\n              disabled={saving}\n              onChange={onChange}\n              placeholder={placeholder}\n              type=\"text\"\n              value={value}\n            />\n            <InputGroup.Button>\n              {saving ? (\n                <span className=\"btn\">\n                  <Loader inline={true} loading={saving} size={'sm'} />\n                </span>\n              ) : (\n                <InlineEdit.ConfirmButton\n                  disabled={saving || !valid}\n                  onClick={onConfirm}\n                />\n              )}\n            </InputGroup.Button>\n            <InputGroup.Button>\n              <InlineEdit.CancelButton disabled={saving} onClick={onCancel} />\n            </InputGroup.Button>\n          </InputGroup>\n          {errorMsg && <HelpBlock>{errorMsg}</HelpBlock>}\n        </FormGroup>\n      </>\n    )}\n  </div>\n);\n\nexport interface IInlineTextEditProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onChange'> {\n  className?: string;\n\n  /**\n   * The current value of the property being rendered.\n   */\n  value: string;\n\n  /**\n   * `true` if editing is allowed.\n   */\n  allowEditing: boolean;\n\n  /**\n   * A value to display if the current value is empty or undefined.\n   */\n  i18nPlaceholder?: string;\n\n  /**\n   * `true` if the value should be rendered as a text area.\n   */\n  isTextArea: boolean;\n\n  /**\n   * The callback invoked when the confirm button is clicked.\n   */\n  onChange: (newValue: string) => Promise<boolean>;\n\n  /**\n   * The callback invoked when the proposed value changes.\n   */\n  onValidate?: (newValue: string) => Promise<true | string>;\n}\n\nexport const InlineTextEdit: React.FunctionComponent<IInlineTextEditProps> = ({\n  className,\n  value,\n  allowEditing,\n  i18nPlaceholder,\n  isTextArea,\n  onChange,\n  onValidate,\n  ...attrs\n}) => {\n  const [currentValue, setCurrentValue] = React.useState(value);\n  const [editing, setEditing] = React.useState(false);\n  const [saving, setSaving] = React.useState(false);\n  const [{ valid, errorMsg }, setValidity] = React.useState({\n    errorMsg: '',\n    valid: true,\n  });\n\n  const validate = async (valueToValidate: string) => {\n    if (onValidate) {\n      const result = await onValidate(valueToValidate);\n      if (result === true) {\n        setValidity({\n          errorMsg: '',\n          valid: true,\n        });\n      } else {\n        setValidity({\n          errorMsg: result,\n          valid: false,\n        });\n      }\n    } else {\n      setValidity({\n        errorMsg: '',\n        valid: true,\n      });\n    }\n  };\n\n  const handleConfirm = async () => {\n    if (valid) {\n      setSaving(true);\n      const success = await onChange(currentValue);\n      if (success) {\n        setEditing(false);\n      }\n      setSaving(false);\n    }\n  };\n\n  const handleChange = (e: any) => {\n    setCurrentValue(e.target.value);\n    validate(e.target.value);\n  };\n\n  const onEdit = () => {\n    setEditing(true);\n    validate(currentValue);\n  };\n\n  const onCancel = () => {\n    setEditing(false);\n    setCurrentValue(value);\n  };\n\n  const renderValue = (v: string) => (\n    <ReadWidget\n      className={className}\n      value={v || i18nPlaceholder || 'Value...'}\n      allowEditing={allowEditing}\n      onEdit={onEdit}\n    />\n  );\n\n  const renderEdit = (v: string) => (\n    <EditWidget\n      {...attrs}\n      valid={valid}\n      saving={saving}\n      value={v}\n      errorMsg={errorMsg}\n      asTextarea={isTextArea}\n      onChange={handleChange}\n      onConfirm={handleConfirm}\n      onCancel={onCancel}\n    />\n  );\n\n  const isEditing = () => editing;\n\n  return (\n    <InlineEdit\n      className={className}\n      value={currentValue}\n      isEditing={isEditing}\n      renderValue={renderValue}\n      renderEdit={renderEdit}\n    />\n  );\n};\n","import { Filter, FormControl, Sort, Toolbar } from 'patternfly-react';\nimport * as React from 'react';\nimport './ListViewToolbar.css';\n\nexport interface IFilterValue {\n  id: string;\n  title: string;\n}\n\nexport interface IFilterType {\n  id: string;\n  filterType: 'select' | 'text' | 'number';\n  filterValues?: IFilterValue[];\n  placeholder: string;\n  title: string;\n}\n\nexport interface ISortType {\n  id: string;\n  isNumeric: boolean;\n  title: string;\n}\n\nexport interface IActiveFilter {\n  title: string;\n  value: string;\n}\n\nexport interface IListViewToolbarProps {\n  activeFilters: IActiveFilter[];\n  filterTypes: IFilterType[];\n  currentFilterType: IFilterType;\n  currentSortType: string;\n  currentValue: any;\n  isSortAscending: boolean;\n  resultsCount: number;\n  sortTypes: ISortType[];\n  i18nResultsCount: string;\n\n  onUpdateCurrentValue(event: Event): void;\n\n  onValueKeyPress(keyEvent: KeyboardEvent): void;\n\n  onFilterAdded(title: string, value: string): void;\n\n  onSelectFilterType(filterType: IFilterType): void;\n\n  onFilterValueSelected(filterValue: { id: string; title: string }): void;\n\n  onRemoveFilter(filter: IActiveFilter): void;\n\n  onClearFilters(event: React.MouseEvent<HTMLAnchorElement>): void;\n\n  onToggleCurrentSortDirection(): void;\n\n  onUpdateCurrentSortType(sortType: string): void;\n}\n\nexport class ListViewToolbar extends React.Component<IListViewToolbarProps> {\n  public render() {\n    return (\n      <Toolbar>\n        <Filter>\n          <Filter.TypeSelector\n            filterTypes={this.props.filterTypes}\n            currentFilterType={this.props.currentFilterType.title}\n            onFilterTypeSelected={this.props.onSelectFilterType}\n          />\n          {this.renderInput()}\n        </Filter>\n        <Sort>\n          <Sort.TypeSelector\n            sortTypes={this.props.sortTypes}\n            currentSortType={this.props.currentSortType}\n            onSortTypeSelected={this.props.onUpdateCurrentSortType}\n          />\n          <Sort.DirectionSelector\n            isNumeric={false}\n            isAscending={this.props.isSortAscending}\n            onClick={this.props.onToggleCurrentSortDirection}\n          />\n        </Sort>\n        <Toolbar.RightContent>{this.props.children}</Toolbar.RightContent>\n        <Toolbar.Results>\n          <h5>{this.props.i18nResultsCount}</h5>\n          {this.props.activeFilters && this.props.activeFilters.length > 0 && (\n            <>\n              <Filter.ActiveLabel>Active Filters:</Filter.ActiveLabel>\n              <Filter.List>\n                {this.props.activeFilters.map((item: IActiveFilter, index) => (\n                  <Filter.Item\n                    key={index}\n                    onRemove={this.props.onRemoveFilter}\n                    filterData={item}\n                  >\n                    {item.title}={item.value}\n                  </Filter.Item>\n                ))}\n              </Filter.List>\n              <a onClick={this.props.onClearFilters}>Clear All Filters</a>\n            </>\n          )}\n        </Toolbar.Results>\n      </Toolbar>\n    );\n  }\n\n  public renderInput = () => {\n    const { currentFilterType, currentValue } = this.props;\n    if (!currentFilterType) {\n      return null;\n    }\n    if (currentFilterType.filterType === 'select') {\n      return (\n        <Filter.ValueSelector\n          filterValues={currentFilterType.filterValues}\n          currentValue={currentValue}\n          onFilterValueSelected={this.props.onFilterValueSelected}\n        />\n      );\n    } else {\n      return (\n        <FormControl\n          type={currentFilterType.filterType}\n          value={currentValue}\n          placeholder={currentFilterType.placeholder}\n          onChange={this.props.onUpdateCurrentValue}\n          onKeyPress={this.props.onValueKeyPress}\n        />\n      );\n    }\n  };\n}\n","import { Col, Row, Switch } from 'patternfly-react';\nimport * as React from 'react';\nimport {\n  AutoSizer,\n  CellMeasurer,\n  CellMeasurerCache,\n  List,\n  ListRowRenderer,\n} from 'react-virtualized';\nimport './LogViewer.css';\n\nexport interface ILogViewerProps {\n  data: string[];\n  height?: number;\n  width?: null;\n}\n\nexport interface ILogViewerState {\n  count: number;\n  followScroll: boolean;\n  previousCount: number;\n}\n\nexport class LogViewer extends React.Component<\n  ILogViewerProps,\n  ILogViewerState\n> {\n  public static defaultProps = {\n    height: 300,\n  };\n\n  public static getDerivedStateFromProps(\n    { data }: ILogViewerProps,\n    state: ILogViewerState\n  ) {\n    return {\n      ...state,\n      count: data.length,\n      previousCount: state.followScroll ? state.count : state.previousCount,\n    };\n  }\n\n  public state = {\n    count: 0,\n    followScroll: true,\n    previousCount: 0,\n  };\n\n  public cellMeasurerCache: CellMeasurerCache;\n\n  public constructor(props: ILogViewerProps) {\n    super(props);\n    this.cellMeasurerCache = new CellMeasurerCache({\n      fixedWidth: true,\n      minHeight: 20,\n    });\n  }\n\n  public render() {\n    return (\n      <React.Fragment>\n        <Row className={'LogViewer'}>\n          <Col sm={12}>\n            <AutoSizer\n              disableHeight={!!this.props.height}\n              disableWidth={!!this.props.width}\n            >\n              {({ width, height }) => (\n                <List\n                  deferredMeasurementCache={this.cellMeasurerCache}\n                  height={this.props.height || height}\n                  rowCount={this.props.data.length}\n                  rowHeight={this.cellMeasurerCache.rowHeight}\n                  rowRenderer={this.renderRow}\n                  scrollToLine={this.state.count}\n                  scrollToIndex={\n                    this.state.followScroll ? this.state.count - 1 : -1\n                  }\n                  width={this.props.width || width}\n                />\n              )}\n            </AutoSizer>\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={12}>\n            <Switch\n              id={'toggle-follow'}\n              labelText={'Follow logs'}\n              onChange={this.toggleFollow}\n              value={this.state.followScroll}\n            />\n          </Col>\n        </Row>\n      </React.Fragment>\n    );\n  }\n\n  public renderRow: ListRowRenderer = ({ index, style, parent }) => (\n    <CellMeasurer\n      cache={this.cellMeasurerCache}\n      columnIndex={0}\n      key={index}\n      rowIndex={index}\n      parent={parent}\n    >\n      <div className={'LogViewerRow'} style={style}>\n        <span className=\"LogViewerRow_number\">{index + 1}</span>\n        <span className=\"LogViewerRow_content\">{this.props.data[index]}</span>\n      </div>\n    </CellMeasurer>\n  );\n\n  public toggleFollow = () => {\n    this.setState({\n      followScroll: !this.state.followScroll,\n    });\n  };\n}\n","import {\n  TimedToastNotification,\n  ToastNotificationList,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { Container } from '../Layout/Container';\n\nexport type INotificationType = 'success' | 'info' | 'warning' | 'error';\n\nexport interface INotification {\n  key: string;\n  message: string;\n  type: INotificationType;\n}\n\nexport interface INotificationsProps {\n  notifications: INotification[];\n  notificationTimerDelay: number;\n  removeNotificationAction(notification: INotification): void;\n}\n\nexport class Notifications extends React.Component<INotificationsProps> {\n  public render() {\n    return (\n      <ToastNotificationList className=\"app__notificationList\">\n        {this.props.notifications.map(notification => (\n          <TimedToastNotification\n            key={notification.key}\n            type={notification.type}\n            persistent={false}\n            onDismiss={this.props.removeNotificationAction.bind(\n              this,\n              notification\n            )}\n            timerdelay={this.props.notificationTimerDelay}\n          >\n            <Container\n              dangerouslySetInnerHTML={{\n                __html: notification.message,\n              }}\n            />\n          </TimedToastNotification>\n        ))}\n      </ToastNotificationList>\n    );\n  }\n}\n","import { Text, Title, TitleLevel } from '@patternfly/react-core';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { Container } from '../Layout';\n\nexport interface ISimplePageHeaderProps {\n  i18nTitle: string;\n  i18nDescription: string;\n  className?: string;\n}\n\nexport const SimplePageHeader: React.FunctionComponent<\n  ISimplePageHeaderProps\n> = ({\n  i18nTitle,\n  i18nDescription,\n  className,\n  ...rest\n}: ISimplePageHeaderProps) => {\n  return (\n    <Container className={classnames('', className)} {...rest}>\n      <Title size=\"3xl\" headingLevel={TitleLevel.h2}>\n        {i18nTitle}\n      </Title>\n      <Text>{i18nDescription}</Text>\n    </Container>\n  );\n};\n","import { Icon, ProgressBar } from 'patternfly-react';\nimport * as React from 'react';\n\nimport './ProgressWithLink.css';\n\nexport interface IProgressWithLinkProps {\n  value: string;\n  currentStep: number;\n  totalSteps: number;\n  logUrl?: string;\n  i18nLogUrlText: string;\n}\n\nexport class ProgressWithLink extends React.PureComponent<\n  IProgressWithLinkProps\n> {\n  public render() {\n    return (\n      <div className=\"progress-link\">\n        <div>\n          <i data-testid=\"progress-link-value\">\n            {this.props.value} ( {this.props.currentStep} /{' '}\n            {this.props.totalSteps} )\n          </i>\n          {this.props.logUrl && (\n            <span data-testid=\"progress-log-link\" className=\"pull-right\">\n              <a target=\"_blank\" href={this.props.logUrl}>\n                {this.props.i18nLogUrlText} <Icon name={'external-link'} />\n              </a>\n            </span>\n          )}\n        </div>\n        <ProgressBar\n          now={this.props.currentStep}\n          max={this.props.totalSteps}\n          style={{\n            height: 6,\n          }}\n        />\n      </div>\n    );\n  }\n}\n","import { DropdownItem } from '@patternfly/react-core';\nimport * as React from 'react';\n\nexport interface IPfDropdownItem {\n  children: any;\n}\nclass PfDropdownItem extends React.Component<IPfDropdownItem> {\n  public render() {\n    return <DropdownItem>{this.props.children}</DropdownItem>;\n  }\n}\n\nexport { PfDropdownItem };\n","import { Text, Title } from '@patternfly/react-core';\nimport * as H from 'history';\nimport { Card, DropdownKebab } from 'patternfly-react';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n} from '../Shared';\n\nimport './ConnectionCard.css';\n\nexport interface IConnectionCardMenuProps {\n  editHref: H.LocationDescriptor;\n  i18nCancelLabel: string;\n  i18nDeleteLabel: string;\n  i18nDeleteModalMessage: string;\n  i18nDeleteModalTitle: string;\n  i18nEditLabel: string;\n  i18nMenuTitle: string;\n  i18nViewLabel: string;\n  isDeleteEnabled: boolean;\n  onDelete(): void;\n}\n\nexport interface IConnectionProps {\n  description: string;\n  menuProps?: IConnectionCardMenuProps;\n  name: string;\n  href: H.LocationDescriptor;\n  icon: string;\n}\n\nexport interface IConnectionCardState {\n  showDeleteDialog: boolean;\n}\n\nexport class ConnectionCard extends React.PureComponent<\n  IConnectionProps,\n  IConnectionCardState\n> {\n  public constructor(props: IConnectionProps) {\n    super(props);\n\n    this.state = {\n      showDeleteDialog: false, // initial visibility of delete dialog\n    };\n\n    if (this.props.menuProps) {\n      this.doCancel = this.doCancel.bind(this);\n      this.doDelete = this.doDelete.bind(this);\n      this.showDeleteDialog = this.showDeleteDialog.bind(this);\n    }\n  }\n\n  public doCancel() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n  }\n\n  public doDelete() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n\n    if (this.props.menuProps) {\n      this.props.menuProps.onDelete();\n    }\n  }\n\n  public showDeleteDialog() {\n    this.setState({\n      showDeleteDialog: true,\n    });\n  }\n\n  public render() {\n    return (\n      <>\n        {this.props.menuProps && (\n          <ConfirmationDialog\n            buttonStyle={ConfirmationButtonStyle.DANGER}\n            i18nCancelButtonText={this.props.menuProps.i18nCancelLabel}\n            i18nConfirmButtonText={this.props.menuProps.i18nDeleteLabel}\n            i18nConfirmationMessage={\n              this.props.menuProps.i18nDeleteModalMessage\n            }\n            i18nTitle={this.props.menuProps.i18nDeleteModalTitle}\n            icon={ConfirmationIconType.DANGER}\n            showDialog={this.state.showDeleteDialog}\n            onCancel={this.doCancel}\n            onConfirm={this.doDelete}\n          />\n        )}\n        <Card matchHeight={true}>\n          {this.props.menuProps && (\n            <div className=\"pull-right\">\n              <DropdownKebab\n                id={`connection-${this.props.name}-menu`}\n                pullRight={true}\n                title={this.props.menuProps.i18nMenuTitle}\n              >\n                <li role={'presentation'} key={0}>\n                  <Link to={this.props.href} role={'menuitem'} tabIndex={1}>\n                    {this.props.menuProps.i18nViewLabel}\n                  </Link>\n                </li>\n                <li role={'presentation'} key={1}>\n                  <Link\n                    to={this.props.menuProps.editHref}\n                    role={'menuitem'}\n                    tabIndex={2}\n                  >\n                    {this.props.menuProps.i18nEditLabel}\n                  </Link>\n                </li>\n                <li\n                  className={\n                    !this.props.menuProps.isDeleteEnabled ? 'disabled' : ''\n                  }\n                  role={'presentation'}\n                  key={2}\n                >\n                  <a\n                    href={'javascript:void(0)'}\n                    onClick={this.showDeleteDialog}\n                    role={'menuitem'}\n                    tabIndex={3}\n                  >\n                    {this.props.menuProps.i18nDeleteLabel}\n                  </a>\n                </li>\n              </DropdownKebab>\n            </div>\n          )}\n          <Link to={this.props.href} className={'connection-card'}>\n            <Card.Body>\n              <div className={'connection-card__content'}>\n                <div className=\"connection-card__icon\">\n                  <img src={this.props.icon} alt={this.props.name} width={46} />\n                </div>\n                <Title\n                  size=\"lg\"\n                  className=\"connection-card__title h2\"\n                  data-testid=\"connection-card-title\"\n                >\n                  {this.props.name}\n                </Title>\n                <Text className=\"connection-card__description\">\n                  {this.props.description}\n                </Text>\n              </div>\n            </Card.Body>\n          </Link>\n        </Card>\n      </>\n    );\n  }\n}\n","import { Alert, Button, Row } from 'patternfly-react';\nimport * as React from 'react';\nimport { Container, Loader } from '../Layout';\nimport './ConnectionDetailsForm.css';\n\nexport interface IConnectionDetailsValidationResult {\n  message: string;\n  type: 'error' | 'success';\n}\n\nexport interface IConnectionDetailsFormProps {\n  /**\n   * The localized text for the cancel button.\n   */\n  i18nCancelLabel: string;\n\n  /**\n   * The localized text for the edit button.\n   */\n  i18nEditLabel: string;\n\n  /**\n   * The localized text for the save button.\n   */\n  i18nSaveLabel: string;\n\n  /**\n   * The localized text of the form title.\n   */\n  i18nTitle: string;\n\n  /**\n   * The localized text for the validate button.\n   */\n  i18nValidateLabel: string;\n\n  /**\n   * `true` if all form fields have valid values.\n   */\n  isValid: boolean;\n\n  /**\n   * `true` if the parent is doing some work and this form should disable user input.\n   */\n  isWorking: boolean;\n\n  /**\n   * Form level validationResults\n   */\n  validationResults: IConnectionDetailsValidationResult[];\n\n  /**\n   * The callback fired when submitting the form.\n   * @param e\n   */\n  handleSubmit: (e?: any) => void;\n\n  /**\n   * The callback for when the validate button is clicked.\n   */\n  onValidate: () => void;\n\n  /**\n   * `true` when the connection details are being edited.\n   */\n  isEditing: boolean;\n\n  /**\n   * The callback for editing has been canceled.\n   */\n  onCancelEditing: () => void;\n\n  /**\n   * The callback for start editing.\n   */\n  onStartEditing: () => void;\n}\n\nexport class ConnectionDetailsForm extends React.Component<\n  IConnectionDetailsFormProps\n> {\n  public static defaultProps = {\n    validationResults: [],\n  };\n\n  public render() {\n    return (\n      <Container>\n        <form\n          className=\"form-horizontal required-pf\"\n          role=\"form\"\n          onSubmit={this.props.handleSubmit}\n        >\n          <div className=\"row row-cards-pf\">\n            <div className=\"card-pf\">\n              {this.props.validationResults.map((e, idx) => (\n                <Alert key={idx} type={e.type}>\n                  {e.message}\n                </Alert>\n              ))}\n              <div className=\"card-pf-title\">{this.props.i18nTitle}</div>\n              <div className=\"card-pf-body connection-details-form__formFields\">\n                <Container>{this.props.children}</Container>\n                {this.props.isEditing ? (\n                  <Container>\n                    <Row>\n                      <Button\n                        bsStyle=\"default\"\n                        className=\"connection-details-form__editButton\"\n                        disabled={this.props.isWorking || !this.props.isValid}\n                        onClick={this.props.onValidate}\n                      >\n                        {this.props.isWorking ? (\n                          <Loader size={'sm'} inline={true} />\n                        ) : null}\n                        {this.props.i18nValidateLabel}\n                      </Button>\n                    </Row>\n                    <Row>\n                      <Button\n                        bsStyle=\"default\"\n                        className=\"connection-details-form__editButton\"\n                        disabled={this.props.isWorking}\n                        onClick={this.props.onCancelEditing}\n                      >\n                        {this.props.i18nCancelLabel}\n                      </Button>\n                      <Button\n                        bsStyle=\"primary\"\n                        className=\"connection-details-form__editButton\"\n                        disabled={this.props.isWorking || !this.props.isValid}\n                        onClick={this.props.handleSubmit}\n                      >\n                        {this.props.i18nSaveLabel}\n                      </Button>\n                    </Row>\n                  </Container>\n                ) : (\n                  <Button bsStyle=\"primary\" onClick={this.props.onStartEditing}>\n                    {this.props.i18nEditLabel}\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        </form>\n      </Container>\n    );\n  }\n}\n","import { Grid } from 'patternfly-react';\nimport * as React from 'react';\nimport { Container } from '../Layout';\nimport { InlineTextEdit } from '../Shared';\nimport './ConnectionDetailsHeader.css';\n\nexport interface IConnectionDetailsHeaderProps {\n  /**\n   * `true` if the name and description can be edited.\n   */\n  allowEditing: boolean;\n\n  /**\n   * The optional connection description.\n   */\n  connectionDescription?: string;\n\n  /**\n   * The optional connection icon.\n   */\n  connectionIcon?: string;\n\n  /**\n   * The name of the connection.\n   */\n  connectionName: string;\n\n  /**\n   * The localized text of the description label.\n   */\n  i18nDescriptionLabel: string;\n\n  /**\n   * The localized placeholder text of the connection description.\n   */\n  i18nDescriptionPlaceholder: string;\n\n  /**\n   * The localized placeholder text of the connection name.\n   */\n  i18nNamePlaceholder: string;\n\n  /**\n   * The localized text of the usage label.\n   */\n  i18nUsageLabel: string;\n\n  /**\n   * The localized message that provides the number of integrations that are using this connection.\n   */\n  i18nUsageMessage: string;\n\n  /**\n   * `true` when the name or description is being saved.\n   */\n  isWorking: boolean;\n\n  /**\n   * The callback for when the connection description should be saved.\n   * @param newDescription - the new description being saved\n   * @returns `true` if save was successful\n   */\n  onChangeDescription: (newDescription: string) => Promise<boolean>;\n\n  /**\n   * The callback for when the connection name should be saved.\n   * @param newName - the new name being saved\n   * @returns `true` if save was successful\n   */\n  onChangeName: (newName: string) => Promise<boolean>;\n}\n\n/**\n * Line 1: icon, name, edit icon (makes name editable when clicked)\n * Line 2: description label and value\n * Line 3: usage label and value\n */\nexport class ConnectionDetailsHeader extends React.Component<\n  IConnectionDetailsHeaderProps\n> {\n  public render() {\n    return (\n      <Grid fluid={true}>\n        <Grid.Row className={'connection-details-header__row'}>\n          {this.props.connectionIcon ? (\n            <Grid.Col xs={1}>\n              <Container className=\"blank-slate-pf-icon\">\n                <img\n                  className=\"connection-details-header__connectionIcon\"\n                  src={this.props.connectionIcon}\n                  alt={this.props.connectionName}\n                  width={46}\n                />\n              </Container>\n            </Grid.Col>\n          ) : null}\n          <Grid.Col xs={11}>\n            <InlineTextEdit\n              className=\"connection-details-header__connectionName\"\n              value={this.props.connectionName}\n              allowEditing={this.props.allowEditing && !this.props.isWorking}\n              placeholder={this.props.i18nNamePlaceholder}\n              isTextArea={false}\n              onChange={this.props.onChangeName}\n            />\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row className={'connection-details-header__row'}>\n          <Grid.Col xs={2} className=\"connection-details-header__propertyLabel\">\n            {this.props.i18nDescriptionLabel}\n          </Grid.Col>\n          <Grid.Col xs={10}>\n            <InlineTextEdit\n              value={this.props.connectionDescription || ''}\n              allowEditing={this.props.allowEditing && !this.props.isWorking}\n              i18nPlaceholder={this.props.i18nDescriptionPlaceholder}\n              isTextArea={true}\n              onChange={this.props.onChangeDescription}\n            />\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"connection-details-header__propertyLabel\">\n            {this.props.i18nUsageLabel}\n          </Grid.Col>\n          <Grid.Col\n            xs={10}\n            className=\"connection-details-header__propertyValue\"\n          >\n            {this.props.i18nUsageMessage}\n          </Grid.Col>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n","import { CardGrid } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class ConnectionsGrid extends React.Component {\n  public render() {\n    return (\n      <CardGrid fluid={true} matchHeight={true}>\n        <CardGrid.Row>{this.props.children}</CardGrid.Row>\n      </CardGrid>\n    );\n  }\n}\n","import { CardGrid } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class ConnectionsGridCell extends React.Component {\n  public render() {\n    return (\n      <CardGrid.Col xs={6} md={3}>\n        {this.props.children}\n      </CardGrid.Col>\n    );\n  }\n}\n","import * as H from 'history';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../Shared';\n\nexport interface IConnectionsListViewProps extends IListViewToolbarProps {\n  linkToConnectionCreate: H.LocationDescriptor;\n  i18nLinkCreateConnection: H.LocationDescriptor;\n}\n\nexport class ConnectionsListView extends React.Component<\n  IConnectionsListViewProps\n> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <ButtonLink href={this.props.linkToConnectionCreate} as={'primary'}>\n              {this.props.i18nLinkCreateConnection}\n            </ButtonLink>\n          </div>\n        </ListViewToolbar>\n        <Container>{this.props.children}</Container>\n      </>\n    );\n  }\n}\n","import { Alert } from 'patternfly-react';\nimport * as React from 'react';\nimport { Container } from '../Layout';\n\nexport interface IConnectorConfigurationFormValidationResult {\n  message: string;\n  type: 'error' | 'success';\n}\n\nexport interface IConnectorConfigurationFormProps {\n  /**\n   * The internationalized form title.\n   */\n  i18nFormTitle?: string;\n  /**\n   * Form level validationResults\n   */\n  validationResults?: IConnectorConfigurationFormValidationResult[];\n  /**\n   * The callback fired when submitting the form.\n   * @param e\n   */\n  handleSubmit: (e?: any) => void;\n}\n\n/**\n * A component to render a save form, to be used in the integration\n * editor. This does *not* build the form itself, form's field should be passed\n * as the `children` value.\n * @see [i18nTitle]{@link IConnectorConfigurationFormProps#i18nTitle}\n * @see [i18nSubtitle]{@link IConnectorConfigurationFormProps#i18nSubtitle}\n */\nexport class ConnectorConfigurationForm extends React.Component<\n  IConnectorConfigurationFormProps\n> {\n  public static defaultProps = {\n    validationResults: [],\n  };\n\n  public render() {\n    return (\n      <Container>\n        <form\n          className=\"form-horizontal required-pf\"\n          role=\"form\"\n          onSubmit={this.props.handleSubmit}\n        >\n          <div className=\"row row-cards-pf\">\n            <div className=\"card-pf\">\n              {this.props.i18nFormTitle && (\n                <div className=\"card-pf-title\">{this.props.i18nFormTitle}</div>\n              )}\n              <div className=\"card-pf-body\">\n                {this.props.validationResults!.map((e, idx) => (\n                  <Alert key={idx} type={e.type}>\n                    {e.message}\n                  </Alert>\n                ))}\n                <Container>{this.props.children}</Container>\n              </div>\n            </div>\n          </div>\n        </form>\n      </Container>\n    );\n  }\n}\n","export interface ICiCdListPageItem {\n  name: string;\n  i18nUsesText: string;\n}\n\nexport interface ITagIntegrationEntry {\n  name: string;\n  selected: boolean;\n}\n\nexport enum TagNameValidationError {\n  NoErrors = 'NoErrors',\n  NoName = 'NoName',\n  NameInUse = 'NameInUse',\n}\n","import { Text } from '@patternfly/react-core';\nimport { Card, CardBody } from 'patternfly-react';\nimport * as React from 'react';\nimport './ApiConnectorDetailCard.css';\n\nexport interface IApiConnectorDetailCardProps {\n  description?: string;\n  icon?: string;\n  name: string;\n}\n\nexport class ApiConnectorDetailCard extends React.Component<\n  IApiConnectorDetailCardProps\n> {\n  public render() {\n    return (\n      <Card className=\"api-connector-card\">\n        <CardBody>\n          <div className={'api-connector-card__content'}>\n            <div>\n              <img\n                className=\"api-connector-card__icon\"\n                src={this.props.icon}\n                alt={this.props.name}\n              />\n            </div>\n            <div\n              className=\"api-connector__title h2\"\n              data-testid=\"api-connector-card-title\"\n            >\n              {this.props.name}\n            </div>\n            <Text className=\"api-connector-card__description\">\n              {this.props.description}\n            </Text>\n          </div>\n        </CardBody>\n      </Card>\n    );\n  }\n}\n","import * as React from 'react';\n\nexport class ApiConnectorInfo extends React.Component {\n  public render() {\n    return <div>ApiConnectorInfo content goes here</div>;\n  }\n}\n","import * as React from 'react';\n\nexport class ApiConnectorReview extends React.Component {\n  public render() {\n    return <div>ApiConnectorReview content goes here</div>;\n  }\n}\n","import {\n  Card,\n  CardBody,\n  CardGrid,\n  CardHeading,\n  CardTitle,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ApiConnectorDetailCard } from './ApiConnectorDetailCard';\nimport { ApiConnectorInfo } from './ApiConnectorInfo';\nimport { ApiConnectorReview } from './ApiConnectorReview';\n\nexport interface IApiConnectorDetailProps {\n  description?: string;\n  icon?: string;\n  name: string;\n}\n\nexport class ApiConnectorDetail extends React.Component<\n  IApiConnectorDetailProps\n> {\n  public render() {\n    return (\n      <CardGrid fluid={true}>\n        <CardGrid.Row>\n          <CardGrid.Col xs={12} md={3}>\n            <ApiConnectorDetailCard\n              description={this.props.description}\n              icon={this.props.icon}\n              name={this.props.name}\n            />\n          </CardGrid.Col>\n          <CardGrid.Col xs={12} md={7}>\n            <Card>\n              <CardHeading>\n                <CardTitle>{this.props.name}</CardTitle>\n              </CardHeading>\n              <CardBody>\n                <ApiConnectorInfo />\n                <ApiConnectorReview />\n              </CardBody>\n            </Card>\n          </CardGrid.Col>\n        </CardGrid.Row>\n      </CardGrid>\n    );\n  }\n}\n","import {\n  Button,\n  ListViewInfoItem,\n  ListViewItem,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IApiConnectorListItemProps {\n  apiConnectorDescription?: string;\n  apiConnectorId: string;\n  apiConnectorName: string;\n  apiConnectorIcon?: string;\n  i18nDelete: string;\n  i18nDeleteTip?: string;\n  i18nDetails: string;\n  i18nDetailsTip?: string;\n  i18nUsedByMessage: string;\n  onDelete: (apiConnectorId: string) => void;\n  onDetails: (extensionId: string) => void;\n  usedBy: number;\n}\n\nexport class ApiConnectorListItem extends React.Component<\n  IApiConnectorListItemProps\n> {\n  public constructor(props: IApiConnectorListItemProps) {\n    super(props);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleDetails = this.handleDetails.bind(this);\n  }\n\n  public getDeleteTooltip() {\n    return (\n      <Tooltip id=\"deleteTip\">\n        {this.props.i18nDeleteTip\n          ? this.props.i18nDeleteTip\n          : this.props.i18nDelete}\n      </Tooltip>\n    );\n  }\n\n  public getDetailsTooltip() {\n    return (\n      <Tooltip id=\"detailsTip\">\n        {this.props.i18nDetailsTip\n          ? this.props.i18nDetailsTip\n          : this.props.i18nDetails}\n      </Tooltip>\n    );\n  }\n\n  public handleDelete() {\n    this.props.onDelete(this.props.apiConnectorId);\n  }\n\n  public handleDetails() {\n    this.props.onDetails(this.props.apiConnectorId);\n  }\n\n  public render() {\n    return (\n      <ListViewItem\n        actions={\n          <div className=\"form-group\">\n            <OverlayTrigger overlay={this.getDetailsTooltip()} placement=\"top\">\n              <Button bsStyle=\"default\" onClick={this.handleDetails}>\n                {this.props.i18nDetails}\n              </Button>\n            </OverlayTrigger>\n            <OverlayTrigger overlay={this.getDeleteTooltip()} placement=\"top\">\n              <Button\n                bsStyle=\"default\"\n                disabled={this.props.usedBy !== 0}\n                onClick={this.handleDelete}\n              >\n                {this.props.i18nDelete}\n              </Button>\n            </OverlayTrigger>\n          </div>\n        }\n        additionalInfo={[\n          <ListViewInfoItem key={1}>\n            {this.props.i18nUsedByMessage}\n          </ListViewInfoItem>,\n        ]}\n        description={\n          this.props.apiConnectorDescription\n            ? this.props.apiConnectorDescription\n            : ''\n        }\n        heading={this.props.apiConnectorName}\n        hideCloseIcon={true}\n        leftContent={\n          this.props.apiConnectorIcon ? (\n            <div className=\"blank-slate-pf-icon\">\n              <img\n                src={this.props.apiConnectorIcon}\n                alt={this.props.apiConnectorName}\n                width={46}\n              />\n            </div>\n          ) : null\n        }\n        stacked={true}\n      />\n    );\n  }\n}\n","import { Text, Title } from '@patternfly/react-core';\nimport {\n  EmptyState,\n  ListView,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../Shared';\n\nexport interface IApiConnectorListViewProps extends IListViewToolbarProps {\n  i18nDescription: string;\n  i18nEmptyStateInfo: string;\n  i18nEmptyStateTitle: string;\n  i18nLinkCreateApiConnector: string;\n  i18nLinkCreateApiConnectorTip?: string;\n  i18nName: string;\n  i18nTitle: string;\n  linkCreateApiConnector: string;\n}\n\nexport class ApiConnectorListView extends React.Component<\n  IApiConnectorListViewProps\n> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <OverlayTrigger\n              overlay={this.getCreateConnectorTooltip()}\n              placement=\"top\"\n            >\n              <ButtonLink\n                href={this.props.linkCreateApiConnector}\n                as={'primary'}\n              >\n                {this.props.i18nLinkCreateApiConnector}\n              </ButtonLink>\n            </OverlayTrigger>\n          </div>\n        </ListViewToolbar>\n        <Container>\n          {this.props.i18nTitle !== '' && (\n            <Title size=\"xl\">{this.props.i18nTitle}</Title>\n          )}\n          {this.props.i18nDescription !== '' && (\n            <Text\n              dangerouslySetInnerHTML={{ __html: this.props.i18nDescription }}\n            />\n          )}\n          {this.props.children ? (\n            <ListView>{this.props.children}</ListView>\n          ) : (\n            <EmptyState>\n              <EmptyState.Icon />\n              <EmptyState.Title>\n                {this.props.i18nEmptyStateTitle}\n              </EmptyState.Title>\n              <EmptyState.Info>{this.props.i18nEmptyStateInfo}</EmptyState.Info>\n              <EmptyState.Action>\n                <OverlayTrigger\n                  overlay={this.getCreateConnectorTooltip()}\n                  placement=\"top\"\n                >\n                  <ButtonLink\n                    href={this.props.linkCreateApiConnector}\n                    as={'primary'}\n                  >\n                    {this.props.i18nLinkCreateApiConnector}\n                  </ButtonLink>\n                </OverlayTrigger>\n              </EmptyState.Action>\n            </EmptyState>\n          )}\n        </Container>\n      </>\n    );\n  }\n\n  private getCreateConnectorTooltip() {\n    return (\n      <Tooltip id=\"createTip\">\n        {this.props.i18nLinkCreateApiConnectorTip\n          ? this.props.i18nLinkCreateApiConnectorTip\n          : this.props.i18nLinkCreateApiConnector}\n      </Tooltip>\n    );\n  }\n}\n","import { Title, TitleLevel } from '@patternfly/react-core';\nimport * as H from 'history';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeading,\n  CardTitle,\n  OverlayTrigger,\n  Row,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../Layout';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n} from '../Shared';\nimport './ExtensionDetail.css';\n\nexport interface IExtensionDetailProps {\n  /**\n   * The name of the extension.\n   */\n  extensionName: string;\n\n  /**\n   * The number of integrations that use this extension.\n   */\n  extensionUses: number;\n\n  /**\n   * The localized text of the cancel button used when deleting this extension.\n   */\n  i18nCancelText: string;\n\n  /**\n   * The localized text of the delete button.\n   */\n  i18nDelete: string;\n\n  /**\n   * The localized delete confirmation message.\n   */\n  i18nDeleteModalMessage: string;\n\n  /**\n   * The localized title of the delete dialog.\n   */\n  i18nDeleteModalTitle: string;\n\n  /**\n   * The localized tooltip of the delete button.\n   */\n  i18nDeleteTip?: string;\n\n  /**\n   * The localized message that displays the extension ID.\n   */\n  i18nIdMessage: string;\n\n  /**\n   * The localized text for the overview section title.\n   */\n  i18nOverviewSectionTitle: string;\n\n  /**\n   * The localized text of the supports section title.\n   */\n  i18nSupportsSectionTitle: string;\n\n  /**\n   * The localized text of the update button.\n   */\n  i18nUpdate: string;\n\n  /**\n   * The localized tooltip of the update button.\n   */\n  i18nUpdateTip?: string;\n\n  /**\n   * The localized text of the usage section title.\n   */\n  i18nUsageSectionTitle: string;\n\n  /**\n   * The JSX element that displayes the integrations used by this extension.\n   */\n  integrationsSection: JSX.Element;\n\n  /**\n   * An href to use when the extension is being updated.\n   */\n  linkUpdateExtension: H.LocationDescriptor;\n\n  /**\n   * The callback for when the delete button is clicked.\n   */\n  onDelete: () => void;\n\n  /**\n   * The JSX element that displays the overview section.\n   */\n  overviewSection: JSX.Element;\n\n  /**\n   * The JSX element that displays the supports section.\n   */\n  supportsSection: JSX.Element;\n}\n\nexport interface IExtensionDetailState {\n  showDeleteDialog: boolean;\n}\n\nexport class ExtensionDetail extends React.Component<\n  IExtensionDetailProps,\n  IExtensionDetailState\n> {\n  public constructor(props: IExtensionDetailProps) {\n    super(props);\n\n    this.state = {\n      showDeleteDialog: false, // initial visibility of delete dialog\n    };\n\n    this.doCancel = this.doCancel.bind(this);\n    this.doDelete = this.doDelete.bind(this);\n    this.showDeleteDialog = this.showDeleteDialog.bind(this);\n  }\n\n  public doCancel() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n  }\n\n  public doDelete() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n\n    // TODO: disable components while delete is processing\n    this.props.onDelete();\n  }\n\n  public getDeleteTooltip() {\n    return (\n      <Tooltip id=\"deleteTip\">\n        {this.props.i18nDeleteTip\n          ? this.props.i18nDeleteTip\n          : this.props.i18nDelete}\n      </Tooltip>\n    );\n  }\n\n  public getUpdateTooltip() {\n    return (\n      <Tooltip id=\"updateTip\">\n        {this.props.i18nUpdateTip\n          ? this.props.i18nUpdateTip\n          : this.props.i18nUpdate}\n      </Tooltip>\n    );\n  }\n\n  public showDeleteDialog() {\n    this.setState({\n      showDeleteDialog: true,\n    });\n  }\n\n  public render() {\n    return (\n      <>\n        <ConfirmationDialog\n          buttonStyle={ConfirmationButtonStyle.DANGER}\n          i18nCancelButtonText={this.props.i18nCancelText}\n          i18nConfirmButtonText={this.props.i18nDelete}\n          i18nConfirmationMessage={this.props.i18nDeleteModalMessage}\n          i18nTitle={this.props.i18nDeleteModalTitle}\n          icon={ConfirmationIconType.DANGER}\n          showDialog={this.state.showDeleteDialog}\n          onCancel={this.doCancel}\n          onConfirm={this.doDelete}\n        />\n        <Card matchHeight={true}>\n          <CardHeading>\n            <CardTitle>\n              <Row>\n                <Title\n                  size=\"xl\"\n                  className={'col-sm-8 extension-detail__extensionTitle'}\n                >\n                  {this.props.extensionName}\n                  <span className={'extension-detail__extensionId'}>\n                    {this.props.i18nIdMessage}\n                  </span>\n                </Title>\n                <div className=\"col-sm-4 text-right extension-detail__titleButtons\">\n                  <OverlayTrigger\n                    overlay={this.getUpdateTooltip()}\n                    placement=\"top\"\n                  >\n                    <ButtonLink\n                      href={this.props.linkUpdateExtension}\n                      as={'primary'}\n                    >\n                      {this.props.i18nUpdate}\n                    </ButtonLink>\n                  </OverlayTrigger>\n                  <OverlayTrigger\n                    overlay={this.getDeleteTooltip()}\n                    placement=\"top\"\n                  >\n                    <Button\n                      bsStyle=\"default\"\n                      disabled={this.props.extensionUses !== 0}\n                      onClick={this.showDeleteDialog}\n                    >\n                      {this.props.i18nDelete}\n                    </Button>\n                  </OverlayTrigger>\n                </div>\n              </Row>\n            </CardTitle>\n          </CardHeading>\n          <CardBody>\n            <Title\n              size=\"md\"\n              headingLevel={TitleLevel.h3}\n              className=\"extension-detail__sectionHeading\"\n            >\n              {this.props.i18nOverviewSectionTitle}\n            </Title>\n            {this.props.overviewSection}\n            <Title\n              size=\"md\"\n              headingLevel={TitleLevel.h3}\n              className=\"extension-detail__sectionHeading\"\n            >\n              {this.props.i18nSupportsSectionTitle}\n            </Title>\n            {this.props.supportsSection}\n            <Title\n              size=\"md\"\n              headingLevel={TitleLevel.h3}\n              className=\"extension-detail__sectionHeading\"\n            >\n              {this.props.i18nUsageSectionTitle}\n            </Title>\n            {this.props.integrationsSection}\n          </CardBody>\n        </Card>\n      </>\n    );\n  }\n}\n","import { Text } from '@patternfly/react-core';\nimport { Alert, Card } from 'patternfly-react';\nimport * as React from 'react';\nimport { DndFileChooser } from '../Shared/DndFileChooser';\n\nexport interface IExtensionImportCardProps {\n  /**\n   * `true` if the dropzone should be disabled.\n   */\n  dndDisabled: boolean;\n\n  /**\n   * A localized alert message when a jar file cannot be processed as an extension.\n   */\n  i18nAlertMessage?: string;\n\n  /**\n   * The localized text that appears below the selected file information at the bottom of the drop area. This\n   * message should identify the accepted file extension.\n   */\n  i18nDndHelpMessage: string;\n\n  /**\n   * The localized text (may include HTML tags) that appears above the selected file information at the\n   * top of the drop area. This message should describe how the DnD works.\n   */\n  i18nDndInstructions: string;\n\n  /**\n   * The localized text that appears when no file has been selected.\n   */\n  i18nDndNoFileSelectedMessage: string;\n\n  /**\n   * The localized text for the label that appears before the selected file information.\n   */\n  i18nDndSelectedFileLabel: string;\n\n  /**\n   * A general, localized message for when a file upload failed. This message will be shown\n   * along with an error icon and appears next to the selected file message. If this property\n   * is set then `i18nDndUploadSuccessMessage` should not be set.\n   */\n  i18nDndUploadFailedMessage?: string;\n\n  /**\n   * A general, localized message for when a file upload was successful. This message will be shown\n   * along with an OK icon and appear next to the selected file message. If this property\n   * is set then `i18nDndUploadFailedMessage` should not be set.\n   */\n  i18nDndUploadSuccessMessage?: string;\n\n  /**\n   * The localized instructions text that appears above the DnD component.\n   */\n  i18nImportInstructions: string;\n\n  /**\n   * The localized title text that appears above the DnD component.\n   */\n  i18nTitle: string;\n\n  /**\n   * Callback for when one or more file uploads have been accepted. Caller should handler processing of the files.\n   */\n  onDndUploadAccepted(files: File[]): void;\n\n  /**\n   * The localized text (may include HTML tags) that appears when the file upload fails.\n   */\n  onDndUploadRejected(fileName: string): string;\n}\n\nexport class ExtensionImportCard extends React.Component<\n  IExtensionImportCardProps\n> {\n  public render() {\n    return (\n      <Card>\n        <Card.Heading>\n          <Card.Title>{this.props.i18nTitle}</Card.Title>\n        </Card.Heading>\n        <Card.Body>\n          <Text>{this.props.i18nImportInstructions}</Text>\n          {this.props.i18nAlertMessage ? (\n            <Alert type={'error'}>\n              <span>{this.props.i18nAlertMessage}</span>\n            </Alert>\n          ) : null}\n          <DndFileChooser\n            disableDropzone={this.props.dndDisabled}\n            fileExtensions={'.jar'}\n            i18nHelpMessage={this.props.i18nDndHelpMessage}\n            i18nInstructions={this.props.i18nDndInstructions}\n            i18nNoFileSelectedMessage={this.props.i18nDndNoFileSelectedMessage}\n            i18nSelectedFileLabel={this.props.i18nDndSelectedFileLabel}\n            i18nUploadFailedMessage={this.props.i18nDndUploadFailedMessage}\n            i18nUploadSuccessMessage={this.props.i18nDndUploadSuccessMessage}\n            onUploadAccepted={this.props.onDndUploadAccepted}\n            onUploadRejected={this.props.onDndUploadRejected}\n          />\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n","import * as H from 'history';\nimport { Button, Grid } from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../Layout';\nimport './ExtensionImportReview.css';\n\nexport interface IImportAction {\n  description: string;\n  name: string;\n}\n\nexport interface IExtensionImportReviewProps {\n  /**\n   * The extension actions.\n   */\n  actions?: IImportAction[];\n\n  /**\n   * The href that will be navigated to when the cancel button is clicked.\n   */\n  cancelLink: H.LocationDescriptor;\n\n  /**\n   * The optional description of the extension.\n   */\n  extensionDescription?: string;\n\n  /**\n   * The ID of the extension.\n   */\n  extensionId: string;\n\n  /**\n   * The name of the extension.\n   */\n  extensionName: string;\n\n  /**\n   * The unique, not for user consumption, identifier.\n   */\n  extensionUid: string;\n\n  /**\n   * The localized label for the list of actions.\n   */\n  i18nActionsLabel: string;\n\n  /**\n   * The localized text for the cancel button.\n   */\n  i18nCancel: string;\n\n  /**\n   * The localized 'Description' label.\n   */\n  i18nDescriptionLabel: string;\n\n  /**\n   * The localized text identifying the extension type.\n   */\n  i18nExtensionTypeMessage: string;\n\n  /**\n   * The localized 'ID' label.\n   */\n  i18nIdLabel: string;\n\n  /**\n   * The localized text for the import button.\n   */\n  i18nImport: string;\n\n  /**\n   * The localized 'Name' label.\n   */\n  i18nNameLabel: string;\n\n  /**\n   * The localized title.\n   */\n  i18nTitle: string;\n\n  /**\n   * The localized 'Type' label.\n   */\n  i18nTypeLabel: string;\n\n  /**\n   * Obtains a localized message with the action name and description.\n   * @param name the action name\n   * @param description the action description\n   */\n  i18nActionText(name: string, description: string): string;\n\n  /**\n   * Callback for when the import button is clicked.\n   * @param extensionUid the UID of the extension being imported/installed\n   */\n  onImport(extensionUid: string): void;\n}\n\n/**\n * A component that displays the extension import review information.\n */\nexport class ExtensionImportReview extends React.Component<\n  IExtensionImportReviewProps\n> {\n  public constructor(props: IExtensionImportReviewProps) {\n    super(props);\n    this.handleImport = this.handleImport.bind(this);\n  }\n\n  public getActions(): JSX.Element {\n    if (!this.props.actions) {\n      return <Grid.Col />;\n    }\n\n    return (\n      <Container>\n        {this.props.actions\n          ? this.props.actions.map((action, index) =>\n              index === 0 ? (\n                <Grid.Col\n                  key={0}\n                  dangerouslySetInnerHTML={{\n                    __html: this.props.i18nActionText(\n                      action.name,\n                      action.description\n                    ),\n                  }}\n                />\n              ) : (\n                <Grid.Row key={index}>\n                  <Grid.Col key={0} xs={2} />\n                  <Grid.Col\n                    key={1}\n                    dangerouslySetInnerHTML={{\n                      __html: this.props.i18nActionText(\n                        action.name,\n                        action.description\n                      ),\n                    }}\n                  />\n                </Grid.Row>\n              )\n            )\n          : null}\n      </Container>\n    );\n  }\n\n  public handleImport() {\n    return this.props.onImport(this.props.extensionUid);\n  }\n\n  public render() {\n    return (\n      <Grid className=\"extension-import-review__container\">\n        <Grid.Row className=\"extension-import-review__title\">\n          {this.props.i18nTitle}\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-import-review__propertyLabel\">\n            {this.props.i18nIdLabel}\n          </Grid.Col>\n          <Grid.Col className=\"extension-import-review__propertyValue\">\n            {this.props.extensionId}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-import-review__propertyLabel\">\n            {this.props.i18nNameLabel}\n          </Grid.Col>\n          <Grid.Col className=\"extension-import-review__propertyValue\">\n            {this.props.extensionName}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-import-review__propertyLabel\">\n            {this.props.i18nDescriptionLabel}\n          </Grid.Col>\n          <Grid.Col className=\"extension-import-review__propertyValue\">\n            {this.props.extensionDescription\n              ? this.props.extensionDescription\n              : null}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-import-review__propertyLabel\">\n            {this.props.i18nTypeLabel}\n          </Grid.Col>\n          <Grid.Col className=\"extension-import-review__propertyValue\">\n            {this.props.i18nExtensionTypeMessage}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-import-review__propertyLabel\">\n            {this.props.i18nActionsLabel}\n          </Grid.Col>\n          {this.getActions()}\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xsOffset={2}>\n            <Grid.Row>\n              <Grid.Col>\n                <Container className=\"extension-import-review__buttonBar\">\n                  <Button bsStyle=\"primary\" onClick={this.handleImport}>\n                    {this.props.i18nImport}\n                  </Button>\n                  <ButtonLink\n                    className=\"extension-import-review__cancelButton\"\n                    href={this.props.cancelLink}\n                    as={'default'}\n                  >\n                    {this.props.i18nCancel}\n                  </ButtonLink>\n                </Container>\n              </Grid.Col>\n            </Grid.Row>\n          </Grid.Col>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n","import { Text } from '@patternfly/react-core';\nimport { Row, Table } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IExtensionIntegration {\n  id: string; // used to create link to integration details page\n  name: string;\n  description: string;\n}\n\nexport interface IExtensionIntegrationsTableProps {\n  i18nDescription: string;\n  i18nName: string;\n  i18nUsageMessage: string;\n  onSelectIntegration: (integrationId: string) => void;\n  data: IExtensionIntegration[];\n}\n\nexport class ExtensionIntegrationsTable extends React.Component<\n  IExtensionIntegrationsTableProps\n> {\n  public getColumns() {\n    const headerFormat = (value: string) => (\n      <Table.Heading>{value}</Table.Heading>\n    );\n\n    const clickableValueFormat = (\n      value: string,\n      { rowData }: { rowData: any }\n    ) => {\n      // rowData is an Integration type so 'name' property is what makes the integration unique\n      const onClick = () => this.onIntegrationSelected(rowData.id);\n      return (\n        <Table.Cell>\n          <a href=\"javascript:void(0)\" onClick={onClick}>\n            {value}\n          </a>\n        </Table.Cell>\n      );\n    };\n\n    // Creates 2 columns:\n    // 1. first column is integration name\n    // 2. second column is optional integration description.\n    return [\n      {\n        cell: {\n          formatters: [clickableValueFormat],\n        },\n        header: {\n          formatters: [headerFormat],\n          label: this.props.i18nName,\n        },\n        property: 'name', // must match the name of the IntegrationOverview.name property\n      },\n      {\n        cell: {\n          formatters: [(value: string) => <Table.Cell>{value}</Table.Cell>],\n        },\n        header: {\n          formatters: [headerFormat],\n          label: this.props.i18nDescription,\n        },\n        property: 'description', // must match the name of the IntegrationOverview.description property\n      },\n    ];\n  }\n\n  public onIntegrationSelected(integrationId: string) {\n    this.props.onSelectIntegration(integrationId);\n  }\n\n  public render() {\n    return (\n      <div className=\"extension-group\">\n        <Row>\n          <div className=\"col-xs-offset-1 col-xs-11\">\n            <Text>{this.props.i18nUsageMessage}</Text>\n            {this.props.data.length !== 0 ? (\n              <Table.PfProvider\n                striped={true}\n                bordered={true}\n                hover={true}\n                columns={this.getColumns()}\n              >\n                <Table.Header />\n                <Table.Body rows={this.props.data} rowKey=\"name\" />\n              </Table.PfProvider>\n            ) : null}\n          </div>\n        </Row>\n      </div>\n    );\n  }\n}\n","import * as H from 'history';\nimport {\n  Button,\n  ListViewInfoItem,\n  ListViewItem,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../Layout';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n} from '../Shared';\n\nexport interface IExtensionListItemProps {\n  detailsPageLink: H.LocationDescriptor;\n  extensionDescription?: string;\n  extensionIcon?: string;\n  extensionId: string;\n  extensionName: string;\n  i18nCancelText: string;\n  i18nDelete: string;\n  i18nDeleteModalMessage: string;\n  i18nDeleteModalTitle: string;\n  i18nDeleteTip?: string;\n  i18nDetails: string;\n  i18nDetailsTip?: string;\n  i18nExtensionType: string;\n  i18nUpdate: string;\n  i18nUpdateTip?: string;\n  i18nUsedByMessage: string;\n\n  /**\n   * An href to use when the extension is being updated.\n   */\n  linkUpdateExtension: H.LocationDescriptor;\n\n  onDelete: (extensionId: string) => void;\n  usedBy: number;\n}\n\nexport interface IExtensionListItemState {\n  showDeleteDialog: boolean;\n}\n\nexport class ExtensionListItem extends React.Component<\n  IExtensionListItemProps,\n  IExtensionListItemState\n> {\n  public constructor(props: IExtensionListItemProps) {\n    super(props);\n\n    this.state = {\n      showDeleteDialog: false, // initial visibility of delete dialog\n    };\n\n    this.doCancel = this.doCancel.bind(this);\n    this.doDelete = this.doDelete.bind(this);\n    this.showDeleteDialog = this.showDeleteDialog.bind(this);\n  }\n\n  public doCancel() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n  }\n\n  public doDelete() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n\n    // TODO: disable components while delete is processing\n    this.props.onDelete(this.props.extensionId);\n  }\n\n  public getDeleteTooltip() {\n    return (\n      <Tooltip id=\"deleteTip\">\n        {this.props.i18nDeleteTip\n          ? this.props.i18nDeleteTip\n          : this.props.i18nDelete}\n      </Tooltip>\n    );\n  }\n\n  public getDetailsTooltip() {\n    return (\n      <Tooltip id=\"detailsTip\">\n        {this.props.i18nDetailsTip\n          ? this.props.i18nDetailsTip\n          : this.props.i18nDetails}\n      </Tooltip>\n    );\n  }\n\n  public getUpdateTooltip() {\n    return (\n      <Tooltip id=\"updateTip\">\n        {this.props.i18nUpdateTip\n          ? this.props.i18nUpdateTip\n          : this.props.i18nUpdate}\n      </Tooltip>\n    );\n  }\n\n  public showDeleteDialog() {\n    this.setState({\n      showDeleteDialog: true,\n    });\n  }\n\n  public render() {\n    return (\n      <>\n        <ConfirmationDialog\n          // extensionId={this.props.extensionId}\n          buttonStyle={ConfirmationButtonStyle.DANGER}\n          i18nCancelButtonText={this.props.i18nCancelText}\n          i18nConfirmButtonText={this.props.i18nDelete}\n          i18nConfirmationMessage={this.props.i18nDeleteModalMessage}\n          i18nTitle={this.props.i18nDeleteModalTitle}\n          icon={ConfirmationIconType.DANGER}\n          showDialog={this.state.showDeleteDialog}\n          onCancel={this.doCancel}\n          onConfirm={this.doDelete}\n        />\n        <ListViewItem\n          actions={\n            <div className=\"form-group\">\n              <OverlayTrigger\n                overlay={this.getDetailsTooltip()}\n                placement=\"top\"\n              >\n                <ButtonLink href={this.props.detailsPageLink} as={'default'}>\n                  {this.props.i18nDetails}\n                </ButtonLink>\n              </OverlayTrigger>\n              <OverlayTrigger overlay={this.getUpdateTooltip()} placement=\"top\">\n                <ButtonLink\n                  href={this.props.linkUpdateExtension}\n                  as={'default'}\n                >\n                  {this.props.i18nUpdate}\n                </ButtonLink>\n              </OverlayTrigger>\n              <OverlayTrigger overlay={this.getDeleteTooltip()} placement=\"top\">\n                <Button\n                  bsStyle=\"default\"\n                  disabled={this.props.usedBy !== 0}\n                  onClick={this.showDeleteDialog}\n                >\n                  {this.props.i18nDelete}\n                </Button>\n              </OverlayTrigger>\n            </div>\n          }\n          additionalInfo={[\n            <ListViewInfoItem key={1}>\n              {this.props.i18nExtensionType}\n            </ListViewInfoItem>,\n            <ListViewInfoItem key={2}>\n              {this.props.i18nUsedByMessage}\n            </ListViewInfoItem>,\n          ]}\n          description={\n            this.props.extensionDescription\n              ? this.props.extensionDescription\n              : ''\n          }\n          heading={this.props.extensionName}\n          hideCloseIcon={true}\n          leftContent={\n            this.props.extensionIcon ? (\n              <div className=\"blank-slate-pf-icon\">\n                <img\n                  src={this.props.extensionIcon}\n                  alt={this.props.extensionName}\n                  width={46}\n                />\n              </div>\n            ) : null\n          }\n          stacked={true}\n        />\n      </>\n    );\n  }\n}\n","import { Text, Title } from '@patternfly/react-core';\nimport * as H from 'history';\nimport {\n  EmptyState,\n  ListView,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../Shared';\n\nexport interface IExtensionListViewProps extends IListViewToolbarProps {\n  i18nDescription: string;\n  i18nEmptyStateInfo: string;\n  i18nEmptyStateTitle: string;\n  i18nLinkImportExtension: H.LocationDescriptor;\n  i18nLinkImportExtensionTip?: H.LocationDescriptor;\n  i18nName: string;\n  i18nNameFilterPlaceholder: string;\n  i18nTitle: string;\n  linkImportExtension: H.LocationDescriptor;\n}\n\nexport class ExtensionListView extends React.Component<\n  IExtensionListViewProps\n> {\n  public getImportTooltip() {\n    return (\n      <Tooltip id=\"importTip\">\n        {this.props.i18nLinkImportExtensionTip\n          ? this.props.i18nLinkImportExtensionTip\n          : this.props.i18nLinkImportExtension}\n      </Tooltip>\n    );\n  }\n\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <OverlayTrigger overlay={this.getImportTooltip()} placement=\"top\">\n              <ButtonLink href={this.props.linkImportExtension} as={'primary'}>\n                {this.props.i18nLinkImportExtension}\n              </ButtonLink>\n            </OverlayTrigger>\n          </div>\n        </ListViewToolbar>\n        <Container>\n          {this.props.i18nTitle !== '' && (\n            <Title size=\"lg\">{this.props.i18nTitle}</Title>\n          )}\n          {this.props.i18nDescription !== '' && (\n            <Text\n              dangerouslySetInnerHTML={{ __html: this.props.i18nDescription }}\n            />\n          )}\n          {this.props.children ? (\n            <ListView>{this.props.children}</ListView>\n          ) : (\n            <EmptyState>\n              <EmptyState.Icon />\n              <EmptyState.Title>\n                {this.props.i18nEmptyStateTitle}\n              </EmptyState.Title>\n              <EmptyState.Info>{this.props.i18nEmptyStateInfo}</EmptyState.Info>\n              <EmptyState.Action>\n                <OverlayTrigger\n                  overlay={this.getImportTooltip()}\n                  placement=\"top\"\n                >\n                  <ButtonLink\n                    href={this.props.linkImportExtension}\n                    as={'primary'}\n                  >\n                    {this.props.i18nLinkImportExtension}\n                  </ButtonLink>\n                </OverlayTrigger>\n              </EmptyState.Action>\n            </EmptyState>\n          )}\n        </Container>\n      </>\n    );\n  }\n}\n","import { Grid } from 'patternfly-react';\nimport * as React from 'react';\nimport './ExtensionOverview.css';\n\nexport interface IExtensionOverviewProps {\n  /**\n   * The optional description of the extension.\n   */\n  extensionDescription?: string;\n\n  /**\n   * The name of the extension.\n   */\n  extensionName: string;\n\n  /**\n   * The localized 'Description' label.\n   */\n  i18nDescription: string;\n\n  /**\n   * The localized 'Last Update' label.\n   */\n  i18nLastUpdate: string;\n\n  /**\n   * The localized last update date.\n   */\n  i18nLastUpdateDate?: string;\n\n  /**\n   * The localized 'Name' label.\n   */\n  i18nName: string;\n\n  /**\n   * The localized 'Type' label.\n   */\n  i18nType: string;\n\n  /**\n   * The localized type message.\n   */\n  i18nTypeMessage: string;\n}\n\n/**\n * A component that displays the overview section of the extension details page.\n */\nexport class ExtensionOverview extends React.Component<\n  IExtensionOverviewProps\n> {\n  public render() {\n    return (\n      <Grid>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-overview__propertyLabel\">\n            {this.props.i18nName}\n          </Grid.Col>\n          <Grid.Col className=\"extension-overview__propertyValue\">\n            {this.props.extensionName}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-overview__propertyLabel\">\n            {this.props.i18nDescription}\n          </Grid.Col>\n          <Grid.Col className=\"extension-overview__propertyValue\">\n            {this.props.extensionDescription\n              ? this.props.extensionDescription\n              : null}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-overview__propertyLabel\">\n            {this.props.i18nType}\n          </Grid.Col>\n          <Grid.Col className=\"extension-overview__propertyValue\">\n            {this.props.i18nTypeMessage}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-overview__propertyLabel\">\n            {this.props.i18nLastUpdate}\n          </Grid.Col>\n          <Grid.Col className=\"extension-overview__propertyValue\">\n            {this.props.i18nLastUpdateDate\n              ? this.props.i18nLastUpdateDate\n              : null}\n          </Grid.Col>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n","import { Row } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IAction {\n  description: string;\n  name: string;\n}\n\nexport interface IExtensionSupportsProps {\n  extensionActions: IAction[];\n}\n\n/**\n * A component that displays the support section of the extension details page.\n */\nexport class ExtensionSupports extends React.Component<\n  IExtensionSupportsProps\n> {\n  public render() {\n    return (\n      <div className=\"extension-group\">\n        {this.props.extensionActions.length !== 0 ? (\n          <Row>\n            <div className=\"col-xs-offset-1 col-xs-11\">\n              {this.props.extensionActions.map(\n                (action: IAction, index: number) => (\n                  <div key={index}>\n                    <strong>{action.name}</strong> - {action.description}\n                  </div>\n                )\n              )}\n            </div>\n          </Row>\n        ) : null}\n      </div>\n    );\n  }\n}\n","import {\n  AggregateStatusCount,\n  AggregateStatusNotification,\n  AggregateStatusNotifications,\n  Card,\n  Icon,\n} from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IAggregatedMetricProps {\n  title: string;\n  ok: number;\n  error: number;\n}\n\nexport class AggregatedMetricCard extends React.PureComponent<\n  IAggregatedMetricProps\n> {\n  public render() {\n    return (\n      <Card accented={true} aggregated={true} matchHeight={true}>\n        <Card.Title>\n          <AggregateStatusCount>\n            <span data-testid=\"aggregate-title\">{this.props.title}</span>\n          </AggregateStatusCount>\n        </Card.Title>\n        <Card.Body>\n          <AggregateStatusNotifications>\n            <AggregateStatusNotification>\n              <Icon type=\"pf\" name=\"ok\" />\n              <span data-testid=\"aggregate-ok-count\">{this.props.ok}</span>{' '}\n            </AggregateStatusNotification>\n            <AggregateStatusNotification>\n              <Icon type=\"pf\" name=\"error-circle-o\" />\n              <span data-testid=\"aggregate-error-count\">\n                {this.props.error}\n              </span>\n            </AggregateStatusNotification>\n          </AggregateStatusNotifications>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n","import { Card } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IConnectionsMetricProps {\n  i18nTitle: string;\n}\n\nexport class ConnectionsMetric extends React.PureComponent<\n  IConnectionsMetricProps\n> {\n  public render() {\n    return (\n      <Card accented={true} aggregated={true} matchHeight={true}>\n        <Card.Title>{this.props.i18nTitle}</Card.Title>\n      </Card>\n    );\n  }\n}\n","import { Title } from '@patternfly/react-core';\nimport * as H from 'history';\nimport { CardGrid, Grid } from 'patternfly-react';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ButtonLink, Container } from '../Layout';\nimport './Dashboard.css';\n\nexport interface IIntegrationsPageProps {\n  linkToIntegrations: H.LocationDescriptor;\n  linkToIntegrationCreation: H.LocationDescriptor;\n  linkToConnections: H.LocationDescriptor;\n  linkToConnectionCreation: H.LocationDescriptor;\n  integrationsOverview: JSX.Element;\n  connectionsOverview: JSX.Element;\n  messagesOverview: JSX.Element;\n  uptimeOverview: JSX.Element;\n  topIntegrations: JSX.Element;\n  integrationBoard: JSX.Element;\n  integrationUpdates: JSX.Element;\n  connections: JSX.Element;\n  i18nConnections: string;\n  i18nLinkCreateConnection: string;\n  i18nLinkCreateIntegration: string;\n  i18nLinkToConnections: string;\n  i18nLinkToIntegrations: string;\n  i18nTitle: string;\n}\n\nexport class Dashboard extends React.PureComponent<IIntegrationsPageProps> {\n  public render() {\n    return (\n      <Container>\n        <Grid fluid={true}>\n          <Grid.Row>\n            <Grid.Col sm={12}>\n              <div className={'Dashboard-header'}>\n                <Title size=\"lg\" className={'Dashboard-header__title'}>\n                  {this.props.i18nTitle}\n                </Title>\n                <div className=\"Dashboard-header__actions\">\n                  <ButtonLink href={this.props.linkToIntegrations}>\n                    {this.props.i18nLinkToIntegrations}\n                  </ButtonLink>\n                  <ButtonLink\n                    href={this.props.linkToIntegrationCreation}\n                    as={'primary'}\n                  >\n                    {this.props.i18nLinkCreateIntegration}\n                  </ButtonLink>\n                </div>\n              </div>\n            </Grid.Col>\n          </Grid.Row>\n        </Grid>\n        <CardGrid fluid={true} matchHeight={true}>\n          <CardGrid.Row>\n            <CardGrid.Col sm={6} md={3}>\n              {this.props.integrationsOverview}\n            </CardGrid.Col>\n            <CardGrid.Col sm={6} md={3}>\n              {this.props.connectionsOverview}\n            </CardGrid.Col>\n            <CardGrid.Col sm={6} md={3}>\n              {this.props.messagesOverview}\n            </CardGrid.Col>\n            <CardGrid.Col sm={6} md={3}>\n              {this.props.uptimeOverview}\n            </CardGrid.Col>\n          </CardGrid.Row>\n        </CardGrid>\n        <Grid fluid={true}>\n          <Grid.Row>\n            <Grid.Col sm={12}>{this.props.topIntegrations}</Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col sm={12} md={6}>\n              {this.props.integrationBoard}\n            </Grid.Col>\n            <Grid.Col sm={12} md={6}>\n              {this.props.integrationUpdates}\n            </Grid.Col>\n          </Grid.Row>\n        </Grid>\n        <Grid fluid={true} style={{ marginTop: '20px' }}>\n          <Grid.Row>\n            <Grid.Col sm={12}>\n              <div className={'Dashboard-header'}>\n                <Title size=\"lg\" className={'Dashboard-header__title'}>\n                  {this.props.i18nConnections}\n                </Title>\n                <div className=\"Dashboard-header__actions\">\n                  <Link to={this.props.linkToConnections}>\n                    {this.props.i18nLinkToConnections}\n                  </Link>\n                  <ButtonLink\n                    href={this.props.linkToConnectionCreation}\n                    as={'primary'}\n                  >\n                    {this.props.i18nLinkCreateConnection}\n                  </ButtonLink>\n                </div>\n              </div>\n            </Grid.Col>\n          </Grid.Row>\n        </Grid>\n        <CardGrid fluid={true} matchHeight={true}>\n          <CardGrid.Row>{this.props.connections}</CardGrid.Row>\n        </CardGrid>\n      </Container>\n    );\n  }\n}\n","import { Card, DonutChart, patternfly } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationBoardProps {\n  pendingIntegrations: number;\n  runningIntegrations: number;\n  stoppedIntegrations: number;\n  i18nIntegrationStatePending: string;\n  i18nIntegrationStateRunning: string;\n  i18nIntegrationStateStopped: string;\n  i18nIntegrations: string;\n  i18nTitle: string;\n  i18nTotal: string;\n}\n\nexport class IntegrationBoard extends React.PureComponent<\n  IIntegrationBoardProps\n> {\n  public render() {\n    const data = {\n      colors: {\n        Pending: patternfly.pfPaletteColors.black200,\n        Published: patternfly.pfPaletteColors.blue400,\n        Stopped: patternfly.pfPaletteColors.black300,\n      },\n      columns: [\n        [\n          this.props.i18nIntegrationStateRunning,\n          this.props.runningIntegrations,\n        ],\n        [\n          this.props.i18nIntegrationStateStopped,\n          this.props.stoppedIntegrations,\n        ],\n        [\n          this.props.i18nIntegrationStatePending,\n          this.props.pendingIntegrations,\n        ],\n      ],\n      type: 'donut',\n    };\n\n    return (\n      <Card>\n        <Card.Heading>\n          <Card.Title>{this.props.i18nTitle}</Card.Title>\n        </Card.Heading>\n        <Card.Body>\n          <DonutChart\n            id=\"integration-board\"\n            size={{ height: 120 }}\n            data={data}\n            tooltip={{\n              contents: patternfly.pfDonutTooltipContents,\n              show: true,\n            }}\n            title={{\n              secondary: this.props.i18nIntegrations,\n              type: this.props.i18nTotal,\n            }}\n            legend={{ show: true, position: 'right' }}\n          />\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n","import { Card } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IRecentUpdatesProps {\n  i18nTitle: string;\n}\n\nexport class RecentUpdatesCard extends React.Component<IRecentUpdatesProps> {\n  public render() {\n    return (\n      <Card accented={false}>\n        <Card.Heading>\n          <Card.Title>{this.props.i18nTitle}</Card.Title>\n        </Card.Heading>\n        <Card.Body>{this.props.children}</Card.Body>\n      </Card>\n    );\n  }\n}\n","import { Button } from 'patternfly-react';\nimport * as React from 'react';\nimport { Dialog } from '../../Shared';\nimport { TagNameValidationError } from './CiCdUIModels';\n\nexport interface ICiCdEditDialogProps {\n  i18nTitle: string;\n  i18nDescription: string;\n  tagName: string;\n  i18nInputLabel: string;\n  i18nSaveButtonText: string;\n  i18nCancelButtonText: string;\n  i18nNoNameError: string;\n  i18nNameInUseError: string;\n  validationError: TagNameValidationError;\n  onHide: () => void;\n  onValidate: (name: string) => void;\n  onSave: (newName: string) => void;\n}\n\nexport interface ICiCdEditDialogState {\n  tagName: string;\n}\n\nexport class CiCdEditDialog extends React.Component<\n  ICiCdEditDialogProps,\n  ICiCdEditDialogState\n> {\n  constructor(props: ICiCdEditDialogProps) {\n    super(props);\n    this.state = {\n      tagName: this.props.tagName,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  public handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const name = event.target.value.trim();\n    this.setState({ tagName: name }, () => this.props.onValidate(name));\n  }\n  public handleClick() {\n    this.props.onSave(this.state.tagName);\n  }\n  public render() {\n    return (\n      <Dialog\n        body={\n          <form className=\"form-horizontal\">\n            <p>{this.props.i18nDescription}</p>\n            <div\n              className={\n                this.props.validationError === TagNameValidationError.NoErrors\n                  ? 'form-group'\n                  : 'form-group has-error'\n              }\n            >\n              <label className=\"col-sm-3 control-label\" htmlFor=\"tagNameInput\">\n                {this.props.i18nInputLabel}\n              </label>\n              <div className=\"col-sm-9\">\n                <input\n                  id=\"tagNameInput\"\n                  className=\"form-control\"\n                  type=\"text\"\n                  defaultValue={this.props.tagName}\n                  onChange={this.handleChange}\n                />\n                {this.props.validationError ===\n                  TagNameValidationError.NoErrors && (\n                  <span className=\"help-block\">\n                    &nbsp;{/* todo: pad out the area */}\n                  </span>\n                )}\n                {this.props.validationError ===\n                  TagNameValidationError.NoName && (\n                  <span className=\"help-block\">\n                    {this.props.i18nNoNameError}\n                  </span>\n                )}\n                {this.props.validationError ===\n                  TagNameValidationError.NameInUse && (\n                  <span className=\"help-block\">\n                    {this.props.i18nNameInUseError}\n                  </span>\n                )}\n              </div>\n            </div>\n          </form>\n        }\n        footer={\n          <>\n            <Button onClick={this.props.onHide}>\n              {this.props.i18nCancelButtonText}\n            </Button>\n            <Button\n              bsStyle={'primary'}\n              onClick={this.handleClick}\n              disabled={\n                this.state.tagName === '' ||\n                this.props.validationError !== TagNameValidationError.NoErrors\n              }\n            >\n              {this.props.i18nSaveButtonText}\n            </Button>\n          </>\n        }\n        onHide={this.props.onHide}\n        title={this.props.i18nTitle}\n      />\n    );\n  }\n}\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface ICiCdListProps {\n  children: any;\n}\n\nexport class CiCdList extends React.Component<ICiCdListProps> {\n  public render() {\n    return <ListView>{this.props.children}</ListView>;\n  }\n}\n","import { Button, EmptyState } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface ICiCdListEmptyState {\n  onAddNew: () => void;\n  i18nTitle: string;\n  i18nInfo: string;\n  i18nAddNewButtonText: string;\n}\n\nexport class CiCdListEmptyState extends React.Component<ICiCdListEmptyState> {\n  public render() {\n    return (\n      <EmptyState>\n        <EmptyState.Icon />\n        <EmptyState.Title>{this.props.i18nTitle}</EmptyState.Title>\n        <EmptyState.Info>{this.props.i18nInfo}</EmptyState.Info>\n        <EmptyState.Action>\n          <Button\n            bsStyle=\"primary\"\n            bsSize=\"large\"\n            onClick={this.props.onAddNew}\n          >\n            {this.props.i18nAddNewButtonText}\n          </Button>\n        </EmptyState.Action>\n      </EmptyState>\n    );\n  }\n}\n","import { Button } from 'patternfly-react';\nimport { ListViewItem } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface ICiCdListItemProps {\n  onEditClicked: (name: string) => void;\n  onRemoveClicked: (name: string) => void;\n  i18nEditButtonText: string;\n  i18nRemoveButtonText: string;\n  /**\n   * Text string for the number of integrations using this tag\n   */\n  i18nUsesText: string;\n  /**\n   * Environment name\n   */\n  name: string;\n}\n\nexport class CiCdListItem extends React.Component<ICiCdListItemProps> {\n  constructor(props: ICiCdListItemProps) {\n    super(props);\n    this.handleEditClicked = this.handleEditClicked.bind(this);\n    this.handleRemoveClicked = this.handleRemoveClicked.bind(this);\n  }\n  public handleEditClicked() {\n    this.props.onEditClicked(this.props.name);\n  }\n  public handleRemoveClicked() {\n    this.props.onRemoveClicked(this.props.name);\n  }\n  public render() {\n    return (\n      <ListViewItem\n        heading={this.props.name}\n        description={this.props.i18nUsesText}\n        additionalInfo={[]}\n        actions={\n          <div>\n            <Button onClick={this.handleEditClicked}>\n              {this.props.i18nEditButtonText}\n            </Button>\n            <Button onClick={this.handleRemoveClicked}>\n              {this.props.i18nRemoveButtonText}\n            </Button>\n          </div>\n        }\n      />\n    );\n  }\n}\n","import { Button } from 'patternfly-react';\nimport * as React from 'react';\nimport { Container } from '../../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../../Shared';\n\nexport interface ICiCdListViewProps extends IListViewToolbarProps {\n  i18nAddNewButtonText: string;\n  onAddNew: () => void;\n}\n\nexport class CiCdListView extends React.Component<ICiCdListViewProps> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            {this.props.resultsCount !== 0 && (\n              <Button className=\"btn btn-primary\" onClick={this.props.onAddNew}>\n                {this.props.i18nAddNewButtonText}\n              </Button>\n            )}\n          </div>\n        </ListViewToolbar>\n        <Container>{this.props.children}</Container>\n      </>\n    );\n  }\n}\n","import * as React from 'react';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n  IListViewToolbarProps,\n  SimplePageHeader,\n} from '../../Shared';\nimport { CiCdEditDialog } from './CiCdEditDialog';\nimport { CiCdListView } from './CiCdListView';\nimport { TagNameValidationError } from './CiCdUIModels';\n\nexport interface ICiCdManagePageUIChildrenProps {\n  openAddDialog: () => void;\n  openEditDialog: (name: string) => void;\n  openRemoveDialog: (name: string) => void;\n}\n\nexport interface ICiCdManagePageUIProps extends IListViewToolbarProps {\n  i18nAddTagDialogTitle: string;\n  i18nAddTagDialogDescription: string;\n  i18nEditTagDialogTitle: string;\n  i18nEditTagDialogDescription: string;\n  i18nAddNewButtonText: string;\n  i18nTagInputLabel: string;\n  i18nSaveButtonText: string;\n  i18nCancelButtonText: string;\n  i18nConfirmCancelButtonText: string;\n  i18nConfirmRemoveButtonText: string;\n  i18nRemoveConfirmationMessage: (name: string) => string;\n  i18nRemoveConfirmationTitle: string;\n  i18nRemoveConfirmationDetailMessage: string;\n  i18nPageTitle: string;\n  i18nPageDescription: string;\n  i18nNoNameError: string;\n  i18nNameInUseError: string;\n  nameValidationError: TagNameValidationError;\n  onValidateItem: (name: string) => void;\n  onEditItem: (oldName: string, newName: string) => void;\n  onAddItem: (name: string) => void;\n  onRemoveItem: (name: string) => void;\n  children: (props: ICiCdManagePageUIChildrenProps) => any;\n}\n\nexport interface ICiCdManagePageUIState {\n  showAddDialog: boolean;\n  showEditDialog: boolean;\n  showRemoveDialog: boolean;\n  currentItemName?: string;\n}\n\nexport class CiCdManagePageUI extends React.Component<\n  ICiCdManagePageUIProps,\n  ICiCdManagePageUIState\n> {\n  public constructor(props: ICiCdManagePageUIProps) {\n    super(props);\n    this.state = {\n      showAddDialog: false,\n      showEditDialog: false,\n      showRemoveDialog: false,\n    };\n    this.openAddDialog = this.openAddDialog.bind(this);\n    this.closeAddDialog = this.closeAddDialog.bind(this);\n    this.openEditDialog = this.openEditDialog.bind(this);\n    this.closeEditDialog = this.closeEditDialog.bind(this);\n    this.openRemoveDialog = this.openRemoveDialog.bind(this);\n    this.closeRemoveDialog = this.closeRemoveDialog.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.handleRemoveConfirm = this.handleRemoveConfirm.bind(this);\n  }\n  public handleSave(name: string) {\n    if (this.state.showEditDialog) {\n      this.closeEditDialog();\n      this.props.onEditItem(this.state.currentItemName!, name);\n    }\n    if (this.state.showAddDialog) {\n      this.closeAddDialog();\n      this.props.onAddItem(name);\n    }\n    if (this.state.showRemoveDialog) {\n      this.closeRemoveDialog();\n      this.props.onRemoveItem(name);\n    }\n  }\n  public handleRemoveConfirm() {\n    this.handleSave(this.state.currentItemName!);\n  }\n  public openRemoveDialog(name: string) {\n    this.setState({ currentItemName: name, showRemoveDialog: true });\n  }\n  public closeRemoveDialog() {\n    this.setState({ showRemoveDialog: false });\n  }\n  public openAddDialog() {\n    this.setState({ showAddDialog: true });\n  }\n  public closeAddDialog() {\n    this.setState({ showAddDialog: false });\n  }\n  public openEditDialog(name: string) {\n    this.setState({ currentItemName: name, showEditDialog: true });\n  }\n  public closeEditDialog() {\n    this.setState({ showEditDialog: false });\n  }\n  public render() {\n    return (\n      <>\n        <SimplePageHeader\n          className=\"pf-u-my-md\"\n          i18nTitle={this.props.i18nPageTitle}\n          i18nDescription={this.props.i18nPageDescription}\n        />\n        {this.state.showAddDialog && (\n          <CiCdEditDialog\n            i18nTitle={this.props.i18nAddTagDialogTitle}\n            i18nDescription={this.props.i18nAddTagDialogDescription}\n            tagName={''}\n            i18nInputLabel={this.props.i18nTagInputLabel}\n            i18nSaveButtonText={this.props.i18nSaveButtonText}\n            i18nCancelButtonText={this.props.i18nCancelButtonText}\n            i18nNoNameError={this.props.i18nNoNameError}\n            i18nNameInUseError={this.props.i18nNameInUseError}\n            validationError={this.props.nameValidationError}\n            onHide={this.closeAddDialog}\n            onSave={this.handleSave}\n            onValidate={this.props.onValidateItem}\n          />\n        )}\n        {this.state.showEditDialog && (\n          <CiCdEditDialog\n            i18nTitle={this.props.i18nEditTagDialogTitle}\n            i18nDescription={this.props.i18nEditTagDialogDescription}\n            tagName={this.state.currentItemName!}\n            i18nInputLabel={this.props.i18nTagInputLabel}\n            i18nSaveButtonText={this.props.i18nSaveButtonText}\n            i18nCancelButtonText={this.props.i18nCancelButtonText}\n            i18nNoNameError={this.props.i18nNoNameError}\n            i18nNameInUseError={this.props.i18nNameInUseError}\n            validationError={this.props.nameValidationError}\n            onHide={this.closeEditDialog}\n            onSave={this.handleSave}\n            onValidate={this.props.onValidateItem}\n          />\n        )}\n        {this.state.showRemoveDialog && (\n          <ConfirmationDialog\n            buttonStyle={ConfirmationButtonStyle.NORMAL}\n            icon={ConfirmationIconType.DANGER}\n            i18nCancelButtonText={this.props.i18nConfirmCancelButtonText}\n            i18nConfirmButtonText={this.props.i18nConfirmRemoveButtonText}\n            i18nConfirmationMessage={this.props.i18nRemoveConfirmationMessage(\n              this.state.currentItemName!\n            )}\n            i18nTitle={this.props.i18nRemoveConfirmationTitle}\n            i18nDetailsMessage={this.props.i18nRemoveConfirmationDetailMessage}\n            showDialog={this.state.showRemoveDialog}\n            onCancel={this.closeRemoveDialog}\n            onConfirm={this.handleRemoveConfirm}\n          />\n        )}\n        <CiCdListView\n          activeFilters={this.props.activeFilters}\n          currentFilterType={this.props.currentFilterType}\n          currentSortType={this.props.currentSortType}\n          currentValue={this.props.currentValue}\n          filterTypes={this.props.filterTypes}\n          isSortAscending={this.props.isSortAscending}\n          resultsCount={this.props.resultsCount}\n          sortTypes={this.props.sortTypes}\n          onUpdateCurrentValue={this.props.onUpdateCurrentValue}\n          onValueKeyPress={this.props.onValueKeyPress}\n          onFilterAdded={this.props.onFilterAdded}\n          onSelectFilterType={this.props.onSelectFilterType}\n          onFilterValueSelected={this.props.onFilterValueSelected}\n          onRemoveFilter={this.props.onRemoveFilter}\n          onClearFilters={this.props.onClearFilters}\n          onToggleCurrentSortDirection={this.props.onToggleCurrentSortDirection}\n          onUpdateCurrentSortType={this.props.onUpdateCurrentSortType}\n          i18nResultsCount={this.props.i18nResultsCount}\n          i18nAddNewButtonText={this.props.i18nAddNewButtonText}\n          onAddNew={this.openAddDialog}\n        >\n          {this.props.children({\n            openAddDialog: this.openAddDialog,\n            openEditDialog: this.openEditDialog,\n            openRemoveDialog: this.openRemoveDialog,\n          })}\n        </CiCdListView>\n      </>\n    );\n  }\n}\n","import * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nfunction getRandom(min: number, max: number) {\n  return Math.random() * (max - min) + min;\n}\n\nconst ItemSkeleton = () => (\n  <ContentLoader\n    height={68}\n    width={500}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={{\n      height: 68,\n      width: '100%',\n    }}\n  >\n    <rect\n      x=\"15\"\n      y=\"20\"\n      rx=\"5\"\n      ry=\"5\"\n      width={400 * getRandom(0.6, 1)}\n      height=\"18\"\n    />\n  </ContentLoader>\n);\n\nexport class CiCdListSkeleton extends React.PureComponent {\n  public render() {\n    return (\n      <>\n        <div\n          className={'list-group-item'}\n          data-testid=\"environments-list-skeleton\"\n        >\n          <div>\n            <ItemSkeleton />\n          </div>\n        </div>\n        <div\n          className={'list-group-item'}\n          data-testid=\"environments-list-skeleton\"\n        >\n          <div>\n            <ItemSkeleton />\n          </div>\n        </div>\n        <div\n          className={'list-group-item'}\n          data-testid=\"environments-list-skeleton\"\n        >\n          <div>\n            <ItemSkeleton />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import { Button } from 'patternfly-react';\nimport * as React from 'react';\nimport { Dialog } from '../../Shared';\nimport { ITagIntegrationEntry } from './CiCdUIModels';\n\nexport interface ITagIntegrationDialogChildrenProps {\n  handleChange: (\n    items: ITagIntegrationEntry[],\n    initialItems: ITagIntegrationEntry[]\n  ) => void;\n}\n\nexport interface ITagIntegrationDialogProps {\n  i18nTitle: string;\n  i18nCancelButtonText: string;\n  i18nSaveButtonText: string;\n  onHide: () => void;\n  onSave: (items: ITagIntegrationEntry[]) => void;\n  children: (props: ITagIntegrationDialogChildrenProps) => any;\n}\nexport interface ITagIntegrationDialogState {\n  disableSave: boolean;\n}\n\nexport class TagIntegrationDialog extends React.Component<\n  ITagIntegrationDialogProps,\n  ITagIntegrationDialogState\n> {\n  private itemsDraft: ITagIntegrationEntry[] | undefined;\n  constructor(props: ITagIntegrationDialogProps) {\n    super(props);\n    this.state = {\n      disableSave: true,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  public handleChange(\n    items: ITagIntegrationEntry[],\n    initialItems: ITagIntegrationEntry[]\n  ) {\n    const disableSave = initialItems\n      .map(\n        (item, index) =>\n          item.name === items[index].name &&\n          item.selected === items[index].selected\n      )\n      .reduce((acc, current) => acc && current, true);\n    this.itemsDraft = items;\n    this.setState({ disableSave });\n  }\n  public handleClick() {\n    this.props.onSave(this.itemsDraft!);\n  }\n  public render() {\n    return (\n      <Dialog\n        body={this.props.children({\n          handleChange: this.handleChange,\n        })}\n        footer={\n          <>\n            <Button onClick={this.props.onHide}>\n              {this.props.i18nCancelButtonText}\n            </Button>\n            <Button\n              bsStyle={'primary'}\n              onClick={this.handleClick}\n              disabled={this.state.disableSave}\n            >\n              {this.props.i18nSaveButtonText}\n            </Button>\n          </>\n        }\n        title={this.props.i18nTitle}\n        onHide={this.props.onHide}\n      />\n    );\n  }\n}\n","import { ListViewItem } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface ITagIntegrationListItemProps {\n  selected: boolean;\n  name: string;\n  onChange: (name: string, selected: boolean) => void;\n}\n\nexport class TagIntegrationListItem extends React.Component<\n  ITagIntegrationListItemProps\n> {\n  constructor(props: ITagIntegrationListItemProps) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  public handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.props.onChange(this.props.name, event.target.checked);\n  }\n  public render() {\n    return (\n      <ListViewItem\n        checkboxInput={\n          <input\n            type=\"checkbox\"\n            defaultChecked={this.props.selected}\n            onChange={this.handleChange}\n          />\n        }\n        heading={this.props.name}\n        description={''}\n        additionalInfo={[]}\n      />\n    );\n  }\n}\n","import * as H from 'history';\nimport { EmptyState } from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../../Layout';\n\nexport interface ITagIntegrationDialogEmptyStateProps {\n  href: H.LocationDescriptor;\n  i18nTitle: string;\n  i18nInfo: string;\n  i18nGoToManageCiCdButtonText: string;\n}\n\nexport class TagIntegrationDialogEmptyState extends React.Component<\n  ITagIntegrationDialogEmptyStateProps\n> {\n  public render() {\n    return (\n      <EmptyState\n        style={\n          {\n            background: 'inherit',\n            border: 'none',\n          } /* todo component specific override */\n        }\n      >\n        <EmptyState.Icon />\n        <EmptyState.Title>{this.props.i18nTitle}</EmptyState.Title>\n        <EmptyState.Info>{this.props.i18nInfo}</EmptyState.Info>\n        <EmptyState.Action>\n          <ButtonLink as=\"primary\" size=\"lg\" href={this.props.href}>\n            {this.props.i18nGoToManageCiCdButtonText}\n          </ButtonLink>\n        </EmptyState.Action>\n      </EmptyState>\n    );\n  }\n}\n","import * as H from 'history';\nimport * as React from 'react';\nimport { CiCdList } from './CiCdList';\nimport { ITagIntegrationEntry } from './CiCdUIModels';\nimport { TagIntegrationDialogEmptyState } from './TagIntegrationDialogEmptyState';\nimport { TagIntegrationListItem } from './TagIntegrationListItem';\n\nexport interface ITagIntegrationDialogBodyProps {\n  manageCiCdHref: H.LocationDescriptor;\n  initialItems: ITagIntegrationEntry[];\n  onChange: (\n    items: ITagIntegrationEntry[],\n    initialItems: ITagIntegrationEntry[]\n  ) => void;\n  i18nEmptyStateTitle: string;\n  i18nEmptyStateInfo: string;\n  i18nEmptyStateButtonText: string;\n}\n\nexport interface ITagIntegrationDialogBodyState {\n  items: ITagIntegrationEntry[];\n}\n\nexport class TagIntegrationDialogBody extends React.Component<\n  ITagIntegrationDialogBodyProps,\n  ITagIntegrationDialogBodyState\n> {\n  constructor(props: ITagIntegrationDialogBodyProps) {\n    super(props);\n    this.state = {\n      items: this.props.initialItems,\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  public handleChange(name: string, selected: boolean) {\n    const items = this.props.initialItems.map(item =>\n      item.name === name ? { name, selected } : item\n    );\n    this.props.onChange(items, this.props.initialItems);\n  }\n  public render() {\n    return (\n      <>\n        {this.state.items.length > 0 && (\n          <>\n            <CiCdList>\n              {this.state.items.map((item, index) => (\n                <TagIntegrationListItem\n                  key={index}\n                  name={item.name}\n                  selected={item.selected}\n                  onChange={this.handleChange}\n                />\n              ))}\n            </CiCdList>\n          </>\n        )}\n        {this.state.items.length === 0 && (\n          <TagIntegrationDialogEmptyState\n            href={this.props.manageCiCdHref}\n            i18nTitle={this.props.i18nEmptyStateTitle}\n            i18nInfo={this.props.i18nEmptyStateInfo}\n            i18nGoToManageCiCdButtonText={this.props.i18nEmptyStateButtonText}\n          />\n        )}\n      </>\n    );\n  }\n}\n","import * as React from 'react';\nimport { DndFileChooser, SimplePageHeader } from '../../Shared';\n\nexport interface IImportPageUIProps {\n  i18nPageTitle: string;\n  i18nPageDescription: string;\n  i18nNoFileSelectedMessage: string;\n  i18nSelectedFileLabel: string;\n  i18nInstructions: string;\n  i18nUploadFailedMessages?: string[];\n  i18nUploadSuccessMessages?: string[];\n  i18nHelpMessage: string;\n  onUploadRejected(fileName: string): string;\n  onUploadAccepted(file: File[]): void;\n}\n\nexport class ImportPageUI extends React.Component<IImportPageUIProps> {\n  public render() {\n    return (\n      <>\n        <SimplePageHeader\n          i18nTitle={this.props.i18nPageTitle}\n          i18nDescription={this.props.i18nPageDescription}\n        />\n        <DndFileChooser\n          allowMultiple={true}\n          fileExtensions={'.zip'}\n          onUploadRejected={this.props.onUploadRejected}\n          disableDropzone={false}\n          onUploadAccepted={this.props.onUploadAccepted}\n          i18nNoFileSelectedMessage={this.props.i18nNoFileSelectedMessage}\n          i18nSelectedFileLabel={this.props.i18nSelectedFileLabel}\n          i18nInstructions={this.props.i18nInstructions}\n          i18nUploadFailedMessages={this.props.i18nUploadFailedMessages}\n          i18nUploadSuccessMessages={this.props.i18nUploadSuccessMessages}\n          i18nHelpMessage={this.props.i18nHelpMessage}\n        />\n      </>\n    );\n  }\n}\n","import * as H from 'history';\nimport { DropdownKebab } from 'patternfly-react';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ButtonLink } from '../Layout';\n\nexport interface IIntegrationAction {\n  href?: H.LocationDescriptor;\n  onClick?: (e: React.MouseEvent<any>) => any;\n  label: string | JSX.Element;\n}\n\nexport interface IIntegrationActionsProps {\n  integrationId: string;\n  actions: IIntegrationAction[];\n  detailsHref?: H.LocationDescriptor;\n}\n\nexport class IntegrationActions extends React.Component<\n  IIntegrationActionsProps\n> {\n  public render() {\n    return (\n      <>\n        <ButtonLink href={this.props.detailsHref} as={'primary'}>\n          View\n        </ButtonLink>\n        <DropdownKebab\n          id={`integration-${this.props.integrationId}-action-menu`}\n          pullRight={true}\n        >\n          {this.props.actions.map((a, idx) => (\n            <li role={'presentation'} key={idx}>\n              {a.href ? (\n                <Link\n                  to={a.href}\n                  onClick={a.onClick}\n                  role={'menuitem'}\n                  tabIndex={idx + 1}\n                >\n                  {a.label}\n                </Link>\n              ) : (\n                <a\n                  href={'javascript:void(0)'}\n                  onClick={a.onClick}\n                  role={'menuitem'}\n                  tabIndex={idx + 1}\n                >\n                  {a.label}\n                </a>\n              )}\n            </li>\n          ))}\n        </DropdownKebab>\n      </>\n    );\n  }\n}\n","import { Button, ListView } from 'patternfly-react';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Container } from '../Layout';\n\nexport interface IIntegrationDetailActivityProps {\n  i18nBtnRefresh: string;\n  i18nLastRefresh: string;\n  i18nViewLogOpenShift: string;\n  linkToOpenShiftLog: string;\n}\n\nexport class IntegrationDetailActivity extends React.Component<\n  IIntegrationDetailActivityProps\n> {\n  public render() {\n    return (\n      <>\n        <Container>\n          <div className=\"pull-right\">\n            <Link to={this.props.linkToOpenShiftLog}>\n              {this.props.i18nViewLogOpenShift}\n            </Link>\n            {'  |  '}\n            {this.props.i18nLastRefresh}\n            {'  '}\n            <Button>{this.props.i18nBtnRefresh}</Button>\n          </div>\n        </Container>\n        {this.props.children ? (\n          <ListView>{this.props.children}</ListView>\n        ) : null}\n      </>\n    );\n  }\n}\n","import { Col, Icon, ListView, Row, Table } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationDetailActivityItemProps {\n  date: string;\n  errorCount: number;\n  i18nErrorsFound: string;\n  i18nHeaderStep?: string;\n  i18nHeaderTime?: string;\n  i18nHeaderDuration?: string;\n  i18nHeaderDurationUnit?: string;\n  i18nHeaderStatus?: string;\n  i18nHeaderOutput?: string;\n  i18nNoErrors: string;\n  i18nNoOutput?: string;\n  i18nNoSteps: string;\n  i18nVersion: string;\n  steps: JSX.Element[];\n  time: string;\n  version?: number;\n}\n\nexport class IntegrationDetailActivityItem extends React.Component<\n  IIntegrationDetailActivityItemProps\n> {\n  public render() {\n    const headerFormat = (value: string) => (\n      <Table.Heading>{value}</Table.Heading>\n    );\n\n    const cellFormat = (value: string) => <Table.Cell>{value}</Table.Cell>;\n\n    return (\n      <ListView.Item\n        key={1}\n        actions={\n          <>\n            {this.props.errorCount > 0 ? (\n              <span>\n                <Icon type=\"pf\" name=\"error-circle-o\" />\n                {'  '}\n                {this.props.i18nErrorsFound}\n              </span>\n            ) : (\n              <span>\n                <Icon type=\"pf\" name=\"ok\" />\n                {'  '}\n                {this.props.i18nNoErrors}\n              </span>\n            )}\n          </>\n        }\n        heading={this.props.date}\n        description={this.props.time}\n        additionalInfo={[\n          <React.Fragment key={'not-really-needed'}>\n            {this.props.i18nVersion}\n            {'  '}\n            {this.props.version}\n          </React.Fragment>,\n        ]}\n      >\n        <Row>\n          {this.props.steps ? (\n            <Col sm={11}>\n              <Table.PfProvider\n                striped={true}\n                bordered={true}\n                hover={true}\n                columns={[\n                  {\n                    cell: {\n                      formatters: [cellFormat],\n                      property: 'step',\n                    },\n                    header: {\n                      formatters: [headerFormat],\n                      label: 'Step',\n                    },\n                  },\n                  {\n                    cell: {\n                      formatters: [cellFormat],\n                      property: 'time',\n                    },\n                    header: {\n                      formatters: [headerFormat],\n                      label: 'Time',\n                    },\n                  },\n                  {\n                    cell: {\n                      formatters: [cellFormat],\n                      property: 'duration',\n                    },\n                    header: {\n                      formatters: [headerFormat],\n                      label: 'Duration',\n                    },\n                  },\n                  {\n                    cell: {\n                      formatters: [cellFormat],\n                      property: 'status',\n                    },\n                    header: {\n                      formatters: [headerFormat],\n                      label: 'Status',\n                    },\n                  },\n                  {\n                    cell: {\n                      formatters: [cellFormat],\n                      property: 'output',\n                    },\n                    header: {\n                      formatters: [headerFormat],\n                      label: 'Output',\n                    },\n                  },\n                ]}\n              >\n                <Table.Header />\n                {this.props.steps}\n              </Table.PfProvider>\n            </Col>\n          ) : (\n            <Col sm={11}>\n              <span>{this.props.i18nNoSteps}</span>\n            </Col>\n          )}\n        </Row>\n      </ListView.Item>\n    );\n  }\n}\n","import { Table } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationDetailActivityItemStepsProps {\n  name?: string;\n  time?: string;\n  duration?: number;\n  status?: string;\n  output?: string;\n}\n\nexport class IntegrationDetailActivityItemSteps extends React.Component<\n  IIntegrationDetailActivityItemStepsProps\n> {\n  public render() {\n    return (\n      <>\n        <Table.Body\n          rows={[\n            {\n              duration: this.props.duration,\n              output: this.props.output,\n              status: this.props.status,\n              step: this.props.name,\n              time: this.props.time,\n            },\n          ]}\n          rowKey={this.props.name}\n        />\n      </>\n    );\n  }\n}\n","import { Text } from '@patternfly/react-core';\nimport { Icon } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationDetailDescriptionProps {\n  description?: string;\n  i18nNoDescription?: string;\n}\n\nexport class IntegrationDetailDescription extends React.PureComponent<\n  IIntegrationDetailDescriptionProps\n> {\n  public render() {\n    return (\n      <div>\n        <Text>\n          {this.props.description\n            ? this.props.description\n            : this.props.i18nNoDescription}\n          &nbsp;\n          <Icon name={'pencil'} />\n        </Text>\n      </div>\n    );\n  }\n}\n","import { Title } from '@patternfly/react-core';\nimport { Icon } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationDetailEditableNameProps {\n  name?: string;\n}\n\nexport class IntegrationDetailEditableName extends React.PureComponent<\n  IIntegrationDetailEditableNameProps\n> {\n  public render() {\n    return (\n      <>\n        {this.props.name ? (\n          <>\n            <Title size=\"lg\">{this.props.name}&nbsp;</Title>\n            <Icon name={'pencil'} />\n          </>\n        ) : null}\n      </>\n    );\n  }\n}\n","import { Button, Grid, ListView, ListViewItem } from 'patternfly-react';\nimport * as React from 'react';\n\nimport './IntegrationDetailHistoryListView.css';\n\nexport interface IIntegrationDetailHistoryListViewProps {\n  hasHistory: boolean;\n  isDraft: boolean;\n  i18nTextBtnEdit?: string;\n  i18nTextBtnPublish?: string;\n  i18nTextDraft?: string;\n  i18nTextHistory?: string;\n}\n\nexport class IntegrationDetailHistoryListView extends React.Component<\n  IIntegrationDetailHistoryListViewProps\n> {\n  public render() {\n    return (\n      <Grid\n        fluid={true}\n        key={1}\n        className=\"integration-detail-history-list-view\"\n      >\n        {this.props.isDraft ? (\n          <Grid.Row className=\"show-grid\">\n            <Grid.Col\n              xs={2}\n              md={2}\n              className=\"integration-detail-history-list-view__description\"\n            >\n              {this.props.i18nTextDraft}:\n            </Grid.Col>\n            <Grid.Col xs={10} md={10}>\n              <ListViewItem\n                key={1}\n                heading={this.props.i18nTextDraft}\n                actions={\n                  <>\n                    <Button>{this.props.i18nTextBtnPublish}</Button>\n                    <Button>{this.props.i18nTextBtnEdit}</Button>\n                  </>\n                }\n                stacked={false}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        ) : null}\n\n        {this.props.children && this.props.hasHistory === true ? (\n          <Grid.Row className=\"show-grid\">\n            <Grid.Col\n              xs={2}\n              md={2}\n              className=\"integration-detail-history-list-view__description\"\n            >\n              {<span>{this.props.i18nTextHistory}:</span>}\n            </Grid.Col>\n            <Grid.Col xs={10} md={10}>\n              {this.props.children ? (\n                <ListView>{this.props.children}</ListView>\n              ) : null}\n            </Grid.Col>\n          </Grid.Row>\n        ) : null}\n      </Grid>\n    );\n  }\n}\n","import { ListView, ListViewInfoItem, ListViewItem } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationDetailHistoryListViewItemProps {\n  /**\n   * Dropdown actions menu\n   */\n  actions: any;\n  /**\n   * The last date the integration was updated.\n   */\n  updatedAt?: number;\n  /**\n   * The version of the integration deployment.\n   */\n  version?: number;\n  /**\n   * The localized text for displaying the last published date.\n   */\n  i18nTextLastPublished?: string;\n  /**\n   * The localized text used to display the version of the integration.\n   */\n  i18nTextVersion?: string;\n}\n\nexport class IntegrationDetailHistoryListViewItem extends React.Component<\n  IIntegrationDetailHistoryListViewItemProps\n> {\n  public render() {\n    return (\n      <ListViewItem\n        actions={this.props.actions}\n        heading={\n          <span>\n            {<span>{this.props.i18nTextVersion}:</span>} {this.props.version}\n          </span>\n        }\n        additionalInfo={[\n          <ListViewInfoItem key={1}>\n            {this.props.i18nTextLastPublished}\n            {this.props.updatedAt}\n          </ListViewInfoItem>,\n        ]}\n        leftContent={\n          // TODO: If first item and current deployment, show status icon\n          <ListView.Icon\n            type=\"pf\"\n            name=\"ok\"\n            size=\"sm\"\n            className=\"list-view-pf-icon-success\"\n          />\n        }\n        stacked={false}\n      />\n    );\n  }\n}\n","import * as React from 'react';\n\nimport { IntegrationDetailEditableName } from './IntegrationDetailEditableName';\n\nimport './IntegrationDetailInfo.css';\n\nexport interface IIntegrationDetailInfoProps {\n  name?: string;\n  version?: number;\n}\n\nexport class IntegrationDetailInfo extends React.PureComponent<\n  IIntegrationDetailInfoProps\n> {\n  public render() {\n    return (\n      <div className=\"integration-detail-info\">\n        <IntegrationDetailEditableName name={this.props.name} />\n        {this.props.version ? (\n          <>\n            <span className=\"pficon pficon-ok\" />\n            &nbsp;Published version {this.props.version}\n          </>\n        ) : (\n          'Stopped'\n        )}\n      </div>\n    );\n  }\n}\n","import {\n  AggregateStatusCount,\n  AggregateStatusNotification,\n  AggregateStatusNotifications,\n  Card,\n  CardBody,\n  CardGrid,\n  CardTitle,\n  Col,\n  Icon,\n  Row,\n} from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationDetailMetricsProps {\n  errorMessagesCount?: number;\n  okMessagesCount?: number;\n  totalMessages?: number;\n  uptimeStart: number;\n}\n\nexport class IntegrationDetailMetrics extends React.Component<\n  IIntegrationDetailMetricsProps\n> {\n  public render() {\n    const startAsDate = new Date(this.props.uptimeStart);\n    const startAsHuman = startAsDate.toLocaleString();\n\n    return (\n      <CardGrid>\n        <Row style={{ marginBottom: '20px', marginTop: '20px' }}>\n          <Col xs={6} sm={3} md={3}>\n            <Card accented={true} aggregated={true} matchHeight={true}>\n              <CardTitle>\n                <Icon type=\"pf\" name=\"error-circle-o\" />\n                {this.props.errorMessagesCount}\n              </CardTitle>\n              <CardBody>Total Errors</CardBody>\n            </Card>\n          </Col>\n          <Col xs={6} sm={3} md={3}>\n            <Card accented={true} aggregated={true} matchHeight={true}>\n              <CardTitle>\n                <Icon name=\"shield\" />\n                Last Processed\n              </CardTitle>\n              <CardBody>\n                <h2>n/a</h2>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col xs={6} sm={3} md={3}>\n            <Card accented={true} aggregated={true} matchHeight={true}>\n              <CardTitle>\n                <AggregateStatusCount>\n                  {this.props.totalMessages}&nbsp;\n                </AggregateStatusCount>\n                Total Messages\n              </CardTitle>\n              <CardBody>\n                <AggregateStatusNotifications>\n                  <AggregateStatusNotification>\n                    <Icon type=\"pf\" name=\"ok\" />\n                    {this.props.okMessagesCount}&nbsp;\n                  </AggregateStatusNotification>\n                  <AggregateStatusNotification>\n                    <Icon type=\"pf\" name=\"error-circle-o\" />\n                    {this.props.errorMessagesCount}\n                  </AggregateStatusNotification>\n                </AggregateStatusNotifications>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col xs={6} sm={3} md={3}>\n            <Card accented={true} aggregated={true} matchHeight={true}>\n              <Card.Title className={'text-left'}>\n                <small className={'pull-right'}>Since {startAsHuman}</small>\n                <div>Uptime</div>\n              </Card.Title>\n              <Card.Body>\n                <></>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </CardGrid>\n    );\n  }\n}\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationEditorActionsListItemProps {\n  integrationName: string;\n  integrationDescription: string;\n  actions: any;\n}\n\nexport class IntegrationEditorActionsListItem extends React.Component<\n  IIntegrationEditorActionsListItemProps\n> {\n  public render() {\n    return (\n      <ListView.Item\n        actions={this.props.actions}\n        heading={this.props.integrationName}\n        description={this.props.integrationDescription}\n        stacked={true}\n      />\n    );\n  }\n}\n","import { Text, Title } from '@patternfly/react-core';\nimport { ListView } from 'patternfly-react';\nimport * as React from 'react';\nimport { Container } from '../Layout';\n\nexport interface IIntegrationEditorChooseActionProps {\n  /**\n   * The internationalized title.\n   */\n  i18nTitle: string;\n  /**\n   * The internationalized subtitle.\n   */\n  i18nSubtitle: string;\n}\n\n/**\n * A component to render a list of actions, to be used in the integration\n * editor.\n * @see [i18nTitle]{@link IIntegrationEditorChooseActionProps#i18nTitle}\n * @see [i18nSubtitle]{@link IIntegrationEditorChooseActionProps#i18nSubtitle}\n */\nexport class IntegrationEditorChooseAction extends React.Component<\n  IIntegrationEditorChooseActionProps\n> {\n  public render() {\n    return (\n      <>\n        <Container className=\"pf-u-my-md\">\n          <Title size=\"xl\">{this.props.i18nTitle} - Choose Action</Title>\n          <Text>{this.props.i18nSubtitle}</Text>\n        </Container>\n        <Container>\n          <ListView>{this.props.children}</ListView>\n        </Container>\n      </>\n    );\n  }\n}\n","import { Text, Title } from '@patternfly/react-core';\nimport { ListView } from 'patternfly-react';\nimport * as React from 'react';\nimport { Container } from '../Layout';\n\nexport interface IIntegrationEditorChooseConnection {\n  /**\n   * The main title of the content, shown before the connections.\n   */\n  i18nTitle: string;\n  /**\n   * The description of the content, shown before the connections.\n   */\n  i18nSubtitle: string;\n}\n\n/**\n * A component to render a list of connections, to be used in the integration\n * editor.\n *\n * @see [i18nTitle]{@link IIntegrationEditorChooseConnection#i18nTitle}\n * @see [i18nSubtitle]{@link IIntegrationEditorChooseConnection#i18nSubtitle}\n */\nexport class IntegrationEditorChooseConnection extends React.Component<\n  IIntegrationEditorChooseConnection\n> {\n  public render() {\n    return (\n      <>\n        <Container className=\"pf-u-my-md\">\n          <Title size=\"xl\">{this.props.i18nTitle}</Title>\n          <Text>{this.props.i18nSubtitle}</Text>\n        </Container>\n        <Container>\n          <ListView>{this.props.children}</ListView>\n        </Container>\n      </>\n    );\n  }\n}\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationEditorConnectionsListItemProps {\n  integrationName: string;\n  integrationDescription: string;\n  icon: any;\n  actions: any;\n}\n\nexport class IntegrationEditorConnectionsListItem extends React.Component<\n  IIntegrationEditorConnectionsListItemProps\n> {\n  public render() {\n    return (\n      <ListView.Item\n        actions={this.props.actions}\n        heading={this.props.integrationName}\n        description={this.props.integrationDescription}\n        leftContent={this.props.icon}\n        stacked={true}\n      />\n    );\n  }\n}\n","import { Text, Title } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Container } from '../Layout';\n\nexport interface IIntegrationEditorFormProps {\n  /**\n   * The internationalized title.\n   */\n  i18nTitle: string;\n  /**\n   * The internationalized subtitle.\n   */\n  i18nSubtitle: string;\n  /**\n   * The internationalized form title.\n   */\n  i18nFormTitle?: string;\n  /**\n   * The callback fired when submitting the form.\n   * @param e\n   */\n  handleSubmit: (e?: any) => void;\n}\n\n/**\n * A component to render a save form, to be used in the integration\n * editor. This does *not* build the form itself, form's field should be passed\n * as the `children` value.\n * @see [i18nTitle]{@link IIntegrationEditorFormProps#i18nTitle}\n * @see [i18nSubtitle]{@link IIntegrationEditorFormProps#i18nSubtitle}\n */\nexport class IntegrationEditorForm extends React.Component<\n  IIntegrationEditorFormProps\n> {\n  public render() {\n    return (\n      <>\n        <Container className=\"pf-u-my-md\">\n          <Title size=\"lg\">{this.props.i18nTitle} - Choose Action</Title>\n          <Text>{this.props.i18nSubtitle}</Text>\n        </Container>\n        <Container>\n          <form\n            className=\"form-horizontal required-pf\"\n            role=\"form\"\n            onSubmit={this.props.handleSubmit}\n          >\n            <div className=\"row row-cards-pf\">\n              <div className=\"card-pf\">\n                {this.props.i18nFormTitle && (\n                  <div className=\"card-pf-title\">\n                    {this.props.i18nFormTitle}\n                  </div>\n                )}\n                <div className=\"card-pf-body\">\n                  <Container>{this.props.children}</Container>\n                </div>\n              </div>\n            </div>\n          </form>\n        </Container>\n      </>\n    );\n  }\n}\n","import { Text, Title } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Container } from '../Layout';\n\nexport interface IIntegrationEditorNothingToConfigureProps {\n  /**\n   * The internationalized title.\n   */\n  i18nTitle: string;\n  /**\n   * The internationalized subtitle.\n   */\n  i18nSubtitle: string;\n  /**\n   * The internationalized alert to display.\n   */\n  i18nAlert: string;\n}\n\n/**\n * A component to render an alert for unconfigurable actions.\n * @see [i18nTitle]{@link IIntegrationEditorNothingToConfigureProps#i18nTitle}\n * @see [i18nSubtitle]{@link IIntegrationEditorNothingToConfigureProps#i18nSubtitle}\n * @see [i18nAlert]{@link IIntegrationEditorNothingToConfigureProps#i18nAlert}\n */\nexport class IntegrationEditorNothingToConfigure extends React.Component<\n  IIntegrationEditorNothingToConfigureProps\n> {\n  public render() {\n    return (\n      <Container>\n        <Title size=\"lg\">{this.props.i18nTitle} - Choose Action</Title>\n        <Text>{this.props.i18nSubtitle}</Text>\n        <Container>\n          <div className=\"row row-cards-pf\">\n            <div className=\"card-pf\">\n              <div className=\"card-pf-body\">\n                <Container>\n                  <Text className=\"alert alert-info\">\n                    <span className=\"pficon pficon-info\" />\n                    {this.props.i18nAlert}\n                  </Text>\n                </Container>\n              </div>\n            </div>\n          </div>\n        </Container>\n      </Container>\n    );\n  }\n}\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class IntegrationEditorStepsList extends React.Component<{}> {\n  public render() {\n    return (\n      <ListView style={{ background: 'transparent' }}>\n        {this.props.children}\n      </ListView>\n    );\n  }\n}\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationEditorStepsListItemProps {\n  stepName: string;\n  stepDescription: string;\n  actions: any;\n  icon: any;\n}\n\nexport class IntegrationEditorStepsListItem extends React.Component<\n  IIntegrationEditorStepsListItemProps\n> {\n  public render() {\n    return (\n      <ListView.Item\n        actions={this.props.actions}\n        heading={this.props.stepName}\n        description={this.props.stepDescription}\n        leftContent={this.props.icon}\n        stacked={true}\n        hideCloseIcon={true}\n      />\n    );\n  }\n}\n","import * as H from 'history';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport './IntegrationFlowAddStep.css';\n\nexport interface IIntegrationFlowAddStepProps {\n  showDetails: boolean;\n  addStepHref?: H.LocationDescriptor;\n  i18nAddStep?: string;\n}\n\nexport interface IIntegrationFlowAddStepState {\n  showTooltip: boolean;\n}\n\nexport class IntegrationFlowAddStep extends React.Component<\n  IIntegrationFlowAddStepProps,\n  IIntegrationFlowAddStepState\n> {\n  public static defaultProps = {\n    active: false,\n  };\n\n  public state = {\n    showTooltip: false,\n  };\n\n  public containerRef = React.createRef<HTMLDivElement>();\n\n  constructor(props: IIntegrationFlowAddStepProps) {\n    super(props);\n    this.showTooltip = this.showTooltip.bind(this);\n    this.hideTooltip = this.hideTooltip.bind(this);\n    this.toggleTooltip = this.toggleTooltip.bind(this);\n  }\n\n  public showTooltip() {\n    this.setState({\n      showTooltip: true,\n    });\n  }\n\n  public hideTooltip() {\n    this.setState({\n      showTooltip: false,\n    });\n  }\n\n  public toggleTooltip() {\n    this.setState({\n      showTooltip: !this.state.showTooltip,\n    });\n  }\n\n  public render() {\n    return (\n      <div\n        className={'integration-flow-add-step'}\n        onMouseEnter={this.showTooltip}\n        onMouseLeave={this.hideTooltip}\n        onTouchStart={this.toggleTooltip}\n      >\n        {this.props.addStepHref && (\n          <div\n            className={'integration-flow-add-step__iconWrapper'}\n            ref={this.containerRef}\n          >\n            <Link to={this.props.addStepHref}>\n              <div className={'integration-flow-add-step__icon'}>\n                <i\n                  className=\"fa fa-plus-square\"\n                  title={this.props.i18nAddStep}\n                />\n              </div>\n            </Link>\n          </div>\n        )}\n        {this.props.showDetails && this.props.children}\n      </div>\n    );\n  }\n}\n","import classnames from 'classnames';\nimport { OverlayTrigger, Tooltip } from 'patternfly-react';\nimport * as React from 'react';\nimport './IntegrationFlowStep.css';\n\nexport interface IIntegrationFlowStepProps {\n  /**\n   * The icon to show. Can be anything but must fit a circle of 55px of diameter.\n   */\n  icon: any;\n  /**\n   * Set to true to render the extended details for the step. Usually set to match\n   * the expanded state of the parent container.\n   */\n  showDetails: boolean;\n  /**\n   * The text to show on the tooltip that opens when hovering with the mouse on\n   * the icon.\n   */\n  i18nTooltip: string;\n  /**\n   * Set to true to set this step as active. This will highlight the icon circle.\n   */\n  active?: boolean;\n}\n\nexport class IntegrationFlowStep extends React.Component<\n  IIntegrationFlowStepProps\n> {\n  public static defaultProps = {\n    active: false,\n  };\n\n  public render() {\n    const tooltip = (\n      <Tooltip id={'integration-flow-step'}>{this.props.i18nTooltip}</Tooltip>\n    );\n    const icon = (\n      <div className={'integration-flow-step__icon'}>{this.props.icon}</div>\n    );\n    return (\n      <div\n        className={classnames('integration-flow-step', {\n          'is-active': this.props.active,\n          'is-expanded': this.props.showDetails,\n        })}\n      >\n        {this.props.showDetails ? (\n          <>\n            <div className={'integration-flow-step__iconWrapper'}>{icon}</div>\n            {this.props.children}\n          </>\n        ) : (\n          <div className={'integration-flow-step__iconWrapper'}>\n            <OverlayTrigger\n              overlay={tooltip}\n              placement=\"right\"\n              trigger={['hover', 'focus']}\n              rootClose={false}\n            >\n              {icon}\n            </OverlayTrigger>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import classnames from 'classnames';\nimport * as React from 'react';\nimport './IntegrationFlowStepDetails.css';\n\nconst Title: React.FunctionComponent = ({ children }) => (\n  <div className={'integration-flow-step-details__title'}>{children}</div>\n);\n\nconst GenericDescription: React.FunctionComponent = ({ children }) => (\n  <div className={'integration-flow-step-details__body'}>{children}</div>\n);\n\ninterface IStepOverviewProps {\n  nameI18nLabel: string;\n  name: string;\n  actionI18nLabel: string;\n  action: string;\n  dataTypeI18nLabel: string;\n  dataType: string;\n}\n\nconst StepOverview: React.FunctionComponent<IStepOverviewProps> = ({\n  nameI18nLabel,\n  name,\n  actionI18nLabel,\n  action,\n  dataTypeI18nLabel,\n  dataType,\n}) => (\n  <div className={'integration-flow-step-details__body'}>\n    <dl className={'integration-flow-step-details__overview'}>\n      <dt>{nameI18nLabel}</dt>\n      <dd>{name}</dd>\n    </dl>\n    <dl className={'integration-flow-step-details__overview'}>\n      <dt>{actionI18nLabel}</dt>\n      <dd>{action}</dd>\n    </dl>\n    <dl className={'integration-flow-step-details__overview'}>\n      <dt>{dataTypeI18nLabel}</dt>\n      <dd>{dataType}</dd>\n    </dl>\n  </div>\n);\n\nexport interface IntegrationFlowStepDetailsChildrenProps {\n  Title: React.FunctionComponent;\n  GenericDescription: React.FunctionComponent;\n  StepOverview: React.FunctionComponent<IStepOverviewProps>;\n}\n\nexport interface IntegrationFlowStepDetailsProps {\n  active?: boolean;\n  children(props: IntegrationFlowStepDetailsChildrenProps): any;\n}\n\n/**\n * A render prop component that provides the right components than can be used\n * inside a step element of the integration editor sidebar.\n */\nexport class IntegrationFlowStepDetails extends React.Component<\n  IntegrationFlowStepDetailsProps\n> {\n  public static defaultProps = {\n    active: false,\n  };\n\n  public render() {\n    return (\n      <div\n        className={classnames('integration-flow-step-details', {\n          'is-active': this.props.active,\n        })}\n      >\n        {this.props.children({\n          GenericDescription,\n          StepOverview,\n          Title,\n        })}\n      </div>\n    );\n  }\n}\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport {\n  IIntegrationFlowStepProps,\n  IntegrationFlowStep,\n} from './IntegrationFlowStep';\nimport { IntegrationFlowStepDetails } from './IntegrationFlowStepDetails';\n\nexport interface IIntegrationFlowStepGenericProps\n  extends IIntegrationFlowStepProps {\n  /**\n   * The title of the extended information table.\n   */\n  i18nTitle: string;\n  /**\n   * The content of the extended information table.\n   */\n  description: string;\n}\n\n/**\n * A component to show an unconfigured (or being configured) step in the\n * sidebar of the integration editor.\n *\n * @see [icon]{@link IIntegrationFlowStepProps#icon}\n * @see [active]{@link IIntegrationFlowStepProps#active}\n * @see [i18nTitle]{@link IIntegrationFlowStepGenericProps#i18nTitle}\n * @see [i18nTooltip]{@link IIntegrationFlowStepProps#i18nTooltip}\n * @see [showDetails]{@link IIntegrationFlowStepProps#showDetails}\n * @see [description]{@link IIntegrationFlowStepGenericProps#description}\n * @see [href]{@link IIntegrationFlowStepProps#href}\n */\nexport const IntegrationFlowStepGeneric: React.FunctionComponent<\n  IIntegrationFlowStepGenericProps\n> = ({\n  icon,\n  active = false,\n  i18nTitle,\n  i18nTooltip,\n  showDetails,\n  description,\n}) => (\n  <IntegrationFlowStep\n    icon={icon}\n    active={active}\n    i18nTooltip={i18nTooltip}\n    showDetails={showDetails}\n  >\n    <IntegrationFlowStepDetails active={active}>\n      {({ Title, GenericDescription }) => (\n        <>\n          <Title>{i18nTitle}</Title>\n          <GenericDescription>{description}</GenericDescription>\n        </>\n      )}\n    </IntegrationFlowStepDetails>\n  </IntegrationFlowStep>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport './IntegrationIcon.css';\n\nexport interface IIntegrationIconProps {\n  startConnectionIcon: string;\n  finishConnectionIcon: string;\n}\nexport const IntegrationIcon: React.FunctionComponent<\n  IIntegrationIconProps\n> = ({ startConnectionIcon, finishConnectionIcon }) => (\n  <div className={'integration-icon'}>\n    <img src={startConnectionIcon} className={'integration-icon__icon'} />\n    <i className=\"fa fa-angle-right integration-icon__divider\" />\n    <img src={finishConnectionIcon} className={'integration-icon__icon'} />\n  </div>\n);\n","import { Label } from 'patternfly-react';\nimport * as React from 'react';\nimport {\n  ERROR,\n  IntegrationState,\n  PENDING,\n  PUBLISHED,\n  UNPUBLISHED,\n} from './models';\n\nexport interface IIntegrationStatusProps {\n  currentState?: IntegrationState;\n  i18nPublished: string;\n  i18nUnpublished: string;\n  i18nError: string;\n}\n\nexport class IntegrationStatus extends React.Component<\n  IIntegrationStatusProps\n> {\n  public render() {\n    const labelType =\n      this.props.currentState === ERROR\n        ? 'danger'\n        : this.props.currentState === PUBLISHED ||\n          this.props.currentState === PENDING\n        ? 'primary'\n        : 'default';\n    let label = PENDING; // it's a parachute\n    switch (this.props.currentState) {\n      case PUBLISHED:\n        label = this.props.i18nPublished;\n        break;\n      case UNPUBLISHED:\n        label = this.props.i18nUnpublished;\n        break;\n      case ERROR:\n        label = this.props.i18nError;\n        break;\n    }\n    return <Label type={labelType}>{label}</Label>;\n  }\n}\n","// Integration states\nexport const PUBLISHED = 'Published';\nexport const UNPUBLISHED = 'Unpublished';\nexport const PENDING = 'Pending';\nexport const ERROR = 'Error';\n\nexport type IntegrationState =\n  | 'Published'\n  | 'Unpublished'\n  | 'Pending'\n  | 'Error';\n\n// Detailed state log link types\nexport const LOGS = 'LOGS';\nexport const EVENTS = 'EVENTS';\n\nexport type LinkType = 'LOGS' | 'EVENTS';\n\nexport interface IIntegrationDetailHistoryItem {\n  updatedAt: string;\n  version: number;\n}\n\nexport interface IIntegrationDetailHistory {\n  draft: boolean;\n  items: IIntegrationDetailHistoryItem[];\n}\n","import { Spinner } from 'patternfly-react';\nimport * as React from 'react';\nimport { ProgressWithLink } from '../Shared/ProgressWithLink';\nimport { IntegrationState, PUBLISHED, UNPUBLISHED } from './models';\n\nimport './IntegrationStatusDetail.css';\n\nexport interface IIntegrationStatusDetailProps {\n  targetState: IntegrationState;\n  value?: string;\n  currentStep?: number;\n  totalSteps?: number;\n  logUrl?: string;\n  i18nProgressPending: string;\n  i18nProgressStarting: string;\n  i18nProgressStopping: string;\n  i18nLogUrlText: string;\n}\n\nexport class IntegrationStatusDetail extends React.Component<\n  IIntegrationStatusDetailProps\n> {\n  public render() {\n    let fallbackText = this.props.i18nProgressPending;\n    switch (this.props.targetState) {\n      case PUBLISHED:\n        fallbackText = this.props.i18nProgressStarting;\n        break;\n      case UNPUBLISHED:\n        fallbackText = this.props.i18nProgressStopping;\n        break;\n    }\n    return (\n      <div\n        data-testid=\"integration-status-detail\"\n        className={'integration-status-detail'}\n      >\n        {this.props.value && this.props.currentStep && this.props.totalSteps ? (\n          <ProgressWithLink\n            currentStep={this.props.currentStep}\n            totalSteps={this.props.totalSteps}\n            value={this.props.value}\n            logUrl={this.props.logUrl}\n            i18nLogUrlText={this.props.i18nLogUrlText}\n          />\n        ) : (\n          <>\n            <Spinner loading={true} inline={true} />\n            {fallbackText}\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","import { Grid, Icon, ListViewIcon } from 'patternfly-react';\nimport * as React from 'react';\n\nimport './IntegrationStepsHorizontalItem.css';\n\nexport interface IIntegrationStepsHorizontalItemProps {\n  /**\n   * The name of the connector used for the step.\n   */\n  name?: string;\n  /**\n   * The boolean value that determines if the step\n   * is the first in the steps array.\n   */\n  isFirst?: boolean;\n}\n\nexport class IntegrationStepsHorizontalItem extends React.Component<\n  IIntegrationStepsHorizontalItemProps\n> {\n  public render() {\n    return (\n      <div className=\"integration-steps-horizontal-item\">\n        {this.props.isFirst === false ? (\n          <Grid.Col\n            sm={1}\n            md={1}\n            className=\"integration-steps-horizontal-item__arrow\"\n          >\n            <Icon name={'angle-right'} className=\"step-arrow\" />\n          </Grid.Col>\n        ) : null}\n        <Grid.Col\n          sm={1}\n          md={1}\n          className=\"integration-steps-horizontal-item__icon\"\n        >\n          <ListViewIcon name={'cube'} className=\"step-icon\" />\n          <p>{this.props.name}</p>\n        </Grid.Col>\n      </div>\n    );\n  }\n}\n","import { Grid } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class IntegrationStepsHorizontalView extends React.Component {\n  public render() {\n    return (\n      <Grid fluid={true} xs={2}>\n        <Grid.Row className=\"show-grid\">{this.props.children}</Grid.Row>\n      </Grid>\n    );\n  }\n}\n","import classnames from 'classnames';\nimport * as React from 'react';\nimport { ButtonLink } from '../Layout';\nimport './IntegrationVerticalFlow.css';\n\nexport interface IIntegrationVerticalFlowProps {\n  /**\n   * A render prop that receives the expanded state of the container.\n   * @see [props.expanded]{@link IIntegrationVerticalFlowState#expanded}\n   */\n  children(props: IIntegrationVerticalFlowState): any;\n}\n\nexport interface IIntegrationVerticalFlowState {\n  /**\n   * The container expanded state.\n   */\n  expanded: boolean;\n}\n\n/**\n * A component to render an expandable container meant to be used to show an\n * integration's steps.\n * @see [children]{@link IIntegrationVerticalFlowProps#children}\n */\nexport class IntegrationVerticalFlow extends React.Component<\n  IIntegrationVerticalFlowProps,\n  IIntegrationVerticalFlowState\n> {\n  public static defaultProps = {\n    disabled: false,\n  };\n\n  public state = {\n    expanded: localStorage.getItem('iec-vertical-flow-expanded') === 'y',\n  };\n\n  constructor(props: IIntegrationVerticalFlowProps) {\n    super(props);\n    this.toggleExpanded = this.toggleExpanded.bind(this);\n  }\n\n  public toggleExpanded(): void {\n    const expanded = !this.state.expanded;\n    localStorage.setItem('iec-vertical-flow-expanded', expanded ? 'y' : 'n');\n    this.setState({\n      expanded,\n    });\n  }\n\n  public render() {\n    return (\n      <div\n        className={classnames('integration-vertical-flow', {\n          'is-expanded': this.state.expanded,\n        })}\n      >\n        <div className=\"integration-vertical-flow__body\">\n          {this.props.children(this.state)}\n        </div>\n        <div className=\"integration-vertical-flow__expand\">\n          <ButtonLink onClick={this.toggleExpanded} />\n        </div>\n      </div>\n    );\n  }\n}\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class IntegrationsList extends React.Component<{}> {\n  public render() {\n    return <ListView>{this.props.children}</ListView>;\n  }\n}\n","import { Icon, ListView } from 'patternfly-react';\nimport * as React from 'react';\nimport { IntegrationIcon } from './IntegrationIcon';\nimport { IntegrationStatus } from './IntegrationStatus';\nimport { IntegrationStatusDetail } from './IntegrationStatusDetail';\nimport { IntegrationState } from './models';\n\nexport interface IIntegrationsListItemProps {\n  integrationName: string;\n  currentState: IntegrationState;\n  targetState: IntegrationState;\n  isConfigurationRequired: boolean;\n  monitoringValue?: string;\n  monitoringCurrentStep?: number;\n  monitoringTotalSteps?: number;\n  monitoringLogUrl?: string;\n  startConnectionIcon: string;\n  finishConnectionIcon: string;\n  actions: any;\n  i18nConfigurationRequired: string;\n  i18nError: string;\n  i18nPublished: string;\n  i18nProgressPending: string;\n  i18nProgressStarting: string;\n  i18nProgressStopping: string;\n  i18nUnpublished: string;\n  i18nLogUrlText: string;\n}\n\nexport class IntegrationsListItem extends React.Component<\n  IIntegrationsListItemProps\n> {\n  public render() {\n    return (\n      <ListView.Item\n        actions={this.props.actions}\n        heading={this.props.integrationName}\n        description={\n          this.props.isConfigurationRequired ? (\n            <>\n              <Icon type={'pf'} name={'warning-triangle-o'} />\n              {this.props.i18nConfigurationRequired}\n            </>\n          ) : (\n            ''\n          )\n        }\n        additionalInfo={[\n          <ListView.InfoItem key={1}>\n            {this.props.currentState === 'Pending' ? (\n              <IntegrationStatusDetail\n                targetState={this.props.targetState}\n                value={this.props.monitoringValue}\n                currentStep={this.props.monitoringCurrentStep}\n                totalSteps={this.props.monitoringTotalSteps}\n                logUrl={this.props.monitoringLogUrl}\n                i18nProgressPending={this.props.i18nProgressPending}\n                i18nProgressStarting={this.props.i18nProgressStarting}\n                i18nProgressStopping={this.props.i18nProgressStopping}\n                i18nLogUrlText={this.props.i18nLogUrlText}\n              />\n            ) : (\n              <IntegrationStatus\n                currentState={this.props.currentState}\n                i18nPublished={this.props.i18nPublished}\n                i18nUnpublished={this.props.i18nUnpublished}\n                i18nError={this.props.i18nError}\n              />\n            )}\n          </ListView.InfoItem>,\n        ]}\n        leftContent={\n          <IntegrationIcon\n            startConnectionIcon={this.props.startConnectionIcon}\n            finishConnectionIcon={this.props.finishConnectionIcon}\n          />\n        }\n        stacked={true}\n      />\n    );\n  }\n}\n","import * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nfunction getRandom(min: number, max: number) {\n  return Math.random() * (max - min) + min;\n}\n\nconst ItemSkeleton = () => (\n  <ContentLoader\n    height={80}\n    width={500}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={{\n      height: 80,\n      width: '100%',\n    }}\n  >\n    <circle cx=\"35\" cy=\"40\" r=\"35\" />\n    <circle cx=\"115\" cy=\"40\" r=\"35\" />\n    <rect\n      x=\"185\"\n      y=\"20\"\n      rx=\"5\"\n      ry=\"5\"\n      width={400 * getRandom(0.6, 1)}\n      height=\"18\"\n    />\n    <rect\n      x=\"185\"\n      y=\"55\"\n      rx=\"5\"\n      ry=\"5\"\n      width={200 * getRandom(0.6, 1)}\n      height=\"15\"\n    />\n  </ContentLoader>\n);\n\nexport class IntegrationsListSkeleton extends React.PureComponent {\n  public render() {\n    return (\n      <>\n        <div\n          className={'list-group-item'}\n          data-testid=\"integration-list-skeleton\"\n        >\n          <div>\n            <ItemSkeleton />\n          </div>\n        </div>\n        <div\n          className={'list-group-item'}\n          data-testid=\"integration-list-skeleton\"\n        >\n          <div>\n            <ItemSkeleton />\n          </div>\n        </div>\n        <div\n          className={'list-group-item'}\n          data-testid=\"integration-list-skeleton\"\n        >\n          <div>\n            <ItemSkeleton />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import { Text } from '@patternfly/react-core';\nimport { Card, Label } from 'patternfly-react';\nimport * as React from 'react';\n\nimport './DvConnectionCard.css';\n\nexport enum ConnectionStatus {\n  ACTIVE = 'ACTIVE',\n  INACTIVE = 'INACTIVE',\n}\n\nexport interface IDvConnectionCardProps {\n  name: string;\n  description: string;\n  dvStatus: string;\n  icon: string;\n  selected: boolean;\n  onSelectionChanged: (connName: string, isSelected: boolean) => void;\n}\nexport interface IDvConnectionCardState {\n  isSelected: boolean;\n}\n\nexport class DvConnectionCard extends React.PureComponent<\n  IDvConnectionCardProps,\n  IDvConnectionCardState\n> {\n  public constructor(props: IDvConnectionCardProps) {\n    super(props);\n    this.state = {\n      isSelected: props.selected, // initial item selection\n    };\n    this.toggleSelected = this.toggleSelected.bind(this);\n  }\n\n  public toggleSelected = (connName: string) => (event: any) => {\n    // User can only select active connections\n    if (this.props.dvStatus === ConnectionStatus.ACTIVE) {\n      this.setState({\n        isSelected: !this.state.isSelected,\n      });\n      this.props.onSelectionChanged(connName, !this.state.isSelected);\n    }\n  };\n\n  public render() {\n    return (\n      <div\n        className={'dv-connection-card'}\n        onClick={this.toggleSelected(this.props.name)}\n      >\n        <Card matchHeight={true} accented={this.state.isSelected}>\n          <Card.Body>\n            <div className=\"dv-connection-card__status\">\n              <Label\n                type={\n                  this.props.dvStatus === ConnectionStatus.ACTIVE\n                    ? 'success'\n                    : 'danger'\n                }\n              >\n                {this.props.dvStatus}\n              </Label>\n            </div>\n            <div className={'dv-connection-card__content'}>\n              <div className=\"dv-connection-card__icon\">\n                <img src={this.props.icon} alt={this.props.name} width={46} />\n              </div>\n              <div\n                className=\"dv-connection-card__title h2\"\n                data-testid=\"dv-connection-card-title\"\n              >\n                {this.props.name}\n              </div>\n              <Text className=\"dv-connection-card__description\">\n                {this.props.description}\n              </Text>\n            </div>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n}\n","import * as H from 'history';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../Shared';\n\nexport interface IIntegrationsListViewProps extends IListViewToolbarProps {\n  linkToManageCiCd: H.LocationDescriptor;\n  linkToIntegrationImport: H.LocationDescriptor;\n  linkToIntegrationCreation: H.LocationDescriptor;\n  i18nManageCiCd: string;\n  i18nImport: string;\n  i18nLinkCreateConnection: string;\n}\n\nexport class IntegrationsListView extends React.Component<\n  IIntegrationsListViewProps\n> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <ButtonLink href={this.props.linkToManageCiCd}>\n              {this.props.i18nManageCiCd}\n            </ButtonLink>\n            <ButtonLink href={this.props.linkToIntegrationImport}>\n              {this.props.i18nImport}\n            </ButtonLink>\n            <ButtonLink\n              href={this.props.linkToIntegrationCreation}\n              as={'primary'}\n            >\n              {this.props.i18nLinkCreateConnection}\n            </ButtonLink>\n          </div>\n        </ListViewToolbar>\n        <Container>{this.props.children}</Container>\n      </>\n    );\n  }\n}\n","import { Card, MenuItem } from 'patternfly-react';\nimport * as React from 'react';\n\nimport './TopIntegrations.css';\n\nexport interface ITopIntegrationsProps {\n  i18nLast30Days: string;\n  i18nLast60Days: string;\n  i18nLast90Days: string;\n  i18nTitle: string;\n}\n\nexport class TopIntegrationsCard extends React.Component<\n  ITopIntegrationsProps\n> {\n  public render() {\n    return (\n      <Card accented={false} className={'TopIntegrationsCard'}>\n        <Card.Heading>\n          <Card.DropdownButton\n            id=\"cardDropdownButton1\"\n            title={this.props.i18nLast30Days}\n          >\n            <MenuItem eventKey=\"1\" active={true}>\n              {this.props.i18nLast30Days}\n            </MenuItem>\n            <MenuItem eventKey=\"2\">{this.props.i18nLast60Days}</MenuItem>\n            <MenuItem eventKey=\"3\">{this.props.i18nLast90Days}</MenuItem>\n          </Card.DropdownButton>\n          <Card.Title>{this.props.i18nTitle}</Card.Title>\n        </Card.Heading>\n        <Card.Body>{this.props.children}</Card.Body>\n      </Card>\n    );\n  }\n}\n","import { Card } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IUptimeMetricProps {\n  start: number;\n  i18nTitle: string;\n}\n\nexport class UptimeMetric extends React.PureComponent<IUptimeMetricProps> {\n  public render() {\n    const startAsDate = new Date(this.props.start);\n    const startAsHuman = startAsDate.toLocaleString();\n    return (\n      <Card accented={true} aggregated={true} matchHeight={true}>\n        <Card.Title className={'text-left'}>\n          <small className={'pull-right'}>since {startAsHuman}</small>\n          <div>{this.props.i18nTitle}</div>\n        </Card.Title>\n        <Card.Body>TODO</Card.Body>\n      </Card>\n    );\n  }\n}\n","import {\n  Button,\n  DropdownKebab,\n  ListViewIcon,\n  ListViewItem,\n  MenuItem,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n} from '../../../Shared';\n\nexport interface IViewListItemProps {\n  viewDescription: string;\n  viewIcon?: string;\n  viewName: string;\n  i18nCancelText: string;\n  i18nDelete: string;\n  i18nDeleteTip?: string;\n  i18nDeleteModalMessage: string;\n  i18nDeleteModalTitle: string;\n  i18nEdit: string;\n  i18nEditTip?: string;\n  onDelete: (viewName: string) => void;\n  onEdit: (viewName: string) => void;\n}\n\nexport interface IViewListItemState {\n  showDeleteDialog: boolean;\n}\n\nexport class ViewListItem extends React.Component<\n  IViewListItemProps,\n  IViewListItemState\n> {\n  public constructor(props: IViewListItemProps) {\n    super(props);\n    this.state = {\n      showDeleteDialog: false, // initial visibility of delete dialog\n    };\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.showDeleteDialog = this.showDeleteDialog.bind(this);\n  }\n\n  public render() {\n    return (\n      <>\n        <ConfirmationDialog\n          buttonStyle={ConfirmationButtonStyle.DANGER}\n          i18nCancelButtonText={this.props.i18nCancelText}\n          i18nConfirmButtonText={this.props.i18nDelete}\n          i18nConfirmationMessage={this.props.i18nDeleteModalMessage}\n          i18nTitle={this.props.i18nDeleteModalTitle}\n          icon={ConfirmationIconType.DANGER}\n          showDialog={this.state.showDeleteDialog}\n          onCancel={this.handleCancel}\n          onConfirm={this.handleDelete}\n        />\n        <ListViewItem\n          actions={\n            <div className=\"form-group\">\n              <OverlayTrigger overlay={this.getEditTooltip()} placement=\"top\">\n                <Button bsStyle=\"default\" onClick={this.handleEdit}>\n                  {this.props.i18nEdit}\n                </Button>\n              </OverlayTrigger>\n              <DropdownKebab\n                id={`view-${this.props.viewName}-action-menu`}\n                pullRight={true}\n              >\n                <OverlayTrigger\n                  overlay={this.getDeleteTooltip()}\n                  placement=\"left\"\n                >\n                  <MenuItem onClick={this.showDeleteDialog}>\n                    {this.props.i18nDelete}\n                  </MenuItem>\n                </OverlayTrigger>\n              </DropdownKebab>\n            </div>\n          }\n          heading={this.props.viewName}\n          description={\n            this.props.viewDescription ? this.props.viewDescription : ''\n          }\n          hideCloseIcon={true}\n          leftContent={\n            this.props.viewIcon ? (\n              <div className=\"blank-slate-pf-icon\">\n                <img\n                  src={this.props.viewIcon}\n                  alt={this.props.viewName}\n                  width={46}\n                />\n              </div>\n            ) : (\n              <ListViewIcon name={'cube'} />\n            )\n          }\n          stacked={false}\n        />\n      </>\n    );\n  }\n\n  private getDeleteTooltip() {\n    return (\n      <Tooltip id=\"deleteTip\">\n        {this.props.i18nDeleteTip\n          ? this.props.i18nDeleteTip\n          : this.props.i18nDelete}\n      </Tooltip>\n    );\n  }\n\n  private getEditTooltip() {\n    return (\n      <Tooltip id=\"editTip\">\n        {this.props.i18nEditTip ? this.props.i18nEditTip : this.props.i18nEdit}\n      </Tooltip>\n    );\n  }\n\n  private handleCancel() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n  }\n\n  private handleEdit = () => {\n    if (this.props.viewName) {\n      this.props.onEdit(this.props.viewName);\n    }\n  };\n\n  private showDeleteDialog() {\n    this.setState({\n      showDeleteDialog: true,\n    });\n  }\n\n  private handleDelete() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n\n    // TODO: disable components while delete is processing\n    if (this.props.viewName) {\n      this.props.onDelete(this.props.viewName);\n    }\n  }\n}\n","import * as H from 'history';\nimport {\n  EmptyState,\n  ListView,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../../../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../../../Shared';\nimport './ViewList.css';\n\nexport interface IViewsListProps extends IListViewToolbarProps {\n  hasListData: boolean;\n  i18nEmptyStateInfo: string;\n  i18nEmptyStateTitle: string;\n  i18nImportViews: string;\n  i18nImportViewsTip: string;\n  linkCreateViewHRef: H.LocationDescriptor;\n  linkImportViewsHRef: H.LocationDescriptor;\n  i18nCreateViewTip?: string;\n  i18nCreateView: string;\n  i18nDescription: string;\n  i18nName: string;\n  i18nNameFilterPlaceholder: string;\n  onImportView: (name: string) => void;\n}\n\nexport class ViewList extends React.Component<IViewsListProps> {\n  public constructor(props: IViewsListProps) {\n    super(props);\n  }\n\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <OverlayTrigger\n              overlay={this.getImportViewsTooltip()}\n              placement=\"top\"\n            >\n              <ButtonLink href={this.props.linkImportViewsHRef} as={'default'}>\n                {this.props.i18nImportViews}\n              </ButtonLink>\n            </OverlayTrigger>\n            <OverlayTrigger\n              overlay={this.getCreateViewTooltip()}\n              placement=\"top\"\n            >\n              <ButtonLink href={this.props.linkCreateViewHRef} as={'primary'}>\n                {this.props.i18nCreateView}\n              </ButtonLink>\n            </OverlayTrigger>\n          </div>\n        </ListViewToolbar>\n        {this.props.hasListData ? (\n          <ListView>{this.props.children}</ListView>\n        ) : (\n          <EmptyState>\n            <EmptyState.Icon />\n            <EmptyState.Title>\n              {this.props.i18nEmptyStateTitle}\n            </EmptyState.Title>\n            <EmptyState.Info>{this.props.i18nEmptyStateInfo}</EmptyState.Info>\n            <EmptyState.Action>\n              <OverlayTrigger\n                overlay={this.getImportViewsTooltip()}\n                placement=\"top\"\n              >\n                <ButtonLink\n                  href={this.props.linkImportViewsHRef}\n                  as={'default'}\n                  className={'view-list-empty-state-import'}\n                >\n                  {this.props.i18nImportViews}\n                </ButtonLink>\n              </OverlayTrigger>\n              <OverlayTrigger\n                overlay={this.getCreateViewTooltip()}\n                placement=\"top\"\n              >\n                <ButtonLink href={this.props.linkCreateViewHRef} as={'primary'}>\n                  {this.props.i18nCreateView}\n                </ButtonLink>\n              </OverlayTrigger>\n            </EmptyState.Action>\n          </EmptyState>\n        )}\n      </>\n    );\n  }\n\n  private getCreateViewTooltip() {\n    return (\n      <Tooltip id=\"createTip\">\n        {this.props.i18nCreateViewTip\n          ? this.props.i18nCreateViewTip\n          : this.props.i18nCreateView}\n      </Tooltip>\n    );\n  }\n\n  private getImportViewsTooltip() {\n    return (\n      <Tooltip id=\"importViewsTip\">\n        {this.props.i18nImportViewsTip\n          ? this.props.i18nImportViewsTip\n          : this.props.i18nImportViews}\n      </Tooltip>\n    );\n  }\n}\n","import { CardGrid } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class DvConnectionsGrid extends React.Component {\n  public render() {\n    return (\n      <CardGrid fluid={true} matchHeight={true}>\n        <CardGrid.Row>{this.props.children}</CardGrid.Row>\n      </CardGrid>\n    );\n  }\n}\n","import { CardGrid } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class DvConnectionsGridCell extends React.Component {\n  public render() {\n    return (\n      <CardGrid.Col xs={6} md={3}>\n        {this.props.children}\n      </CardGrid.Col>\n    );\n  }\n}\n","import * as H from 'history';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../../Shared';\n\nexport interface IDvConnectionsListViewProps extends IListViewToolbarProps {\n  linkToConnectionCreate: H.LocationDescriptor;\n  i18nLinkCreateConnection: string;\n}\n\nexport class DvConnectionsListView extends React.Component<\n  IDvConnectionsListViewProps\n> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <ButtonLink href={this.props.linkToConnectionCreate} as={'primary'}>\n              {this.props.i18nLinkCreateConnection}\n            </ButtonLink>\n          </div>\n        </ListViewToolbar>\n        <Container>{this.props.children}</Container>\n      </>\n    );\n  }\n}\n","import { Label, ListViewInfoItem, ListViewItem } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IViewInfoListItemProps {\n  name: string;\n  description?: string;\n  connectionName: string;\n  nodePath: string[];\n  selected: boolean;\n  i18nUpdate: string;\n  isUpdateView: boolean;\n  onSelectionChanged: (name: string, selected: boolean) => void;\n}\n\nexport interface IViewInfoListItemState {\n  itemSelected: boolean;\n}\n\nexport class ViewInfoListItem extends React.Component<\n  IViewInfoListItemProps,\n  IViewInfoListItemState\n> {\n  public constructor(props: IViewInfoListItemProps) {\n    super(props);\n    this.state = {\n      itemSelected: props.selected, // initial item selection\n    };\n    this.handleCheckboxToggle = this.handleCheckboxToggle.bind(this);\n  }\n\n  public temp() {\n    const tDescription = this.props.description;\n    const tConnectionName = this.props.connectionName;\n    return tDescription + tConnectionName;\n  }\n\n  public getNodePathStr() {\n    let path = '';\n    for (const segment of this.props.nodePath) {\n      path += '/' + segment;\n    }\n    return path;\n  }\n\n  public handleCheckboxToggle = (viewName: string) => (event: any) => {\n    this.setState({\n      itemSelected: !this.state.itemSelected,\n    });\n    this.props.onSelectionChanged(viewName, !this.state.itemSelected);\n  };\n\n  public render() {\n    return (\n      <ListViewItem\n        heading={this.props.name}\n        description={this.getNodePathStr()}\n        checkboxInput={\n          <input\n            type=\"checkbox\"\n            value=\"\"\n            defaultChecked={this.props.selected}\n            onChange={this.handleCheckboxToggle(this.props.name)}\n          />\n        }\n        additionalInfo={[\n          <ListViewInfoItem key={1}>\n            {this.props.isUpdateView === true ? (\n              <Label type=\"warning\">{this.props.i18nUpdate}</Label>\n            ) : (\n              ''\n            )}\n          </ListViewInfoItem>,\n        ]}\n        hideCloseIcon={true}\n        stacked={false}\n      />\n    );\n  }\n}\n","import { EmptyState, ListView } from 'patternfly-react';\nimport * as React from 'react';\nimport { IListViewToolbarProps, ListViewToolbar } from '../../../Shared';\n\nexport interface IViewInfoListProps extends IListViewToolbarProps {\n  i18nEmptyStateInfo: string;\n  i18nEmptyStateTitle: string;\n  i18nName: string;\n  i18nNameFilterPlaceholder: string;\n}\n\nexport class ViewInfoList extends React.Component<IViewInfoListProps> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div />\n        </ListViewToolbar>\n        {this.props.children ? (\n          <ListView>{this.props.children}</ListView>\n        ) : (\n          <EmptyState>\n            <EmptyState.Icon />\n            <EmptyState.Title>\n              {this.props.i18nEmptyStateTitle}\n            </EmptyState.Title>\n            <EmptyState.Info>{this.props.i18nEmptyStateInfo}</EmptyState.Info>\n          </EmptyState>\n        )}\n      </>\n    );\n  }\n}\n","import * as H from 'history';\nimport {\n  //  Button,\n  DropdownKebab,\n  ListView,\n  ListViewIcon,\n  ListViewItem,\n  MenuItem,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport {\n  VirtualizationPublishStatus,\n  VirtualizationPublishStatusDetail,\n} from '../';\nimport { ButtonLink } from '../../Layout';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n} from '../../Shared';\nimport {\n  BUILDING,\n  CONFIGURING,\n  DEPLOYING,\n  RUNNING,\n  SUBMITTED,\n  VirtualizationPublishState,\n} from './models';\n\nexport interface IVirtualizationListItemProps {\n  currentPublishedState: VirtualizationPublishState;\n  detailsPageLink: H.LocationDescriptor;\n  i18nCancelText: string;\n  i18nDelete: string;\n  i18nDeleteModalMessage: string;\n  i18nDeleteModalTitle: string;\n  i18nDraft: string;\n  i18nError: string;\n  i18nEdit: string;\n  i18nEditTip?: string;\n  i18nExport: string;\n  i18nPublish: string;\n  i18nPublished: string;\n  i18nPublishLogUrlText: string;\n  i18nPublishInProgress: string;\n  i18nUnpublish: string;\n  i18nUnpublishModalMessage: string;\n  i18nUnpublishModalTitle: string;\n  icon?: string;\n  onDelete: (virtualizationName: string) => void;\n  onExport: (virtualizationName: string) => void;\n  onPublish: (virtualizationName: string) => void;\n  onUnpublish: (virtualizationName: string) => void;\n  publishingCurrentStep?: number;\n  publishingLogUrl?: string;\n  publishingTotalSteps?: number;\n  publishingStepText?: string;\n  serviceVdbName: string;\n  virtualizationName: string;\n  virtualizationDescription: string;\n}\n\nexport interface IVirtualizationListItemState {\n  showConfirmationDialog: boolean;\n}\n\nexport class VirtualizationListItem extends React.Component<\n  IVirtualizationListItemProps,\n  IVirtualizationListItemState\n> {\n  public constructor(props: IVirtualizationListItemProps) {\n    super(props);\n    this.state = {\n      showConfirmationDialog: false, // initial visibility of confirmation dialog\n    };\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleExport = this.handleExport.bind(this);\n    this.handleUnpublish = this.handleUnpublish.bind(this);\n    this.handlePublish = this.handlePublish.bind(this);\n    this.showConfirmationDialog = this.showConfirmationDialog.bind(this);\n  }\n\n  public getEditTooltip() {\n    return (\n      <Tooltip id=\"detailsTip\">\n        {this.props.i18nEditTip ? this.props.i18nEditTip : this.props.i18nEdit}\n      </Tooltip>\n    );\n  }\n\n  public handleCancel() {\n    this.setState({\n      showConfirmationDialog: false, // hide dialog\n    });\n  }\n\n  public handleDelete() {\n    this.setState({\n      showConfirmationDialog: false, // hide dialog\n    });\n\n    // TODO: disable components while delete is processing\n    if (this.props.virtualizationName) {\n      this.props.onDelete(this.props.virtualizationName);\n    }\n  }\n\n  public handleExport() {\n    if (this.props.virtualizationName) {\n      this.props.onExport(this.props.virtualizationName);\n    }\n  }\n\n  public handlePublish() {\n    if (this.props.virtualizationName) {\n      this.props.onPublish(this.props.virtualizationName);\n    }\n  }\n\n  public handleUnpublish() {\n    this.setState({\n      showConfirmationDialog: false, // hide dialog\n    });\n\n    if (this.props.serviceVdbName) {\n      this.props.onUnpublish(this.props.serviceVdbName);\n    }\n  }\n\n  public showConfirmationDialog() {\n    this.setState({\n      showConfirmationDialog: true,\n    });\n  }\n\n  public handleAcceptConfirmation() {\n    const isPublished =\n      this.props.currentPublishedState === RUNNING ? true : false;\n    if (isPublished) {\n      this.handleUnpublish();\n    } else {\n      this.handleDelete();\n    }\n  }\n\n  public render() {\n    // Determine published state\n    const isPublished =\n      this.props.currentPublishedState === RUNNING ? true : false;\n    const publishInProgress =\n      this.props.currentPublishedState === BUILDING ||\n      this.props.currentPublishedState === CONFIGURING ||\n      this.props.currentPublishedState === DEPLOYING ||\n      this.props.currentPublishedState === SUBMITTED\n        ? true\n        : false;\n\n    return (\n      <>\n        <ConfirmationDialog\n          buttonStyle={\n            isPublished\n              ? ConfirmationButtonStyle.WARNING\n              : ConfirmationButtonStyle.DANGER\n          }\n          i18nCancelButtonText={this.props.i18nCancelText}\n          i18nConfirmButtonText={\n            isPublished ? this.props.i18nUnpublish : this.props.i18nDelete\n          }\n          i18nConfirmationMessage={\n            isPublished\n              ? this.props.i18nUnpublishModalMessage\n              : this.props.i18nDeleteModalMessage\n          }\n          i18nTitle={\n            isPublished\n              ? this.props.i18nUnpublishModalTitle\n              : this.props.i18nDeleteModalTitle\n          }\n          icon={\n            isPublished\n              ? ConfirmationIconType.WARNING\n              : ConfirmationIconType.DANGER\n          }\n          showDialog={this.state.showConfirmationDialog}\n          onCancel={this.handleCancel}\n          onConfirm={this.handleDelete}\n        />\n        <ListViewItem\n          actions={\n            <div className=\"form-group\">\n              {publishInProgress ? (\n                <VirtualizationPublishStatusDetail\n                  logUrl={this.props.publishingLogUrl}\n                  stepText={this.props.publishingStepText}\n                  currentStep={this.props.publishingCurrentStep}\n                  totalSteps={this.props.publishingTotalSteps}\n                  i18nPublishInProgress={this.props.i18nPublishInProgress}\n                  i18nLogUrlText={this.props.i18nPublishLogUrlText}\n                />\n              ) : (\n                <VirtualizationPublishStatus\n                  currentState={this.props.currentPublishedState}\n                  i18nPublished={this.props.i18nPublished}\n                  i18nUnpublished={this.props.i18nDraft}\n                  i18nError={this.props.i18nError}\n                />\n              )}\n              <OverlayTrigger overlay={this.getEditTooltip()} placement=\"top\">\n                <ButtonLink href={this.props.detailsPageLink} as={'primary'}>\n                  {this.props.i18nEdit}\n                </ButtonLink>\n              </OverlayTrigger>\n              <DropdownKebab\n                id={`virtualization-${\n                  this.props.virtualizationName\n                }-action-menu`}\n                pullRight={true}\n              >\n                <MenuItem onClick={this.showConfirmationDialog}>\n                  {this.props.i18nDelete}\n                </MenuItem>\n                <MenuItem onClick={this.handleExport}>\n                  {this.props.i18nExport}\n                </MenuItem>\n                <MenuItem\n                  onClick={\n                    isPublished || publishInProgress\n                      ? this.handleUnpublish\n                      : this.handlePublish\n                  }\n                >\n                  {isPublished || publishInProgress\n                    ? this.props.i18nUnpublish\n                    : this.props.i18nPublish}\n                </MenuItem>\n              </DropdownKebab>\n            </div>\n          }\n          heading={this.props.virtualizationName}\n          description={\n            this.props.virtualizationDescription\n              ? this.props.virtualizationDescription\n              : ''\n          }\n          hideCloseIcon={true}\n          leftContent={\n            this.props.icon ? (\n              <div className=\"blank-slate-pf-icon\">\n                <img\n                  src={this.props.icon}\n                  alt={this.props.virtualizationName}\n                  width={46}\n                />\n              </div>\n            ) : (\n              <ListViewIcon name={'database'} />\n            )\n          }\n          stacked={true}\n        >\n          {this.props.children ? (\n            <ListView>{this.props.children}</ListView>\n          ) : null}\n        </ListViewItem>\n      </>\n    );\n  }\n}\n","export const NOTFOUND = 'NOTFOUND';\nexport const SUBMITTED = 'SUBMITTED';\nexport const CONFIGURING = 'CONFIGURING';\nexport const BUILDING = 'BUILDING';\nexport const DEPLOYING = 'DEPLOYING';\nexport const RUNNING = 'RUNNING';\nexport const FAILED = 'FAILED';\nexport const CANCELLED = 'CANCELLED';\n\nexport type VirtualizationPublishState =\n  | 'NOTFOUND'\n  | 'SUBMITTED'\n  | 'CONFIGURING'\n  | 'BUILDING'\n  | 'DEPLOYING'\n  | 'RUNNING'\n  | 'FAILED'\n  | 'CANCELLED';\n\n// Detailed state log link types\nexport const LOGS = 'LOGS';\nexport const EVENTS = 'EVENTS';\n\nexport type LinkType = 'LOGS' | 'EVENTS';\n","import * as H from 'history';\nimport {\n  Button,\n  EmptyState,\n  ListView,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../../Layout';\nimport {\n  IListViewToolbarProps,\n  ListViewToolbar,\n  SimplePageHeader,\n} from '../../Shared';\n\nexport interface IVirtualizationListProps extends IListViewToolbarProps {\n  hasListData: boolean;\n  i18nCreateDataVirtualization: string;\n  i18nCreateDataVirtualizationTip?: string;\n  i18nDescription: string;\n  i18nEmptyStateInfo: string;\n  i18nEmptyStateTitle: string;\n  i18nImport: string;\n  i18nImportTip: string;\n  i18nLinkCreateVirtualization: string;\n  i18nLinkCreateVirtualizationTip?: string;\n  i18nName: string;\n  i18nNameFilterPlaceholder: string;\n  i18nTitle: string;\n  linkCreateHRef: H.LocationDescriptor;\n  onImport: (name: string) => void;\n}\n\nexport class VirtualizationList extends React.Component<\n  IVirtualizationListProps\n> {\n  public constructor(props: IVirtualizationListProps) {\n    super(props);\n    this.handleImport = this.handleImport.bind(this);\n  }\n\n  public getCreateVirtualizationTooltip() {\n    return (\n      <Tooltip id=\"createTip\">\n        {this.props.i18nLinkCreateVirtualizationTip\n          ? this.props.i18nLinkCreateVirtualizationTip\n          : this.props.i18nLinkCreateVirtualization}\n      </Tooltip>\n    );\n  }\n\n  public getImportVirtualizationTooltip() {\n    return (\n      <Tooltip id=\"importTip\">\n        {this.props.i18nImportTip\n          ? this.props.i18nImportTip\n          : this.props.i18nImport}\n      </Tooltip>\n    );\n  }\n\n  public handleImport() {\n    this.props.onImport('');\n  }\n\n  public render() {\n    return (\n      <>\n        <SimplePageHeader\n          className=\"container-fluid pf-u-my-md\"\n          i18nTitle={this.props.i18nTitle}\n          i18nDescription={this.props.i18nDescription}\n        />\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <OverlayTrigger\n              overlay={this.getImportVirtualizationTooltip()}\n              placement=\"top\"\n            >\n              <Button\n                bsStyle=\"default\"\n                to={this.props.i18nImport}\n                onClick={this.handleImport}\n              >\n                {this.props.i18nImport}\n              </Button>\n            </OverlayTrigger>\n            <OverlayTrigger\n              overlay={this.getCreateVirtualizationTooltip()}\n              placement=\"top\"\n            >\n              <ButtonLink href={this.props.linkCreateHRef} as={'primary'}>\n                {this.props.i18nLinkCreateVirtualization}\n              </ButtonLink>\n            </OverlayTrigger>\n          </div>\n        </ListViewToolbar>\n        {this.props.hasListData ? (\n          <ListView>{this.props.children}</ListView>\n        ) : (\n          <EmptyState>\n            <EmptyState.Icon />\n            <EmptyState.Title>\n              {this.props.i18nEmptyStateTitle}\n            </EmptyState.Title>\n            <EmptyState.Info>{this.props.i18nEmptyStateInfo}</EmptyState.Info>\n            <EmptyState.Action>\n              <OverlayTrigger\n                overlay={this.getCreateVirtualizationTooltip()}\n                placement=\"top\"\n              >\n                <ButtonLink href={this.props.linkCreateHRef} as={'primary'}>\n                  {this.props.i18nLinkCreateVirtualization}\n                </ButtonLink>\n              </OverlayTrigger>\n            </EmptyState.Action>\n          </EmptyState>\n        )}\n      </>\n    );\n  }\n}\n","import { Label } from 'patternfly-react';\nimport * as React from 'react';\nimport {\n  BUILDING,\n  CANCELLED,\n  CONFIGURING,\n  DEPLOYING,\n  FAILED,\n  NOTFOUND,\n  RUNNING,\n  SUBMITTED,\n  VirtualizationPublishState,\n} from './models';\nimport './VirtualizationPublishStatus.css';\n\nexport interface IVirtualizationPublishStatusProps {\n  currentState?: VirtualizationPublishState;\n  i18nPublished: string;\n  i18nUnpublished: string;\n  i18nError: string;\n}\n\nexport class VirtualizationPublishStatus extends React.Component<\n  IVirtualizationPublishStatusProps\n> {\n  public render() {\n    const labelType =\n      this.props.currentState === FAILED\n        ? 'danger'\n        : this.props.currentState === RUNNING\n        ? 'primary'\n        : 'default';\n    let label = NOTFOUND; // default to not found\n    switch (this.props.currentState) {\n      case RUNNING:\n        label = this.props.i18nPublished;\n        break;\n      case CANCELLED:\n      case NOTFOUND:\n        label = this.props.i18nUnpublished;\n        break;\n      case FAILED:\n        label = this.props.i18nError;\n        break;\n      case SUBMITTED:\n      case CONFIGURING:\n      case BUILDING:\n        label = DEPLOYING;\n        break;\n    }\n    return (\n      <Label className={'virtualization-publish-status-label'} type={labelType}>\n        {label}\n      </Label>\n    );\n  }\n}\n","import { Spinner } from 'patternfly-react';\nimport * as React from 'react';\nimport { ProgressWithLink } from '../../Shared';\n\nimport './VirtualizationPublishStatusDetail.css';\n\nexport interface IVirtualizationPublishStatusDetailProps {\n  currentStep?: number;\n  totalSteps?: number;\n  stepText?: string;\n  logUrl?: string;\n  i18nPublishInProgress: string;\n  i18nLogUrlText: string;\n}\n\nexport class VirtualizationPublishStatusDetail extends React.Component<\n  IVirtualizationPublishStatusDetailProps\n> {\n  public render() {\n    return (\n      <div\n        data-testid=\"virtualization-publish-status-detail\"\n        className={'virtualization-publish-status-detail'}\n      >\n        {this.props.stepText &&\n        this.props.currentStep &&\n        this.props.totalSteps ? (\n          <ProgressWithLink\n            currentStep={this.props.currentStep}\n            totalSteps={this.props.totalSteps}\n            value={this.props.stepText}\n            logUrl={this.props.logUrl}\n            i18nLogUrlText={this.props.i18nLogUrlText}\n          />\n        ) : (\n          <>\n            <Spinner loading={true} inline={true} />\n            {this.props.i18nPublishInProgress}\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport classnames from 'classnames';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { ButtonLink, Loader } from '../Layout';\n\n/**\n * @param header - a PatternFly Wizard Steps component.\n * @param sidebar - the sidebar container takes the size of its content. If no\n * sidebar is defined, a layout with just the header, the footer and the body\n * will be shown.\n * @param content - the main content of the wizard. In case of overflow, only\n * the body will scroll.\n * @param onCancel - if passed, the Cancel button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onBack - if passed, the Back button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onNext - if passed, the Next button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param cancelHref - if passed, the Cancel button will be render as a `Link`\n * using this as its `to` parameter.\n * @param backHref - if passed, the Back button will be render as a `Link`\n * using this as its `to` parameter.\n * @param nextHref - if passed, the Next button will be render as a `Link`\n * using this as its `to` parameter.\n * @param isNextLoading - if set to true, a `Loading` component will be shown\n * inside the Next button before its label. The button will also be disabled.\n * @param isNextDisabled - if set to true, the Next button will be disabled.\n * @param isLastStep - if set to true, it changes the Next button label to\n * 'Done'.\n * @param extraButtons - buttons to add between the cancel and the back/next\n */\nexport interface IConnectionCreatorProps {\n  header: React.ReactNode;\n  content: React.ReactNode;\n  onCancel?: (e: React.MouseEvent<any>) => void;\n  onBack?: (e: React.MouseEvent<any>) => void;\n  onNext?: (e: React.MouseEvent<any>) => void;\n  cancelHref?: H.LocationDescriptor;\n  backHref?: H.LocationDescriptor;\n  nextHref?: H.LocationDescriptor;\n  isNextDisabled?: boolean;\n  isNextLoading?: boolean;\n  isLastStep?: boolean;\n  extraButtons?: React.ReactNode;\n}\n\n/**\n * Provides the layout for the integration editor. It uses the PatternFly Wizard\n * component under the hood.\n * The footer is pre-defined and follows the PF Wizard pattern, with\n * Cancel/Previous/Next buttons.\n *\n * @todo in the CSS we use hardcoded values for the heights of various\n * elements of the page to be able to size the element to take all the available\n * height and show the right scrollbars.\n * We should really find a smarter way to handle this.\n */\nexport const ConnectionCreatorLayout: React.FunctionComponent<\n  IConnectionCreatorProps\n> = ({\n  header,\n  content,\n  onCancel,\n  onBack,\n  onNext,\n  cancelHref,\n  backHref,\n  nextHref,\n  isNextLoading,\n  isNextDisabled,\n  isLastStep = false,\n  extraButtons,\n}: IConnectionCreatorProps) => {\n  return (\n    <div\n      className={classnames(\n        'wizard-pf-body integration-editor-layout syn-scrollable',\n        {\n          'has-footer': true,\n        }\n      )}\n    >\n      {header}\n      <div className=\"wizard-pf-row integration-editor-layout__body syn-scrollable--body\">\n        <div\n          className={\n            'wizard-pf-main cards-pf integration-editor-layout__contentWrapper'\n          }\n        >\n          <div className=\"integration-editor-layout__content\">{content}</div>\n        </div>\n      </div>\n      <div className=\"wizard-pf-footer integration-editor-layout__footer\">\n        <ButtonLink\n          onClick={onBack}\n          href={backHref}\n          className={'wizard-pf-back'}\n        >\n          <i className=\"fa fa-angle-left\" /> Back\n        </ButtonLink>\n        {extraButtons && (\n          <div className={'wizard-pf-extrabuttons'}>{extraButtons}</div>\n        )}\n        <ButtonLink\n          onClick={onNext}\n          href={nextHref}\n          as={'primary'}\n          className={'wizard-pf-next'}\n          disabled={isNextLoading || isNextDisabled}\n        >\n          {isNextLoading ? <Loader size={'xs'} inline={true} /> : null}\n          {isLastStep ? (\n            'Done'\n          ) : (\n            <>\n              Next <i className=\"fa fa-angle-right\" />\n            </>\n          )}\n        </ButtonLink>\n        <ButtonLink\n          onClick={onCancel}\n          href={cancelHref}\n          className={'wizard-pf-cancel'}\n        >\n          Cancel\n        </ButtonLink>\n      </div>\n    </div>\n  );\n};\n","import { Card, EmptyState } from 'patternfly-react';\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport const ConnectionSkeleton = (props: any) => (\n  <Card matchHeight={true}>\n    <Card.Body>\n      <EmptyState>\n        <ContentLoader\n          height={300}\n          width={200}\n          speed={2}\n          primaryColor=\"#f3f3f3\"\n          secondaryColor=\"#ecebeb\"\n          {...props}\n        >\n          <circle cx=\"100\" cy=\"50\" r=\"40\" />\n          <rect x=\"5\" y=\"125\" rx=\"5\" ry=\"5\" width=\"190\" height=\"30\" />\n          <rect x=\"25\" y=\"180\" rx=\"5\" ry=\"5\" width=\"150\" height=\"15\" />\n          <rect x=\"40\" y=\"205\" rx=\"5\" ry=\"5\" width=\"120\" height=\"15\" />\n        </ContentLoader>\n      </EmptyState>\n    </Card.Body>\n  </Card>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport interface IApiConnectorListSkeletonProps {\n  width: number;\n  style?: any;\n}\n\nexport const ApiConnectorListSkeleton: React.FunctionComponent<\n  IApiConnectorListSkeletonProps\n> = ({ width, style }) => (\n  <ContentLoader\n    height={356}\n    width={width}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={style}\n  >\n    <circle cx=\"30\" cy=\"40\" r=\"16\" />\n    <circle cx=\"70\" cy=\"40\" r=\"16\" />\n    <rect x=\"105\" y=\"35\" rx=\"5\" ry=\"5\" width=\"200\" height=\"15\" />\n    <rect x={width - 100} y=\"35\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"110\" r=\"16\" />\n    <circle cx=\"70\" cy=\"110\" r=\"16\" />\n    <rect x=\"105\" y=\"105\" rx=\"5\" ry=\"5\" width=\"180\" height=\"15\" />\n    <rect x={width - 100} y=\"105\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"180\" r=\"16\" />\n    <circle cx=\"70\" cy=\"180\" r=\"16\" />\n    <rect x=\"105\" y=\"175\" rx=\"5\" ry=\"5\" width=\"195\" height=\"15\" />\n    <rect x={width - 100} y=\"175\" rx=\"5\" ry=\"5\" width=\"85\" height=\"15\" />\n  </ContentLoader>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport interface ICustomizationsExtensionListSkeletonProps {\n  width: number;\n  style?: any;\n}\n\nexport const ExtensionListSkeleton: React.FunctionComponent<\n  ICustomizationsExtensionListSkeletonProps\n> = ({ width, style }) => (\n  <ContentLoader\n    height={356}\n    width={width}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={style}\n  >\n    <circle cx=\"30\" cy=\"40\" r=\"16\" />\n    <circle cx=\"70\" cy=\"40\" r=\"16\" />\n    <rect x=\"105\" y=\"35\" rx=\"5\" ry=\"5\" width=\"200\" height=\"15\" />\n    <rect x={width - 100} y=\"35\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"110\" r=\"16\" />\n    <circle cx=\"70\" cy=\"110\" r=\"16\" />\n    <rect x=\"105\" y=\"105\" rx=\"5\" ry=\"5\" width=\"180\" height=\"15\" />\n    <rect x={width - 100} y=\"105\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"180\" r=\"16\" />\n    <circle cx=\"70\" cy=\"180\" r=\"16\" />\n    <rect x=\"105\" y=\"175\" rx=\"5\" ry=\"5\" width=\"195\" height=\"15\" />\n    <rect x={width - 100} y=\"175\" rx=\"5\" ry=\"5\" width=\"85\" height=\"15\" />\n  </ContentLoader>\n);\n","import { Grid } from 'patternfly-react';\nimport * as React from 'react';\nimport { IntegrationStatus } from '../Integration';\nimport { IntegrationState } from '../Integration/models';\n\nexport interface IRecentUpdatesItem {\n  integrationName: string;\n  integrationCurrentState: IntegrationState;\n  integrationDate: number;\n  i18nError: string;\n  i18nPublished: string;\n  i18nUnpublished: string;\n}\n\nexport const RecentUpdatesItem: React.FunctionComponent<IRecentUpdatesItem> = ({\n  integrationName,\n  integrationCurrentState,\n  integrationDate,\n  i18nError,\n  i18nPublished,\n  i18nUnpublished,\n}) => (\n  <Grid.Row>\n    <Grid.Col sm={5}>{integrationName}</Grid.Col>\n    <Grid.Col sm={3}>\n      <IntegrationStatus\n        currentState={integrationCurrentState}\n        i18nError={i18nError}\n        i18nPublished={i18nPublished}\n        i18nUnpublished={i18nUnpublished}\n      />\n    </Grid.Col>\n    <Grid.Col sm={4}>{new Date(integrationDate).toLocaleString()}</Grid.Col>\n  </Grid.Row>\n);\n","import * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport const RecentUpdatesSkeleton = (props: any) => (\n  <ContentLoader\n    height={150}\n    width={350}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    {...props}\n  >\n    <rect x=\"20\" y=\"5\" rx=\"5\" ry=\"5\" width=\"100\" height=\"10\" />\n    <rect x=\"150\" y=\"5\" rx=\"5\" ry=\"5\" width=\"30\" height=\"10\" />\n    <rect x=\"250\" y=\"5\" rx=\"5\" ry=\"5\" width=\"40\" height=\"10\" />\n\n    <rect x=\"20\" y=\"35\" rx=\"5\" ry=\"5\" width=\"80\" height=\"10\" />\n    <rect x=\"150\" y=\"35\" rx=\"5\" ry=\"5\" width=\"30\" height=\"10\" />\n    <rect x=\"250\" y=\"35\" rx=\"5\" ry=\"5\" width=\"40\" height=\"10\" />\n\n    <rect x=\"20\" y=\"65\" rx=\"5\" ry=\"5\" width=\"95\" height=\"10\" />\n    <rect x=\"150\" y=\"65\" rx=\"5\" ry=\"5\" width=\"30\" height=\"10\" />\n    <rect x=\"250\" y=\"65\" rx=\"5\" ry=\"5\" width=\"40\" height=\"10\" />\n\n    <rect x=\"20\" y=\"95\" rx=\"5\" ry=\"5\" width=\"125\" height=\"10\" />\n    <rect x=\"150\" y=\"95\" rx=\"5\" ry=\"5\" width=\"30\" height=\"10\" />\n    <rect x=\"250\" y=\"95\" rx=\"5\" ry=\"5\" width=\"40\" height=\"10\" />\n\n    <rect x=\"20\" y=\"125\" rx=\"5\" ry=\"5\" width=\"65\" height=\"10\" />\n    <rect x=\"150\" y=\"125\" rx=\"5\" ry=\"5\" width=\"30\" height=\"10\" />\n    <rect x=\"250\" y=\"125\" rx=\"5\" ry=\"5\" width=\"40\" height=\"10\" />\n  </ContentLoader>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport interface IViewListSkeletonProps {\n  width: number;\n  style?: any;\n}\n\nexport const ViewListSkeleton: React.FunctionComponent<\n  IViewListSkeletonProps\n> = ({ width, style }) => (\n  <ContentLoader\n    height={356}\n    width={width}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={style}\n  >\n    <circle cx=\"30\" cy=\"40\" r=\"16\" />\n    <circle cx=\"70\" cy=\"40\" r=\"16\" />\n    <rect x=\"105\" y=\"35\" rx=\"5\" ry=\"5\" width=\"200\" height=\"15\" />\n    <rect x={width - 100} y=\"35\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"110\" r=\"16\" />\n    <circle cx=\"70\" cy=\"110\" r=\"16\" />\n    <rect x=\"105\" y=\"105\" rx=\"5\" ry=\"5\" width=\"180\" height=\"15\" />\n    <rect x={width - 100} y=\"105\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"180\" r=\"16\" />\n    <circle cx=\"70\" cy=\"180\" r=\"16\" />\n    <rect x=\"105\" y=\"175\" rx=\"5\" ry=\"5\" width=\"195\" height=\"15\" />\n    <rect x={width - 100} y=\"175\" rx=\"5\" ry=\"5\" width=\"85\" height=\"15\" />\n  </ContentLoader>\n);\n","import { Card, EmptyState } from 'patternfly-react';\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport const DvConnectionSkeleton = (props: any) => (\n  <Card matchHeight={true}>\n    <Card.Body>\n      <EmptyState>\n        <ContentLoader\n          height={300}\n          width={200}\n          speed={2}\n          primaryColor=\"#f3f3f3\"\n          secondaryColor=\"#ecebeb\"\n          {...props}\n        >\n          <circle cx=\"100\" cy=\"50\" r=\"40\" />\n          <rect x=\"5\" y=\"125\" rx=\"5\" ry=\"5\" width=\"190\" height=\"30\" />\n          <rect x=\"25\" y=\"180\" rx=\"5\" ry=\"5\" width=\"150\" height=\"15\" />\n          <rect x=\"40\" y=\"205\" rx=\"5\" ry=\"5\" width=\"120\" height=\"15\" />\n        </ContentLoader>\n      </EmptyState>\n    </Card.Body>\n  </Card>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport interface IViewInfoListSkeletonProps {\n  width: number;\n  style?: any;\n}\n\nexport const ViewInfoListSkeleton: React.FunctionComponent<\n  IViewInfoListSkeletonProps\n> = ({ width, style }) => (\n  <ContentLoader\n    height={356}\n    width={width}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={style}\n  >\n    <circle cx=\"30\" cy=\"40\" r=\"16\" />\n    <circle cx=\"70\" cy=\"40\" r=\"16\" />\n    <rect x=\"105\" y=\"35\" rx=\"5\" ry=\"5\" width=\"200\" height=\"15\" />\n    <rect x={width - 100} y=\"35\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"110\" r=\"16\" />\n    <circle cx=\"70\" cy=\"110\" r=\"16\" />\n    <rect x=\"105\" y=\"105\" rx=\"5\" ry=\"5\" width=\"180\" height=\"15\" />\n    <rect x={width - 100} y=\"105\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"180\" r=\"16\" />\n    <circle cx=\"70\" cy=\"180\" r=\"16\" />\n    <rect x=\"105\" y=\"175\" rx=\"5\" ry=\"5\" width=\"195\" height=\"15\" />\n    <rect x={width - 100} y=\"175\" rx=\"5\" ry=\"5\" width=\"85\" height=\"15\" />\n  </ContentLoader>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport classnames from 'classnames';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { ButtonLink, Loader } from '../../../Layout';\nimport './ViewsCreateLayout.css';\n\n/**\n * @param header - a PatternFly Wizard Steps component.\n * @param content - the main content of the wizard. In case of overflow, only\n * the body will scroll.\n * @param onCancel - if passed, the Cancel button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onBack - if passed, the Back button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onNext - if passed, the Next button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onCreateViews - Create views when complete.\n * @param cancelHref - if passed, the Cancel button will be render as a `Link`\n * using this as its `to` parameter.\n * @param backHref - if passed, the Back button will be render as a `Link`\n * using this as its `to` parameter.\n * @param nextHref - if passed, the Next button will be render as a `Link`\n * using this as its `to` parameter.\n * @param isNextLoading - if set to true, a `Loading` component will be shown\n * inside the Next button before its label. The button will also be disabled.\n * @param isNextDisabled - if set to true, the Next button will be disabled.\n * @param isLastStep - if set to true, it changes the Next button label to\n * 'Done'.\n */\nexport interface IViewsCreateLayoutProps {\n  header: JSX.Element;\n  content: JSX.Element;\n  onCancel?: (e: React.MouseEvent<any>) => void;\n  onBack?: (e: React.MouseEvent<any>) => void;\n  onNext?: (e: React.MouseEvent<any>) => void;\n  onCreateViews?: () => Promise<any>;\n  cancelHref?: H.LocationDescriptor;\n  backHref?: H.LocationDescriptor;\n  nextHref?: H.LocationDescriptor;\n  isNextDisabled?: boolean;\n  isNextLoading?: boolean;\n  isLastStep?: boolean;\n}\n\n/**\n * Provides the layout for the views create wizard. It uses the PatternFly Wizard\n * component under the hood.\n * The footer is pre-defined and follows the PF Wizard pattern, with\n * Cancel/Previous/Next buttons.\n *\n * @todo in the CSS we use hardcoded values for the heights of various\n * elements of the page to be able to size the element to take all the available\n * height and show the right scrollbars.\n * We should really find a smarter way to handle this.\n */\nexport const ViewsCreateLayout: React.FunctionComponent<\n  IViewsCreateLayoutProps\n> = ({\n  header,\n  content,\n  onCancel,\n  onBack,\n  onNext,\n  onCreateViews,\n  cancelHref,\n  backHref,\n  nextHref,\n  isNextLoading,\n  isNextDisabled,\n  isLastStep = false,\n}: IViewsCreateLayoutProps) => {\n  return (\n    <div\n      className={classnames('wizard-pf-body views-create-layout', {\n        'has-footer': true,\n      })}\n    >\n      {header}\n      <div className=\"wizard-pf-row views-create-layout__body\">\n        <div\n          className={\n            'wizard-pf-main cards-pf views-create-layout__contentWrapper'\n          }\n        >\n          <div className=\"views-create-layout__content\">{content}</div>\n        </div>\n      </div>\n      <div className=\"wizard-pf-footer views-create-layout__footer\">\n        <ButtonLink\n          onClick={onBack}\n          href={backHref}\n          className={'wizard-pf-back'}\n        >\n          <i className=\"fa fa-angle-left\" /> Back\n        </ButtonLink>\n        <ButtonLink\n          onClick={isLastStep ? onCreateViews : onNext}\n          href={nextHref}\n          as={'primary'}\n          className={'wizard-pf-next'}\n          disabled={isNextLoading || isNextDisabled}\n        >\n          {isNextLoading ? <Loader size={'xs'} inline={true} /> : null}\n          {isLastStep ? (\n            'Done'\n          ) : (\n            <>\n              Next <i className=\"fa fa-angle-right\" />\n            </>\n          )}\n        </ButtonLink>\n        <ButtonLink\n          onClick={onCancel}\n          href={cancelHref}\n          className={'wizard-pf-cancel'}\n        >\n          Cancel\n        </ButtonLink>\n      </div>\n    </div>\n  );\n};\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport interface IVirtualizationListSkeletonProps {\n  width: number;\n  style?: any;\n}\n\nexport const VirtualizationListSkeleton: React.FunctionComponent<\n  IVirtualizationListSkeletonProps\n> = ({ width, style }) => (\n  <ContentLoader\n    height={356}\n    width={width}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={style}\n  >\n    <circle cx=\"30\" cy=\"40\" r=\"16\" />\n    <circle cx=\"70\" cy=\"40\" r=\"16\" />\n    <rect x=\"105\" y=\"35\" rx=\"5\" ry=\"5\" width=\"200\" height=\"15\" />\n    <rect x={width - 100} y=\"35\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"110\" r=\"16\" />\n    <circle cx=\"70\" cy=\"110\" r=\"16\" />\n    <rect x=\"105\" y=\"105\" rx=\"5\" ry=\"5\" width=\"180\" height=\"15\" />\n    <rect x={width - 100} y=\"105\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"180\" r=\"16\" />\n    <circle cx=\"70\" cy=\"180\" r=\"16\" />\n    <rect x=\"105\" y=\"175\" rx=\"5\" ry=\"5\" width=\"195\" height=\"15\" />\n    <rect x={width - 100} y=\"175\" rx=\"5\" ry=\"5\" width=\"85\" height=\"15\" />\n  </ContentLoader>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\n\nexport interface IIntegrationActionSelectorCardProps {\n  content: JSX.Element;\n  title: string;\n}\n\nexport const IntegrationActionSelectorCard: React.FunctionComponent<\n  IIntegrationActionSelectorCardProps\n> = ({ content, title }) => (\n  <div className=\"card-pf\">\n    <div className=\"card-pf-title\">{title}</div>\n    <div className=\"card-pf-body\">{content}</div>\n  </div>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport classnames from 'classnames';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { ButtonLink, Loader } from '../Layout';\nimport './IntegrationEditorLayout.css';\n\n/**\n * @param header - a PatternFly Wizard Steps component.\n * @param sidebar - the sidebar container takes the size of its content. If no\n * sidebar is defined, a layout with just the header, the footer and the body\n * will be shown.\n * @param content - the main content of the wizard. In case of overflow, only\n * the body will scroll.\n * @param onCancel - if passed, the Cancel button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onBack - if passed, the Back button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onNext - if passed, the Next button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param cancelHref - if passed, the Cancel button will be render as a `Link`\n * using this as its `to` parameter.\n * @param backHref - if passed, the Back button will be render as a `Link`\n * using this as its `to` parameter.\n * @param nextHref - if passed, the Next button will be render as a `Link`\n * using this as its `to` parameter.\n * @param isNextLoading - if set to true, a `Loading` component will be shown\n * inside the Next button before its label. The button will also be disabled.\n * @param isNextDisabled - if set to true, the Next button will be disabled.\n * @param isLastStep - if set to true, it changes the Next button label to\n * 'Done'.\n */\nexport interface IIntegrationEditorLayoutProps {\n  header: React.ReactNode;\n  sidebar?: React.ReactNode;\n  content: React.ReactNode;\n  onCancel?: (e: React.MouseEvent<any>) => void;\n  onBack?: (e: React.MouseEvent<any>) => void;\n  onNext?: (e: React.MouseEvent<any>) => void;\n  cancelHref?: H.LocationDescriptor;\n  backHref?: H.LocationDescriptor;\n  nextHref?: H.LocationDescriptor;\n  isNextDisabled?: boolean;\n  isNextLoading?: boolean;\n  isLastStep?: boolean;\n}\n\n/**\n * Provides the layout for the integration editor. It uses the PatternFly Wizard\n * component under the hood.\n * The footer is pre-defined and follows the PF Wizard pattern, with\n * Cancel/Previous/Next buttons.\n *\n * @todo in the CSS we use hardcoded values for the heights of various\n * elements of the page to be able to size the element to take all the available\n * height and show the right scrollbars.\n * We should really find a smarter way to handle this.\n */\nexport const IntegrationEditorLayout: React.FunctionComponent<\n  IIntegrationEditorLayoutProps\n> = ({\n  header,\n  sidebar,\n  content,\n  onCancel,\n  onBack,\n  onNext,\n  cancelHref,\n  backHref,\n  nextHref,\n  isNextLoading,\n  isNextDisabled,\n  isLastStep = false,\n}: IIntegrationEditorLayoutProps) => {\n  return (\n    <div\n      className={classnames(\n        'wizard-pf-body integration-editor-layout syn-scrollable',\n        {\n          'has-footer': true,\n        }\n      )}\n    >\n      {header}\n      <div className=\"wizard-pf-row integration-editor-layout__body syn-scrollable--body\">\n        <div className=\"wizard-pf-sidebar\">{sidebar}</div>\n        <div\n          className={\n            'wizard-pf-main cards-pf integration-editor-layout__contentWrapper'\n          }\n        >\n          <div className=\"integration-editor-layout__content\">{content}</div>\n        </div>\n      </div>\n      <div className=\"wizard-pf-footer integration-editor-layout__footer\">\n        <ButtonLink\n          onClick={onBack}\n          href={backHref}\n          className={'wizard-pf-back'}\n        >\n          <i className=\"fa fa-angle-left\" /> Back\n        </ButtonLink>\n        <ButtonLink\n          onClick={onNext}\n          href={nextHref}\n          as={'primary'}\n          className={'wizard-pf-next'}\n          disabled={isNextLoading || isNextDisabled}\n        >\n          {isNextLoading ? <Loader size={'xs'} inline={true} /> : null}\n          {isLastStep ? (\n            'Done'\n          ) : (\n            <>\n              Next <i className=\"fa fa-angle-right\" />\n            </>\n          )}\n        </ButtonLink>\n        <ButtonLink\n          onClick={onCancel}\n          href={cancelHref}\n          className={'wizard-pf-cancel'}\n        >\n          Cancel\n        </ButtonLink>\n      </div>\n    </div>\n  );\n};\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport {\n  IIntegrationFlowStepProps,\n  IntegrationFlowStep,\n} from './IntegrationFlowStep';\nimport { IntegrationFlowStepDetails } from './IntegrationFlowStepDetails';\n\nexport interface IIntegrationFlowStepWithOverviewProps\n  extends IIntegrationFlowStepProps {\n  /**\n   * The title of the extended information table.\n   */\n  i18nTitle: string;\n  /**\n   * The name of the connection used for the step.\n   */\n  name: string;\n  /**\n   * The name of the action used for the step.\n   */\n  action: string;\n  /**\n   * The data-type set up for the step.\n   */\n  dataType: string;\n}\n\n/**\n * A component to show an already configured step in the sidebar of the\n * integration editor.\n *\n * @see [i18nTitle]{@link IIntegrationFlowStepWithOverviewProps#i18nTitle}\n * @see [i18nTooltip]{@link IIntegrationFlowStepProps#i18nTooltip}\n * @see [icon]{@link IIntegrationFlowStepProps#icon}\n * @see [active]{@link IIntegrationFlowStepProps#active}\n * @see [showDetails]{@link IIntegrationFlowStepProps#showDetails}\n * @see [name]{@link IIntegrationFlowStepWithOverviewProps#name}\n * @see [action]{@link IIntegrationFlowStepWithOverviewProps#action}\n * @see [dataType]{@link IIntegrationFlowStepWithOverviewProps#dataType}\n * @constructor\n */\nexport const IntegrationFlowStepWithOverview: React.FunctionComponent<\n  IIntegrationFlowStepWithOverviewProps\n> = ({\n  i18nTitle,\n  i18nTooltip,\n  icon,\n  active = false,\n  showDetails,\n  name,\n  action,\n  dataType,\n}) => (\n  <IntegrationFlowStep\n    icon={icon}\n    active={active}\n    i18nTooltip={i18nTooltip}\n    showDetails={showDetails}\n  >\n    <IntegrationFlowStepDetails active={active}>\n      {({ Title, StepOverview }) => (\n        <>\n          <Title>{i18nTitle}</Title>\n          <StepOverview\n            nameI18nLabel={'Name:'}\n            name={name}\n            actionI18nLabel={'Action:'}\n            action={action}\n            dataTypeI18nLabel={'Data Type:'}\n            dataType={dataType}\n          />\n        </>\n      )}\n    </IntegrationFlowStepDetails>\n  </IntegrationFlowStep>\n);\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../Layout';\n\nexport interface IIntegrationsListItemUnreadableProps {\n  integrationName: string;\n  i18nDescription: string;\n  rawObject: string;\n}\n\nexport const IntegrationsListItemUnreadable: React.FC<\n  IIntegrationsListItemUnreadableProps\n> = ({ integrationName, i18nDescription, rawObject }) => {\n  const onClick = () => window.alert(rawObject);\n  return (\n    <ListView.Item\n      heading={integrationName}\n      actions={<ButtonLink onClick={onClick}>Integration JSON</ButtonLink>}\n      description={i18nDescription}\n      stacked={true}\n    />\n  );\n};\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport { Breadcrumb as PfBreadcrumb } from 'patternfly-react';\nimport * as React from 'react';\n\n/**\n * A component to show breadcrumbs. All its children will be wrapped in a tag\n * that will automatically handle the active/inactive state by setting the\n * appropriate class to the wrapper.\n *\n * It's suggested to use only anchors or spans as children node.\n */\nexport const Breadcrumb: React.FunctionComponent = ({ children }) => (\n  <PfBreadcrumb\n    style={{\n      background: '#fff',\n      margin: 0,\n      paddingLeft: '15px',\n    }}\n  >\n    {React.Children.map(children, (c, idx) => (\n      <li\n        className={React.Children.count(children) - 1 === idx ? 'active' : ''}\n        key={idx}\n      >\n        {c}\n      </li>\n    ))}\n  </PfBreadcrumb>\n);\n","import { Nav } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface ITabBarProps {\n  [key: string]: any;\n}\n\nexport const TabBar: React.FunctionComponent<ITabBarProps> = ({\n  children,\n  ...props\n}) => (\n  <Nav bsClass=\"nav nav-tabs nav-tabs-pf\" {...props}>\n    {children}\n  </Nav>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\n\ninterface IWizardStepProps {\n  isActive: boolean;\n  isDisabled: boolean;\n  isAlt?: boolean;\n  onClick?: () => any;\n  step: number;\n  title: string;\n  subSteps?: string[];\n  activeSubstep?: number;\n}\n\nexport const WizardStep: React.FunctionComponent<IWizardStepProps> = ({\n  isActive,\n  isDisabled,\n  isAlt = false,\n  onClick,\n  step,\n  title,\n  subSteps = [],\n  activeSubstep = 0,\n}) => (\n  <li\n    className={`${isAlt ? 'wizard-pf-step-alt' : 'wizard-pf-step'} ${\n      isActive ? 'active' : ''\n    } ${isDisabled ? 'disabled' : ''}`}\n    onClick={onClick}\n  >\n    <a>\n      <span className={`wizard-pf-step${isAlt ? '-alt' : ''}-number`}>\n        {step}\n      </span>\n      <span className={`wizard-pf-step${isAlt ? '-alt' : ''}-title`}>\n        {title}\n      </span>\n      {!isAlt &&\n        subSteps.map((s, idx) => (\n          <span\n            className={`wizard-pf-step-title-substep ${\n              idx === activeSubstep ? 'active' : ''\n            }`}\n            key={idx}\n          >\n            {s}\n          </span>\n        ))}\n    </a>\n    {isAlt && isActive && (\n      <ul>\n        {subSteps.map((s, idx) => (\n          <li\n            className={`wizard-pf-step-alt-substep ${\n              idx === activeSubstep ? 'active' : 'disabled'\n            }`}\n            key={idx}\n          >\n            <a>{s}</a>\n          </li>\n        ))}\n      </ul>\n    )}\n  </li>\n);\n","import { Table } from 'patternfly-react';\nimport * as React from 'react';\n\n/**\n * This component wraps a generic table component and exposes a simple and\n * consistent methodology to customize basic presentation properties and provide\n * an interface of setting the row/column data within the table.\n */\n\nexport type IGenericTableFormatter = (value: any) => React.ReactNode;\n\nexport interface IGenericTableColumn {\n  cell: {\n    formatters: IGenericTableFormatter[];\n  };\n  header: {\n    formatters: IGenericTableFormatter[];\n    label: string;\n  };\n  property: string;\n}\n\nexport interface IGenericTableStyle {\n  striped?: boolean;\n  bordered?: boolean;\n  hover?: boolean;\n}\n\nexport interface IGenericTableData {\n  columns: IGenericTableColumn[];\n  rows: Array<{ [property: string]: any }>;\n  rowKey: string;\n}\n\nexport const DefaultHeaderFormat = (value: any) => (\n  <Table.Heading>{value}</Table.Heading>\n);\nexport const DefaultCellFormat = (value: any) => (\n  <Table.Cell>{value}</Table.Cell>\n);\n\nexport const GenericTable: React.FC<IGenericTableStyle & IGenericTableData> = ({\n  striped = true,\n  bordered = true,\n  hover = true,\n  columns,\n  rows,\n  rowKey,\n}) => (\n  <Table.PfProvider\n    striped={striped}\n    bordered={bordered}\n    hover={hover}\n    columns={columns}\n  >\n    <Table.Header />\n    <Table.Body rows={rows} rowKey={rowKey} />\n  </Table.PfProvider>\n);\n","import { Text } from '@patternfly/react-core';\nimport { EmptyState } from 'patternfly-react';\nimport { useState } from 'react';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../Layout';\n\nexport interface IUnrecoverableErrorProps {\n  i18nTitle: string;\n  i18nInfo: string;\n  i18nHelp: string;\n  i18nRefreshLabel: string;\n  i18nReportIssue: string;\n  i18nShowErrorInfoLabel?: string;\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\nexport const UnrecoverableError: React.FC<IUnrecoverableErrorProps> = ({\n  i18nTitle,\n  i18nInfo,\n  i18nHelp,\n  i18nRefreshLabel,\n  i18nReportIssue,\n  i18nShowErrorInfoLabel,\n  error,\n  errorInfo,\n}) => {\n  const [showErrorInfo, setShowErrorInfo] = useState(false);\n  const toggleErrorInfo = () => setShowErrorInfo(!showErrorInfo);\n  return (\n    <Container>\n      <EmptyState>\n        <EmptyState.Icon name={'error-circle-o'} />\n        <EmptyState.Title>{i18nTitle}</EmptyState.Title>\n        <EmptyState.Info>{i18nInfo}</EmptyState.Info>\n        <EmptyState.Help>{i18nHelp}</EmptyState.Help>\n        <EmptyState.Action>\n          <ButtonLink href={'.'} as={'primary'} size={'lg'}>\n            {i18nRefreshLabel}\n          </ButtonLink>\n        </EmptyState.Action>\n        <EmptyState.Action secondary={true}>\n          {error && (\n            <ButtonLink onClick={toggleErrorInfo}>\n              {i18nShowErrorInfoLabel}\n            </ButtonLink>\n          )}\n          <a\n            className={'btn btn-default'}\n            href={\n              'https://github.com/syndesisio/syndesis/issues/new?template=simple.md&labels=cat/bug&title=Error%20report'\n            }\n          >\n            {i18nReportIssue}\n          </a>\n        </EmptyState.Action>\n        {showErrorInfo && error && (\n          <EmptyState.Help style={{ textAlign: 'left' }}>\n            <Text>\n              {error.name}: {error.message}\n            </Text>\n            {errorInfo && <pre>{errorInfo.componentStack}</pre>}\n          </EmptyState.Help>\n        )}\n      </EmptyState>\n    </Container>\n  );\n};\n","import { WithEnvironments, WithIntegrationTags } from '@syndesis/api';\nimport {\n  CiCdList,\n  CiCdListSkeleton,\n  ITagIntegrationEntry,\n  TagIntegrationDialog,\n  TagIntegrationDialogBody,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { ApiError } from '../../../shared';\n\nexport interface ITagIntegrationDialogWrapperProps {\n  manageCiCdHref: H.LocationDescriptor;\n  targetIntegrationId: string;\n  onSave: () => void;\n  onHide: () => void;\n  tagIntegration: (\n    integrationId: string,\n    environments: string[]\n  ) => Promise<Response>;\n}\n\nexport class TagIntegrationDialogWrapper extends React.Component<\n  ITagIntegrationDialogWrapperProps\n> {\n  public constructor(props: ITagIntegrationDialogWrapperProps) {\n    super(props);\n    this.handleSave = this.handleSave.bind(this);\n  }\n  public handleSave(items: ITagIntegrationEntry[]) {\n    this.props.onSave();\n    const newEnvironments = items\n      .filter(item => item.selected)\n      .map(item => item.name);\n    this.props.tagIntegration(this.props.targetIntegrationId, newEnvironments);\n  }\n  public render() {\n    return (\n      <Translation ns={['integrations', 'shared']}>\n        {t => (\n          <TagIntegrationDialog\n            i18nTitle={t('integrations:MarkIntegrationForCiCd')}\n            i18nCancelButtonText={t('shared:Cancel')}\n            i18nSaveButtonText={t('shared:Save')}\n            onHide={this.props.onHide}\n            onSave={this.handleSave}\n          >\n            {({ handleChange }) => (\n              <WithIntegrationTags\n                integrationId={this.props.targetIntegrationId}\n              >\n                {({ data: tags, hasData: hasTags, error: tagError }) => (\n                  <WithEnvironments disableUpdates={true}>\n                    {({\n                      data: environments,\n                      hasData: hasEnvironments,\n                      error: environmentsError,\n                    }) => {\n                      return (\n                        <>\n                          <p>\n                            {t('integrations:TagThisIntegrationForRelease')}\n                          </p>\n                          <WithLoader\n                            error={tagError || environmentsError}\n                            loading={!hasTags && !hasEnvironments}\n                            loaderChildren={\n                              <CiCdList>\n                                <CiCdListSkeleton />\n                              </CiCdList>\n                            }\n                            errorChildren={<ApiError />}\n                          >\n                            {() => {\n                              const mappedItems = environments.map(item => ({\n                                name: item,\n                                selected: typeof tags[item] !== 'undefined',\n                              }));\n                              return (\n                                <TagIntegrationDialogBody\n                                  key={JSON.stringify(tags)}\n                                  initialItems={mappedItems}\n                                  onChange={handleChange}\n                                  manageCiCdHref={this.props.manageCiCdHref}\n                                  i18nEmptyStateTitle={t(\n                                    'integrations:NoEnvironmentsAvailable'\n                                  )}\n                                  i18nEmptyStateInfo={t(\n                                    'integrations:NoEnvironmentsAvailableInfo'\n                                  )}\n                                  i18nEmptyStateButtonText={t(\n                                    'integrations:GoToManageCiCd'\n                                  )}\n                                />\n                              );\n                            }}\n                          </WithLoader>\n                        </>\n                      );\n                    }}\n                  </WithEnvironments>\n                )}\n              </WithIntegrationTags>\n            )}\n          </TagIntegrationDialog>\n        )}\n      </Translation>\n    );\n  }\n}\n","import {\n  canActivate,\n  canDeactivate,\n  canEdit,\n  getFinishIcon,\n  getStartIcon,\n  WithIntegrationHelpers,\n} from '@syndesis/api';\nimport { IntegrationWithMonitoring } from '@syndesis/models';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n  IIntegrationAction,\n  IntegrationActions,\n  IntegrationsList,\n  IntegrationsListItem,\n  IntegrationsListItemUnreadable,\n  IntegrationsListSkeleton,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { AppContext } from '../../../app';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport resolvers from '../resolvers';\nimport { TagIntegrationDialogWrapper } from './TagIntegrationDialogWrapper';\n\nexport interface IIntegrationsProps {\n  error: boolean;\n  loading: boolean;\n  integrations: IntegrationWithMonitoring[];\n}\n\nexport interface IIntegrationsState {\n  showActionPromptDialog: boolean;\n  showCiCdPromptDialog: boolean;\n  targetIntegrationId?: string;\n  promptDialogButtonText?: string;\n  promptDialogIcon?: ConfirmationIconType;\n  promptDialogText?: string;\n  promptDialogTitle?: string;\n  handleAction?: () => void;\n}\n\ninterface IPromptActionOptions {\n  promptDialogButtonText: string;\n  promptDialogIcon: ConfirmationIconType;\n  promptDialogText: string;\n  promptDialogTitle: string;\n  handleAction: () => void;\n}\n\nexport class Integrations extends React.Component<\n  IIntegrationsProps,\n  IIntegrationsState\n> {\n  public constructor(props: IIntegrationsProps) {\n    super(props);\n    this.state = {\n      showActionPromptDialog: false,\n      showCiCdPromptDialog: false,\n    };\n    this.handleAction = this.handleAction.bind(this);\n    this.handleActionCancel = this.handleActionCancel.bind(this);\n    this.promptForAction = this.promptForAction.bind(this);\n    this.closeCiCdDialog = this.closeCiCdDialog.bind(this);\n  }\n  public closeCiCdDialog() {\n    this.setState({\n      showCiCdPromptDialog: false,\n    });\n  }\n  public handleActionCancel() {\n    this.setState({\n      showActionPromptDialog: false,\n    });\n  }\n  public handleAction() {\n    const action = this.state.handleAction;\n    this.setState({\n      showActionPromptDialog: false,\n    });\n    if (typeof action === 'function') {\n      action.apply(this);\n    } else {\n      throw Error('Undefined action set for confirmation dialog');\n    }\n  }\n  public promptForAction(options: IPromptActionOptions) {\n    this.setState({\n      handleAction: options.handleAction,\n      promptDialogButtonText: options.promptDialogButtonText,\n      promptDialogIcon: options.promptDialogIcon,\n      promptDialogText: options.promptDialogText,\n      promptDialogTitle: options.promptDialogTitle,\n      showActionPromptDialog: true,\n    });\n  }\n  public promptForCiCd(targetIntegrationId: string) {\n    this.setState({\n      showCiCdPromptDialog: true,\n      targetIntegrationId,\n    });\n  }\n  public render() {\n    return (\n      <Translation ns={['integrations', 'shared']}>\n        {t => (\n          <AppContext.Consumer>\n            {({ config, getPodLogUrl, pushNotification }) => (\n              <WithIntegrationHelpers>\n                {({\n                  deleteIntegration,\n                  deployIntegration,\n                  exportIntegration,\n                  undeployIntegration,\n                  tagIntegration,\n                }) => (\n                  <>\n                    {this.state.showCiCdPromptDialog && (\n                      <TagIntegrationDialogWrapper\n                        manageCiCdHref={resolvers.manageCicd.root()}\n                        tagIntegration={tagIntegration}\n                        targetIntegrationId={this.state.targetIntegrationId!}\n                        onSave={this.closeCiCdDialog}\n                        onHide={this.closeCiCdDialog}\n                      />\n                    )}\n                    {this.state.showActionPromptDialog && (\n                      <ConfirmationDialog\n                        buttonStyle={ConfirmationButtonStyle.NORMAL}\n                        i18nCancelButtonText={t('shared:Cancel')}\n                        i18nConfirmButtonText={\n                          this.state.promptDialogButtonText!\n                        }\n                        i18nConfirmationMessage={this.state.promptDialogText!}\n                        i18nTitle={this.state.promptDialogTitle!}\n                        icon={this.state.promptDialogIcon!}\n                        showDialog={this.state.showActionPromptDialog}\n                        onCancel={this.handleActionCancel}\n                        onConfirm={this.handleAction}\n                      />\n                    )}\n                    <IntegrationsList>\n                      <WithLoader\n                        error={this.props.error}\n                        loading={this.props.loading}\n                        loaderChildren={<IntegrationsListSkeleton />}\n                        errorChildren={<ApiError />}\n                      >\n                        {() =>\n                          this.props.integrations.map(\n                            (mi: IntegrationWithMonitoring) => {\n                              try {\n                                const editAction: IIntegrationAction = {\n                                  href: resolvers.integration.edit.index({\n                                    flowId: mi.integration.flows![0].id!,\n                                    integration: mi.integration,\n                                  }),\n                                  label: 'Edit',\n                                };\n                                const startAction: IIntegrationAction = {\n                                  label: 'Start',\n                                  onClick: () =>\n                                    this.promptForAction({\n                                      handleAction: async () => {\n                                        pushNotification(\n                                          i18n.t(\n                                            'integrations:PublishingIntegrationMessage'\n                                          ),\n                                          'info'\n                                        );\n                                        try {\n                                          await deployIntegration(\n                                            mi.integration.id!,\n                                            mi.integration.version!,\n                                            false\n                                          );\n                                        } catch (err) {\n                                          pushNotification(\n                                            i18n.t(\n                                              'integrations.PublishingIntegrationFailedMessage',\n                                              { error: err }\n                                            ),\n                                            'warning'\n                                          );\n                                        }\n                                      },\n                                      promptDialogButtonStyle:\n                                        ConfirmationButtonStyle.NORMAL,\n                                      promptDialogButtonText: t('shared:Start'),\n                                      promptDialogIcon:\n                                        ConfirmationIconType.NONE,\n                                      promptDialogText: t(\n                                        'integrations:publishIntegrationModal',\n                                        { name: mi.integration.name }\n                                      ),\n                                      promptDialogTitle: t(\n                                        'integrations:publishIntegrationModalTitle'\n                                      ),\n                                    } as IPromptActionOptions),\n                                };\n                                const stopAction: IIntegrationAction = {\n                                  label: 'Stop',\n                                  onClick: () =>\n                                    this.promptForAction({\n                                      handleAction: async () => {\n                                        pushNotification(\n                                          i18n.t(\n                                            'integrations:UnpublishingIntegrationMessage'\n                                          ),\n                                          'info'\n                                        );\n                                        try {\n                                          undeployIntegration(\n                                            mi.integration.id!,\n                                            mi.integration.version!\n                                          );\n                                        } catch (err) {\n                                          pushNotification(\n                                            i18n.t(\n                                              'integrations.UnpublishingIntegrationFailedMessage',\n                                              { error: err }\n                                            ),\n                                            'warning'\n                                          );\n                                        }\n                                      },\n                                      promptDialogButtonStyle:\n                                        ConfirmationButtonStyle.NORMAL,\n                                      promptDialogButtonText: t('shared:Stop'),\n                                      promptDialogIcon:\n                                        ConfirmationIconType.NONE,\n                                      promptDialogText: t(\n                                        'integrations:unpublishIntegrationModal',\n                                        { name: mi.integration.name }\n                                      ),\n                                      promptDialogTitle: t(\n                                        'integrations:unpublishIntegrationModalTitle'\n                                      ),\n                                    } as IPromptActionOptions),\n                                };\n                                const deleteAction: IIntegrationAction = {\n                                  label: 'Delete',\n                                  onClick: () =>\n                                    this.promptForAction({\n                                      handleAction: async () => {\n                                        pushNotification(\n                                          i18n.t(\n                                            'integrations:DeletingIntegrationMessage'\n                                          ),\n                                          'info'\n                                        );\n                                        try {\n                                          await deleteIntegration(\n                                            mi.integration.id!\n                                          );\n                                        } catch (err) {\n                                          pushNotification(\n                                            i18n.t(\n                                              'integrations.DeletingIntegrationFailedMessage',\n                                              { error: err }\n                                            ),\n                                            'warning'\n                                          );\n                                        }\n                                      },\n                                      promptDialogButtonStyle:\n                                        ConfirmationButtonStyle.DANGER,\n                                      promptDialogButtonText: t(\n                                        'shared:Delete'\n                                      ),\n                                      promptDialogIcon:\n                                        ConfirmationIconType.DANGER,\n                                      promptDialogText: t(\n                                        'integrations:deleteIntegrationModal',\n                                        { name: mi.integration.name }\n                                      ),\n                                      promptDialogTitle: t(\n                                        'integrations:deleteIntegrationModalTitle'\n                                      ),\n                                    } as IPromptActionOptions),\n                                };\n                                const exportAction: IIntegrationAction = {\n                                  label: 'Export',\n                                  onClick: () =>\n                                    exportIntegration(\n                                      mi.integration.id!,\n                                      `${mi.integration.name}-export.zip`\n                                    ),\n                                };\n                                const ciCdAction: IIntegrationAction = {\n                                  label: 'Manage CI/CD',\n                                  onClick: () => {\n                                    this.promptForCiCd(mi.integration.id!);\n                                  },\n                                };\n                                const actions: IIntegrationAction[] = [];\n                                if (canEdit(mi.integration)) {\n                                  actions.push(editAction);\n                                }\n                                if (canActivate(mi.integration)) {\n                                  actions.push(startAction);\n                                }\n                                if (canDeactivate(mi.integration)) {\n                                  actions.push(stopAction);\n                                }\n                                actions.push(deleteAction);\n                                actions.push(exportAction);\n                                actions.push(ciCdAction);\n                                return (\n                                  <IntegrationsListItem\n                                    key={mi.integration.id}\n                                    integrationName={mi.integration.name}\n                                    currentState={mi.integration!.currentState!}\n                                    targetState={mi.integration!.targetState!}\n                                    isConfigurationRequired={\n                                      !!(\n                                        mi.integration!.board!.warnings ||\n                                        mi.integration!.board!.errors ||\n                                        mi.integration!.board!.notices\n                                      )\n                                    }\n                                    monitoringValue={\n                                      mi.monitoring &&\n                                      t(\n                                        'integrations:' +\n                                          mi.monitoring.detailedState.value\n                                      )\n                                    }\n                                    monitoringCurrentStep={\n                                      mi.monitoring &&\n                                      mi.monitoring.detailedState.currentStep\n                                    }\n                                    monitoringTotalSteps={\n                                      mi.monitoring &&\n                                      mi.monitoring.detailedState.totalSteps\n                                    }\n                                    monitoringLogUrl={getPodLogUrl(\n                                      config,\n                                      mi.monitoring\n                                    )}\n                                    startConnectionIcon={getStartIcon(\n                                      config.apiEndpoint,\n                                      mi.integration\n                                    )}\n                                    finishConnectionIcon={getFinishIcon(\n                                      config.apiEndpoint,\n                                      mi.integration\n                                    )}\n                                    actions={\n                                      <IntegrationActions\n                                        integrationId={mi.integration!.id!}\n                                        actions={actions}\n                                        detailsHref={resolvers.integration.details(\n                                          { integrationId: mi.integration.id! }\n                                        )}\n                                      />\n                                    }\n                                    i18nConfigurationRequired={t(\n                                      'integrations:ConfigurationRequired'\n                                    )}\n                                    i18nError={t('shared:Error')}\n                                    i18nPublished={t('shared:Published')}\n                                    i18nUnpublished={t('shared:Unpublished')}\n                                    i18nProgressPending={t('shared:Pending')}\n                                    i18nProgressStarting={t(\n                                      'integrations:progressStarting'\n                                    )}\n                                    i18nProgressStopping={t(\n                                      'integrations:progressStopping'\n                                    )}\n                                    i18nLogUrlText={t('shared:viewLogs')}\n                                  />\n                                );\n                              } catch (e) {\n                                return (\n                                  <IntegrationsListItemUnreadable\n                                    key={mi.integration.id}\n                                    integrationName={\n                                      (mi &&\n                                        mi.integration &&\n                                        mi.integration.name) ||\n                                      'An integration'\n                                    }\n                                    i18nDescription={\n                                      \"Sorry, we can't display more information about this integration right now.\"\n                                    }\n                                    rawObject={JSON.stringify(\n                                      mi.integration,\n                                      null,\n                                      2\n                                    )}\n                                  />\n                                );\n                              }\n                            }\n                          )\n                        }\n                      </WithLoader>\n                    </IntegrationsList>\n                  </>\n                )}\n              </WithIntegrationHelpers>\n            )}\n          </AppContext.Consumer>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { WizardStep, WizardSteps } from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IIntegrationCreatorBreadcrumbsProps {\n  /**\n   * The one-based active step number.\n   */\n  step: number;\n  /**\n   * Optional. The one-based active sub-step number.\n   */\n  subStep?: number;\n}\n\nexport interface IIntegrationCreatorBreadcrumbsState {\n  /**\n   * Indicates if the user clicked on a step. Used to show\n   * sub-steps when browsing from a mobile device.\n   */\n  active: boolean;\n}\n\n/**\n * A component to display the PatternFly Wizard Steps specific to the integration\n * creator flow.\n * @see [step]{@link IIntegrationCreatorBreadcrumbsProps#step}\n * @see [subStep]{@link IIntegrationCreatorBreadcrumbsProps#subStep}\n */\nexport class IntegrationCreatorBreadcrumbs extends React.Component<\n  IIntegrationCreatorBreadcrumbsProps,\n  IIntegrationCreatorBreadcrumbsState\n> {\n  public state = {\n    active: false,\n  };\n\n  constructor(props: IIntegrationCreatorBreadcrumbsProps) {\n    super(props);\n    this.toggleActive = this.toggleActive.bind(this);\n  }\n\n  public toggleActive() {\n    this.setState({\n      active: !this.state.active,\n    });\n  }\n\n  public render() {\n    return (\n      <WizardSteps\n        active={this.state.active}\n        mainSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              onClick={this.toggleActive}\n              step={1}\n              title={'Start connection'}\n              subSteps={[\n                'Choose connection',\n                'Choose action',\n                'Configure action',\n              ]}\n              activeSubstep={this.props.subStep}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              onClick={this.toggleActive}\n              step={2}\n              title={'Finish connection'}\n              subSteps={[\n                'Choose connection',\n                'Choose action',\n                'Configure action',\n              ]}\n              activeSubstep={this.props.subStep}\n            />\n            <WizardStep\n              isActive={this.props.step === 3}\n              isDisabled={this.props.step < 3}\n              onClick={this.toggleActive}\n              step={3}\n              title={'Add to integration'}\n            />\n            <WizardStep\n              isActive={this.props.step === 4}\n              isDisabled={this.props.step < 4}\n              onClick={this.toggleActive}\n              step={4}\n              title={'Create an integration'}\n            />\n          </>\n        }\n        altSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={1}\n              title={'Start connection'}\n              subSteps={[\n                '1A. Choose connection',\n                '1B. Choose action',\n                '1C. Configure action',\n              ]}\n              activeSubstep={this.props.subStep}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={2}\n              title={'Finish connection'}\n              subSteps={[\n                '2A. Choose connection',\n                '2B. Choose action',\n                '2C. Configure action',\n              ]}\n              activeSubstep={this.props.subStep}\n            />\n            <WizardStep\n              isActive={this.props.step === 3}\n              isDisabled={this.props.step < 3}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={3}\n              title={'Add to integration'}\n            />\n            <WizardStep\n              isActive={this.props.step === 4}\n              isDisabled={this.props.step < 4}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={4}\n              title={'Create an integration'}\n            />\n          </>\n        }\n      />\n    );\n  }\n}\n","import { IntegrationDeploymentOverview } from '@syndesis/models';\nimport {\n  IntegrationActions,\n  IntegrationDetailHistoryListViewItem,\n} from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\n\nexport interface IIntegrationDetailDeploymentsProps {\n  actions: any;\n  integrationId: string;\n  deployments: IntegrationDeploymentOverview[];\n  updatedAt: number;\n  version: number;\n}\n\nexport class IntegrationDetailHistory extends React.Component<\n  IIntegrationDetailDeploymentsProps\n> {\n  public render() {\n    const deployments = this.props.deployments ? this.props.deployments : [];\n    return (\n      <Translation ns={['integrations', 'shared']}>\n        {t =>\n          deployments.map((deployment, idx) => {\n            return (\n              <IntegrationDetailHistoryListViewItem\n                key={idx}\n                actions={\n                  <IntegrationActions\n                    integrationId={this.props.integrationId}\n                    actions={this.props.actions}\n                  />\n                }\n                i18nTextLastPublished={t('integrations:detail:lastPublished')}\n                i18nTextVersion={t('shared:Version')}\n                updatedAt={deployment.updatedAt}\n                version={deployment.version}\n              />\n            );\n          })\n        }\n      </Translation>\n    );\n  }\n}\n","import { Step } from '@syndesis/models';\nimport {\n  IntegrationStepsHorizontalItem,\n  IntegrationStepsHorizontalView,\n} from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IIntegrationDetailStepsProps {\n  steps: Step[];\n}\n\nexport class IntegrationDetailSteps extends React.Component<\n  IIntegrationDetailStepsProps\n> {\n  public render() {\n    const steps = this.props.steps ? this.props.steps : [];\n\n    return (\n      <IntegrationStepsHorizontalView>\n        {steps.map((s, idx) => {\n          const isFirst = idx === 0;\n          const stepName = s.connection!\n            ? s.connection!.connector!.name\n            : s.name;\n\n          return (\n            <React.Fragment key={idx}>\n              <IntegrationStepsHorizontalItem\n                name={stepName}\n                isFirst={isFirst}\n              />\n            </React.Fragment>\n          );\n        })}\n      </IntegrationStepsHorizontalView>\n    );\n  }\n}\n","import { WizardStep, WizardSteps } from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IIntegrationEditorBreadcrumbsProps {\n  /**\n   * The one-based active step number.\n   */\n  step: number;\n}\n\nexport interface IIntegrationEditorBreadcrumbsState {\n  /**\n   * Indicates if the user clicked on a step. Used to show\n   * sub-steps when browsing from a mobile device.\n   */\n  active: boolean;\n}\n\n/**\n * A component to display the PatternFly Wizard Steps specific to the integration\n * editor flow.\n * @see [step]{@link IIntegrationEditorBreadcrumbsProps#step}\n */\nexport class IntegrationEditorBreadcrumbs extends React.Component<\n  IIntegrationEditorBreadcrumbsProps,\n  IIntegrationEditorBreadcrumbsState\n> {\n  public state = {\n    active: false,\n  };\n\n  constructor(props: IIntegrationEditorBreadcrumbsProps) {\n    super(props);\n    this.toggleActive = this.toggleActive.bind(this);\n  }\n\n  public toggleActive() {\n    this.setState({\n      active: !this.state.active,\n    });\n  }\n\n  public render() {\n    return (\n      <WizardSteps\n        active={this.state.active}\n        mainSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              onClick={this.toggleActive}\n              step={1}\n              title={'Add to integration'}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              onClick={this.toggleActive}\n              step={2}\n              title={'Save the integration'}\n            />\n          </>\n        }\n        altSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={1}\n              title={'Add to integration'}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={4}\n              title={'Save the integration'}\n            />\n          </>\n        }\n      />\n    );\n  }\n}\n","import { getConnectionIcon } from '@syndesis/api';\nimport { Step } from '@syndesis/models';\nimport {\n  IntegrationFlowStepGeneric,\n  IntegrationFlowStepWithOverview,\n  IntegrationVerticalFlow,\n} from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IIntegrationEditorSidebarProps {\n  /**\n   * the list of steps to render.\n   */\n  steps: Step[];\n  /**\n   * the zero-based index of a configured step that should be highlighted as\n   * active.\n   * This should not be set in conjunction with [addAtIndex]{@link IIntegrationEditorSidebarProps#addAtIndex}\n   */\n  activeIndex?: number;\n  /**\n   * the zero-based index where a new step is being added.\n   * This should not be set in conjunction with [activeIndex]{@link IIntegrationEditorSidebarProps#activeIndex}\n   */\n  addAtIndex?: number;\n  /**\n   * the icon to show in the circle of the step that is being added.\n   */\n  addIcon?: any;\n  /**\n   * The title of the information table shown for the step that is being added,\n   * in the extended view.\n   */\n  addI18nTitle?: string;\n  /**\n   * The text to show on the tooltip that opens when hovering with the mouse on\n   * the icon.\n   */\n  addI18nTooltip?: string;\n  /**\n   * The description of the information table shown for the step that is being\n   * added, in the extended view.\n   */\n  addI18nDescription?: string;\n}\n\n/**\n * This component shows the steps of an integration in a vertical fashion. It's\n * meant to be used as the sidebar of the `IntegrationEditorLayout` component.\n * Steps are rendered as circles, showing the step's connection icon.\n *\n * It offers two visualization, a compact one where just the icons are shown,\n * and an expanded one where additional information about the step are shown in\n * a table next to the step's circle.\n *\n * It can also show a step that is being added to the integration by providing\n * its position and some information about the configuration step.\n *\n * @see [steps]{@link IIntegrationEditorSidebarProps#steps}\n * @see [activeIndex]{@link IIntegrationEditorSidebarProps#activeIndex}\n * @see [addAtIndex]{@link IIntegrationEditorSidebarProps#addAtIndex}\n * @see [addIcon]{@link IIntegrationEditorSidebarProps#addIcon}\n * @see [addI18nTitle]{@link IIntegrationEditorSidebarProps#addI18nTitle}\n * @see [addI18nTooltip]{@link IIntegrationEditorSidebarProps#addI18nTooltip}\n * @see [addI18nDescription]{@link IIntegrationEditorSidebarProps#addI18nDescription}\n */\nexport class IntegrationEditorSidebar extends React.Component<\n  IIntegrationEditorSidebarProps\n> {\n  public render() {\n    return (\n      <IntegrationVerticalFlow>\n        {({ expanded }) =>\n          this.props.steps.map((s, idx) => {\n            const isActive = idx === this.props.activeIndex;\n            const hasAddStep = this.props.addAtIndex === idx + 1;\n            const isAfterActiveAddStep = this.props.addAtIndex! - 1 < idx;\n            const position = isAfterActiveAddStep ? idx + 2 : idx + 1;\n\n            const activeAddStep = (\n              <IntegrationFlowStepGeneric\n                icon={this.props.addIcon || <i className={'fa fa-plus'} />}\n                i18nTitle={this.props.addI18nTitle!}\n                i18nTooltip={this.props.addI18nTooltip!}\n                active={true}\n                showDetails={expanded}\n                description={this.props.addI18nDescription!}\n              />\n            );\n            return (\n              <React.Fragment key={idx}>\n                {s.stepKind === 'endpoint' && (\n                  <IntegrationFlowStepWithOverview\n                    icon={\n                      <img\n                        src={getConnectionIcon(\n                          process.env.PUBLIC_URL,\n                          s.connection!\n                        )}\n                        width={24}\n                        height={24}\n                      />\n                    }\n                    i18nTitle={`${position}. ${s.action!.name}`}\n                    i18nTooltip={`${position}. ${s.action!.name}`}\n                    active={isActive}\n                    showDetails={expanded}\n                    name={s.connection!.connector!.name}\n                    action={s.action!.name}\n                    dataType={'TODO'}\n                  />\n                )}\n                {hasAddStep ? activeAddStep : null}\n              </React.Fragment>\n            );\n          })\n        }\n      </IntegrationVerticalFlow>\n    );\n  }\n}\n","export * from './Integrations';\nexport * from './IntegrationCreatorBreadcrumbs';\nexport * from './IntegrationDetailHistory';\nexport * from './IntegrationDetailSteps';\nexport * from './IntegrationEditorBreadcrumbs';\nexport * from './IntegrationEditorSidebar';\nexport * from './IntegrationEditorStepAdder';\n","import { include } from 'named-urls';\n\nexport default include('/customizations', {\n  apiConnectors: include('api-connector', {\n    apiConnector: ':apiConnectorId',\n    create: include('create/swagger-connector', {\n      review: 'review',\n      save: 'save',\n      security: 'security',\n      upload: 'upload',\n    }),\n    list: '',\n  }),\n  extensions: include('extensions', {\n    extension: include(':extensionId', {\n      details: '',\n      update: 'update',\n    }),\n    import: 'import',\n    list: '',\n  }),\n  root: '',\n});\n","module.exports = __webpack_public_path__ + \"static/media/syndesis_logo_full_darkbkg.9c467d96.svg\";","import { include } from 'named-urls';\n\nexport default include('/data', {\n  root: '',\n  virtualizations: include('virtualizations', {\n    create: 'create',\n    import: 'import',\n    list: '',\n    virtualization: include(':virtualizationId', {\n      metrics: 'metrics',\n      relationship: 'relationship',\n      root: '',\n      sqlClient: 'sqlClient',\n      views: include('views', {\n        importSource: include('importSource', {\n          root: '',\n          selectConnection: 'selectConnection',\n          selectViews: 'selectViews',\n        }),\n        root: '',\n      }),\n    }),\n  }),\n});\n","/* tslint:disable:object-literal-sort-keys no-empty-interface */\nimport { Connection, Connector } from '@syndesis/models';\nimport { makeResolver, makeResolverNoParams } from '@syndesis/utils';\nimport routes from './routes';\n\nexport default {\n  connections: makeResolverNoParams(routes.connections),\n  connection: {\n    details: makeResolver<{ connection: Connection }>(\n      routes.connection.details,\n      ({ connection }) => ({\n        params: {\n          connectionId: connection.id,\n        },\n        state: {\n          connection,\n        },\n      })\n    ),\n    edit: makeResolver<{ connection: Connection }>(\n      routes.connection.edit,\n      ({ connection }) => ({\n        params: {\n          connectionId: connection.id,\n        },\n        state: {\n          connection,\n        },\n      })\n    ),\n  },\n  create: {\n    selectConnector: makeResolverNoParams(routes.create.selectConnector),\n    configureConnector: makeResolver<{\n      connector: Connector;\n    }>(routes.create.configureConnector, ({ connector }) => ({\n      params: {\n        connectorId: connector.id,\n      },\n      state: {\n        connector,\n      },\n    })),\n    review: makeResolver<{\n      connector: Connector;\n      configuredProperties: { [key: string]: string };\n    }>(routes.create.review, ({ connector, configuredProperties }) => ({\n      state: {\n        connector,\n        configuredProperties,\n      },\n    })),\n  },\n};\n","import { IntegrationMonitoring } from '@syndesis/models';\nimport { INotificationType } from '@syndesis/ui';\nimport * as React from 'react';\nimport { IConfigFile } from './WithConfig';\n\nexport interface IAppContext {\n  config: IConfigFile;\n  getPodLogUrl: (\n    config: IConfigFile,\n    monitoring: IntegrationMonitoring | undefined\n  ) => string | undefined;\n  logout(): void;\n  hideNavigation(): void;\n  showNavigation(): void;\n  pushNotification(msg: string, type: INotificationType): void;\n}\n\nexport const AppContextDefaultValue = {} as IAppContext;\n\nexport const AppContext = React.createContext<IAppContext>(\n  AppContextDefaultValue\n);\n","import * as React from 'react';\n\nexport interface IConfigFile {\n  apiBase: string;\n  apiEndpoint: string;\n  title: string;\n  consoleUrl: string;\n  project: string;\n  datamapper: {\n    baseMappingServiceUrl: string;\n    baseJavaInspectionServiceUrl: string;\n    baseXMLInspectionServiceUrl: string;\n    baseJSONInspectionServiceUrl: string;\n    disableMappingPreviewMode: boolean;\n  };\n  datavirt: {\n    dvUrl: string;\n  };\n  features: {\n    logging: boolean;\n  };\n  branding: {\n    logoWhiteBg: string;\n    logoDarkBg: string;\n    appName: string;\n    favicon32: string;\n    favicon16: string;\n    touchIcon: string;\n    productBuild: boolean;\n  };\n}\n\nexport interface IWithConfigProps {\n  children(props: IWithConfigState): any;\n}\n\nexport interface IWithConfigState {\n  loading: boolean;\n  error: boolean;\n  config?: IConfigFile;\n}\n\nexport class WithConfig extends React.Component<\n  IWithConfigProps,\n  IWithConfigState\n> {\n  public state = {\n    error: false,\n    loading: true,\n  };\n\n  public async componentDidMount() {\n    try {\n      const configResponse = await fetch(\n        `${process.env.PUBLIC_URL}/config.json`\n      );\n      const config = await configResponse.json();\n      this.setState({\n        config,\n        loading: false,\n      });\n    } catch (e) {\n      this.setState({\n        error: true,\n        loading: false,\n      });\n    }\n  }\n\n  public render() {\n    return this.props.children(this.state);\n  }\n}\n","import {\n  ApiContext,\n  ServerEventsContext,\n  WithServerEvents,\n} from '@syndesis/api';\nimport { IntegrationMonitoring } from '@syndesis/models';\nimport {\n  AppLayout,\n  AppTopMenu,\n  INotification,\n  INotificationType,\n  Loader,\n  Notifications,\n  PfDropdownItem,\n  PfVerticalNavItem,\n  UnrecoverableError,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouter } from '@syndesis/utils';\nimport i18next from 'i18next';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link, Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport { PageNotFound, WithErrorBoundary } from '../shared';\nimport './App.css';\nimport { AppContext } from './AppContext';\nimport { IConfigFile, WithConfig } from './WithConfig';\n\nimport logo from './syndesis_logo_full_darkbkg.svg';\n\nexport interface IAppRoute {\n  component:\n    | React.ComponentType<RouteComponentProps<any>>\n    | React.ComponentType<any>;\n  exact?: boolean;\n  icon: string;\n  label: string;\n  to: string;\n}\n\nexport interface IAppBaseProps {\n  routes: IAppRoute[];\n}\n\nexport interface IAppBaseState {\n  showNavigation: boolean;\n  notifications: INotification[];\n}\n\nexport class App extends React.Component<IAppBaseProps, IAppBaseState> {\n  public state = {\n    notifications: [],\n    showNavigation: true,\n  };\n\n  constructor(props: IAppBaseProps) {\n    super(props);\n    this.logout = this.logout.bind(this);\n    this.getPodLogUrl = this.getPodLogUrl.bind(this);\n    this.hideNavigation = this.hideNavigation.bind(this);\n    this.showNavigation = this.showNavigation.bind(this);\n    this.pushNotification = this.pushNotification.bind(this);\n    this.removeNotificationAction = this.removeNotificationAction.bind(this);\n  }\n\n  public removeNotificationAction(notifToRemove: INotification) {\n    const notifications = this.state.notifications.filter(\n      (n: INotification) => n.key !== notifToRemove.key\n    );\n\n    this.setState({\n      notifications,\n    });\n  }\n\n  public pushNotification(msg: string, type: INotificationType) {\n    this.setState({\n      notifications: [\n        ...this.state.notifications,\n        {\n          key: Date.now().toString(),\n          message: msg,\n          type,\n        },\n      ],\n    });\n  }\n\n  public logout() {\n    // do nothing\n  }\n\n  public getPodLogUrl(\n    config: IConfigFile,\n    monitoring: IntegrationMonitoring | undefined\n  ): string | undefined {\n    if (\n      !config ||\n      !monitoring ||\n      !monitoring.linkType ||\n      !monitoring.namespace ||\n      !monitoring.podName\n    ) {\n      return undefined;\n    }\n    const baseUrl = `${config.consoleUrl}/project/${\n      monitoring.namespace\n    }/browse/pods/${monitoring.podName}?tab=`;\n    switch (monitoring.linkType) {\n      case 'LOGS':\n        return baseUrl + 'logs';\n      case 'EVENTS':\n        return baseUrl + 'events';\n      default:\n        return undefined;\n    }\n  }\n\n  public hideNavigation(): void {\n    this.setState({\n      showNavigation: false,\n    });\n  }\n\n  public showNavigation(): void {\n    this.setState({\n      showNavigation: true,\n    });\n  }\n\n  public renderAppNav(t: i18next.TFunction) {\n    return (\n      <AppTopMenu username={'developer'}>\n        <PfDropdownItem>\n          <Link\n            to={'/logout'}\n            className=\"pf-c-dropdown__menu-item\"\n            children={t('Logout')}\n          />\n        </PfDropdownItem>\n      </AppTopMenu>\n    );\n  }\n\n  public renderVerticalNav() {\n    return this.props.routes.map(({ exact, icon, label, to }, index) => (\n      <PfVerticalNavItem\n        exact={exact}\n        icon={icon}\n        label={label}\n        to={to}\n        key={index}\n        data-testid={`navbar-link-${to}`}\n      />\n    ));\n  }\n\n  public render() {\n    return (\n      <Translation ns={['app', 'shared']}>\n        {t => (\n          <WithConfig>\n            {({ config, loading, error }) => (\n              <WithLoader\n                loading={loading}\n                error={error}\n                loaderChildren={<Loader />}\n                errorChildren={\n                  <UnrecoverableError\n                    i18nTitle={t('shared:error.title')}\n                    i18nInfo={t('shared:error.info')}\n                    i18nHelp={t('shared:error.help')}\n                    i18nRefreshLabel={t('shared:error.refreshButton')}\n                    i18nReportIssue={t('shared:error.reportIssueButton')}\n                    i18nShowErrorInfoLabel={t(\n                      'shared:error.showErrorInfoButton'\n                    )}\n                  />\n                }\n                minWait={1000}\n              >\n                {() => (\n                  <AppContext.Provider\n                    value={{\n                      config: config!,\n                      getPodLogUrl: this.getPodLogUrl,\n                      hideNavigation: this.hideNavigation,\n                      logout: this.logout,\n                      pushNotification: this.pushNotification,\n                      showNavigation: this.showNavigation,\n                    }}\n                  >\n                    <ApiContext.Provider\n                      value={{\n                        apiUri: `${config!.apiBase}${config!.apiEndpoint}`,\n                        dvApiUri: `${config!.apiBase}${config!.datavirt.dvUrl}`,\n                        headers: { 'SYNDESIS-XSRF-TOKEN': 'awesome' },\n                      }}\n                    >\n                      <ApiContext.Consumer>\n                        {({ apiUri, headers }) => (\n                          <WithServerEvents apiUri={apiUri} headers={headers}>\n                            {functions => (\n                              <ServerEventsContext.Provider value={functions}>\n                                <AppLayout\n                                  appTitle={'Syndesis'}\n                                  appNav={this.renderAppNav(t)}\n                                  verticalNav={this.renderVerticalNav()}\n                                  pictograph={\n                                    <img\n                                      src={logo}\n                                      alt=\"Syndesis\"\n                                      style={{ minWidth: '164px' }}\n                                    />\n                                  }\n                                  logoHref={'/'}\n                                  showNavigation={this.state.showNavigation}\n                                  onNavigationCollapse={this.hideNavigation}\n                                  onNavigationExpand={this.showNavigation}\n                                >\n                                  <Notifications\n                                    notifications={this.state.notifications}\n                                    notificationTimerDelay={8000}\n                                    removeNotificationAction={\n                                      this.removeNotificationAction\n                                    }\n                                  />\n                                  <WithRouter>\n                                    {({ match }) => (\n                                      <WithErrorBoundary key={match.url}>\n                                        <Switch>\n                                          {this.props.routes.map(\n                                            (\n                                              { to, exact, component },\n                                              index\n                                            ) => (\n                                              <Route\n                                                path={to}\n                                                exact={exact}\n                                                component={component}\n                                                key={index}\n                                              />\n                                            )\n                                          )}\n                                          <Route component={PageNotFound} />\n                                        </Switch>\n                                      </WithErrorBoundary>\n                                    )}\n                                  </WithRouter>\n                                </AppLayout>\n                              </ServerEventsContext.Provider>\n                            )}\n                          </WithServerEvents>\n                        )}\n                      </ApiContext.Consumer>\n                    </ApiContext.Provider>\n                  </AppContext.Provider>\n                )}\n              </WithLoader>\n            )}\n          </WithConfig>\n        )}\n      </Translation>\n    );\n  }\n}\n","export * from './App';\nexport * from './AppContext';\n","/* tslint:disable:object-literal-sort-keys */\nimport { include } from 'named-urls';\n\nexport default include('/connections', {\n  connections: '',\n  connection: include(':connectionId', {\n    edit: 'edit',\n    details: '',\n  }),\n  create: include('create', {\n    selectConnector: 'connection-basics',\n    configureConnector: 'configure-fields/:connectorId',\n    review: 'review',\n    root: '',\n  }),\n});\n","import { IFormControl } from '../models';\n\nexport function getValidationState({ form, field }: IFormControl) {\n  return form.touched[field.name] && form.errors[field.name]\n    ? 'error'\n    : form.touched[field.name]\n    ? 'success'\n    : null;\n}\n","import {\n  ControlLabel,\n  FieldLevelHelp,\n  FormControl,\n  FormGroup,\n  HelpBlock,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\nexport const FormInputComponent: React.FunctionComponent<\n  IFormControl\n> = props => (\n  <FormGroup\n    controlId={props.field.name}\n    validationState={getValidationState(props)}\n  >\n    <ControlLabel>{props.property.displayName}</ControlLabel>\n    {props.property.labelHint && (\n      <ControlLabel>\n        <FieldLevelHelp content={props.property.labelHint} />\n      </ControlLabel>\n    )}\n    <FormControl\n      {...props.property.fieldAttributes}\n      {...props.field}\n      data-testid={props.field.name}\n      disabled={props.form.isSubmitting || props.property.disabled}\n      placeholder={props.property.placeholder}\n      type={props.type || 'text'}\n      onChange={props.field.onChange}\n      title={props.property.controlHint}\n    />\n    <HelpBlock>\n      {props.property.description}\n      {props.form.errors[props.field.name]}\n    </HelpBlock>\n  </FormGroup>\n);\n","import {\n  ControlLabel,\n  FieldLevelHelp,\n  FormControl,\n  FormGroup,\n  HelpBlock,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\nfunction getSelectedValues(select: HTMLSelectElement) {\n  return Array.from(select.selectedOptions).map(option => option.value);\n}\n\nexport const FormSelectComponent: React.FunctionComponent<\n  IFormControl\n> = props => {\n  const isMultiple =\n    props.property.fieldAttributes && props.property.fieldAttributes.multiple;\n  const { onChange, onBlur, ...field } = props.field;\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (isMultiple) {\n      const newValue = getSelectedValues(event.currentTarget);\n      props.form.setFieldValue(props.field.name, newValue);\n    } else {\n      onChange(event);\n    }\n  };\n  return (\n    <FormGroup\n      controlId={field.name}\n      validationState={getValidationState(props)}\n    >\n      <ControlLabel>{props.property.displayName}</ControlLabel>\n      {props.property.labelHint && (\n        <ControlLabel>\n          <FieldLevelHelp content={props.property.labelHint} />\n        </ControlLabel>\n      )}\n      <FormControl\n        {...props.property.fieldAttributes}\n        {...props.field}\n        onChange={handleChange}\n        onBlur={handleChange}\n        data-testid={props.field.name}\n        disabled={props.form.isSubmitting || props.property.disabled}\n        componentClass=\"select\"\n        title={props.property.controlHint}\n      >\n        {props.property.enum &&\n          props.property.enum.map((opt: any) => (\n            <option key={opt.value} value={opt.value}>\n              {opt.label}\n            </option>\n          ))}\n      </FormControl>\n      <HelpBlock>\n        {props.property.description}\n        {props.form.errors[props.field.name]}\n      </HelpBlock>\n    </FormGroup>\n  );\n};\n","import {\n  ControlLabel,\n  FieldLevelHelp,\n  FormControl,\n  FormGroup,\n  HelpBlock,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\nexport const FormTextAreaComponent: React.FunctionComponent<\n  IFormControl\n> = props => (\n  <FormGroup\n    controlId={props.field.name}\n    validationState={getValidationState(props)}\n  >\n    <ControlLabel>{props.property.displayName}</ControlLabel>\n    {props.property.labelHint && (\n      <ControlLabel>\n        <FieldLevelHelp content={props.property.labelHint} />\n      </ControlLabel>\n    )}\n    <FormControl\n      {...props.property.fieldAttributes}\n      {...props.field}\n      data-testid={props.field.name}\n      disabled={props.form.isSubmitting || props.property.disabled}\n      componentClass=\"textarea\"\n      title={props.property.controlHint}\n    />\n    <HelpBlock>\n      {props.property.description}\n      {props.form.errors[props.field.name]}\n    </HelpBlock>\n  </FormGroup>\n);\n","import {\n  Checkbox,\n  FieldLevelHelp,\n  FormGroup,\n  HelpBlock,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\nexport const FormCheckboxComponent: React.FunctionComponent<\n  IFormControl\n> = props => (\n  <FormGroup\n    controlId={props.field.name}\n    validationState={getValidationState(props)}\n  >\n    <Checkbox\n      {...props.property.fieldAttributes}\n      {...props.field}\n      id={props.field.name}\n      checked={props.field.value}\n      data-testid={props.field.name}\n      disabled={props.form.isSubmitting || props.property.disabled}\n      title={props.property.controlHint}\n    >\n      {props.property.displayName}\n      {props.property.labelHint && (\n        <FieldLevelHelp\n          className={'inline-block'}\n          content={props.property.labelHint}\n        />\n      )}\n    </Checkbox>\n    <HelpBlock>\n      {props.property.description}\n      {props.form.errors[props.field.name]}\n    </HelpBlock>\n  </FormGroup>\n);\n","import * as React from 'react';\nimport { IFormControl } from '../models';\n\nexport const FormHiddenComponent: React.FunctionComponent<\n  IFormControl\n> = props => (\n  <div>\n    <input\n      {...props.property.fieldAttributes}\n      {...props.field}\n      type={props.type}\n      id={props.name}\n      data-testid={props.name}\n    />\n    {props.form.touched[props.field.name] &&\n      props.form.errors[props.field.name] && (\n        <div className=\"error\">{props.form.errors[props.field.name]}</div>\n      )}\n  </div>\n);\n","import {\n  ControlLabel,\n  DropdownButton,\n  FieldLevelHelp,\n  Form,\n  FormGroup,\n  HelpBlock,\n  MenuItem,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\ninterface IDuration {\n  label: string;\n  value: number;\n}\n\nconst durations = [\n  {\n    label: 'Milliseconds',\n    value: 1,\n  },\n  {\n    label: 'Seconds',\n    value: 1000,\n  },\n  {\n    label: 'Minutes',\n    value: 60000,\n  },\n  {\n    label: 'Hours',\n    value: 3600000,\n  },\n  {\n    label: 'Days',\n    value: 86400000,\n  },\n] as IDuration[];\n\nfunction calculateDuration(duration: IDuration, initialValue: number) {\n  return initialValue / duration.value;\n}\n\nfunction calculateValue(duration: IDuration, value: number) {\n  return value * duration.value;\n}\n\nexport interface IFormDurationComponentState {\n  duration: IDuration;\n}\n\nexport class FormDurationComponent extends React.Component<\n  IFormControl,\n  IFormDurationComponentState\n> {\n  private inputField: HTMLInputElement = undefined as any;\n  constructor(props: IFormControl) {\n    super(props);\n    // find the highest duration that keeps the duration above 1\n    const index =\n      durations.findIndex(d => !(this.props.field.value / d.value >= 1.0)) - 1;\n    // if the index is invalid than we use the highest available duration.\n    const duration = durations[index] || durations[durations.length - 1];\n    this.state = {\n      duration,\n    };\n    this.handleOnSelect = this.handleOnSelect.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.receiveInputRef = this.receiveInputRef.bind(this);\n  }\n  public receiveInputRef(ref: HTMLInputElement) {\n    this.inputField = ref;\n  }\n  public handleOnSelect(eventKey: number, event: React.ChangeEvent) {\n    const newDuration =\n      durations.find(duration => duration.value === eventKey) || durations[0];\n    this.setState({\n      duration: newDuration,\n    });\n    this.props.form.setFieldValue(\n      this.props.field.name,\n      calculateValue(newDuration, this.inputField.valueAsNumber),\n      true\n    );\n  }\n  public handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.props.form.setFieldValue(\n      this.props.field.name,\n      calculateValue(this.state.duration, event.target.valueAsNumber),\n      true\n    );\n  }\n  public handleBlur(event: React.ChangeEvent<HTMLInputElement>) {\n    this.props.form.setFieldValue(\n      this.props.field.name,\n      calculateValue(this.state.duration, event.target.valueAsNumber),\n      true\n    );\n  }\n  public render() {\n    return (\n      <FormGroup\n        controlId={this.props.field.name}\n        validationState={getValidationState(this.props)}\n      >\n        <ControlLabel>{this.props.property.displayName}</ControlLabel>\n        {this.props.property.labelHint && (\n          <ControlLabel>\n            <FieldLevelHelp content={this.props.property.labelHint} />\n          </ControlLabel>\n        )}\n        <Form.InputGroup>\n          <Form.FormControl\n            min={0}\n            {...this.props.property.fieldAttributes}\n            data-testid={this.props.field.name}\n            type={'number'}\n            defaultValue={calculateDuration(\n              this.state.duration,\n              this.props.field.value\n            )}\n            disabled={\n              this.props.form.isSubmitting || this.props.property.disabled\n            }\n            onChange={this.handleChange}\n            onBlur={this.handleBlur}\n            inputRef={this.receiveInputRef}\n            title={this.props.property.controlHint}\n          />\n          <DropdownButton\n            id={this.props.field.name + '-duration'}\n            componentClass={Form.InputGroup.Button}\n            title={this.state.duration.label}\n            onSelect={this.handleOnSelect}\n            disabled={\n              this.props.form.isSubmitting || this.props.property.disabled\n            }\n          >\n            {durations.map((duration, index) => (\n              <MenuItem key={index} eventKey={duration.value}>\n                {duration.label}\n              </MenuItem>\n            ))}\n          </DropdownButton>\n        </Form.InputGroup>\n        <HelpBlock>\n          {this.props.property.description}\n          {this.props.form.errors[this.props.field.name]}\n        </HelpBlock>\n      </FormGroup>\n    );\n  }\n}\n","import { Field } from 'formik';\nimport * as React from 'react';\nimport { IFormDefinition, IFormDefinitionProperty } from './models';\nimport {\n  FormCheckboxComponent,\n  FormDurationComponent,\n  FormHiddenComponent,\n  FormInputComponent,\n  FormSelectComponent,\n  FormTextAreaComponent,\n} from './widgets';\n\nexport interface INamedConfigurationProperty extends IFormDefinitionProperty {\n  name: string;\n}\n\nexport interface IRenderFieldProps {\n  property: INamedConfigurationProperty;\n  value: any;\n  [name: string]: any;\n}\n\nexport interface IFormBuilderProps<T> {\n  definition: IFormDefinition;\n  initialValue: T;\n  i18nRequiredProperty: string;\n  onSave: (value: T | any, actions: any) => void;\n  children(props: IFormBuilderChildrenProps<T>): any;\n}\n\nexport interface IFormBuilderChildrenProps<T> {\n  fields: INamedConfigurationProperty[];\n  getField: (props: IRenderFieldProps) => any;\n  initialValue: T;\n  onSave: (value: T, actions: any) => void;\n}\n\nexport class FormBuilder<T> extends React.Component<IFormBuilderProps<T>> {\n  /**\n   * Converts a property configuration to some kind of input field\n   * @param props\n   */\n  public getField = (props: IRenderFieldProps): any => {\n    // Massage the value in the definition to an input type\n    const type = this.massageType(props.property);\n    const componentTypemaps = {\n      checkbox: FormCheckboxComponent,\n      duration: FormDurationComponent,\n      hidden: FormHiddenComponent,\n      select: FormSelectComponent,\n      textarea: FormTextAreaComponent,\n    };\n    const validate = (value: any) => {\n      if (props.property.required && !value) {\n        return this.props.i18nRequiredProperty;\n      }\n      return undefined;\n    };\n    return (\n      <Field\n        key={props.property.name}\n        name={props.property.name}\n        type={type}\n        validate={validate}\n        {...props}\n        component={componentTypemaps[type] || FormInputComponent}\n      />\n    );\n  };\n\n  public render() {\n    const fields = this.enrichAndOrderProperties(this.props.definition);\n    const massagedValue = this.sanitizeValues(\n      this.props.definition,\n      this.props.initialValue\n    );\n    return this.props.children({\n      fields,\n      getField: this.getField,\n      initialValue: massagedValue,\n      onSave: this.props.onSave,\n    });\n  }\n\n  /**\n   * Ensure that the input values match the property definitions\n   */\n  private sanitizeValues(definition: IFormDefinition, initialValue: any): T {\n    return Object.keys(definition).reduce((result, key): any => {\n      const prop = definition[key];\n      let value = this.massageValue(prop, initialValue[key]);\n      if (value == null) {\n        value = this.massageValue(prop, prop.defaultValue);\n      }\n      return { ...result, [key]: value };\n    }, {}) as T;\n  }\n\n  /**\n   * Add the 'name' field from the property ID and sort them by the 'order' property\n   */\n  private enrichAndOrderProperties(definition: IFormDefinition) {\n    return Object.keys(definition)\n      .map(key => ({\n        ...definition[key],\n        name: key,\n        required: this.massageRequired(definition[key]),\n        type: this.massageType(definition[key]),\n      }))\n      .sort((a, b) => {\n        const aOrder = (a.order || 0) as number;\n        const bOrder = (b.order || 0) as number;\n        return aOrder - bOrder;\n      });\n  }\n\n  /**\n   * Converts various values passed into the property type to known input types\n   *\n   * @param property\n   */\n  private massageType(property: IFormDefinitionProperty) {\n    let type = property.type || 'text';\n    switch (type) {\n      case 'int':\n      case 'integer':\n      case 'long':\n        type = 'number';\n        break;\n      case 'string':\n        type = 'text';\n        break;\n      case 'boolean':\n        type = 'checkbox';\n    }\n    if (property.enum && property.enum.length) {\n      type = 'select';\n    }\n    if (property.secret) {\n      type = 'password';\n    }\n    return type;\n  }\n\n  /**\n   * Ensure that the 'required' property is false for checkboxes and hidden fields\n   *\n   * This is a candidate for removal in the future, as it's a workaround\n   *\n   * @param property\n   */\n  private massageRequired(property: IFormDefinitionProperty): any {\n    switch (property.type) {\n      case 'boolean':\n      case 'checkbox':\n      case 'hidden':\n        return false;\n      default:\n        return property.required;\n    }\n  }\n\n  /**\n   * Converts the given value from a string to the type defined in the property definition\n   *\n   * This is a candidate for removal as it's a workaround\n   *\n   * @param property\n   * @param value\n   */\n  private massageValue(property: IFormDefinitionProperty, value?: string) {\n    if (value === undefined || value === null) {\n      return value;\n    }\n    switch (property.type) {\n      case 'number':\n        return parseInt(value, 10);\n      case 'boolean':\n      case 'checkbox':\n        return String(value).toLocaleLowerCase() === 'true';\n      default:\n        return value;\n    }\n  }\n}\n","import { Formik, FormikErrors } from 'formik';\nimport * as React from 'react';\nimport { FormBuilder } from './FormBuilder';\nimport { IFormDefinition, IFormErrors } from './models';\n\nexport interface IAutoFormProps<T> {\n  /**\n   * A map of configuration properties as returned by the Syndesis API\n   */\n  definition: IFormDefinition;\n  /**\n   * The initial value that should be set on the form\n   */\n  initialValue: T;\n  /**\n   * String to be displayed when a required field isn't set\n   */\n  i18nRequiredProperty: string;\n  /**\n   * Callback function that will be called when the form is submitted\n   */\n  onSave: (value: T, actions: any) => void;\n  /**\n   * Validation function called whenever a change or blur event occurs on the form\n   */\n  validate?: (value: T | any) => IFormErrors | Promise<any> | undefined;\n  /**\n   * Child component that will receive the form fields and submit handler\n   */\n  children: (state: IAutoFormChildrenProps) => any;\n}\n\nexport interface IAutoFormChildrenProps {\n  /**\n   * Fragment containing all of the form fields\n   */\n  fields: JSX.Element;\n  /**\n   * Function to trigger a form submit which will then trigger onSave\n   */\n  handleSubmit: (e?: any) => void;\n  dirty: boolean;\n  isSubmitting: boolean;\n  isValid: boolean;\n  isValidating: boolean;\n  resetForm: (nextValues?: any) => void;\n  submitForm: () => void;\n  validateForm: () => Promise<FormikErrors<any>>;\n  values: any;\n  errors: any;\n}\n\nexport class AutoForm<T> extends React.Component<IAutoFormProps<T>> {\n  public render() {\n    return (\n      <FormBuilder\n        definition={this.props.definition}\n        initialValue={this.props.initialValue}\n        onSave={this.props.onSave}\n        i18nRequiredProperty={this.props.i18nRequiredProperty}\n      >\n        {({ initialValue, fields, onSave, getField }) => (\n          <Formik<T>\n            initialValues={initialValue}\n            onSubmit={onSave}\n            validate={this.props.validate}\n          >\n            {({\n              handleSubmit,\n              values,\n              touched,\n              dirty,\n              errors,\n              isValid,\n              isValidating,\n              isSubmitting,\n              resetForm,\n              validateForm,\n              submitForm,\n            }) =>\n              this.props.children({\n                dirty,\n                errors,\n                fields: (\n                  <React.Fragment>\n                    {fields.map(property =>\n                      getField({\n                        errors,\n                        property,\n                        touched,\n                        value: (values || {})[property.name],\n                      })\n                    )}\n                  </React.Fragment>\n                ),\n                handleSubmit,\n                isSubmitting,\n                isValid,\n                isValidating,\n                resetForm,\n                submitForm,\n                validateForm,\n                values,\n              })\n            }\n          </Formik>\n        )}\n      </FormBuilder>\n    );\n  }\n}\n","import { IFormDefinition, IFormDefinitionProperty } from '@syndesis/auto-form';\nimport {\n  IConfigurationProperties,\n  IConfigurationProperty,\n} from '@syndesis/models';\n\n/**\n * Maps an API map of ConfigurationProperty objects to\n * an autoform IFormDefinition object.  Use on properties\n * objects from backend responses to ensure they're mapped\n * properly\n *\n * @param properties\n */\nexport function toFormDefinition(properties: IConfigurationProperties) {\n  if (!properties) {\n    throw new Error('Undefined value passed to form definition converter');\n  }\n  const answer: IFormDefinition = {};\n  Object.keys(properties).forEach(key => {\n    answer[key] = toFormDefinitionProperty(properties[key]);\n  });\n  return answer;\n}\n\n/**\n * Maps an API ConfigurationProperty object to an autoform IFormDefinitionPropertyObject\n * @param property\n */\nexport function toFormDefinitionProperty(property: IConfigurationProperty) {\n  const {\n    cols,\n    max,\n    min,\n    multiple,\n    rows,\n    controlHint,\n    controlTooltip,\n    labelHint,\n    labelTooltip,\n    ...formDefinitionProperty\n  } = property as any; // needed, ConfigurationProperty is a lie\n  return {\n    ...formDefinitionProperty,\n    controlHint: controlHint || controlTooltip,\n    fieldAttributes: {\n      cols,\n      max,\n      min,\n      multiple,\n      rows,\n    },\n    labelHint: labelHint || labelTooltip,\n  } as IFormDefinitionProperty;\n}\n","const ALPHABET =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\nconst RANDOMNESS: number[] = [];\nlet lastTimestamp = 0;\n\n/**\n * Generates lexically sortable unique keys based on:\n *\n * https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html\n *\n * You can also consider the generated kys to be like UUIDS except:\n * (1) strictly increment from the generating node's point of view\n * (2) loosely increment based on relative machine time when viewed across nodes.\n */\nexport function key() {\n  // first time setup.. initialize the randomness...\n  if (RANDOMNESS.length === 0) {\n    for (let i = 0; i < 12; i++) {\n      RANDOMNESS[i] = Math.floor(Math.random() * 64);\n    }\n  }\n\n  // we build the resulting key backwards. The most significant bits at the front of the key.\n  let result = '';\n  const timestamp = new Date().getTime();\n\n  // Lets encode the random part of the key. (72 bits of randomness)\n  // 72/6 = 12 base64 characters.\n\n  // increment randomness when we being called too keys too quickly.\n  if (timestamp === lastTimestamp) {\n    for (let i = 0; i < 12; i++) {\n      RANDOMNESS[i]++;\n      if (RANDOMNESS[i] === 64) {\n        RANDOMNESS[i] = 0; // we need to carry to the next random byte.\n      } else {\n        break; // done incrementing.\n      }\n    }\n  }\n\n  for (let i = 0; i < 12; i++) {\n    result = ALPHABET.charAt(RANDOMNESS[i]) + result;\n  }\n\n  // Base64 encodes 6 bits of data per character. We want to encode\n  // 6 bytes of the timestamp (48 bits), 48/6 = 8 base64 chars for the ts part\n  // the key.\n  let remainingTimestamp = timestamp;\n  for (let i = 0; i < 8; i++) {\n    result = ALPHABET.charAt(remainingTimestamp % 64) + result;\n    remainingTimestamp = Math.floor(remainingTimestamp / 64);\n  }\n\n  lastTimestamp = timestamp;\n  return result;\n}\n","import { IActiveFilter, IFilterType, ISortType } from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IWithListViewToolbarHelpers\n  extends IWithListViewToolbarHelpersState {\n  onClearFilters(event: React.MouseEvent<HTMLAnchorElement>): void;\n  onFilterAdded(title: string, value: string): void;\n  onFilterValueSelected(filterValue: { id: string; title: string }): void;\n  onRemoveFilter(filter: IActiveFilter): void;\n  onSelectFilterType(filterType: IFilterType): void;\n  onToggleCurrentSortDirection(): void;\n  onUpdateCurrentSortType(sortType: string): void;\n  onUpdateCurrentValue(event: Event): void;\n  onValueKeyPress(keyEvent: KeyboardEvent): void;\n}\n\nexport interface IWithListViewToolbarHelpersProps {\n  defaultFilterType: IFilterType;\n  defaultSortType: ISortType;\n  children(props: IWithListViewToolbarHelpers): any;\n}\n\nexport interface IWithListViewToolbarHelpersState {\n  activeFilters: IActiveFilter[];\n  currentFilterType: IFilterType;\n  currentSortType: string;\n  currentValue: any;\n  filterCategory: any;\n  isSortAscending: boolean;\n}\n\nexport class WithListViewToolbarHelpers extends React.Component<\n  IWithListViewToolbarHelpersProps,\n  IWithListViewToolbarHelpersState\n> {\n  constructor(props: IWithListViewToolbarHelpersProps) {\n    super(props);\n    this.state = {\n      activeFilters: [] as IActiveFilter[],\n      currentFilterType: this.props.defaultFilterType,\n      currentSortType: this.props.defaultSortType.title,\n      currentValue: '',\n      filterCategory: null,\n      isSortAscending: true,\n    };\n  }\n\n  public onUpdateCurrentValue = (event: Event) => {\n    this.setState({ currentValue: (event.target as HTMLInputElement).value });\n  };\n\n  public onValueKeyPress = (keyEvent: KeyboardEvent) => {\n    const { currentValue, currentFilterType } = this.state;\n\n    if (keyEvent.key === 'Enter' && currentValue && currentValue.length > 0) {\n      this.setState({ currentValue: '' });\n      this.onFilterAdded(currentFilterType.title, currentValue);\n      keyEvent.stopPropagation();\n      keyEvent.preventDefault();\n    }\n  };\n\n  public onFilterAdded = (title: string, value: string) => {\n    const { activeFilters } = this.state;\n    this.setState({\n      activeFilters: [\n        ...activeFilters,\n        {\n          title,\n          value,\n        } as IActiveFilter,\n      ],\n    });\n  };\n\n  public onSelectFilterType = (filterType: IFilterType) => {\n    const { currentFilterType } = this.state;\n    if (currentFilterType !== filterType) {\n      this.setState({ currentValue: '', currentFilterType: filterType });\n    }\n  };\n\n  public onFilterValueSelected = (filterValue: {\n    id: string;\n    title: string;\n  }) => {\n    const { currentFilterType } = this.state;\n\n    this.setState({ currentValue: filterValue.title });\n    if (filterValue) {\n      this.onFilterAdded(currentFilterType.title, filterValue.title);\n    }\n  };\n\n  public onRemoveFilter = (filter: IActiveFilter) => {\n    const { activeFilters } = this.state;\n\n    const index = activeFilters.indexOf(filter);\n    if (index > -1) {\n      const updated = [\n        ...activeFilters.slice(0, index),\n        ...activeFilters.slice(index + 1),\n      ];\n      this.setState({ activeFilters: updated });\n    }\n  };\n\n  public onClearFilters = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    event.preventDefault();\n    this.setState({ activeFilters: [] });\n  };\n\n  public onToggleCurrentSortDirection = () => {\n    const { isSortAscending } = this.state;\n\n    this.setState({ isSortAscending: !isSortAscending });\n  };\n\n  public onUpdateCurrentSortType = (sortType: string) => {\n    const { currentSortType } = this.state;\n\n    if (currentSortType !== sortType) {\n      this.setState({\n        currentSortType: sortType,\n        isSortAscending: true,\n      });\n    }\n  };\n\n  public render() {\n    return this.props.children({\n      onClearFilters: this.onClearFilters,\n      onFilterAdded: this.onFilterAdded,\n      onFilterValueSelected: this.onFilterValueSelected,\n      onRemoveFilter: this.onRemoveFilter,\n      onSelectFilterType: this.onSelectFilterType,\n      onToggleCurrentSortDirection: this.onToggleCurrentSortDirection,\n      onUpdateCurrentSortType: this.onUpdateCurrentSortType,\n      onUpdateCurrentValue: this.onUpdateCurrentValue,\n      onValueKeyPress: this.onValueKeyPress,\n      ...this.state,\n    });\n  }\n}\n","import * as React from 'react';\n\nexport interface IWithLoaderProps {\n  /**\n   * If true, the [errorChildren]{@link IWithLoaderProps#errorChildren} will be\n   * rendered.\n   */\n  error: boolean;\n  /**\n   * If true, the [loaderChildren]{@link IWithLoaderProps#loaderChildren}\n   * will be rendered.\n   */\n  loading: boolean;\n  /**\n   * The minimum amount of time to wait before invoking the [children]{@link IWithLoaderProps#children}\n   * render prop. If high enough, it will avoid a flash of loading component.\n   * Defaults to 500ms.\n   */\n  minWait?: number;\n  /**\n   * The content to render when data is loading.\n   */\n  loaderChildren: JSX.Element;\n  /**\n   * The content to render when error occurred while loading data.\n   */\n  errorChildren: JSX.Element;\n\n  /**\n   * A render prop that will be invoked if both [loading]{@link IWithLoaderProps#loading}\n   * and [error]{@link IWithLoaderProps#error} are `false`.\n   */\n  children(): any;\n}\n\nexport interface IWithLoaderState {\n  loaded: boolean;\n}\n\n/**\n * A component to handle asynchronous data-loading. It will show the provided\n * loader component for a minimum amount of time - to avoid flash of loading\n * component - before invoking the children render prop.\n * It will also handle the error state rendering the provided error component\n * in case of errors loading the data.\n *\n * @see [error]{@link IWithLoaderProps#error}\n * @see [loading]{@link IWithLoaderProps#loading}\n * @see [minWait]{@link IWithLoaderProps#minWait}\n * @see [loaderChildren]{@link IWithLoaderProps#loaderChildren}\n * @see [errorChildren]{@link IWithLoaderProps#errorChildren}\n * @see [children]{@link IWithLoaderProps#children}\n */\nexport class WithLoader extends React.Component<\n  IWithLoaderProps,\n  IWithLoaderState\n> {\n  public static defaultProps = {\n    minWait: 500,\n  };\n\n  protected waitTimeout?: number;\n\n  constructor(props: IWithLoaderProps) {\n    super(props);\n    this.state = {\n      loaded: !this.props.loading,\n    };\n  }\n\n  public componentWillReceiveProps(nextProps: IWithLoaderProps) {\n    this.setState({\n      loaded: !nextProps.loading,\n    });\n  }\n\n  public componentDidUpdate(prevProps: IWithLoaderProps) {\n    if (!this.props.loading && !this.waitTimeout) {\n      this.setTimeout();\n    }\n  }\n\n  public render() {\n    if (this.props.error) {\n      return this.props.errorChildren;\n    }\n    if (!this.state.loaded) {\n      return this.props.loaderChildren;\n    }\n    return this.props.children();\n  }\n\n  protected setTimeout() {\n    this.clearTimeout();\n    this.waitTimeout = window.setTimeout(() => {\n      this.setState({\n        loaded: true,\n      });\n    }, this.props.minWait!);\n  }\n\n  protected clearTimeout() {\n    if (this.waitTimeout) {\n      clearTimeout(this.waitTimeout);\n      this.waitTimeout = undefined;\n    }\n  }\n}\n","import * as React from 'react';\nimport { Route, RouteChildrenProps } from 'react-router';\n\nexport interface IWithRouteDataProps<P, S> {\n  /**\n   * A render propr that will receive the route params and state.\n   * @param params - the route params, with type `P`.\n   * @param state - the route state, with type `S`.\n   * @param route - the raw route object, as provided by the `Route` component.\n   */\n  children(params: P, state: S, route: RouteChildrenProps): any;\n}\n\n/**\n * A render-prop component that returns a route params - with type `P` - and\n * state - with type `S`.\n * *Warning:* this component doesn't provide any assurance on the returned shape\n * of neither the params nor the state objects.\n * @see [children]{@link IWithRouteDataProps#children}\n */\nexport class WithRouteData<P, S> extends React.Component<\n  IWithRouteDataProps<P, S>\n> {\n  public render() {\n    return (\n      <Route>\n        {route => {\n          if (!route.match) {\n            throw new Error(\"Route doesn't have a match\");\n          }\n          const params: P = route.match.params || ({} as P);\n          const state: S = route.location.state || ({} as S);\n          return this.props.children(params, state, route);\n        }}\n      </Route>\n    );\n  }\n}\n","import * as React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router';\n\nexport interface IWithRouterProps extends RouteComponentProps {\n  children(router: RouteComponentProps): any;\n}\n\nexport class WithRouterBase extends React.Component<IWithRouterProps> {\n  public render() {\n    const { children, ...props } = this.props;\n    return children(props);\n  }\n}\n\nexport const WithRouter = withRouter<IWithRouterProps>(WithRouterBase);\n","import { reverse } from 'named-urls';\n\nexport interface IRoute<P, S> {\n  params?: P;\n  state?: S;\n  route?: string;\n}\n\nexport interface IResolvedRoute<P, S> extends IRoute<P, S> {\n  pathname: string;\n}\n\n/**\n * Creates a function that takes a route and some `data` `T` that returns the\n * reversed URL.\n * Use `mapper` to write the business logic required to convert the `data` object\n * to the basic params that can be passed in an url (strings and numbers), and to\n * set the state object that will be pushed in the history together with the url.\n * @param defaultRoute\n * @param mapper\n */\nexport function makeResolver<T, P = any, S = any>(\n  defaultRoute: string,\n  mapper: (data: T) => IRoute<P, S>\n) {\n  return (data: T): IResolvedRoute<P, S> => {\n    const { params, route, state } = mapper(data);\n    return {\n      params,\n      pathname: reverse(route || defaultRoute, params || {}),\n      route: route || defaultRoute,\n      state,\n    };\n  };\n}\n\n/**\n * Creates a function that takes a route and some `data` `T` that returns the\n * reversed URL.\n * Use `mapper` to write the business logic required to convert the `data` object\n * to the basic params that can be passed in an url (strings and numbers), and to\n * set the state object that will be pushed in the history together with the url.\n * @param defaultRoute\n * @param mapper\n */\nexport function makeResolverNoParamsWithDefaults<P = any, S = any>(\n  defaultRoute: string,\n  mapper: () => IRoute<P, S>\n) {\n  return (): IResolvedRoute<P, S> => {\n    const { params, route, state } = mapper();\n    return {\n      params,\n      pathname: reverse(route || defaultRoute, params || {}),\n      route: route || defaultRoute,\n      state,\n    };\n  };\n}\n\n/**\n * Creates a function that takes a route and some `data` `T` that returns the\n * reversed URL.\n * @param route\n */\nexport function makeResolverNoParams(route: string) {\n  return (): IResolvedRoute<null, null> => ({\n    pathname: reverse(route),\n    route,\n  });\n}\n","import { OptionalInt } from '@syndesis/models';\n\n/**\n *\n * @param value the value being used\n * @returns the `OptionalInt` object created from the specified value\n */\nexport function createOptionalInt(value: number): OptionalInt {\n  return { present: true, asInt: value };\n}\n\n/**\n * @param optional the `OptionalInt` whose value is being requested\n * @param defaultValue the value to return if no value exists\n * @returns the int value (defaults to zero)\n */\nexport function optionalIntValue(\n  optional: OptionalInt | undefined,\n  defaultValue: number = 0\n): number {\n  if (optional && optional.present) {\n    const value = optional.asInt;\n    return value ? value : defaultValue;\n  }\n\n  return defaultValue;\n}\n\n/**\n * @param optional the value whose value is being checked\n * @returns true if the optional exists and there is a value\n */\nexport function optionalIntHasValue(\n  optional: OptionalInt | undefined\n): boolean {\n  return optional && optional.present ? optional.present : false;\n}\n","import { WizardStep, WizardSteps } from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IConnectionCreatorBreadcrumbsProps {\n  /**\n   * The one-based active step number.\n   */\n  step: number;\n}\n\nexport interface IConnectionCreatorBreadcrumbsState {\n  /**\n   * Indicates if the user clicked on a step. Used to show\n   * sub-steps when browsing from a mobile device.\n   */\n  active: boolean;\n}\n\n/**\n * A component to display the PatternFly Wizard Steps specific to the integration\n * creator flow.\n * @see [step]{@link IConnectionCreatorBreadcrumbsProps#step}\n * @see [subStep]{@link IConnectionCreatorBreadcrumbsProps#subStep}\n */\nexport class ConnectionCreatorBreadcrumbs extends React.Component<\n  IConnectionCreatorBreadcrumbsProps,\n  IConnectionCreatorBreadcrumbsState\n> {\n  public state = {\n    active: false,\n  };\n\n  constructor(props: IConnectionCreatorBreadcrumbsProps) {\n    super(props);\n    this.toggleActive = this.toggleActive.bind(this);\n  }\n\n  public toggleActive() {\n    this.setState({\n      active: !this.state.active,\n    });\n  }\n\n  public render() {\n    return (\n      <WizardSteps\n        active={this.state.active}\n        mainSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              onClick={this.toggleActive}\n              step={1}\n              title={'Select connector'}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              onClick={this.toggleActive}\n              step={2}\n              title={'Configure connection'}\n            />\n            <WizardStep\n              isActive={this.props.step === 3}\n              isDisabled={this.props.step < 3}\n              onClick={this.toggleActive}\n              step={3}\n              title={'Name connection'}\n            />\n          </>\n        }\n        altSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={1}\n              title={'Select connector'}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={2}\n              title={'Configure connection'}\n            />\n            <WizardStep\n              isActive={this.props.step === 3}\n              isDisabled={this.props.step < 3}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={3}\n              title={'Name connection'}\n            />\n          </>\n        }\n      />\n    );\n  }\n}\n","import { getConnectionIcon, WithConnectionHelpers } from '@syndesis/api';\nimport { Connection } from '@syndesis/models';\nimport {\n  ConnectionCard,\n  ConnectionsGrid,\n  ConnectionsGridCell,\n  ConnectionSkeleton,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { AppContext } from '../../../app';\nimport { ApiError } from '../../../shared';\n\nexport interface IConnectionsProps {\n  error: boolean;\n  includeConnectionMenu: boolean;\n  loading: boolean;\n  connections: Connection[];\n  getConnectionHref(connection: Connection): H.LocationDescriptor;\n  getConnectionEditHref(connection: Connection): H.LocationDescriptor;\n}\n\nexport class Connections extends React.Component<IConnectionsProps> {\n  public render() {\n    return (\n      <AppContext.Consumer>\n        {({ pushNotification }) => {\n          return (\n            <Translation ns={['connections', 'shared']}>\n              {t => (\n                <WithConnectionHelpers>\n                  {({ deleteConnection }) => {\n                    const doDelete = async (\n                      connectionId: string,\n                      connectionName: string\n                    ) => {\n                      try {\n                        await deleteConnection(connectionId);\n                        pushNotification(\n                          t('connectionDeletedSuccess', { connectionName }),\n                          'success'\n                        );\n                      } catch (error) {\n                        const details = error.message ? error.message : '';\n                        pushNotification(\n                          t('connectionDeletedFailed', {\n                            connectionName,\n                            details,\n                          }),\n                          'error'\n                        );\n                      }\n                    };\n                    return (\n                      <ConnectionsGrid>\n                        <WithLoader\n                          error={this.props.error}\n                          loading={this.props.loading}\n                          loaderChildren={\n                            <>\n                              {new Array(5).fill(0).map((_, index) => (\n                                <ConnectionsGridCell key={index}>\n                                  <ConnectionSkeleton />\n                                </ConnectionsGridCell>\n                              ))}\n                            </>\n                          }\n                          errorChildren={<ApiError />}\n                        >\n                          {() =>\n                            this.props.connections.map((c, index) => {\n                              const handleDelete = (): void => {\n                                doDelete(c.id!, c.name); // must have an ID if deleting\n                              };\n\n                              return (\n                                <ConnectionsGridCell key={index}>\n                                  <ConnectionCard\n                                    name={c.name}\n                                    description={c.description || ''}\n                                    icon={getConnectionIcon(\n                                      process.env.PUBLIC_URL,\n                                      c,\n                                    )}\n                                    href={this.props.getConnectionHref(c)}\n                                    menuProps={\n                                      this.props.includeConnectionMenu\n                                        ? {\n                                            editHref: this.props.getConnectionEditHref(\n                                              c\n                                            ),\n                                            i18nCancelLabel: t('shared:Cancel'),\n                                            i18nDeleteLabel: t('shared:Delete'),\n                                            i18nDeleteModalMessage: t(\n                                              'deleteModalMessage',\n                                              { connectionName: c.name }\n                                            ),\n                                            i18nDeleteModalTitle: t(\n                                              'deleteModalTitle'\n                                            ),\n                                            i18nEditLabel: t('shared:Edit'),\n                                            i18nMenuTitle: t(\n                                              'connectionCardMenuTitle'\n                                            ),\n                                            i18nViewLabel: t('shared:View'),\n                                            isDeleteEnabled:\n                                              (c.uses as number) === 0,\n                                            onDelete: handleDelete,\n                                          }\n                                        : undefined\n                                    }\n                                  />\n                                </ConnectionsGridCell>\n                              );\n                            })\n                          }\n                        </WithLoader>\n                      </ConnectionsGrid>\n                    );\n                  }}\n                </WithConnectionHelpers>\n              )}\n            </Translation>\n          );\n        }}\n      </AppContext.Consumer>\n    );\n  }\n}\n","import { Connection } from '@syndesis/models';\nimport {\n  ConnectionsListView,\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport resolvers from '../resolvers';\nimport { Connections, IConnectionsProps } from './Connections';\n\nfunction getFilteredAndSortedConnections(\n  connections: Connection[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSortedConnections = connections;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSortedConnections = filteredAndSortedConnections.filter(\n      (c: Connection) => c.name.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSortedConnections = filteredAndSortedConnections.sort(\n    (miA, miB) => {\n      const left = isSortAscending ? miA : miB;\n      const right = isSortAscending ? miB : miA;\n      return left.name.localeCompare(right.name);\n    }\n  );\n\n  return filteredAndSortedConnections;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport interface IConnectionsWithToolbarProps extends IConnectionsProps {\n  children?: any;\n}\n\nexport class ConnectionsWithToolbar extends React.Component<\n  IConnectionsWithToolbarProps\n> {\n  public static defaultProps = {\n    includeHidden: false,\n  };\n\n  public render() {\n    return (\n      <Translation ns={['shared']}>\n        {t => (\n          <WithListViewToolbarHelpers\n            defaultFilterType={filterByName}\n            defaultSortType={sortByName}\n          >\n            {helpers => {\n              const filteredAndSortedConnections = getFilteredAndSortedConnections(\n                this.props.connections,\n                helpers.activeFilters,\n                helpers.currentSortType,\n                helpers.isSortAscending\n              );\n\n              return (\n                <ConnectionsListView\n                  linkToConnectionCreate={resolvers.create.selectConnector()}\n                  filterTypes={filterTypes}\n                  sortTypes={sortTypes}\n                  resultsCount={filteredAndSortedConnections.length}\n                  {...helpers}\n                  i18nLinkCreateConnection={t('shared:linkCreateConnection')}\n                  i18nResultsCount={t('shared:resultsCount', {\n                    count: filteredAndSortedConnections.length,\n                  })}\n                >\n                  {this.props.children}\n                  <Connections\n                    error={this.props.error}\n                    includeConnectionMenu={true}\n                    loading={this.props.loading}\n                    connections={filteredAndSortedConnections}\n                    getConnectionHref={this.props.getConnectionHref}\n                    getConnectionEditHref={this.props.getConnectionEditHref}\n                  />\n                </ConnectionsListView>\n              );\n            }}\n          </WithListViewToolbarHelpers>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { WithConnectionHelpers } from '@syndesis/api';\nimport { AutoForm } from '@syndesis/auto-form';\nimport { Connector } from '@syndesis/models';\nimport { IConnectorConfigurationFormValidationResult } from '@syndesis/ui';\nimport { toFormDefinition } from '@syndesis/utils';\nimport * as React from 'react';\n\nexport interface IWithConnectorFormChildrenProps {\n  /**\n   * the form (embedded in the right UI elements)\n   */\n  fields: JSX.Element;\n  /**\n   * true if the form has been modified.\n   */\n  dirty: boolean;\n  /**\n   * true if the form contains valid values. Can be used to enable/disable the\n   * submit button.\n   */\n  isValid: boolean;\n  /**\n   * true if the form is being validated. Can be used to enable/disable the\n   * validate button.\n   */\n  isValidating: boolean;\n  /**\n   * true if the form is being submitted. Can be used to enable/disable the\n   * submit button.\n   */\n  isSubmitting: boolean;\n  /**\n   * the current values of the form fields\n   */\n  values: { [key: string]: string };\n\n  validationResults: IConnectorConfigurationFormValidationResult[];\n\n  resetForm: (nextValues?: any) => void;\n\n  handleSubmit: (e?: any) => void;\n  /**\n   * the callback to trigger to validate the form against the backend.\n   */\n  validateForm(): any;\n  /**\n   * the callback to trigger to submit the form.\n   */\n  submitForm(): any;\n}\n\nexport interface IWithConnectorFormProps {\n  /**\n   * the connection object that contains the action with the provided\n   * [actionId]{@link IWithConnectorFormProps#actionId}. Used to retrieve\n   * the form definition.\n   */\n  connector: Connector;\n  /**\n   * the values to assign to the form once rendered. These can come either from\n   * an existing integration or from the [onSave]{@link IWithConnectorFormProps#onSave}\n   * callback.\n   */\n  initialValue?: { [key: string]: string };\n\n  /**\n   * true to have the fields rendered as read-only.\n   */\n  disabled?: boolean;\n\n  /**\n   * the render prop that will receive the ready-to-be-rendered form and some\n   * helpers.\n   *\n   * @see [form]{@link IWithConnectorFormChildrenProps#form}\n   * @see [isValid]{@link IWithConnectorFormChildrenProps#isValid}\n   * @see [isSubmitting]{@link IWithConnectorFormChildrenProps#isSubmitting}\n   * @see [onSubmit]{@link IWithConnectorFormChildrenProps#submitForm}\n   */\n  children(props: IWithConnectorFormChildrenProps): any;\n\n  /**\n   * the callback that is fired after the form submit with valid values.\n   *\n   * @see [action]{@link IOnUpdatedIntegrationProps#action}\n   */\n  onSave(props: { [key: string]: string }, action: any): any;\n}\n\n/**\n * A component to generate a configuration form for a given action and values.\n *\n * @see [action]{@link IWithConnectorFormProps#action}\n * @see [moreConfigurationSteps]{@link IWithConnectorFormProps#moreConfigurationSteps}\n * @see [values]{@link IWithConnectorFormProps#values}\n */\nexport class WithConnectorForm extends React.Component<\n  IWithConnectorFormProps\n> {\n  public static defaultProps = {\n    initialValue: {},\n  };\n\n  public render() {\n    const definition = Object.keys(this.props.connector.properties!).reduce(\n      (def, key) => {\n        const d = this.props.connector.properties![key];\n        def[key] = {\n          ...d,\n          disabled: this.props.disabled,\n        };\n        return def;\n      },\n      {}\n    );\n    return (\n      <WithConnectionHelpers>\n        {({ validateConfiguration }) => {\n          let shouldValidateAgainstBackend = false;\n          let validationResults: IConnectorConfigurationFormValidationResult[] = [];\n          const validateFormAgainstBackend = async (values: {\n            [key: string]: string;\n          }) => {\n            validationResults = [];\n            if (shouldValidateAgainstBackend) {\n              const errors: { [key: string]: string } = {};\n              const status = await validateConfiguration(\n                this.props.connector.id!,\n                values\n              );\n              (\n                (\n                  status.find(obj => obj.scope === 'PARAMETERS') || {\n                    errors: [],\n                  }\n                ).errors || []\n              ).forEach(obj => {\n                obj.parameters.forEach(p => (errors[p] = obj.description));\n              });\n              validationResults = (\n                (\n                  status.find(obj => obj.scope === 'CONNECTIVITY') || {\n                    errors: [],\n                  }\n                ).errors || []\n              ).map(\n                obj =>\n                  ({\n                    message: obj.description,\n                    type: 'error',\n                  } as IConnectorConfigurationFormValidationResult)\n              );\n              if (Object.keys(errors).length) {\n                throw errors;\n              }\n              if (validationResults.length === 0) {\n                validationResults = [\n                  {\n                    message: `${\n                      this.props.connector.name\n                    } has been successfully validated`,\n                    type: 'success',\n                  } as IConnectorConfigurationFormValidationResult,\n                ];\n              }\n            }\n          };\n\n          return (\n            <AutoForm<{ [key: string]: string }>\n              i18nRequiredProperty={'* Required field'}\n              definition={toFormDefinition(definition)}\n              initialValue={this.props.initialValue!}\n              validate={validateFormAgainstBackend}\n              onSave={this.props.onSave}\n            >\n              {({\n                fields,\n                handleSubmit,\n                isSubmitting,\n                dirty,\n                isValid,\n                isValidating,\n                resetForm,\n                submitForm,\n                validateForm,\n                values,\n              }) => {\n                const enableValidationAgainstBackend = async () => {\n                  shouldValidateAgainstBackend = true;\n                  await validateForm();\n                  shouldValidateAgainstBackend = false;\n                };\n\n                return this.props.children({\n                  dirty,\n                  fields,\n                  handleSubmit,\n                  isSubmitting,\n                  isValid,\n                  isValidating,\n                  resetForm,\n                  submitForm,\n                  validateForm: enableValidationAgainstBackend,\n                  validationResults,\n                  values,\n                });\n              }}\n            </AutoForm>\n          );\n        }}\n      </WithConnectionHelpers>\n    );\n  }\n}\n","export * from './ConnectionCreatorBreadcrumbs';\nexport * from './Connections';\nexport * from './ConnectionsWithToolbar';\nexport * from './WithConnectorForm';\n","module.exports = __webpack_public_path__ + \"atlasmap-runtime.js\";","module.exports = __webpack_public_path__ + \"atlasmap-polyfills.js\";","module.exports = __webpack_public_path__ + \"atlasmap-styles.js\";","module.exports = __webpack_public_path__ + \"atlasmap-scripts.js\";","module.exports = __webpack_public_path__ + \"atlasmap-vendor.js\";","module.exports = __webpack_public_path__ + \"atlasmap-main.js\";","import {\n  getConnectionIcon,\n  IValidationResult,\n  WithConnection,\n  WithConnectionHelpers,\n} from '@syndesis/api';\nimport { Connection } from '@syndesis/models';\nimport {\n  Breadcrumb,\n  ConnectionDetailsForm,\n  ConnectionDetailsHeader,\n  Loader,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { AppContext } from '../../../app';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport resolvers from '../../resolvers';\nimport { WithConnectorForm } from '../components';\n\nexport interface IConnectionDetailsRouteParams {\n  connectionId: string;\n}\n\nexport interface IConnectionDetailsRouteState {\n  connection?: Connection;\n}\n\nexport interface IConnectionDetailsPageProps {\n  edit: boolean;\n}\n\nexport interface IConnectionDetailsPageState {\n  isWorking: boolean;\n}\n\nexport class ConnectionDetailsPage extends React.Component<\n  IConnectionDetailsPageProps,\n  IConnectionDetailsPageState\n> {\n  public state = {\n    isWorking: false,\n  };\n\n  public getUsedByMessage(connection: Connection): string {\n    // TODO: Schema is currently wrong as it has 'uses' as an OptionalInt. Remove cast when schema is fixed.\n    const numUsedBy = connection.uses as number;\n\n    if (numUsedBy === 1) {\n      return i18n.t('connections:usedByOne');\n    }\n\n    return i18n.t('connections:usedByMulti', { count: numUsedBy });\n  }\n\n  public render() {\n    return (\n      <AppContext.Consumer>\n        {({ pushNotification }) => {\n          return (\n            <WithRouteData<\n              IConnectionDetailsRouteParams,\n              IConnectionDetailsRouteState\n            >>\n              {({ connectionId }, { connection }, { history, location }) => (\n                <Translation ns={['connections', 'shared']}>\n                  {t => (\n                    <WithConnectionHelpers>\n                      {({ updateConnection, saveConnection, validateName }) => {\n                        return (\n                          <WithConnection\n                            id={connectionId}\n                            initialValue={connection}\n                            key={location.key}\n                          >\n                            {({ data, hasData, error }) => {\n                              const save = async ({\n                                name,\n                                description,\n                                configuredProperties,\n                              }: {\n                                name?: string;\n                                description?: string;\n                                configuredProperties?: {\n                                  [key: string]: string;\n                                };\n                              }): Promise<boolean> => {\n                                const updatedConnection = updateConnection(\n                                  data,\n                                  name,\n                                  description,\n                                  configuredProperties\n                                );\n                                try {\n                                  await saveConnection(updatedConnection);\n                                  history.push(\n                                    resolvers.connections.connection.details({\n                                      connection: updatedConnection,\n                                    })\n                                  );\n                                  return true;\n                                } catch (error) {\n                                  pushNotification(\n                                    t('errorSavingConnection'),\n                                    'error'\n                                  );\n                                  return false;\n                                }\n                              };\n\n                              const saveDescription = async (\n                                description: string\n                              ): Promise<boolean> => {\n                                this.setState({ isWorking: true });\n                                const saved = await save({ description });\n                                this.setState({ isWorking: false });\n                                return saved;\n                              };\n\n                              const saveName = async (\n                                name: string\n                              ): Promise<boolean> => {\n                                let saved = false;\n                                this.setState({ isWorking: true });\n                                const validation = await doValidateName(name);\n                                if (validation === true) {\n                                  saved = await save({ name });\n                                } else {\n                                  pushNotification(validation, 'error');\n                                }\n                                this.setState({ isWorking: false });\n                                return saved;\n                              };\n\n                              const saveConnector = async (\n                                configuredProperties: { [key: string]: string },\n                                actions: any\n                              ): Promise<void> => {\n                                this.setState({ isWorking: true });\n                                await save({ configuredProperties });\n                                actions.setSubmitting(false);\n                                this.setState({ isWorking: false });\n                              };\n\n                              /**\n                               * Backend validation only occurs when save has been called.\n                               * @param proposedName the name to validate\n                               */\n                              const doValidateName = async (\n                                proposedName: string\n                              ): Promise<true | string> => {\n                                // make sure name has a value\n                                if (proposedName === '') {\n                                  return t(\n                                    'shared:requiredFieldMessage'\n                                  ) as string;\n                                }\n\n                                const response: IValidationResult = await validateName(\n                                  connection!,\n                                  proposedName\n                                );\n\n                                if (!response.isError) {\n                                  return true;\n                                }\n\n                                if (response.error === 'UniqueProperty') {\n                                  const msg = t('duplicateNameError');\n                                  return msg\n                                    ? msg\n                                    : 'connections:duplicateNameError';\n                                }\n\n                                return response.message\n                                  ? response.message\n                                  : t('errorValidatingName')\n                                  ? t('errorValidatingName')!\n                                  : 'connections:errorValidatingName'; // return missing i18n key\n                              };\n\n                              const cancelEditing = () => {\n                                history.push(\n                                  resolvers.connections.connection.details({\n                                    connection: data,\n                                  })\n                                );\n                              };\n\n                              const startEditing = () => {\n                                history.push(\n                                  resolvers.connections.connection.edit({\n                                    connection: data,\n                                  })\n                                );\n                              };\n\n                              return (\n                                <WithLoader\n                                  error={error}\n                                  loading={!hasData}\n                                  loaderChildren={<Loader />}\n                                  errorChildren={<ApiError />}\n                                >\n                                  {() => {\n                                    return (\n                                      <WithConnectorForm\n                                        connector={data.connector!}\n                                        initialValue={data.configuredProperties}\n                                        disabled={!this.props.edit}\n                                        onSave={saveConnector}\n                                      >\n                                        {({\n                                          fields,\n                                          handleSubmit,\n                                          validationResults,\n                                          dirty,\n                                          isSubmitting,\n                                          isValid,\n                                          isValidating,\n                                          validateForm,\n                                        }) => (\n                                          <>\n                                            <Breadcrumb>\n                                              <Link\n                                                to={resolvers.dashboard.root()}\n                                              >\n                                                {t('shared:Home')}\n                                              </Link>\n                                              <Link\n                                                to={resolvers.connections.connections()}\n                                              >\n                                                {t('shared:Connections')}\n                                              </Link>\n                                              <span>\n                                                {t('connectionDetailPageTitle')}\n                                              </span>\n                                            </Breadcrumb>\n                                            <ConnectionDetailsHeader\n                                              allowEditing={true}\n                                              connectionDescription={\n                                                data.description\n                                              }\n                                              connectionIcon={getConnectionIcon(\n                                                process.env.PUBLIC_URL,\n                                                data\n                                              )}\n                                              connectionName={data.name}\n                                              i18nDescriptionLabel={t(\n                                                'shared:Description'\n                                              )}\n                                              i18nDescriptionPlaceholder={t(\n                                                'descriptionPlaceholder'\n                                              )}\n                                              i18nNamePlaceholder={t(\n                                                'namePlaceholder'\n                                              )}\n                                              i18nUsageLabel={t('shared:Usage')}\n                                              i18nUsageMessage={this.getUsedByMessage(\n                                                data\n                                              )}\n                                              isWorking={this.state.isWorking}\n                                              onChangeDescription={\n                                                saveDescription\n                                              }\n                                              onChangeName={saveName}\n                                            />\n                                            <ConnectionDetailsForm\n                                              i18nCancelLabel={t(\n                                                'shared:Cancel'\n                                              )}\n                                              i18nEditLabel={t('shared:Edit')}\n                                              i18nSaveLabel={t('shared:Save')}\n                                              i18nTitle={t(\n                                                'detailsSectionTitle',\n                                                {\n                                                  connectionName: data.name,\n                                                }\n                                              )}\n                                              i18nValidateLabel={t(\n                                                'shared:Validate'\n                                              )}\n                                              handleSubmit={handleSubmit}\n                                              isValid={!dirty || isValid}\n                                              isWorking={\n                                                isSubmitting || isValidating\n                                              }\n                                              validationResults={\n                                                validationResults\n                                              }\n                                              isEditing={this.props.edit}\n                                              onCancelEditing={cancelEditing}\n                                              onStartEditing={startEditing}\n                                              onValidate={validateForm}\n                                            >\n                                              {fields}\n                                            </ConnectionDetailsForm>\n                                          </>\n                                        )}\n                                      </WithConnectorForm>\n                                    );\n                                  }}\n                                </WithLoader>\n                              );\n                            }}\n                          </WithConnection>\n                        );\n                      }}\n                    </WithConnectionHelpers>\n                  )}\n                </Translation>\n              )}\n            </WithRouteData>\n          );\n        }}\n      </AppContext.Consumer>\n    );\n  }\n}\n","import { WithConnections } from '@syndesis/api';\nimport * as React from 'react';\nimport { PageTitle } from '../../../shared';\nimport { ConnectionsWithToolbar } from '../components';\nimport resolvers from '../resolvers';\n\nexport class ConnectionsPage extends React.Component {\n  public render() {\n    return (\n      <WithConnections>\n        {({ data, hasData, error }) => (\n          <>\n            <PageTitle title={'Connections'} />\n            <ConnectionsWithToolbar\n              error={error}\n              includeConnectionMenu={true}\n              loading={!hasData}\n              connections={data.connectionsForDisplay}\n              getConnectionHref={connection =>\n                resolvers.connection.details({ connection })\n              }\n              getConnectionEditHref={connection =>\n                resolvers.connection.edit({ connection })\n              }\n            />\n          </>\n        )}\n      </WithConnections>\n    );\n  }\n}\n","import { WithConnector } from '@syndesis/api';\nimport { Connector } from '@syndesis/models';\nimport {\n  ButtonLink,\n  ConnectionCreatorLayout,\n  ConnectorConfigurationForm,\n  Loader,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { ApiError, PageTitle } from '../../../../shared';\nimport {\n  ConnectionCreatorBreadcrumbs,\n  WithConnectorForm,\n} from '../../components';\nimport resolvers from '../../resolvers';\n\nexport interface IConfigurationPageRouteParams {\n  connectorId: string;\n}\n\nexport interface IConfigurationPageRouteState {\n  connector?: Connector;\n}\n\nexport default class ConfigurationPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<\n        IConfigurationPageRouteParams,\n        IConfigurationPageRouteState\n      >>\n        {({ connectorId }, { connector }, { history }) => (\n          <WithConnector id={connectorId} initialValue={connector}>\n            {({ data, hasData, error }) => (\n              <WithLoader\n                error={error}\n                loading={!hasData}\n                loaderChildren={<Loader />}\n                errorChildren={<ApiError />}\n              >\n                {() => {\n                  const onSave = (configuredProperties: {\n                    [key: string]: string;\n                  }) => {\n                    history.push(\n                      resolvers.create.review({\n                        configuredProperties,\n                        connector: data,\n                      })\n                    );\n                  };\n                  return (\n                    <WithConnectorForm connector={data} onSave={onSave}>\n                      {({\n                        fields,\n                        handleSubmit,\n                        validationResults,\n                        submitForm,\n                        isSubmitting,\n                        isValid,\n                        isValidating,\n                        validateForm,\n                      }) => {\n                        return (\n                          <>\n                            <PageTitle title={'Configure connection'} />\n                            <ConnectionCreatorLayout\n                              header={<ConnectionCreatorBreadcrumbs step={2} />}\n                              content={\n                                <ConnectorConfigurationForm\n                                  i18nFormTitle={data.name}\n                                  handleSubmit={handleSubmit}\n                                  validationResults={validationResults}\n                                >\n                                  {fields}\n                                </ConnectorConfigurationForm>\n                              }\n                              backHref={resolvers.create.selectConnector()}\n                              cancelHref={resolvers.connections()}\n                              onNext={submitForm}\n                              isNextDisabled={isSubmitting}\n                              extraButtons={\n                                <ButtonLink\n                                  onClick={validateForm}\n                                  disabled={!isValid || isValidating}\n                                >\n                                  Validate\n                                  {isValidating && (\n                                    <>\n                                      &nbsp;\n                                      <Loader size={'sm'} inline={true} />\n                                    </>\n                                  )}\n                                </ButtonLink>\n                              }\n                            />\n                          </>\n                        );\n                      }}\n                    </WithConnectorForm>\n                  );\n                }}\n              </WithLoader>\n            )}\n          </WithConnector>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { getConnectionIcon, WithConnectors } from '@syndesis/api';\nimport { IConnectionWithIconFile } from '@syndesis/models';\nimport {\n  ConnectionCard,\n  ConnectionCreatorLayout,\n  ConnectionsGrid,\n  ConnectionsGridCell,\n  ConnectionSkeleton,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { ApiError, PageTitle } from '../../../../shared';\nimport { ConnectionCreatorBreadcrumbs } from '../../components';\nimport resolvers from '../../resolvers';\n\nexport default class ConnectorsPage extends React.Component {\n  public render() {\n    return (\n      <WithConnectors>\n        {({ data, hasData, error }) => (\n          <>\n            <PageTitle title={'Select connector'} />\n            <ConnectionCreatorLayout\n              header={<ConnectionCreatorBreadcrumbs step={1} />}\n              content={\n                <ConnectionsGrid>\n                  <WithLoader\n                    error={error}\n                    loading={!hasData}\n                    loaderChildren={\n                      <>\n                        {new Array(5).fill(0).map((_, index) => (\n                          <ConnectionsGridCell key={index}>\n                            <ConnectionSkeleton />\n                          </ConnectionsGridCell>\n                        ))}\n                      </>\n                    }\n                    errorChildren={<ApiError />}\n                  >\n                    {() =>\n                      data.connectorsForDisplay\n                        .sort((a, b) => a.name.localeCompare(b.name))\n                        .map((connector, index) => (\n                          <ConnectionsGridCell key={index}>\n                            <ConnectionCard\n                              name={connector.name}\n                              description={connector.description || ''}\n                              icon={getConnectionIcon(\n                                process.env.PUBLIC_URL,\n                                connector as IConnectionWithIconFile\n                              )}\n                              href={resolvers.create.configureConnector({\n                                connector,\n                              })}\n                            />\n                          </ConnectionsGridCell>\n                        ))\n                    }\n                  </WithLoader>\n                </ConnectionsGrid>\n              }\n              cancelHref={resolvers.connections()}\n            />\n          </>\n        )}\n      </WithConnectors>\n    );\n  }\n}\n","import ConfigurationPage from './ConfigurationPage';\nimport ConnectorsPage from './ConnectorsPage';\nimport ReviewPage from './ReviewPage';\n\nexport const create = {\n  ConfigurationPage,\n  ConnectorsPage,\n  ReviewPage,\n};\n","import { WithConnectionHelpers } from '@syndesis/api';\nimport { AutoForm, IFormDefinition } from '@syndesis/auto-form';\nimport { Connector } from '@syndesis/models';\nimport {\n  ConnectionCreatorLayout,\n  ConnectorConfigurationForm,\n} from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { AppContext } from '../../../../app';\nimport { PageTitle } from '../../../../shared';\nimport { ConnectionCreatorBreadcrumbs } from '../../components';\nimport resolvers from '../../resolvers';\n\nexport interface ISaveForm {\n  name: string;\n  description?: string;\n}\n\nexport interface IReviewPageRouteState {\n  connector: Connector;\n  configuredProperties: { [key: string]: string };\n}\n\nexport default class ReviewPage extends React.Component {\n  public render() {\n    return (\n      <AppContext.Consumer>\n        {({ pushNotification }) => (\n          <WithRouteData<null, IReviewPageRouteState>>\n            {(_, { connector, configuredProperties }, { history }) => (\n              <WithConnectionHelpers>\n                {({ createConnection, saveConnection }) => {\n                  const onSave = async (\n                    { name, description }: ISaveForm,\n                    actions: any\n                  ) => {\n                    try {\n                      const connection = createConnection(\n                        connector,\n                        name,\n                        description || '',\n                        configuredProperties\n                      );\n                      await saveConnection(connection);\n                      actions.setSubmitting(false);\n                      pushNotification(\n                        `<strong>Connection created</strong> Connection <strong>${name}</strong> successfully created`,\n                        'success'\n                      );\n                      history.push(resolvers.connections());\n                    } catch (e) {\n                      // TODO notification or inline message?\n                    }\n                  };\n                  const definition: IFormDefinition = {\n                    name: {\n                      defaultValue: '',\n                      displayName: 'Name',\n                      required: true,\n                      type: 'string',\n                    },\n                    /* tslint:disable-next-line:object-literal-sort-keys */\n                    description: {\n                      defaultValue: '',\n                      displayName: 'Description',\n                      type: 'textarea',\n                    },\n                  };\n                  return (\n                    <AutoForm<ISaveForm>\n                      i18nRequiredProperty={'* Required field'}\n                      definition={definition}\n                      initialValue={{\n                        description: '',\n                        name: '',\n                      }}\n                      onSave={onSave}\n                    >\n                      {({\n                        fields,\n                        handleSubmit,\n                        isSubmitting,\n                        isValid,\n                        submitForm,\n                      }) => (\n                        <ConnectionCreatorLayout\n                          header={<ConnectionCreatorBreadcrumbs step={3} />}\n                          content={\n                            <>\n                              <PageTitle title={'Name connection'} />\n                              <ConnectorConfigurationForm\n                                i18nFormTitle={'Name connection'}\n                                handleSubmit={handleSubmit}\n                              >\n                                {fields}\n                              </ConnectorConfigurationForm>\n                            </>\n                          }\n                          cancelHref={resolvers.connections()}\n                          backHref={resolvers.create.configureConnector({\n                            connector,\n                          })}\n                          onNext={submitForm}\n                          isNextDisabled={!isValid}\n                          isNextLoading={isSubmitting}\n                          isLastStep={true}\n                        />\n                      )}\n                    </AutoForm>\n                  );\n                }}\n              </WithConnectionHelpers>\n            )}\n          </WithRouteData>\n        )}\n      </AppContext.Consumer>\n    );\n  }\n}\n","import { Breadcrumb } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { WithClosedNavigation } from '../../shared';\nimport { create } from './pages';\nimport resolvers from './resolvers';\nimport routes from './routes';\n\nexport default class ConnectionsCreatorApp extends React.Component {\n  public render() {\n    return (\n      <WithClosedNavigation>\n        <Breadcrumb>\n          <Link to={resolvers.connections()}>Connections</Link>\n          <span>Create connection</span>\n        </Breadcrumb>\n        <Switch>\n          <Route\n            path={routes.create.selectConnector}\n            exact={true}\n            component={create.ConnectorsPage}\n          />\n          <Route\n            path={routes.create.configureConnector}\n            exact={true}\n            component={create.ConfigurationPage}\n          />\n          <Route\n            path={routes.create.review}\n            exact={true}\n            component={create.ReviewPage}\n          />\n        </Switch>\n      </WithClosedNavigation>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport ConnectionsCreatorApp from './ConnectionsCreatorApp';\nimport { ConnectionDetailsPage, ConnectionsPage } from './pages';\nimport routes from './routes';\n\nexport class ConnectionsModule extends React.Component {\n  public render() {\n    return (\n      <Switch>\n        <Route path={routes.create.root} component={ConnectionsCreatorApp} />\n        <Route\n          path={routes.connections}\n          exact={true}\n          component={ConnectionsPage}\n        />\n        <Route\n          path={routes.connection.edit}\n          exact={true}\n          children={<ConnectionDetailsPage edit={true} />}\n        />\n        <Route\n          path={routes.connection.details}\n          exact={true}\n          children={<ConnectionDetailsPage edit={false} />}\n        />\n      </Switch>\n    );\n  }\n}\n","import { Container, TabBar, TabBarItem } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport routes from '../routes';\n\n/**\n * A component that displays a nav bar with 2 items:\n *\n * 1. a link to the page that displays a list of API Connectors, and\n * 2. a link to the page that displays a list of extensions.\n *\n * @see [ApiConnectorsPage]{@link ../pages/ApiConnectorsPage}\n * @see [ExtensionsPage]{@link ../pages/ExtensionsPage}\n */\nexport default class CustomizationsNavBar extends React.Component {\n  public render() {\n    return (\n      <Translation ns={['customizations', 'shared']}>\n        {t => (\n          <Container\n            style={{\n              background: '#fff',\n            }}\n          >\n            <TabBar>\n              <TabBarItem\n                label={t('apiConnector.apiConnectorsPageTitle')}\n                to={routes.apiConnectors.list}\n              />\n              <TabBarItem\n                label={t('extension.extensionsPageTitle')}\n                to={routes.extensions.list}\n              />\n            </TabBar>\n          </Container>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { WithApiConnectors } from '@syndesis/api';\nimport { Connector } from '@syndesis/models';\nimport {\n  ApiConnectorListItem,\n  ApiConnectorListSkeleton,\n  ApiConnectorListView,\n  Container,\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n} from '@syndesis/ui';\nimport {\n  optionalIntValue,\n  WithListViewToolbarHelpers,\n  WithLoader,\n} from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport routes from '../routes';\nimport CustomizationsNavBar from '../shared/CustomizationsNavBar';\n\nfunction getFilteredAndSortedApiConnectors(\n  apiConnectors: Connector[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSorted = apiConnectors;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter((api: Connector) =>\n      api.name.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort((thisApi, thatApi) => {\n    if (isSortAscending) {\n      return thisApi.name.localeCompare(thatApi.name);\n    }\n\n    // sort descending\n    return thatApi.name.localeCompare(thisApi.name);\n  });\n\n  return filteredAndSorted;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport default class ApiConnectorsPage extends React.Component {\n  public filterUndefinedId(api: Connector): boolean {\n    return api.id !== undefined;\n  }\n\n  public getUsedByMessage(api: Connector): string {\n    const numUsedBy = optionalIntValue(api.uses);\n\n    if (numUsedBy === 1) {\n      return i18n.t('customizations:usedByOne');\n    }\n\n    return i18n.t('customizations:usedByMulti', { count: numUsedBy });\n  }\n\n  public handleDelete(apiConnectorId: string) {\n    // TODO: implement handleDelete\n    alert('Delete API client connector ' + apiConnectorId);\n  }\n\n  public handleDetails(apiConnectorId: string) {\n    // TODO: implement handleDetails\n    alert('Show details of API client connector ' + apiConnectorId);\n  }\n\n  public render() {\n    return (\n      <WithApiConnectors>\n        {({ data, hasData, error }) => (\n          <WithListViewToolbarHelpers\n            defaultFilterType={filterByName}\n            defaultSortType={sortByName}\n          >\n            {helpers => {\n              const filteredAndSorted = getFilteredAndSortedApiConnectors(\n                data.items,\n                helpers.activeFilters,\n                helpers.currentSortType,\n                helpers.isSortAscending\n              );\n\n              return (\n                <Translation ns={['customizations', 'shared']}>\n                  {t => (\n                    <>\n                      <CustomizationsNavBar />\n                      <Container className=\"pf-u-my-md\">\n                        <h1 className=\"pf-c-title pf-m-xl\">\n                          {t('apiConnector.apiConnectorsPageTitle')}\n                        </h1>\n                        <p\n                          dangerouslySetInnerHTML={{\n                            __html: t(\n                              'apiConnector.apiConnectorsPageDescription'\n                            ),\n                          }}\n                        />\n                      </Container>\n                      <ApiConnectorListView\n                        filterTypes={filterTypes}\n                        sortTypes={sortTypes}\n                        {...this.state}\n                        linkCreateApiConnector={\n                          routes.apiConnectors.create.upload\n                        }\n                        resultsCount={filteredAndSorted.length}\n                        {...helpers}\n                        i18nTitle={''}\n                        i18nDescription={''}\n                        i18nEmptyStateInfo={t('apiConnector.emptyStateInfo')}\n                        i18nEmptyStateTitle={t(\n                          'apiConnector.CreateApiConnector'\n                        )}\n                        i18nLinkCreateApiConnector={t(\n                          'apiConnector.CreateApiConnector'\n                        )}\n                        i18nLinkCreateApiConnectorTip={t(\n                          'apiConnector.createApiConnectorTip'\n                        )}\n                        i18nName={t('shared:Name')}\n                        i18nResultsCount={t('shared:resultsCount', {\n                          count: filteredAndSorted.length,\n                        })}\n                      >\n                        <WithLoader\n                          error={error}\n                          loading={!hasData}\n                          loaderChildren={\n                            <ApiConnectorListSkeleton\n                              width={800}\n                              style={{\n                                backgroundColor: '#FFF',\n                                marginTop: 30,\n                              }}\n                            />\n                          }\n                          errorChildren={<ApiError />}\n                        >\n                          {() =>\n                            filteredAndSorted\n                              .filter((api: Connector) =>\n                                this.filterUndefinedId(api)\n                              )\n                              .map((api: Connector, index: number) => (\n                                <ApiConnectorListItem\n                                  key={index}\n                                  apiConnectorId={api.id as string}\n                                  apiConnectorDescription={api.description}\n                                  apiConnectorIcon={api.icon}\n                                  apiConnectorName={api.name}\n                                  i18nDelete={t('shared:Delete')}\n                                  i18nDetails={t('shared:Details')}\n                                  i18nDetailsTip={t(\n                                    'apiConnector.detailsApiConnectorTip'\n                                  )}\n                                  i18nUsedByMessage={this.getUsedByMessage(api)}\n                                  onDelete={this.handleDelete}\n                                  onDetails={this.handleDetails}\n                                  usedBy={optionalIntValue(api.uses)}\n                                />\n                              ))\n                          }\n                        </WithLoader>\n                      </ApiConnectorListView>\n                    </>\n                  )}\n                </Translation>\n              );\n            }}\n          </WithListViewToolbarHelpers>\n        )}\n      </WithApiConnectors>\n    );\n  }\n}\n","import { WithExtensionIntegrations } from '@syndesis/api';\nimport {\n  ExtensionIntegrationsTable,\n  IExtensionIntegration,\n  Loader,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\n\nexport interface IExtensionIntegrationsProps {\n  extensionId: string;\n  uses: number;\n  onSelectIntegration: (integrationId: string) => void;\n}\n\n/**\n * A component that lists the integrations that uses a specific extension.\n */\nexport default class ExtensionIntegrations extends React.Component<\n  IExtensionIntegrationsProps\n> {\n  public getUsageMessage(uses: number): string {\n    if (uses === 1) {\n      return i18n.t('customizations:usedByOne');\n    }\n\n    return i18n.t('customizations:usedByMulti', {\n      count: uses,\n    });\n  }\n\n  public render() {\n    return (\n      <WithExtensionIntegrations extensionId={this.props.extensionId}>\n        {({ data, hasData, error }) => (\n          <WithLoader\n            error={error}\n            loading={!hasData}\n            loaderChildren={<Loader />}\n            errorChildren={<ApiError />}\n          >\n            {() => (\n              <Translation ns={['customizations', 'shared']}>\n                {t => (\n                  <ExtensionIntegrationsTable\n                    i18nDescription={t('shared:Description')}\n                    i18nName={t('shared:Name')}\n                    i18nUsageMessage={this.getUsageMessage(this.props.uses)}\n                    onSelectIntegration={this.props.onSelectIntegration}\n                    data={data as IExtensionIntegration[]}\n                  />\n                )}\n              </Translation>\n            )}\n          </WithLoader>\n        )}\n      </WithExtensionIntegrations>\n    );\n  }\n}\n","import { WithExtension, WithExtensionHelpers } from '@syndesis/api';\nimport { Action, Extension } from '@syndesis/models';\nimport {\n  Breadcrumb,\n  ExtensionDetail,\n  ExtensionOverview,\n  ExtensionSupports,\n  IAction,\n  Loader,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport resolvers from '../../resolvers';\nimport ExtensionIntegrations from '../shared/ExtensionIntegrations';\n\n/**\n * @param extensionId - the ID of the extension whose details are being shown by this page.\n */\nexport interface IExtensionDetailRouteParams {\n  extensionId: string;\n}\n\n/**\n * @param extension - the extension whose details are being shown by this page. If\n * exists, it must equal to the [extensionId]{@link IExtensionDetailRouteParams#extensionId}.\n * This is used to immediately show the details to the user, without\n * any loader; the backend will be called nonetheless to ensure that we are\n * working with the latest data available. This will be used when navigating from the\n * [ExtensionPage]{@link ExtensionsPage}.\n */\nexport interface IExtensionDetailRouteState {\n  extension?: Extension;\n}\n\nexport default class ExtensionDetailsPage extends React.Component {\n  public getTypeMessage(type: string): string {\n    if ('Steps' === type) {\n      return i18n.t('customizations:extension.StepExtension');\n    }\n\n    if ('Connectors' === type) {\n      return i18n.t('customizations:extension.ConnectorExtension');\n    }\n\n    if ('Libraries' === type) {\n      return i18n.t('customizations:extension.LibraryExtension');\n    }\n\n    return i18n.t('customizations:extension.unknownExtensionType');\n  }\n\n  public render() {\n    return (\n      <WithRouteData<IExtensionDetailRouteParams, IExtensionDetailRouteState>>\n        {({ extensionId }, { extension }, { history }) => {\n          const handleSelectIntegration = (selectedIntegrationId: string) => {\n            // redirect to the integration detail page\n            history.push(\n              resolvers.integrations.integration.details({\n                integrationId: selectedIntegrationId,\n              })\n            );\n          };\n          return (\n            <WithExtensionHelpers>\n              {({ deleteExtension }) => {\n                const handleDelete = async () => {\n                  await deleteExtension(extensionId);\n                  // TODO: post toast notification\n                  // display extensions list page\n                  history.push(resolvers.customizations.extensions.list());\n                };\n                return (\n                  <WithExtension\n                    extensionId={extensionId}\n                    initialValue={extension}\n                  >\n                    {({ data, hasData, error }) => (\n                      <WithLoader\n                        error={error}\n                        loading={!hasData}\n                        loaderChildren={<Loader />}\n                        errorChildren={<ApiError />}\n                      >\n                        {() => (\n                          <Translation ns={['customizations', 'shared']}>\n                            {t => (\n                              <>\n                                <Breadcrumb>\n                                  <Link to={resolvers.dashboard.root()}>\n                                    {t('shared:Home')}\n                                  </Link>\n                                  <Link to={resolvers.customizations.root()}>\n                                    {t('shared:Customizations')}\n                                  </Link>\n                                  <Link\n                                    to={resolvers.customizations.extensions.list()}\n                                  >\n                                    {t('shared:Extensions')}\n                                  </Link>\n                                  <span>\n                                    {t('extension.extensionDetailPageTitle')}\n                                  </span>\n                                </Breadcrumb>\n                                <ExtensionDetail\n                                  extensionName={data.name}\n                                  // TODO: Schema is currently wrong as it has 'uses` as an OptionalInt. Remove cast when schema is fixed.\n                                  extensionUses={data.uses as number}\n                                  i18nCancelText={t('shared:Cancel')}\n                                  i18nDelete={t('shared:Delete')}\n                                  i18nDeleteModalMessage={t(\n                                    'extension.deleteModalMessage',\n                                    { name: data.name }\n                                  )}\n                                  i18nDeleteModalTitle={t(\n                                    'extension.deleteModalTitle'\n                                  )}\n                                  i18nDeleteTip={t(\n                                    'extension.deleteExtensionTip'\n                                  )}\n                                  i18nIdMessage={t('extension.idMessage', {\n                                    id: data.extensionId!,\n                                  })}\n                                  i18nOverviewSectionTitle={t(\n                                    'extension.overviewSectionTitle'\n                                  )}\n                                  i18nSupportsSectionTitle={\n                                    data.extensionType === 'Steps'\n                                      ? t(\n                                          'extension.supportedStepsSectionTitle'\n                                        )\n                                      : data.extensionType === 'Connectors'\n                                      ? t(\n                                          'extension.supportedConnectorsSectionTitle'\n                                        )\n                                      : t(\n                                          'extension.supportedLibrariesSectionTitle'\n                                        )\n                                  }\n                                  i18nUpdate={t('shared:Update')}\n                                  i18nUpdateTip={t(\n                                    'extension.updateExtensionTip'\n                                  )}\n                                  i18nUsageSectionTitle={t(\n                                    'extension.usageSectionTitle'\n                                  )}\n                                  integrationsSection={\n                                    <ExtensionIntegrations\n                                      extensionId={data.id!}\n                                      uses={\n                                        // TODO: Schema is currently wrong as it has 'uses` as an OptionalInt. Remove cast when schema is fixed.\n                                        data.uses as number\n                                      }\n                                      onSelectIntegration={\n                                        handleSelectIntegration\n                                      }\n                                    />\n                                  }\n                                  linkUpdateExtension={resolvers.customizations.extensions.extension.update(\n                                    { extension: data }\n                                  )}\n                                  onDelete={handleDelete}\n                                  overviewSection={\n                                    <ExtensionOverview\n                                      extensionDescription={data.description}\n                                      extensionName={data.name}\n                                      i18nDescription={t('shared:Description')}\n                                      i18nLastUpdate={t('extension.LastUpdate')}\n                                      i18nLastUpdateDate={\n                                        data.lastUpdated\n                                          ? new Date(\n                                              data.lastUpdated\n                                            ).toLocaleString()\n                                          : ''\n                                      }\n                                      i18nName={t('shared:Name')}\n                                      i18nType={t('shared:Type')}\n                                      i18nTypeMessage={this.getTypeMessage(\n                                        data.extensionType\n                                      )}\n                                    />\n                                  }\n                                  supportsSection={\n                                    <ExtensionSupports\n                                      extensionActions={data.actions.map(\n                                        (action: Action) =>\n                                          ({\n                                            description: action.description,\n                                            name: action.name,\n                                          } as IAction)\n                                      )}\n                                    />\n                                  }\n                                />\n                              </>\n                            )}\n                          </Translation>\n                        )}\n                      </WithLoader>\n                    )}\n                  </WithExtension>\n                );\n              }}\n            </WithExtensionHelpers>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { Extension } from '@syndesis/models';\nimport i18n from '../../i18n';\n\n/**\n * Obtains a localized extension type name.\n * @param extension the extension whose type name is being requested\n */\nexport function getExtensionTypeName(extension: Extension) {\n  const type = extension.extensionType;\n\n  if ('Steps' === type) {\n    return i18n.t('customizations:extension.StepExtension');\n  }\n\n  if ('Connectors' === type) {\n    return i18n.t('customizations:extension.ConnectorExtension');\n  }\n\n  if ('Libraries' === type) {\n    return i18n.t('customizations:extension.LibraryExtension');\n  }\n\n  return i18n.t('customizations:extension.unknownExtensionType');\n}\n","import { WithExtensionHelpers } from '@syndesis/api';\nimport { Action, Extension } from '@syndesis/models';\nimport {\n  Breadcrumb,\n  ButtonLink,\n  Container,\n  ExtensionImportCard,\n  ExtensionImportReview,\n  IImportAction,\n  Loader,\n} from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { AppContext } from '../../../app';\nimport i18n from '../../../i18n';\nimport resolvers from '../../resolvers';\nimport { getExtensionTypeName } from '../customizationsUtils';\nimport './ExtensionImportPage.css';\n\nexport interface IExtensionImportRouteProps {\n  extensionId?: string;\n}\n\nexport interface IExtensionImportPageState {\n  /**\n   * `true` if the dropzone should be disabled. Defaults to `false`. When the review component is being\n   * shown, the dropzone is disabled.\n   */\n  disableDropzone: boolean;\n\n  /**\n   * A general, localized message for when a file upload is rejected. This is shown in the DnD dropzone.\n   */\n  dndUploadFailedMessage?: string;\n\n  /**\n   * A general, localized message for when a file upload is accepted. This is shown in the DnD dropzone.\n   */\n  dndUploadSuccessMessage?: string;\n\n  /**\n   * The existing extension being updated or the extension created by processing the uploaded file.\n   */\n  extension?: Extension;\n\n  /**\n   * A localized error message indicating that the jar file uploading could not be processed as an extension.\n   */\n  i18nAlertMessage?: string;\n\n  /**\n   * `true` if the extension *.jar file is being processed by the server. Defaults to `false`.\n   */\n  loading: boolean;\n}\n\nexport default class ExtensionImportPage extends React.Component<\n  {},\n  IExtensionImportPageState\n> {\n  public constructor(props: IExtensionImportRouteProps) {\n    super(props);\n    this.state = { disableDropzone: false, loading: false };\n  }\n\n  /**\n   * Obtains a localized label for the extension actions.\n   */\n  public getActionsLabel(): string {\n    if (this.state.extension) {\n      switch (this.state.extension.extensionType) {\n        case 'Steps':\n          return i18n.t('shared:Steps');\n        default:\n          break;\n      }\n    }\n\n    return i18n.t('shared:Actions');\n  }\n\n  /**\n   * Obtains a localized message describing the action.\n   * @param name the action name\n   * @param description the action description\n   */\n  public getActionText(name: string, description: string): string {\n    return i18n.t('customizations:action', {\n      actionDescription: description,\n      actionName: name,\n    });\n  }\n\n  public render() {\n    return (\n      <AppContext.Consumer>\n        {({ pushNotification }) => {\n          const onDndUploadRejectedHandler = (failedFileName: string) => {\n            const text = i18n.t(\n              'customizations:extension.importUploadFailedAlertMessage',\n              {\n                fileName: failedFileName,\n              }\n            );\n            pushNotification(text, 'error');\n            return text;\n          };\n          return (\n            <WithRouteData<IExtensionImportRouteProps, null>>\n              {({ extensionId }, _, { history }) => (\n                <WithExtensionHelpers>\n                  {({ importExtension, uploadExtension }) => {\n                    const onDndUploadAcceptedHandler = async (\n                      files: File[]\n                    ) => {\n                      try {\n                        // set state before call to backend\n                        this.setState({\n                          ...this.state,\n                          disableDropzone: true,\n                          dndUploadFailedMessage: undefined,\n                          dndUploadSuccessMessage: undefined,\n                          i18nAlertMessage: undefined,\n                          loading: true,\n                        });\n\n                        // make server call to update existing or to create a new extension\n                        const uploaded = extensionId\n                          ? await uploadExtension(files[0], extensionId)\n                          : await uploadExtension(files[0]);\n\n                        pushNotification(\n                          `${uploaded.id} was uploaded`,\n                          'success'\n                        );\n\n                        // set state based on successful upload\n                        this.setState({\n                          ...this.state,\n                          dndUploadSuccessMessage: i18n.t(\n                            'customizations:extension.importUploadSuccessMessage'\n                          ),\n                          extension: uploaded,\n                          loading: false,\n                        });\n                      } catch (e) {\n                        // set state based on failed upload\n                        this.setState({\n                          ...this.state,\n                          disableDropzone: false,\n                          dndUploadFailedMessage: i18n.t(\n                            'customizations:extension.importUploadFailedMessage'\n                          ),\n                          i18nAlertMessage: i18n.t(\n                            'customizations:extension.importInvalidFileMessage'\n                          ),\n                          loading: false,\n                        });\n                      }\n                    };\n                    const handleImport = async (importExtensionId: string) => {\n                      try {\n                        await importExtension(importExtensionId);\n                        history.push(\n                          resolvers.customizations.extensions.list()\n                        );\n                      } catch (e) {\n                        // TODO: post notification\n                      }\n                    };\n                    return (\n                      <Translation ns={['customizations', 'shared']}>\n                        {t => (\n                          <>\n                            <Container className=\"col-sm-11\">\n                              <Breadcrumb>\n                                <Link to={resolvers.dashboard.root()}>\n                                  {t('shared:Home')}\n                                </Link>\n                                <Link to={resolvers.customizations.root()}>\n                                  {t('shared:Customizations')}\n                                </Link>\n                                <Link\n                                  to={resolvers.customizations.extensions.list()}\n                                >\n                                  {t('shared:Extensions')}\n                                </Link>\n                                <span>\n                                  {t('extension.extensionImportPageTitle')}\n                                </span>\n                              </Breadcrumb>\n                            </Container>\n                            <Container\n                              className={\n                                'extension-import-page__actionContainer col-sm-1'\n                              }\n                            >\n                              <ButtonLink\n                                className={'extension-import-page__action'}\n                                href={resolvers.customizations.extensions.list()}\n                                as={'default'}\n                              >\n                                {t('shared:Cancel')}\n                              </ButtonLink>\n                            </Container>\n                            {this.state.loading ? <Loader /> : null}\n                            <ExtensionImportCard\n                              dndDisabled={this.state.disableDropzone}\n                              i18nAlertMessage={this.state.i18nAlertMessage}\n                              i18nDndHelpMessage={t(\n                                'extension.importHelpMessage'\n                              )}\n                              i18nDndInstructions={t(\n                                'extension.importDndInstructions'\n                              )}\n                              i18nDndNoFileSelectedMessage={t(\n                                'extension.importNoFileSelectedMessage'\n                              )}\n                              i18nDndSelectedFileLabel={t(\n                                'extension.importSelectedFileLabel'\n                              )}\n                              i18nDndUploadFailedMessage={\n                                this.state.dndUploadFailedMessage\n                              }\n                              i18nDndUploadSuccessMessage={\n                                this.state.dndUploadSuccessMessage\n                              }\n                              i18nImportInstructions={t(\n                                'extension.importUpdateMessage'\n                              )}\n                              i18nTitle={t('extension.ImportExtension')}\n                              onDndUploadAccepted={onDndUploadAcceptedHandler}\n                              onDndUploadRejected={onDndUploadRejectedHandler}\n                            />\n                            {this.state.extension &&\n                            this.state.extension.id &&\n                            this.state.extension.extensionId ? (\n                              <ExtensionImportReview\n                                actions={this.state.extension.actions.map(\n                                  (action: Action) =>\n                                    ({\n                                      description: action.description,\n                                      name: action.name,\n                                    } as IImportAction)\n                                )}\n                                cancelLink={resolvers.customizations.extensions.list()}\n                                extensionDescription={\n                                  this.state.extension.description\n                                }\n                                extensionId={this.state.extension.extensionId}\n                                extensionName={this.state.extension.name}\n                                extensionUid={this.state.extension.id}\n                                i18nActionsLabel={this.getActionsLabel()}\n                                i18nCancel={i18n.t('shared:Cancel')}\n                                i18nDescriptionLabel={i18n.t(\n                                  'shared:Description'\n                                )}\n                                i18nExtensionTypeMessage={getExtensionTypeName(\n                                  this.state.extension\n                                )}\n                                i18nIdLabel={i18n.t('shared:ID')}\n                                i18nImport={i18n.t(\n                                  'customizations:extension.ImportExtension'\n                                )}\n                                i18nNameLabel={i18n.t('shared:Name')}\n                                i18nTitle={i18n.t(\n                                  'customizations:extension.ImportReview'\n                                )}\n                                i18nTypeLabel={i18n.t('shared:Type')}\n                                i18nActionText={this.getActionText}\n                                onImport={handleImport}\n                              />\n                            ) : (\n                              <Container />\n                            )}\n                          </>\n                        )}\n                      </Translation>\n                    );\n                  }}\n                </WithExtensionHelpers>\n              )}\n            </WithRouteData>\n          );\n        }}\n      </AppContext.Consumer>\n    );\n  }\n}\n","import { WithExtensionHelpers, WithExtensions } from '@syndesis/api';\nimport { Extension } from '@syndesis/models';\nimport {\n  Container,\n  ExtensionListItem,\n  ExtensionListSkeleton,\n  ExtensionListView,\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers, WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport { getExtensionTypeName } from '../customizationsUtils';\nimport resolvers from '../resolvers';\nimport CustomizationsNavBar from '../shared/CustomizationsNavBar';\n\nfunction getFilteredAndSortedExtensions(\n  extensions: Extension[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSorted = extensions;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter((extension: Extension) =>\n      extension.name.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort((thisExtension, thatExtension) => {\n    if (isSortAscending) {\n      return thisExtension.name.localeCompare(thatExtension.name);\n    }\n\n    // sort descending\n    return thatExtension.name.localeCompare(thisExtension.name);\n  });\n\n  return filteredAndSorted;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport default class ExtensionsPage extends React.Component {\n  public filterUndefinedId(extension: Extension): boolean {\n    return extension.id !== undefined;\n  }\n\n  public getUsedByMessage(extension: Extension): string {\n    // TODO: Schema is currently wrong as it has 'uses` as an OptionalInt. Remove cast when schema is fixed.\n    const numUsedBy = extension.uses as number;\n\n    if (numUsedBy === 1) {\n      return i18n.t('customizations:usedByOne');\n    }\n\n    return i18n.t('customizations:usedByMulti', { count: numUsedBy });\n  }\n\n  public render() {\n    return (\n      <WithExtensionHelpers>\n        {({ deleteExtension }) => {\n          const handleDelete = async (extensionId: string) => {\n            await deleteExtension(extensionId);\n            // TODO: post toast notification\n          };\n          return (\n            <WithExtensions>\n              {({ data, hasData, error }) => (\n                <WithListViewToolbarHelpers\n                  defaultFilterType={filterByName}\n                  defaultSortType={sortByName}\n                >\n                  {helpers => {\n                    const filteredAndSorted = getFilteredAndSortedExtensions(\n                      data.items,\n                      helpers.activeFilters,\n                      helpers.currentSortType,\n                      helpers.isSortAscending\n                    );\n\n                    return (\n                      <Translation ns={['customizations', 'shared']}>\n                        {t => (\n                          <>\n                            <CustomizationsNavBar />\n                            <Container className=\"pf-u-my-md\">\n                              <h1 className=\"pf-c-title pf-m-xl\">\n                                {t('extension.extensionsPageTitle')}\n                              </h1>\n                              <p\n                                dangerouslySetInnerHTML={{\n                                  __html: t(\n                                    'extension.extensionsPageDescription'\n                                  ),\n                                }}\n                              />\n                            </Container>\n                            <ExtensionListView\n                              filterTypes={filterTypes}\n                              sortTypes={sortTypes}\n                              linkImportExtension={resolvers.extensions.import()}\n                              resultsCount={filteredAndSorted.length}\n                              {...helpers}\n                              i18nTitle={''}\n                              i18nDescription={''}\n                              i18nEmptyStateInfo={t(\n                                'extension.emptyStateInfoMessage'\n                              )}\n                              i18nEmptyStateTitle={t(\n                                'extension.emptyStateTitle'\n                              )}\n                              i18nLinkImportExtension={t(\n                                'extension.ImportExtension'\n                              )}\n                              i18nLinkImportExtensionTip={t(\n                                'extension.importExtensionTip'\n                              )}\n                              i18nName={t('shared:Name')}\n                              i18nNameFilterPlaceholder={t(\n                                'shared:nameFilterPlaceholder'\n                              )}\n                              i18nResultsCount={t('shared:resultsCount', {\n                                count: filteredAndSorted.length,\n                              })}\n                            >\n                              <WithLoader\n                                error={error}\n                                loading={!hasData}\n                                loaderChildren={\n                                  <ExtensionListSkeleton\n                                    width={800}\n                                    style={{\n                                      backgroundColor: '#FFF',\n                                      marginTop: 30,\n                                    }}\n                                  />\n                                }\n                                errorChildren={<ApiError />}\n                              >\n                                {() =>\n                                  filteredAndSorted\n                                    .filter((extension: Extension) =>\n                                      this.filterUndefinedId(extension)\n                                    )\n                                    .map(\n                                      (extension: Extension, index: number) => (\n                                        <ExtensionListItem\n                                          key={index}\n                                          detailsPageLink={resolvers.extensions.extension.details(\n                                            { extension }\n                                          )}\n                                          extensionDescription={\n                                            extension.description\n                                          }\n                                          extensionIcon={extension.icon}\n                                          extensionId={extension.id!}\n                                          extensionName={extension.name}\n                                          i18nCancelText={t('shared:Cancel')}\n                                          i18nDelete={t('shared:Delete')}\n                                          i18nDeleteModalMessage={t(\n                                            'extension.deleteModalMessage',\n                                            { name: extension.name }\n                                          )}\n                                          i18nDeleteModalTitle={t(\n                                            'extension.deleteModalTitle'\n                                          )}\n                                          i18nDeleteTip={t(\n                                            'extension.deleteExtensionTip'\n                                          )}\n                                          i18nDetails={t('shared:Details')}\n                                          i18nDetailsTip={t(\n                                            'extension.detailsExtensionTip'\n                                          )}\n                                          i18nExtensionType={getExtensionTypeName(\n                                            extension\n                                          )}\n                                          i18nUpdate={t('shared:Update')}\n                                          i18nUpdateTip={t(\n                                            'extension.updateExtensionTip'\n                                          )}\n                                          i18nUsedByMessage={this.getUsedByMessage(\n                                            extension\n                                          )}\n                                          linkUpdateExtension={resolvers.extensions.extension.update(\n                                            { extension }\n                                          )}\n                                          onDelete={handleDelete}\n                                          usedBy={\n                                            // TODO: Schema is currently wrong as it has 'uses` as an OptionalInt. Remove cast when schema is fixed.\n                                            extension.uses as number\n                                          }\n                                        />\n                                      )\n                                    )\n                                }\n                              </WithLoader>\n                            </ExtensionListView>\n                          </>\n                        )}\n                      </Translation>\n                    );\n                  }}\n                </WithListViewToolbarHelpers>\n              )}\n            </WithExtensions>\n          );\n        }}\n      </WithExtensionHelpers>\n    );\n  }\n}\n","import {\n  Connection,\n  ProjectedColumn,\n  RestDataService,\n  SchemaNode,\n  ViewDefinition,\n  ViewEditorState,\n  ViewInfo,\n  VirtualizationPublishingDetails,\n  VirtualizationSourceStatus,\n} from '@syndesis/models';\n\nconst PREVIEW_VDB_NAME = 'PreviewVdb';\nconst SCHEMA_MODEL_SUFFIX = 'schemamodel';\n\nexport enum DvConnectionStatus {\n  ACTIVE = 'ACTIVE',\n  INACTIVE = 'INACTIVE',\n}\n\nexport enum DvConnectionSelection {\n  SELECTED = 'SELECTED',\n  NOTSELECTED = 'NOTSELECTED',\n}\n\n/**\n * Get the name of the preview VDB used for preview queries\n */\nexport function getPreviewVdbName(): string {\n  return PREVIEW_VDB_NAME;\n}\n\n/**\n * Recursively flattens the tree structure of SchemaNodes,\n * into an array of ViewInfos\n * @param viewInfos the array of ViewInfos\n * @param schemaNode the SchemaNode from which the ViewInfo is generated\n * @param nodePath path for current SchemaNode\n * @param selectedViewNames names of views which are selected\n * @param existingViewNames names of views which exist (marked as update)\n */\nexport function generateViewInfos(\n  viewInfos: ViewInfo[],\n  schemaNode: SchemaNode,\n  nodePath: string[],\n  selectedViewNames: string[],\n  existingViewNames: string[]\n): void {\n  if (schemaNode) {\n    // Generate source path from nodePath array\n    const sourcePath: string[] = [];\n    for (const seg of nodePath) {\n      sourcePath.push(seg);\n    }\n\n    // Creates ViewInfo if the SchemaNode is queryable\n    if (schemaNode.queryable === true) {\n      const vwName = schemaNode.connectionName + '_' + schemaNode.name;\n      // Determine whether ViewInfo should be selected\n      const selectedState =\n        selectedViewNames.findIndex(viewName => viewName === vwName) === -1\n          ? false\n          : true;\n      // Deteremine whether ViewInfo is an update\n      const hasExistingView =\n        existingViewNames.findIndex(viewName => viewName === vwName) === -1\n          ? false\n          : true;\n      // Create ViewInfo\n      const view: ViewInfo = {\n        connectionName: schemaNode.connectionName,\n        isUpdate: hasExistingView,\n        nodePath: sourcePath,\n        selected: selectedState,\n        viewName: vwName,\n        viewSourceNode: schemaNode,\n      };\n      viewInfos.push(view);\n    }\n    // Update path for next level\n    sourcePath.push(schemaNode.name);\n    // Process this nodes children\n    if (schemaNode.children && schemaNode.children.length > 0) {\n      for (const childNode of schemaNode.children) {\n        generateViewInfos(\n          viewInfos,\n          childNode,\n          sourcePath,\n          selectedViewNames,\n          existingViewNames\n        );\n      }\n    }\n  }\n}\n\n/**\n * Generates ViewEditorStates for the supplied ViewInfos\n * @param serviceVdbName the name of the virtualization vdb\n * @param viewInfos the array of ViewInfos\n */\nexport function generateViewEditorStates(\n  serviceVdbName: string,\n  viewInfos: ViewInfo[]\n): ViewEditorState[] {\n  const editorStates: ViewEditorState[] = [];\n  for (const viewInfo of viewInfos) {\n    const srcPaths: string[] = [];\n    const path =\n      'connection=' +\n      viewInfo.connectionName +\n      '/' +\n      viewInfo.viewSourceNode.path;\n    srcPaths.push(path);\n\n    // All columns are projected\n    const projCols: ProjectedColumn[] = [];\n    const projCol: ProjectedColumn = {\n      name: 'ALL',\n      selected: true,\n      type: 'ALL',\n    };\n    projCols.push(projCol);\n\n    // View Definition\n    // TODO: need to supply the description here instead of generate\n    const viewDefn: ViewDefinition = {\n      compositions: [],\n      isComplete: true,\n      keng__description: viewInfo.viewName + ' description',\n      projectedColumns: projCols,\n      sourcePaths: srcPaths,\n      viewName: viewInfo.viewName,\n    };\n\n    // ViewEditorState which is supplied to the user profile\n    const editorState: ViewEditorState = {\n      id: serviceVdbName + '.' + viewInfo.viewName,\n      viewDefinition: viewDefn,\n    };\n    editorStates.push(editorState);\n  }\n  return editorStates;\n}\n\n/**\n * Generate array of DvConnections.  Takes the incoming connections and updates the 'options',\n * based on the Virtualization connection status and selection state\n * @param conns the connections\n * @param virtualizationsSourceStatuses the available virtualization sources\n * @param selectedConn name of a selected connection\n */\nexport function generateDvConnections(\n  conns: Connection[],\n  virtualizationsSourceStatuses: VirtualizationSourceStatus[],\n  selectedConn: string\n): Connection[] {\n  const dvConns: Connection[] = [];\n  for (const conn of conns) {\n    let connStatus = DvConnectionStatus.INACTIVE;\n    const virtSrcStatus = virtualizationsSourceStatuses.find(\n      virtStatus => virtStatus.sourceName === conn.name\n    );\n    if (\n      virtSrcStatus &&\n      virtSrcStatus.vdbState === 'ACTIVE' &&\n      virtSrcStatus.schemaState === 'ACTIVE'\n    ) {\n      connStatus = DvConnectionStatus.ACTIVE;\n    }\n\n    let selectionState = DvConnectionSelection.NOTSELECTED;\n    if (conn.name === selectedConn) {\n      selectionState = DvConnectionSelection.SELECTED;\n    }\n    conn.options = { dvStatus: connStatus, dvSelected: selectionState };\n    dvConns.push(conn);\n  }\n  return dvConns;\n}\n\n/**\n * Get the Connection DV status.  DV uses the options on a connection to set status\n * @param connection the connection\n */\nexport function getDvConnectionStatus(conn: Connection): string {\n  let dvState: string = DvConnectionStatus.INACTIVE;\n  if (conn.options && conn.options.dvStatus) {\n    dvState = conn.options.dvStatus;\n  }\n  return dvState;\n}\n\n/**\n * Determine if the Connection is selected with the DV wizard.  DV uses the options on a connection to set selection\n * @param connection the connection\n */\nexport function isDvConnectionSelected(conn: Connection) {\n  let isSelected = false;\n  if (\n    conn.options &&\n    conn.options.dvSelected &&\n    conn.options.dvSelected === DvConnectionSelection.SELECTED\n  ) {\n    isSelected = true;\n  }\n  return isSelected;\n}\n\n/**\n * Get publishing state details for the specified virtualization\n * @param virtualization the RestDataService\n */\nexport function getPublishingDetails(\n  virtualization: RestDataService\n): VirtualizationPublishingDetails {\n  // Determine published state\n  const publishStepDetails: VirtualizationPublishingDetails = {\n    state: virtualization.publishedState,\n    stepNumber: 0,\n    stepText: '',\n    stepTotal: 4,\n  };\n  switch (virtualization.publishedState) {\n    case 'CONFIGURING':\n      publishStepDetails.stepNumber = 1;\n      publishStepDetails.stepText = 'Configuring';\n      break;\n    case 'BUILDING':\n      publishStepDetails.stepNumber = 2;\n      publishStepDetails.stepText = 'Building';\n      break;\n    case 'DEPLOYING':\n      publishStepDetails.stepNumber = 3;\n      publishStepDetails.stepText = 'Deploying';\n      break;\n    case 'RUNNING':\n      publishStepDetails.stepNumber = 4;\n      publishStepDetails.stepText = 'Published';\n      break;\n  }\n  if (virtualization.publishLogUrl) {\n    publishStepDetails.logUrl = virtualization.publishLogUrl;\n  }\n  return publishStepDetails;\n}\n\n/**\n * Generate preview SQL for the specified view definition\n * @param viewDefinition the ViewDefinition\n */\nexport function getPreviewSql(viewDefinition: ViewDefinition): string {\n  // TODO: This assumes a single source view.  Will need to expand capability later\n  const sourcePath = viewDefinition.sourcePaths[0];\n  if (sourcePath) {\n    return 'SELECT * FROM ' + getPreviewTableName(sourcePath) + ';';\n  }\n  return '';\n}\n\n/**\n * Generates the table name for the preview query, given the source path.\n * Example sourcePath: (connection=pgConn/schema=public/table=account)\n * @param sourcePath the path for the view source\n */\nfunction getPreviewTableName(sourcePath: string): string {\n  // Assemble the name, utilizing the schema model suffix\n  return (\n    getConnectionName(sourcePath).toLowerCase() +\n    SCHEMA_MODEL_SUFFIX +\n    '.' +\n    getNodeName(sourcePath)\n  );\n}\n\n/**\n * Get the connection name from the supplied source path.  connection is always the first segment.\n * Example sourcePath: 'connection=pgConn/schema=public/table=account'\n * @param sourcePath the view definition sourcePath\n */\nfunction getConnectionName(sourcePath: string): string {\n  // Connection name is the value of the first segment\n  return sourcePath.split('/')[0].split('=')[1];\n}\n\n/**\n * Get the node name from the supplied source path.\n * Example sourcePath: 'connection=pgConn/schema=public/table=account'\n * @param sourcePath the view definition sourcePath\n */\nfunction getNodeName(sourcePath: string): string {\n  const segments = sourcePath.split('/');\n  // Node name is the value of the last segment\n  return segments[segments.length - 1].split('=')[1];\n}\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\nimport ApiConnectorsPage from './pages/ApiConnectorsPage';\nimport ExtensionDetailsPage from './pages/ExtensionDetailsPage';\nimport ExtensionImportPage from './pages/ExtensionImportPage';\nimport ExtensionsPage from './pages/ExtensionsPage';\nimport routes from './routes';\n\nexport default class CustomizationApp extends React.Component {\n  public render() {\n    return (\n      <Switch>\n        <Redirect\n          path={routes.root}\n          exact={true}\n          to={routes.apiConnectors.list}\n        />\n        <Route\n          path={routes.apiConnectors.list}\n          exact={true}\n          component={ApiConnectorsPage}\n        />\n        <Route\n          path={routes.extensions.list}\n          exact={true}\n          component={ExtensionsPage}\n        />\n        <Route\n          path={routes.extensions.import}\n          exact={true}\n          component={ExtensionImportPage}\n        />\n        // **This route must appear after import page**\n        <Route\n          path={routes.extensions.extension.details}\n          exact={true}\n          component={ExtensionDetailsPage}\n        />\n        <Route\n          path={routes.extensions.extension.update}\n          exact={true}\n          component={ExtensionImportPage}\n        />\n      </Switch>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport CustomizationsApp from './CustomizationsApp';\nimport routes from './routes';\n\nexport class CustomizationsModule extends React.Component {\n  public render() {\n    return (\n      <Switch>\n        <Route path={routes.root} component={CustomizationsApp} />\n      </Switch>\n    );\n  }\n}\n","import { WithRouter } from '@syndesis/utils';\nimport * as React from 'react';\nimport Loadable from 'react-loadable';\nimport { ModuleLoader } from '../../shared';\n\nconst LoadableDashboardPage = Loadable({\n  loader: () => import(/* webpackChunkName: \"Dashboard\" */ './DashboardApp'),\n  loading: ModuleLoader,\n});\n\nexport class DashboardModule extends React.Component {\n  public render() {\n    return (\n      <WithRouter>\n        {({ match }) => <LoadableDashboardPage baseurl={match.url} />}\n      </WithRouter>\n    );\n  }\n}\n","import customizations from './customizations/routes';\nimport dashboard from './dashboard/routes';\nimport data from './data/routes';\nimport integrations from './integrations/routes';\n\nexport default {\n  customizations,\n  dashboard,\n  data,\n  integrations,\n};\n","import { WithVirtualization } from '@syndesis/api';\nimport { Container, Loader } from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { ApiError } from '../../../shared';\n\nexport interface IWithVirtualizationDetailHeaderProps {\n  virtualizationId: string;\n}\n\nexport class HeaderView extends React.Component<\n  IWithVirtualizationDetailHeaderProps\n> {\n  public constructor(props: IWithVirtualizationDetailHeaderProps) {\n    super(props);\n  }\n\n  public render() {\n    return (\n      <WithVirtualization virtualizationId={this.props.virtualizationId}>\n        {({ data, hasData, error }) => (\n          <WithLoader\n            error={error}\n            loading={!hasData}\n            loaderChildren={<Loader />}\n            errorChildren={<ApiError />}\n          >\n            {() => (\n              <Container>\n                <h2>{data.keng__id}</h2>\n                <h3>{data.tko__description}</h3>\n              </Container>\n            )}\n          </WithLoader>\n        )}\n      </WithVirtualization>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport { Container, TabBar, TabBarItem } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport resolvers from '../resolvers';\n\n/**\n * @param virtualization - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationNavBarProps#virtualization}.\n */\n\nexport interface IVirtualizationNavBarProps {\n  virtualization: RestDataService;\n}\n\n/**\n * A component that displays a nav bar with 4 items:\n *\n * 1. a link to the page that displays a list of Views\n * 2. a link to the page that displays relationships\n * 3. a link to the page that displays the SQL Query editor\n * 4. a link to the page that dispays metrics\n *\n */\nexport class VirtualizationNavBar extends React.Component<\n  IVirtualizationNavBarProps\n> {\n  public render() {\n    const virtualization = this.props.virtualization;\n    return (\n      <Translation ns={['data', 'shared']}>\n        {t => (\n          <Container\n            style={{\n              background: '#fff',\n            }}\n          >\n            <TabBar>\n              <TabBarItem\n                label={t('data:virtualization.views')}\n                to={resolvers.virtualizations.views.root({\n                  virtualization,\n                })}\n              />\n              <TabBarItem\n                label={t('data:virtualization.relationship')}\n                to={resolvers.virtualizations.relationship({\n                  virtualization,\n                })}\n              />\n              <TabBarItem\n                label={t('data:virtualization.sqlClient')}\n                to={resolvers.virtualizations.sqlClient({\n                  virtualization,\n                })}\n              />\n              <TabBarItem\n                label={t('data:virtualization.metrics')}\n                to={resolvers.virtualizations.metrics({\n                  virtualization,\n                })}\n              />\n            </TabBar>\n          </Container>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { WizardStep, WizardSteps } from '@syndesis/ui';\nimport * as React from 'react';\nimport i18n from '../../../i18n';\n\nexport interface IViewsCreateStepsProps {\n  /**\n   * The one-based active step number.\n   */\n  step: number;\n}\n\nexport interface IViewsCreateStepsState {\n  /**\n   * Indicates if the user clicked on a step. Used to show\n   * sub-steps when browsing from a mobile device.\n   */\n  active: boolean;\n}\n\n/**\n * A component to display the PatternFly Wizard Steps specific to the integration\n * creator flow.\n * @see [step]{@link IViewsCreateStepsProps#step}\n * @see [subStep]{@link IViewsCreateStepsProps#subStep}\n */\nexport class ViewsCreateSteps extends React.Component<\n  IViewsCreateStepsProps,\n  IViewsCreateStepsState\n> {\n  public state = {\n    active: false,\n  };\n\n  constructor(props: IViewsCreateStepsProps) {\n    super(props);\n    this.toggleActive = this.toggleActive.bind(this);\n  }\n\n  public toggleActive() {\n    this.setState({\n      active: !this.state.active,\n    });\n  }\n\n  public render() {\n    return (\n      <WizardSteps\n        active={this.state.active}\n        mainSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              onClick={this.toggleActive}\n              step={1}\n              title={i18n.t('data:virtualization.importDataSourceWizardStep1')}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              onClick={this.toggleActive}\n              step={2}\n              title={i18n.t('data:virtualization.importDataSourceWizardStep2')}\n            />\n          </>\n        }\n        altSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={1}\n              title={i18n.t('data:virtualization.importDataSourceWizardStep1')}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={2}\n              title={i18n.t('data:virtualization.importDataSourceWizardStep2')}\n            />\n          </>\n        }\n      />\n    );\n  }\n}\n","import { WithVirtualizationConnectionSchema } from '@syndesis/api';\nimport { SchemaNode, ViewInfo } from '@syndesis/models';\nimport {\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n  ViewInfoList,\n  ViewInfoListItem,\n  ViewInfoListSkeleton,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers, WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport { generateViewInfos } from './VirtualizationUtils';\n\nfunction getFilteredAndSortedViewInfos(\n  schemaNodes: SchemaNode[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean,\n  selectedViewNames: string[],\n  existingViewNames: string[]\n) {\n  const viewInfos: ViewInfo[] = [];\n  if (schemaNodes && schemaNodes.length > 0) {\n    generateViewInfos(\n      viewInfos,\n      schemaNodes[0],\n      [],\n      selectedViewNames,\n      existingViewNames\n    );\n  }\n\n  let filteredAndSorted = viewInfos;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter((viewInfo: ViewInfo) =>\n      viewInfo.viewName.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort((thisViewInfo, thatViewInfo) => {\n    if (isSortAscending) {\n      return thisViewInfo.viewName.localeCompare(thatViewInfo.viewName);\n    }\n\n    // sort descending\n    return thatViewInfo.viewName.localeCompare(thisViewInfo.viewName);\n  });\n\n  return filteredAndSorted;\n}\n\nexport interface IViewInfosContentProps {\n  connectionName: string;\n  existingViewNames: string[];\n  onViewSelected: (view: ViewInfo) => void;\n  onViewDeselected: (viewName: string) => void;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport class ViewInfosContent extends React.Component<IViewInfosContentProps> {\n  public displayedViews: ViewInfo[] = [];\n  public selectedViewNames: string[] = [];\n\n  public constructor(props: IViewInfosContentProps) {\n    super(props);\n    this.handleViewSelectionChange = this.handleViewSelectionChange.bind(this);\n  }\n\n  public handleViewSelectionChange(name: string, selected: boolean) {\n    if (selected) {\n      for (const viewInfo of this.displayedViews) {\n        if (viewInfo.viewName === name) {\n          this.props.onViewSelected(viewInfo);\n        }\n      }\n    } else {\n      this.props.onViewDeselected(name);\n    }\n  }\n\n  public render() {\n    return (\n      <WithVirtualizationConnectionSchema\n        connectionId={this.props.connectionName}\n      >\n        {({ data, hasData, error }) => (\n          <WithListViewToolbarHelpers\n            defaultFilterType={filterByName}\n            defaultSortType={sortByName}\n          >\n            {helpers => {\n              const filteredAndSorted = getFilteredAndSortedViewInfos(\n                data,\n                helpers.activeFilters,\n                helpers.currentSortType,\n                helpers.isSortAscending,\n                this.selectedViewNames,\n                this.props.existingViewNames\n              );\n              this.displayedViews = filteredAndSorted;\n\n              return (\n                <Translation ns={['data', 'shared']}>\n                  {t => (\n                    <ViewInfoList\n                      filterTypes={filterTypes}\n                      sortTypes={sortTypes}\n                      {...this.state}\n                      resultsCount={filteredAndSorted.length}\n                      {...helpers}\n                      i18nEmptyStateInfo={t(\n                        'virtualization.emptyStateInfoMessage'\n                      )}\n                      i18nEmptyStateTitle={t('virtualization.emptyStateTitle')}\n                      i18nName={t('shared:Name')}\n                      i18nNameFilterPlaceholder={t(\n                        'shared:nameFilterPlaceholder'\n                      )}\n                      i18nResultsCount={t('shared:resultsCount', {\n                        count: filteredAndSorted.length,\n                      })}\n                    >\n                      <WithLoader\n                        error={error}\n                        loading={!hasData}\n                        loaderChildren={\n                          <ViewInfoListSkeleton\n                            width={800}\n                            style={{\n                              backgroundColor: '#FFF',\n                              marginTop: 30,\n                            }}\n                          />\n                        }\n                        errorChildren={<ApiError />}\n                      >\n                        {() =>\n                          filteredAndSorted.map(\n                            (viewInfo: ViewInfo, index: number) => (\n                              <ViewInfoListItem\n                                key={index}\n                                connectionName={viewInfo.connectionName}\n                                name={viewInfo.viewName}\n                                nodePath={viewInfo.nodePath}\n                                selected={viewInfo.selected}\n                                i18nUpdate={t('shared:Update')}\n                                isUpdateView={viewInfo.isUpdate}\n                                onSelectionChanged={\n                                  this.handleViewSelectionChange\n                                }\n                              />\n                            )\n                          )\n                        }\n                      </WithLoader>\n                    </ViewInfoList>\n                  )}\n                </Translation>\n              );\n            }}\n          </WithListViewToolbarHelpers>\n        )}\n      </WithVirtualizationConnectionSchema>\n    );\n  }\n}\n","import { WithVirtualizationHelpers } from '@syndesis/api';\nimport { AutoForm, IFormDefinition } from '@syndesis/auto-form';\nimport { QueryResults, ViewDefinition } from '@syndesis/models';\nimport { Container } from '@syndesis/ui';\n// tslint:disable-next-line:no-implicit-dependencies\nimport { DropdownButton, MenuItem } from 'patternfly-react';\nimport * as React from 'react';\nimport i18n from '../../../i18n';\nimport { getPreviewSql } from './VirtualizationUtils';\n\nexport interface IViewSqlFormProps {\n  /**\n   * @param views the array of view definitions for the current virtualization\n   */\n  views: ViewDefinition[];\n\n  /**\n   * @param targetVdb the name of the vdb to query\n   */\n  targetVdb: string;\n\n  /**\n   * @param onQueryResultsChanged the parameter function called by the parent component to that returns\n   * the promotes the value of the latest query results\n   */\n  onQueryResultsChanged: (queryResults: QueryResults) => void;\n}\n\nexport interface IViewSqlFormState {\n  queryResults: QueryResults;\n  querySql: string;\n  selectedView?: ViewDefinition;\n}\n\nexport class ViewSqlForm extends React.Component<\n  IViewSqlFormProps,\n  IViewSqlFormState\n> {\n  public static queryResultsEmpty: QueryResults = {\n    columns: [],\n    rows: [],\n  };\n\n  public constructor(props: IViewSqlFormProps) {\n    super(props);\n    this.state = {\n      queryResults: ViewSqlForm.queryResultsEmpty,\n      querySql: '',\n    };\n\n    this.updateQueryResults = this.updateQueryResults.bind(this);\n    this.viewSelected = this.viewSelected.bind(this);\n  }\n\n  public updateQueryResults(results: QueryResults) {\n    {\n      results && results.columns.length > 0\n        ? this.setState({ queryResults: results })\n        : this.setState({ queryResults: ViewSqlForm.queryResultsEmpty });\n    }\n\n    this.props.onQueryResultsChanged(this.state.queryResults);\n  }\n\n  public viewSelected() {\n    const viewSql = getPreviewSql(this.props.views[0]);\n    // TODO: change the defaultValue in the SqlStatement text area\n    // to reflect the newly selected view name (if changed)\n    // Maybe even show a text field showing the selected component depending on the PF4 widget type\n    this.setState({\n      queryResults: ViewSqlForm.queryResultsEmpty,\n      querySql: viewSql,\n      selectedView: this.props.views[0],\n    });\n  }\n\n  public render() {\n    const formDefinition = {\n      rowLimit: {\n        componentProperty: true,\n        defaultValue: '10',\n        deprecated: false,\n        description: i18n.t(\n          'data:virtualization.viewSqlFormRowLimitDescription'\n        ),\n        displayName: i18n.t('data:virtualization.viewSqlFormRowLimit'),\n        javaType: 'java.lang.Integer',\n        kind: 'property',\n        order: 3,\n        required: true,\n        secret: false,\n        type: 'number',\n      },\n      rowOffset: {\n        componentProperty: true,\n        defaultValue: '1',\n        deprecated: false,\n        description: i18n.t(\n          'data:virtualization.viewSqlFormRowOffsetDescription'\n        ),\n        displayName: i18n.t('data:virtualization.viewSqlFormRowOffset'),\n        javaType: 'java.lang.Integer',\n        kind: 'property',\n        order: 4,\n        required: false,\n        secret: false,\n        type: 'number',\n      },\n      sqlStatement: {\n        componentProperty: true,\n        defaultValue: this.state.querySql,\n        deprecated: false,\n        description: i18n.t(\n          'data:virtualization.viewSqlFormSqlStatementDescription'\n        ),\n        displayName: i18n.t('data:virtualization.viewSqlFormSqlStatement'),\n        height: 300,\n        javaType: 'java.lang.String',\n        kind: 'property',\n        order: 2,\n        required: true,\n        secret: false,\n        type: 'textarea',\n      },\n    } as IFormDefinition;\n\n    return (\n      // TODO need to retrieve real user here\n      <WithVirtualizationHelpers username=\"developer\">\n        {({ queryVirtualization }) => {\n          const doSubmit = async (value: any) => {\n            const results: QueryResults = await queryVirtualization(\n              this.props.targetVdb,\n              value.sqlStatement,\n              value.rowLimit,\n              value.rowOffset\n            );\n            this.updateQueryResults(results);\n          };\n          return (\n            // NOTE: This is a fake SELECTOR widget (i.e. dropdown menu) just to show a selector-like UI component\n            // TODO replace DropdownButton with\n            <>\n              <Container>\n                <DropdownButton\n                  bsStyle=\"default\"\n                  title={\n                    // TODO: i18n translations\n                    this.props.views.length > 0\n                      ? 'Select View...'\n                      : 'No Views Defined'\n                  }\n                  id=\"dropdown-example\"\n                  onClick={this.viewSelected}\n                >\n                  {this.props.views.map((view, index) => (\n                    <MenuItem key={index}>{view.viewName}</MenuItem>\n                  ))}\n                </DropdownButton>\n              </Container>\n              <Container>\n                <AutoForm\n                  definition={formDefinition}\n                  initialValue={''}\n                  i18nRequiredProperty={'*Required'}\n                  onSave={doSubmit}\n                >\n                  {({ fields, handleSubmit }) => (\n                    <React.Fragment>\n                      {fields}\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-primary\"\n                        onClick={handleSubmit}\n                      >\n                        Submit\n                      </button>\n                    </React.Fragment>\n                  )}\n                </AutoForm>\n              </Container>\n            </>\n          );\n        }}\n      </WithVirtualizationHelpers>\n    );\n  }\n}\n","import { QueryResults, ViewDefinition } from '@syndesis/models';\nimport { Container, GenericTable } from '@syndesis/ui';\n// tslint:disable-next-line:no-implicit-dependencies\nimport { EmptyState, Grid, Table } from 'patternfly-react';\nimport * as React from 'react';\nimport i18n from '../../../i18n';\nimport { ViewSqlForm } from '../shared/';\n\nexport interface IViewSqlFormAndTableProps {\n  /**\n   * @param views the list of ViewDefinitions for the virtualization\n   */\n  views: ViewDefinition[];\n\n  /**\n   * @param targetVdb the name of the vdb to query\n   */\n  targetVdb: string;\n}\n\nexport interface IViewSqlFormAndTableState {\n  queryResults: QueryResults;\n}\n\nexport class ViewSqlFormAndTable extends React.Component<\n  IViewSqlFormAndTableProps,\n  IViewSqlFormAndTableState\n> {\n  public constructor(props: IViewSqlFormAndTableProps) {\n    super(props);\n    this.state = {\n      queryResults: ViewSqlForm.queryResultsEmpty,\n    };\n\n    this.setQueryResults = this.setQueryResults.bind(this);\n  }\n\n  public setQueryResults(results: QueryResults) {\n    {\n      results && results.columns.length > 0\n        ? this.setState({\n            queryResults: results,\n          })\n        : this.setState({\n            queryResults: ViewSqlForm.queryResultsEmpty,\n          });\n    }\n  }\n\n  public render() {\n    const defaultCellFormat = (value: any) => (\n      <Table.Heading>{value}</Table.Heading>\n    );\n    const defaultHeaderFormat = (value: any) => (\n      <Table.Cell>{value}</Table.Cell>\n    );\n\n    return (\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Container>\n            <ViewSqlForm\n              views={this.props.views}\n              targetVdb={this.props.targetVdb}\n              onQueryResultsChanged={this.setQueryResults}\n            />\n          </Container>\n        </Grid.Col>\n        <Grid.Col md={6}>\n          <Container>\n            {this.state.queryResults.rows.length > 0 ? (\n              <GenericTable\n                columns={this.state.queryResults.columns.map(c => ({\n                  cell: {\n                    formatters: [defaultCellFormat],\n                  },\n                  header: {\n                    formatters: [defaultHeaderFormat],\n                    label: c.label,\n                  },\n                  property: c.name,\n                }))}\n                rows={this.state.queryResults.rows\n                  .map(row => row.row)\n                  .map(row =>\n                    row.reduce(\n                      // tslint:disable-next-line:no-shadowed-variable\n                      (row, r, idx) => ({\n                        ...row,\n                        [this.state.queryResults.columns[idx].name]: r,\n                      }),\n                      {}\n                    )\n                  )}\n                rowKey={\n                  this.state.queryResults.columns.length > 0\n                    ? this.state.queryResults.columns[0].name\n                    : ''\n                }\n                {...this.props}\n              />\n            ) : (\n              <EmptyState>\n                <EmptyState.Title>\n                  {i18n.t(\n                    'data:virtualization.queryResultsTableEmptyStateTitle'\n                  )}\n                </EmptyState.Title>\n                <EmptyState.Info>\n                  {i18n.t(\n                    'data:virtualization.queryResultsTableEmptyStateInfo'\n                  )}\n                </EmptyState.Info>\n              </EmptyState>\n            )}\n          </Container>\n        </Grid.Col>\n      </Grid.Row>\n    );\n  }\n}\n","import { getConnectionIcon } from '@syndesis/api';\nimport { Connection } from '@syndesis/models';\nimport {\n  DvConnectionCard,\n  DvConnectionsGrid,\n  DvConnectionsGridCell,\n  DvConnectionSkeleton,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { ApiError } from '../../../shared';\nimport {\n  getDvConnectionStatus,\n  isDvConnectionSelected,\n} from './VirtualizationUtils';\n\nexport interface IDvConnectionsProps {\n  error: boolean;\n  loading: boolean;\n  connections: Connection[];\n  onConnectionSelectionChanged: (name: string, selected: boolean) => void;\n}\n\nexport class DvConnections extends React.Component<IDvConnectionsProps> {\n  public constructor(props: IDvConnectionsProps) {\n    super(props);\n    this.handleConnSourceSelectionChanged = this.handleConnSourceSelectionChanged.bind(\n      this\n    );\n  }\n\n  public handleConnSourceSelectionChanged(name: string, isSelected: boolean) {\n    this.props.onConnectionSelectionChanged(name, isSelected);\n  }\n\n  public render() {\n    return (\n      <DvConnectionsGrid>\n        <WithLoader\n          error={this.props.error}\n          loading={this.props.loading}\n          loaderChildren={\n            <>\n              {new Array(5).fill(0).map((_, index) => (\n                <DvConnectionsGridCell key={index}>\n                  <DvConnectionSkeleton />\n                </DvConnectionsGridCell>\n              ))}\n            </>\n          }\n          errorChildren={<ApiError />}\n        >\n          {() =>\n            this.props.connections.map((c, index) => (\n              <DvConnectionsGridCell key={index}>\n                <DvConnectionCard\n                  name={c.name}\n                  description={c.description || ''}\n                  dvStatus={getDvConnectionStatus(c)}\n                  icon={getConnectionIcon(process.env.PUBLIC_URL, c)}\n                  selected={isDvConnectionSelected(c)}\n                  onSelectionChanged={this.handleConnSourceSelectionChanged}\n                />\n              </DvConnectionsGridCell>\n            ))\n          }\n        </WithLoader>\n      </DvConnectionsGrid>\n    );\n  }\n}\n","import { WithConnections } from '@syndesis/api';\nimport { Connection, VirtualizationSourceStatus } from '@syndesis/models';\nimport {\n  DvConnectionsListView,\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport resolvers from '../../resolvers';\nimport { DvConnections } from './DvConnections';\nimport { generateDvConnections } from './VirtualizationUtils';\n\nfunction getFilteredAndSortedConnections(\n  connections: Connection[],\n  dvSourceStatuses: VirtualizationSourceStatus[],\n  selectedConn: string,\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  // Connections are adjusted to supply dvStatus and selection\n  let filteredAndSortedConnections = generateDvConnections(\n    connections,\n    dvSourceStatuses,\n    selectedConn\n  );\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSortedConnections = filteredAndSortedConnections.filter(\n      (c: Connection) => c.name.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSortedConnections = filteredAndSortedConnections.sort(\n    (miA, miB) => {\n      const left = isSortAscending ? miA : miB;\n      const right = isSortAscending ? miB : miA;\n      return left.name.localeCompare(right.name);\n    }\n  );\n\n  return filteredAndSortedConnections;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport interface IDvConnectionsWithToolbarProps {\n  error: boolean;\n  loading: boolean;\n  dvSourceStatuses: VirtualizationSourceStatus[];\n  onConnectionSelectionChanged: (name: string, selected: boolean) => void;\n  children?: any;\n}\nexport interface IDvConnectionsWithToolbarState {\n  selectedConnection: any;\n}\n\nexport class DvConnectionsWithToolbar extends React.Component<\n  IDvConnectionsWithToolbarProps,\n  IDvConnectionsWithToolbarState\n> {\n  public constructor(props: IDvConnectionsWithToolbarProps) {\n    super(props);\n    this.state = {\n      selectedConnection: '', // initial selected connection empty\n    };\n    this.handleConnectionSelectionChanged = this.handleConnectionSelectionChanged.bind(\n      this\n    );\n  }\n\n  public handleConnectionSelectionChanged(name: string, selected: boolean) {\n    this.props.onConnectionSelectionChanged(name, selected);\n  }\n\n  public render() {\n    return (\n      <Translation ns={['shared']}>\n        {t => (\n          <WithConnections>\n            {({ data, hasData, error }) => (\n              <WithListViewToolbarHelpers\n                defaultFilterType={filterByName}\n                defaultSortType={sortByName}\n              >\n                {helpers => {\n                  const filteredAndSortedConnections = getFilteredAndSortedConnections(\n                    data.connectionsForDisplay,\n                    this.props.dvSourceStatuses,\n                    this.state.selectedConnection,\n                    helpers.activeFilters,\n                    helpers.currentSortType,\n                    helpers.isSortAscending\n                  );\n\n                  return (\n                    <DvConnectionsListView\n                      linkToConnectionCreate={resolvers.connections.create.selectConnector()}\n                      filterTypes={filterTypes}\n                      sortTypes={sortTypes}\n                      resultsCount={filteredAndSortedConnections.length}\n                      {...helpers}\n                      i18nLinkCreateConnection={t(\n                        'shared:linkCreateConnection'\n                      )}\n                      i18nResultsCount={t('shared:resultsCount', {\n                        count: filteredAndSortedConnections.length,\n                      })}\n                    >\n                      {this.props.children}\n                      <DvConnections\n                        error={this.props.error}\n                        loading={this.props.loading}\n                        connections={filteredAndSortedConnections}\n                        onConnectionSelectionChanged={\n                          this.handleConnectionSelectionChanged\n                        }\n                      />\n                    </DvConnectionsListView>\n                  );\n                }}\n              </WithListViewToolbarHelpers>\n            )}\n          </WithConnections>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { WithVirtualizationConnectionStatuses } from '@syndesis/api';\nimport { RestDataService } from '@syndesis/models';\nimport { ViewsCreateLayout } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport resolvers from '../../../resolvers';\nimport { DvConnectionsWithToolbar, ViewsCreateSteps } from '../../shared';\n\n/**\n * @param virtualizationId - the ID of the virtualization for the wizard\n */\nexport interface ISelectConnectionRouteParams {\n  virtualizationId: string;\n}\n\n/**\n * @param virtualization - the virtualization for the wizard.\n */\nexport interface ISelectConnectionRouteState {\n  virtualization: RestDataService;\n}\n\nexport interface ISelectConnectionPageState {\n  selectedConnection: any;\n}\n\nexport class SelectConnectionPage extends React.Component<\n  {},\n  ISelectConnectionPageState\n> {\n  public constructor(props: {}) {\n    super(props);\n    this.state = {\n      selectedConnection: '', // initial selected connection empty\n    };\n    this.handleConnectionSelectionChanged = this.handleConnectionSelectionChanged.bind(\n      this\n    );\n  }\n\n  public handleConnectionSelectionChanged(name: string, selected: boolean) {\n    const selConn = selected ? name : '';\n    this.setState({\n      selectedConnection: selConn,\n    });\n  }\n\n  public render() {\n    const connectionId: string = this.state.selectedConnection;\n    return (\n      <WithRouteData<ISelectConnectionRouteParams, ISelectConnectionRouteState>>\n        {({ virtualizationId }, { virtualization }, { history }) => (\n          <ViewsCreateLayout\n            header={<ViewsCreateSteps step={1} />}\n            content={\n              <WithVirtualizationConnectionStatuses>\n                {({ data, hasData, error }) => (\n                  <DvConnectionsWithToolbar\n                    error={error}\n                    loading={!hasData}\n                    dvSourceStatuses={data}\n                    onConnectionSelectionChanged={\n                      this.handleConnectionSelectionChanged\n                    }\n                  />\n                )}\n              </WithVirtualizationConnectionStatuses>\n            }\n            cancelHref={resolvers.data.virtualizations.views.root({\n              virtualization,\n            })}\n            nextHref={resolvers.data.virtualizations.views.importSource.selectViews(\n              {\n                connectionId,\n                virtualization,\n              }\n            )}\n            isNextDisabled={this.state.selectedConnection.length < 1}\n            isNextLoading={false}\n            isLastStep={false}\n          />\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { WithViewEditorStates, WithVirtualizationHelpers } from '@syndesis/api';\nimport { RestDataService, ViewEditorState, ViewInfo } from '@syndesis/models';\nimport { ViewsCreateLayout } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport resolvers from '../../../resolvers';\nimport { ViewInfosContent, ViewsCreateSteps } from '../../shared';\nimport { generateViewEditorStates } from '../../shared/VirtualizationUtils';\n\n/**\n * @param virtualizationId - the ID of the virtualization for the wizard.\n */\nexport interface ISelectViewsRouteParams {\n  virtualizationId: string;\n}\n\n/**\n * @param virtualization - the virtualization for the wizard.\n * @param connectionId - the id of the selected connection\n */\nexport interface ISelectViewsRouteState {\n  virtualization: RestDataService;\n  connectionId: string;\n}\n\nexport interface ISelectViewsPageState {\n  hasSelectedTables: boolean;\n}\n\nexport class SelectViewsPage extends React.Component<\n  {},\n  ISelectViewsPageState\n> {\n  public selectedViews: ViewInfo[] = []; // Maintains list of selected views\n\n  public constructor(props: {}) {\n    super(props);\n    this.state = {\n      hasSelectedTables: false, // initialize selected tables state\n    };\n    this.handleAddView = this.handleAddView.bind(this);\n    this.handleRemoveView = this.handleRemoveView.bind(this);\n  }\n\n  public getExistingViewNames(editorStates: ViewEditorState[]) {\n    const viewNames: string[] = [];\n    for (const editorState of editorStates) {\n      viewNames.push(editorState.viewDefinition.viewName);\n    }\n    return viewNames;\n  }\n\n  public handleAddView(view: ViewInfo) {\n    this.selectedViews.push(view);\n    this.setState({\n      hasSelectedTables: this.selectedViews.length > 0,\n    });\n  }\n\n  public handleRemoveView(viewName: string) {\n    const index = this.selectedViews.findIndex(\n      view => view.viewName === viewName\n    );\n\n    if (index !== -1) {\n      this.selectedViews.splice(index, 1);\n    }\n    this.setState({\n      hasSelectedTables: this.selectedViews.length > 0,\n    });\n  }\n\n  public render() {\n    return (\n      <WithRouteData<ISelectViewsRouteParams, ISelectViewsRouteState>>\n        {(\n          { virtualizationId },\n          { virtualization, connectionId },\n          { history }\n        ) => (\n          // TODO need to retrieve real user here\n          <WithVirtualizationHelpers username=\"developer\">\n            {({ refreshVirtualizationViews }) => {\n              const handleCreateViews = async () => {\n                const viewEditorStates = generateViewEditorStates(\n                  virtualization.serviceVdbName,\n                  this.selectedViews\n                );\n                await refreshVirtualizationViews(\n                  virtualization.keng__id,\n                  viewEditorStates\n                );\n                // TODO: post toast notification\n                history.push(\n                  resolvers.data.virtualizations.views.root({ virtualization })\n                );\n              };\n              return (\n                <WithViewEditorStates\n                  idPattern={virtualization.serviceVdbName + '*'}\n                >\n                  {({ data, hasData, error }) => (\n                    <ViewsCreateLayout\n                      header={<ViewsCreateSteps step={2} />}\n                      content={\n                        <ViewInfosContent\n                          connectionName={connectionId}\n                          existingViewNames={this.getExistingViewNames(data)}\n                          onViewSelected={this.handleAddView}\n                          onViewDeselected={this.handleRemoveView}\n                        />\n                      }\n                      cancelHref={resolvers.data.virtualizations.views.root({\n                        virtualization,\n                      })}\n                      backHref={resolvers.data.virtualizations.views.importSource.selectConnection(\n                        { virtualization }\n                      )}\n                      onCreateViews={handleCreateViews}\n                      isNextDisabled={!this.state.hasSelectedTables}\n                      isNextLoading={false}\n                      isLastStep={true}\n                    />\n                  )}\n                </WithViewEditorStates>\n              );\n            }}\n          </WithVirtualizationHelpers>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport { Breadcrumb } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../i18n';\nimport { WithClosedNavigation } from '../../shared';\nimport resolvers from '../resolvers';\nimport routes from '../routes';\nimport { SelectConnectionPage, SelectViewsPage } from './pages/views';\n\nexport interface ICreateViewsAppRouteState {\n  virtualization: RestDataService;\n}\n\nexport default class CreateViewsApp extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<null, ICreateViewsAppRouteState>>\n        {(_, { virtualization }) => (\n          <WithClosedNavigation>\n            <Breadcrumb>\n              <Link to={resolvers.dashboard.root()}>\n                {i18n.t('shared:Home')}\n              </Link>\n              <Link to={resolvers.data.root()}>\n                {i18n.t('shared:DataVirtualizations')}\n              </Link>\n              <Link\n                to={resolvers.data.virtualizations.views.root({\n                  virtualization,\n                })}\n              >\n                {virtualization.keng__id}\n              </Link>\n              <span>{i18n.t('data:virtualization.importDataSource')}</span>\n            </Breadcrumb>\n            <Switch>\n              {/* step 1 */}\n              <Route\n                path={\n                  routes.data.virtualizations.virtualization.views.importSource\n                    .selectConnection\n                }\n                exact={true}\n                component={SelectConnectionPage}\n              />\n              {/* step 2 */}\n              <Route\n                path={\n                  routes.data.virtualizations.virtualization.views.importSource\n                    .selectViews\n                }\n                exact={true}\n                component={SelectViewsPage}\n              />\n            </Switch>\n          </WithClosedNavigation>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { WithVirtualizationHelpers } from '@syndesis/api';\nimport { AutoForm, IFormDefinition } from '@syndesis/auto-form';\nimport { Breadcrumb, Container } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../../i18n';\nimport resolvers from '../../resolvers';\n\nexport class VirtualizationCreatePage extends React.Component {\n  public render() {\n    const formDefinition = {\n      virtDescription: {\n        componentProperty: true,\n        deprecated: false,\n        displayName: i18n.t(\n          'data:virtualization.virtualizationDescriptionDisplay'\n        ),\n        javaType: 'java.lang.String',\n        kind: 'property',\n        order: 1,\n        required: false,\n        secret: false,\n        type: 'textarea',\n      },\n      virtName: {\n        componentProperty: true,\n        deprecated: false,\n        displayName: i18n.t('data:virtualization.virtualizationNameDisplay'),\n        javaType: 'java.lang.String',\n        kind: 'property',\n        order: 0,\n        required: true,\n        secret: false,\n        type: 'string',\n      },\n    } as IFormDefinition;\n    const validate = (v: { virtName: string }) => {\n      const errors: any = {};\n      // TODO Incorporate service call to validate virtualization name\n      if (v.virtName.includes('?')) {\n        errors.virtName = 'Virtualization name contains an illegal character';\n      }\n      return errors;\n    };\n\n    return (\n      <WithRouteData<null, null>>\n        {(p, s, { history }) => (\n          // TODO need to retrieve real user here\n          <WithVirtualizationHelpers username=\"developer\">\n            {({ createVirtualization }) => {\n              const handleCreate = async (value: any) => {\n                const virtualization = await createVirtualization(\n                  value.virtName,\n                  value.virtDescription\n                );\n                // TODO: post toast notification\n                history.push(\n                  resolvers.data.virtualizations.views.root({ virtualization })\n                );\n              };\n              return (\n                <Translation ns={['data', 'shared']}>\n                  {t => (\n                    <>\n                      <Breadcrumb>\n                        <Link to={resolvers.dashboard.root()}>\n                          {t('shared:Home')}\n                        </Link>\n                        <Link to={resolvers.data.root()}>\n                          {t('shared:DataVirtualizations')}\n                        </Link>\n                        <span>\n                          {t(\n                            'data:virtualization.createDataVirtualizationTitle'\n                          )}\n                        </span>\n                      </Breadcrumb>\n                      <Container>\n                        <h1>\n                          {t(\n                            'data:virtualization.createDataVirtualizationTitle'\n                          )}\n                        </h1>\n                        <AutoForm\n                          definition={formDefinition}\n                          initialValue={''}\n                          i18nRequiredProperty={t(\n                            'data:virtualization.requiredPropertyText'\n                          )}\n                          validate={validate}\n                          onSave={handleCreate}\n                        >\n                          {({ fields, handleSubmit }) => (\n                            <React.Fragment>\n                              {fields}\n                              <button\n                                type=\"button\"\n                                className=\"btn btn-primary\"\n                                onClick={handleSubmit}\n                              >\n                                {t('shared:Create')}\n                              </button>\n                            </React.Fragment>\n                          )}\n                        </AutoForm>\n                      </Container>\n                    </>\n                  )}\n                </Translation>\n              );\n            }}\n          </WithVirtualizationHelpers>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport { Breadcrumb, Container } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport resolvers from '../../resolvers';\nimport { HeaderView } from '../shared';\nimport { VirtualizationNavBar } from '../shared';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationMetricsPageRouteParams {\n  virtualizationId: string;\n  virtualization: RestDataService;\n}\n\n/**\n * @param virtualizationId - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationMetricsPageRouteParams#virtualizationId}.\n */\n\nexport interface IVirtualizationMetricsPageRouteState {\n  virtualization: RestDataService;\n}\n\nexport class VirtualizationMetricsPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<\n        IVirtualizationMetricsPageRouteParams,\n        IVirtualizationMetricsPageRouteState\n      >>\n        {({ virtualizationId }, { virtualization }, { history }) => {\n          return (\n            <Translation ns={['data', 'shared']}>\n              {t => (\n                <div>\n                  <Breadcrumb>\n                    <Link to={resolvers.dashboard.root()}>\n                      {t('shared:Home')}\n                    </Link>\n                    <Link to={resolvers.data.root()}>\n                      {t('shared:DataVirtualizations')}\n                    </Link>\n                    <span>\n                      {virtualizationId + ' '}\n                      {t('data:virtualization.metrics')}\n                    </span>\n                  </Breadcrumb>\n                  <HeaderView virtualizationId={virtualizationId} />\n                  <VirtualizationNavBar virtualization={virtualization} />\n                  <Container>\n                    <h3>Metrics are not yet implemented</h3>\n                  </Container>\n                </div>\n              )}\n            </Translation>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport { Breadcrumb, Container } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport resolvers from '../../resolvers';\nimport { HeaderView } from '../shared';\nimport { VirtualizationNavBar } from '../shared';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationRelationshipPageRouteParams {\n  virtualizationId: string;\n  virtualization: RestDataService;\n}\n\n/**\n * @param virtualizationId - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationRelationshipPageRouteState#virtualizationId}.\n */\n\nexport interface IVirtualizationRelationshipPageRouteState {\n  virtualization: RestDataService;\n}\n\nexport class VirtualizationRelationshipPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<\n        IVirtualizationRelationshipPageRouteParams,\n        IVirtualizationRelationshipPageRouteState\n      >>\n        {({ virtualizationId }, { virtualization }, { history }) => {\n          return (\n            <Translation ns={['data', 'shared']}>\n              {t => (\n                <div>\n                  <Breadcrumb>\n                    <Link to={resolvers.dashboard.root()}>\n                      {t('shared:Home')}\n                    </Link>\n                    <Link to={resolvers.data.root()}>\n                      {t('shared:DataVirtualizations')}\n                    </Link>\n                    <span>\n                      {virtualizationId + ' '}\n                      {t('data:virtualization.relationship')}\n                    </span>\n                  </Breadcrumb>\n                  <HeaderView virtualizationId={virtualizationId} />\n                  <VirtualizationNavBar virtualization={virtualization} />\n                  <Container>\n                    <h3>Relationships are not yet implemented</h3>\n                  </Container>\n                </div>\n              )}\n            </Translation>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { WithVirtualizationHelpers, WithVirtualizations } from '@syndesis/api';\nimport { RestDataService } from '@syndesis/models';\nimport {\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n  VirtualizationList,\n  VirtualizationListItem,\n  VirtualizationListSkeleton,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers, WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport resolvers from '../resolvers';\nimport { getPublishingDetails } from '../shared/VirtualizationUtils';\n\nfunction getFilteredAndSortedVirtualizations(\n  virtualizations: RestDataService[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSorted = virtualizations;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter(\n      (virtualization: RestDataService) =>\n        virtualization.keng__id.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort(\n    (thisVirtualization, thatVirtualization) => {\n      if (isSortAscending) {\n        return thisVirtualization.keng__id.localeCompare(\n          thatVirtualization.keng__id\n        );\n      }\n\n      // sort descending\n      return thatVirtualization.keng__id.localeCompare(\n        thisVirtualization.keng__id\n      );\n    }\n  );\n\n  return filteredAndSorted;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport function getVirtualizationsHref(baseUrl: string): string {\n  return `${baseUrl}`;\n}\n\nexport class VirtualizationsPage extends React.Component {\n  public filterUndefinedId(virtualization: RestDataService): boolean {\n    return virtualization.keng__id !== undefined;\n  }\n\n  public handleImportVirt(virtualizationName: string) {\n    // TODO: implement handleImportVirt\n    alert('Import virtualization ' + virtualizationName);\n  }\n\n  public handleExportVirtualization() {\n    // TODO: implement handleExportVirtualization\n    alert('Export virtualization ');\n  }\n\n  public render() {\n    return (\n      <WithVirtualizations>\n        {({ data, hasData, error, read }) => {\n          return (\n            // TODO need to retrieve real username here\n            <WithVirtualizationHelpers username=\"developer\">\n              {({\n                deleteVirtualization,\n                publishVirtualization,\n                unpublishServiceVdb,\n              }) => {\n                const handleDelete = async (virtualizationName: string) => {\n                  await deleteVirtualization(virtualizationName).then(read);\n                  // TODO: post toast notification\n                };\n                const handlePublish = async (virtualizationName: string) => {\n                  await publishVirtualization(virtualizationName);\n                  // TODO: post toast notification\n                };\n                const handleUnpublish = async (serviceVdbName: string) => {\n                  await unpublishServiceVdb(serviceVdbName);\n                  // TODO: post toast notification\n                };\n                return (\n                  <WithListViewToolbarHelpers\n                    defaultFilterType={filterByName}\n                    defaultSortType={sortByName}\n                  >\n                    {helpers => {\n                      const filteredAndSorted = getFilteredAndSortedVirtualizations(\n                        data,\n                        helpers.activeFilters,\n                        helpers.currentSortType,\n                        helpers.isSortAscending\n                      );\n\n                      return (\n                        <Translation ns={['data', 'shared']}>\n                          {t => (\n                            <VirtualizationList\n                              filterTypes={filterTypes}\n                              sortTypes={sortTypes}\n                              resultsCount={filteredAndSorted.length}\n                              {...helpers}\n                              i18nCreateDataVirtualization={t(\n                                'virtualization.createDataVirtualization'\n                              )}\n                              i18nCreateDataVirtualizationTip={t(\n                                'virtualization.createDataVirtualizationTip'\n                              )}\n                              i18nDescription={t(\n                                'virtualization.virtualizationsPageDescription'\n                              )}\n                              i18nEmptyStateInfo={t(\n                                'virtualization.emptyStateInfoMessage'\n                              )}\n                              i18nEmptyStateTitle={t(\n                                'virtualization.emptyStateTitle'\n                              )}\n                              i18nImport={t('shared:Import')}\n                              i18nImportTip={t(\n                                'virtualization.importVirtualizationTip'\n                              )}\n                              i18nLinkCreateVirtualization={t(\n                                'virtualization.createDataVirtualization'\n                              )}\n                              i18nName={t('shared:Name')}\n                              i18nNameFilterPlaceholder={t(\n                                'shared:nameFilterPlaceholder'\n                              )}\n                              i18nResultsCount={t('shared:resultsCount', {\n                                count: filteredAndSorted.length,\n                              })}\n                              i18nTitle={t(\n                                'virtualization.virtualizationsPageTitle'\n                              )}\n                              linkCreateHRef={resolvers.virtualizations.create()}\n                              onImport={this.handleImportVirt}\n                              hasListData={data.length > 0}\n                            >\n                              <WithLoader\n                                error={error}\n                                loading={!hasData}\n                                loaderChildren={\n                                  <VirtualizationListSkeleton\n                                    width={800}\n                                    style={{\n                                      backgroundColor: '#FFF',\n                                      marginTop: 30,\n                                    }}\n                                  />\n                                }\n                                errorChildren={<ApiError />}\n                              >\n                                {() =>\n                                  filteredAndSorted.map(\n                                    (\n                                      virtualization: RestDataService,\n                                      index: number\n                                    ) => {\n                                      const publishingDetails = getPublishingDetails(\n                                        virtualization\n                                      );\n                                      return (\n                                        <VirtualizationListItem\n                                          key={index}\n                                          detailsPageLink={resolvers.virtualizations.views.root(\n                                            { virtualization }\n                                          )}\n                                          virtualizationName={\n                                            virtualization.keng__id\n                                          }\n                                          virtualizationDescription={\n                                            virtualization.tko__description\n                                              ? virtualization.tko__description\n                                              : ''\n                                          }\n                                          serviceVdbName={\n                                            virtualization.serviceVdbName\n                                          }\n                                          i18nCancelText={t('shared:Cancel')}\n                                          i18nDelete={t('shared:Delete')}\n                                          i18nDeleteModalMessage={t(\n                                            'virtualization.deleteModalMessage',\n                                            { name: virtualization.keng__id }\n                                          )}\n                                          i18nDeleteModalTitle={t(\n                                            'virtualization.deleteModalTitle'\n                                          )}\n                                          i18nDraft={t('shared:Draft')}\n                                          i18nEdit={t('shared:Edit')}\n                                          i18nEditTip={t(\n                                            'virtualization.editDataVirtualizationTip'\n                                          )}\n                                          i18nError={t('shared:Error')}\n                                          i18nExport={t('shared:Export')}\n                                          i18nPublish={t('shared:Publish')}\n                                          i18nPublished={t(\n                                            'virtualization.publishedDataVirtualization'\n                                          )}\n                                          i18nUnpublish={t('shared:Unpublish')}\n                                          i18nUnpublishModalMessage={t(\n                                            'virtualization.unpublishModalMessage',\n                                            { name: virtualization.keng__id }\n                                          )}\n                                          i18nUnpublishModalTitle={t(\n                                            'virtualization.unpublishModalTitle'\n                                          )}\n                                          onDelete={handleDelete}\n                                          onExport={\n                                            this.handleExportVirtualization\n                                          }\n                                          onUnpublish={handleUnpublish}\n                                          onPublish={handlePublish}\n                                          currentPublishedState={\n                                            publishingDetails.state\n                                          }\n                                          publishingLogUrl={\n                                            publishingDetails.logUrl\n                                          }\n                                          publishingCurrentStep={\n                                            publishingDetails.stepNumber\n                                          }\n                                          publishingTotalSteps={\n                                            publishingDetails.stepTotal\n                                          }\n                                          publishingStepText={\n                                            publishingDetails.stepText\n                                          }\n                                          i18nPublishInProgress={t(\n                                            'virtualization.publishInProgress'\n                                          )}\n                                          i18nPublishLogUrlText={t(\n                                            'shared:viewLogs'\n                                          )}\n                                        />\n                                      );\n                                    }\n                                  )\n                                }\n                              </WithLoader>\n                            </VirtualizationList>\n                          )}\n                        </Translation>\n                      );\n                    }}\n                  </WithListViewToolbarHelpers>\n                );\n              }}\n            </WithVirtualizationHelpers>\n          );\n        }}\n      </WithVirtualizations>\n    );\n  }\n}\n","import { WithViewEditorStates } from '@syndesis/api';\nimport { RestDataService, ViewEditorState } from '@syndesis/models';\nimport { Breadcrumb } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport resolvers from '../../resolvers';\nimport {\n  HeaderView,\n  ViewSqlFormAndTable,\n  VirtualizationNavBar,\n} from '../shared/';\nimport { getPreviewVdbName } from '../shared/VirtualizationUtils';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationSqlClientPageRouteParams {\n  virtualizationId: string;\n  virtualization: RestDataService;\n}\n\n/**\n * NOTE that this SQL query page requires\n *  1) a list of View children of the Virtualization\n *    - This list will need to be retrieved (already in the VirtualizationViewsPage)\n *  2) Views list needs to populate the View selector DropdownButton's MenuItems\n *  3) If # Views == 0\n *    - Define Example SQL statement and show query results in EMPTY STATE mode\n *  4) if # Views > 0\n *    - Select the first view\n *    - Enter a simple SQL statement like:  \"SELECT * FROM view1\"\n */\n\n/**\n * @param virtualizationId - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationSqlClientPageRouteParams#virtualizationId}.\n */\n\nexport interface IVirtualizationSqlClientPageRouteState {\n  virtualization: RestDataService;\n}\n\nexport class VirtualizationSqlClientPage extends React.Component<\n  IVirtualizationSqlClientPageRouteState\n> {\n  public render() {\n    return (\n      <WithRouteData<\n        IVirtualizationSqlClientPageRouteParams,\n        IVirtualizationSqlClientPageRouteState\n      >>\n        {({ virtualizationId }, { virtualization }, { history }) => (\n          <Translation ns={['data', 'shared']}>\n            {t => (\n              <>\n                <Breadcrumb>\n                  <Link to={resolvers.dashboard.root()}>\n                    {t('shared:Home')}\n                  </Link>\n                  <Link to={resolvers.data.root()}>\n                    {t('shared:DataVirtualizations')}\n                  </Link>\n                  <span>\n                    {virtualizationId + ' '}\n                    {t('data:virtualization.sqlClient')}\n                  </span>\n                </Breadcrumb>\n                <HeaderView virtualizationId={virtualizationId} />\n                <VirtualizationNavBar virtualization={virtualization} />\n                <WithViewEditorStates\n                  idPattern={virtualization.serviceVdbName + '*'}\n                >\n                  {({ data, hasData, error }) => (\n                    <ViewSqlFormAndTable\n                      views={data.map(\n                        (editorState: ViewEditorState) =>\n                          editorState.viewDefinition\n                      )}\n                      targetVdb={getPreviewVdbName()}\n                    />\n                  )}\n                </WithViewEditorStates>\n              </>\n            )}\n          </Translation>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { WithViewEditorStates, WithVirtualizationHelpers } from '@syndesis/api';\nimport { RestDataService } from '@syndesis/models';\nimport { ViewDefinition, ViewEditorState } from '@syndesis/models';\nimport { Breadcrumb } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport { HeaderView } from '../shared';\nimport { VirtualizationNavBar } from '../shared';\n\nimport {\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n  ViewList,\n  ViewListItem,\n  ViewListSkeleton,\n} from '@syndesis/ui';\nimport {\n  WithListViewToolbarHelpers,\n  WithLoader,\n  WithRouteData,\n} from '@syndesis/utils';\nimport { Translation } from 'react-i18next';\nimport resolvers from '../../resolvers';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationViewsPageRouteParams {\n  virtualizationId: string;\n  virtualization: RestDataService;\n}\n\n/**\n * @param virtualizationId - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationViewsPageRouteParams#virtualizationId}.\n */\n\nexport interface IVirtualizationViewsPageRouteState {\n  virtualization: RestDataService;\n}\n\nfunction getFilteredAndSortedViewDefns(\n  viewDefinitions: ViewDefinition[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSorted = viewDefinitions;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter((view: ViewDefinition) =>\n      view.viewName.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort((thisView, thatView) => {\n    if (isSortAscending) {\n      return thisView.viewName.localeCompare(thatView.viewName);\n    }\n\n    // sort descending\n    return thatView.viewName.localeCompare(thisView.viewName);\n  });\n\n  return filteredAndSorted;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport class VirtualizationViewsPage extends React.Component<\n  IVirtualizationViewsPageRouteParams,\n  IVirtualizationViewsPageRouteState\n> {\n  public filterUndefinedId(view: ViewDefinition): boolean {\n    return view.viewName !== undefined;\n  }\n\n  public handleImportView(viewName: string) {\n    // TODO: implement handleImportView\n    alert('Import view ' + viewName);\n  }\n\n  public handleEditView() {\n    // TODO: implement handleEdit\n    alert('Edit view ');\n  }\n\n  public render() {\n    return (\n      <WithRouteData<\n        IVirtualizationViewsPageRouteParams,\n        IVirtualizationViewsPageRouteState\n      >>\n        {({ virtualizationId }, { virtualization }, { history }) => {\n          return (\n            <Translation ns={['data', 'shared']}>\n              {t => (\n                <>\n                  <Breadcrumb>\n                    <Link to={resolvers.dashboard.root()}>\n                      {t('shared:Home')}\n                    </Link>\n                    <Link to={resolvers.data.root()}>\n                      {t('shared:DataVirtualizations')}\n                    </Link>\n                    <span>\n                      {virtualizationId + ' '}\n                      {t('data:virtualization.views')}\n                    </span>\n                  </Breadcrumb>\n                  <HeaderView virtualizationId={virtualizationId} />\n                  <WithViewEditorStates\n                    idPattern={virtualization.serviceVdbName + '*'}\n                  >\n                    {({ data, hasData, error, read }) => {\n                      return (\n                        // TODO need to retrieve real username here\n                        <WithVirtualizationHelpers username=\"developer\">\n                          {({ deleteView }) => {\n                            const handleDeleteView = async (\n                              viewName: string\n                            ) => {\n                              await deleteView(virtualization, viewName).then(\n                                read\n                              );\n                              // TODO: post toast notification\n                            };\n                            return (\n                              <WithListViewToolbarHelpers\n                                defaultFilterType={filterByName}\n                                defaultSortType={sortByName}\n                              >\n                                {helpers => {\n                                  const viewDefns = data.map(\n                                    (editorState: ViewEditorState) =>\n                                      editorState.viewDefinition\n                                  );\n                                  const filteredAndSorted = getFilteredAndSortedViewDefns(\n                                    viewDefns,\n                                    helpers.activeFilters,\n                                    helpers.currentSortType,\n                                    helpers.isSortAscending\n                                  );\n                                  return (\n                                    <>\n                                      <VirtualizationNavBar\n                                        virtualization={virtualization}\n                                      />\n                                      <ViewList\n                                        filterTypes={filterTypes}\n                                        sortTypes={sortTypes}\n                                        {...this.state}\n                                        resultsCount={filteredAndSorted.length}\n                                        {...helpers}\n                                        i18nDescription={t(\n                                          'data:virtualization.viewsPageDescription'\n                                        )}\n                                        i18nEmptyStateInfo={t(\n                                          'data:virtualization.viewEmptyStateInfo'\n                                        )}\n                                        i18nEmptyStateTitle={t(\n                                          'data:virtualization.viewEmptyStateTitle'\n                                        )}\n                                        i18nImportViews={t(\n                                          'data:virtualization.importDataSource'\n                                        )}\n                                        i18nImportViewsTip={t(\n                                          'data:virtualization.importDataSourceTip'\n                                        )}\n                                        i18nCreateView={t(\n                                          'data:virtualization.createView'\n                                        )}\n                                        i18nCreateViewTip={t(\n                                          'data:virtualization.createViewTip'\n                                        )}\n                                        i18nName={t('shared:Name')}\n                                        i18nNameFilterPlaceholder={t(\n                                          'shared:nameFilterPlaceholder'\n                                        )}\n                                        i18nResultsCount={t(\n                                          'shared:resultsCount',\n                                          {\n                                            count: filteredAndSorted.length,\n                                          }\n                                        )}\n                                        // TODO - Point to views.create when available\n                                        linkCreateViewHRef={resolvers.data.virtualizations.create()}\n                                        linkImportViewsHRef={resolvers.data.virtualizations.views.importSource.selectConnection(\n                                          { virtualization }\n                                        )}\n                                        onImportView={this.handleImportView}\n                                        hasListData={data.length > 0}\n                                      />\n                                      <WithLoader\n                                        error={error}\n                                        loading={!hasData}\n                                        loaderChildren={\n                                          <ViewListSkeleton\n                                            width={800}\n                                            style={{\n                                              backgroundColor: '#FFF',\n                                              marginTop: 30,\n                                            }}\n                                          />\n                                        }\n                                        errorChildren={<ApiError />}\n                                      >\n                                        {() =>\n                                          filteredAndSorted\n                                            .filter((view: ViewDefinition) =>\n                                              this.filterUndefinedId(view)\n                                            )\n                                            .map(\n                                              (\n                                                view: ViewDefinition,\n                                                index: number\n                                              ) => (\n                                                <ViewListItem\n                                                  key={index}\n                                                  viewName={view.viewName}\n                                                  viewDescription={\n                                                    view.keng__description\n                                                  }\n                                                  i18nCancelText={t(\n                                                    'shared:Cancel'\n                                                  )}\n                                                  i18nDelete={t(\n                                                    'shared:Delete'\n                                                  )}\n                                                  i18nDeleteModalMessage={t(\n                                                    'virtualization.deleteViewModalMessage',\n                                                    {\n                                                      name: view.viewName,\n                                                    }\n                                                  )}\n                                                  i18nDeleteModalTitle={t(\n                                                    'virtualization.deleteModalTitle'\n                                                  )}\n                                                  i18nEdit={t('shared:Edit')}\n                                                  i18nEditTip={t(\n                                                    'view.editViewTip'\n                                                  )}\n                                                  onDelete={handleDeleteView}\n                                                  onEdit={this.handleEditView}\n                                                />\n                                              )\n                                            )\n                                        }\n                                      </WithLoader>\n                                    </>\n                                  );\n                                }}\n                              </WithListViewToolbarHelpers>\n                            );\n                          }}\n                        </WithVirtualizationHelpers>\n                      );\n                    }}\n                  </WithViewEditorStates>\n                </>\n              )}\n            </Translation>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\nimport CreateViewsApp from './CreateViewsApp';\nimport {\n  VirtualizationCreatePage,\n  VirtualizationMetricsPage,\n  VirtualizationRelationshipPage,\n  VirtualizationsPage,\n  VirtualizationSqlClientPage,\n  VirtualizationViewsPage,\n} from './pages';\nimport routes from './routes';\n\nexport class DataModule extends React.Component {\n  public render() {\n    return (\n      <Switch>\n        <Redirect\n          path={routes.root}\n          exact={true}\n          to={routes.virtualizations.list}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.views.importSource.root}\n          component={CreateViewsApp}\n        />\n        <Route\n          path={routes.virtualizations.create}\n          exact={true}\n          component={VirtualizationCreatePage}\n        />\n        <Route\n          path={routes.virtualizations.list}\n          exact={true}\n          component={VirtualizationsPage}\n        />\n        <Redirect\n          path={routes.virtualizations.virtualization.root}\n          exact={true}\n          to={routes.virtualizations.virtualization.views.root}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.views.root}\n          exact={true}\n          component={VirtualizationViewsPage}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.relationship}\n          exact={true}\n          component={VirtualizationRelationshipPage}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.sqlClient}\n          exact={true}\n          component={VirtualizationSqlClientPage}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.metrics}\n          exact={true}\n          component={VirtualizationMetricsPage}\n        />\n      </Switch>\n    );\n  }\n}\n","import { getSteps } from '@syndesis/api';\nimport { Step } from '@syndesis/models';\nimport { Container, IntegrationEditorLayout } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { PageTitle } from '../../../../shared';\nimport { IntegrationEditorStepAdder } from '../IntegrationEditorStepAdder';\nimport { IBaseRouteParams, IBaseRouteState } from './interfaces';\n\nexport interface IAddStepPageProps {\n  cancelHref: (p: IBaseRouteParams, s: IBaseRouteState) => H.LocationDescriptor;\n  getEditAddStepHref: (\n    position: number,\n    p: IBaseRouteParams,\n    s: IBaseRouteState\n  ) => H.LocationDescriptor;\n  getEditConfigureStepHrefCallback: (\n    stepIdx: number,\n    step: Step,\n    p: IBaseRouteParams,\n    s: IBaseRouteState\n  ) => H.LocationDescriptor;\n  header: React.ReactNode;\n  nextHref: (p: IBaseRouteParams, s: IBaseRouteState) => H.LocationDescriptor;\n}\n\n/**\n * This page shows the steps of an existing integration.\n *\n * This component expects a [state]{@link IBaseRouteState} to be properly set in\n * the route object.\n *\n * **Warning:** this component will throw an exception if the route state is\n * undefined.\n *\n * @todo make this page shareable by making the [integration]{@link IBaseRouteState#integration}\n * optinal and adding a WithIntegration component to retrieve the integration\n * from the backend\n */\nexport class AddStepPage extends React.Component<IAddStepPageProps> {\n  public render() {\n    return (\n      <WithRouteData<IBaseRouteParams, IBaseRouteState>>\n        {({ flowId }, { integration }) => (\n          <IntegrationEditorLayout\n            header={this.props.header}\n            content={\n              <>\n                <PageTitle title={'Save or add step'} />\n                <Container>\n                  <h1>Add to Integration</h1>\n                  <p>\n                    You can continue adding steps and connections to your\n                    integration as well.\n                  </p>\n                  <IntegrationEditorStepAdder\n                    steps={getSteps(integration, flowId)}\n                    addStepHref={position =>\n                      this.props.getEditAddStepHref(\n                        position,\n                        { flowId },\n                        { integration }\n                      )\n                    }\n                    configureStepHref={(stepIdx: number, step: Step) =>\n                      this.props.getEditConfigureStepHrefCallback(\n                        stepIdx,\n                        step,\n                        { flowId },\n                        { integration }\n                      )\n                    }\n                  />\n                </Container>\n              </>\n            }\n            cancelHref={this.props.cancelHref({ flowId }, { integration })}\n            nextHref={this.props.nextHref({ flowId }, { integration })}\n          />\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { Integration } from '@syndesis/models';\nimport { Container, TabBar, TabBarItem } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport resolvers from '../resolvers';\n\n/**\n * @param integration - the integration being displayed. If it\n * exists, it must equal to the [integrationId]{@link IIntegrationDetailNavBarProps#integration}.\n */\nexport interface IIntegrationDetailNavBarProps {\n  integration: Integration;\n}\n\n/**\n * A component that displays a nav bar with 3 items, only showing 1 for now:\n *\n * 1. a link to the page that displays the integration with the Details tab enabled,\n * 2. a link to the page that displays the integration with the Activity tab enabled, and\n * 3. a link to the page that displays the integration with the Metrics tab enabled.\n *\n *\n * @see [DetailsPage]{@link ../pages/detail/DetailsPage}\n * @see [ActivityPage]{@link ../pages/detail/ActivityPage}\n * @see [MetricsPage]{@link ../pages/detail/MetricsPage}\n */\nexport class IntegrationDetailNavBar extends React.Component<\n  IIntegrationDetailNavBarProps\n> {\n  public render() {\n    const integration = this.props.integration;\n    return (\n      <Translation ns={['integration', 'shared']}>\n        {t => (\n          <Container\n            style={{\n              background: '#fff',\n            }}\n          >\n            <TabBar>\n              <TabBarItem\n                label={'Details'}\n                to={resolvers.integration.details({\n                  integrationId: integration.id!,\n                })}\n              />\n              <TabBarItem\n                label={'Activity'}\n                to={resolvers.integration.activity({\n                  integration,\n                })}\n              />\n              <TabBarItem\n                label={'Metrics'}\n                to={resolvers.integration.metrics({\n                  integration,\n                })}\n              />\n            </TabBar>\n          </Container>\n        )}\n      </Translation>\n    );\n  }\n}\n","import {\n  getActionById,\n  getActionDescriptor,\n  getActionStep,\n  getActionStepDefinition,\n  getActionSteps,\n  getConnectionConnector,\n  getConnectorActions,\n} from '@syndesis/api';\nimport { AutoForm } from '@syndesis/auto-form';\nimport { Action, ConnectionOverview } from '@syndesis/models';\nimport {\n  IntegrationEditorForm,\n  IntegrationEditorNothingToConfigure,\n} from '@syndesis/ui';\nimport { toFormDefinition } from '@syndesis/utils';\nimport * as React from 'react';\n\nexport interface IWithConfigurationFormChildrenProps {\n  /**\n   * the form (embedded in the right UI elements)\n   */\n  form: JSX.Element;\n  /**\n   * true if the form contains valid values. Can be used to enable/disable the\n   * submit button.\n   */\n  isValid: boolean;\n  /**\n   * true if the form is being submitted. Can be used to enable/disable the\n   * submit button.\n   */\n  isSubmitting: boolean;\n  /**\n   * the callback to fire to submit the form.\n   */\n  submitForm(): any;\n}\n\nexport interface IOnUpdatedIntegrationProps {\n  /**\n   * the action object that has been configured.\n   */\n  action: Action;\n  /**\n   * true if the configuration is not complete because there are other steps,\n   * false otherwise.\n   * If true the form should be re-rendered with an incremented\n   * [configurationStep]{@link IWithConfigurationFormProps#configurationStep}.\n   */\n  moreConfigurationSteps: boolean;\n  /**\n   * the configured values.\n   */\n  values: { [key: string]: string } | null;\n}\n\nexport interface IWithConfigurationFormProps {\n  /**\n   * the connection object that contains the action with the provided\n   * [actionId]{@link IWithConfigurationFormProps#actionId}. Used to retrieve\n   * the form definition.\n   */\n  connection: ConnectionOverview;\n  /**\n   * the ID of the action that needs to be configured.\n   */\n  actionId: string;\n  /**\n   * for actions whose configuration must be performed in multiple steps,\n   * indicates the current step.\n   */\n  configurationStep: number;\n  /**\n   * the values to assign to the form once rendered. These can come either from\n   * an existing integration or from the [onUpdatedIntegration]{@link IWithConfigurationFormProps#onUpdatedIntegration}\n   * callback.\n   */\n  initialValue?: { [key: string]: string };\n\n  /**\n   * the render prop that will receive the ready-to-be-rendered form and some\n   * helpers.\n   *\n   * @see [form]{@link IWithConfigurationFormChildrenProps#form}\n   * @see [isValid]{@link IWithConfigurationFormChildrenProps#isValid}\n   * @see [isSubmitting]{@link IWithConfigurationFormChildrenProps#isSubmitting}\n   * @see [onSubmit]{@link IWithConfigurationFormChildrenProps#submitForm}\n   */\n  children(props: IWithConfigurationFormChildrenProps): any;\n\n  /**\n   * the callback that is fired after the form submit with valid values.\n   *\n   * @see [action]{@link IOnUpdatedIntegrationProps#action}\n   * @see [moreConfigurationSteps]{@link IOnUpdatedIntegrationProps#moreConfigurationSteps}\n   * @see [values]{@link IOnUpdatedIntegrationProps#values}\n   */\n  onUpdatedIntegration(props: IOnUpdatedIntegrationProps): Promise<void>;\n}\n\n/**\n * A component to generate a configuration form for a given action and values.\n *\n * @see [action]{@link IWithConfigurationFormProps#action}\n * @see [moreConfigurationSteps]{@link IWithConfigurationFormProps#moreConfigurationSteps}\n * @see [values]{@link IWithConfigurationFormProps#values}\n */\nexport class WithConfigurationForm extends React.Component<\n  IWithConfigurationFormProps\n> {\n  public static defaultProps = {\n    initialValue: {},\n  };\n\n  constructor(props: IWithConfigurationFormProps) {\n    super(props);\n  }\n\n  public renderConfigurationForm(action: Action): JSX.Element | null {\n    try {\n      const descriptor = getActionDescriptor(action);\n      const steps = getActionSteps(descriptor);\n      const step = getActionStep(steps, this.props.configurationStep);\n      const definition = getActionStepDefinition(step);\n      const moreConfigurationSteps =\n        this.props.configurationStep < steps.length - 1;\n      const onSave = async (\n        values: { [key: string]: string },\n        actions: any\n      ): Promise<void> => {\n        await this.props.onUpdatedIntegration({\n          action,\n          moreConfigurationSteps,\n          values,\n        });\n        actions.setSubmitting(false);\n      };\n      return (\n        <AutoForm<{ [key: string]: string }>\n          i18nRequiredProperty={'* Required field'}\n          definition={toFormDefinition(definition)}\n          initialValue={this.props.initialValue!}\n          onSave={onSave}\n          key={this.props.configurationStep}\n        >\n          {({ fields, handleSubmit, isSubmitting, isValid, submitForm }) =>\n            this.props.children({\n              form: (\n                <IntegrationEditorForm\n                  i18nTitle={'Configure action'}\n                  i18nSubtitle={\n                    'Fill in the required information for the selected action.'\n                  }\n                  i18nFormTitle={`${action.name} - ${action.description}`}\n                  handleSubmit={handleSubmit}\n                >\n                  {fields}\n                </IntegrationEditorForm>\n              ),\n              isSubmitting,\n              isValid,\n              submitForm,\n            })\n          }\n        </AutoForm>\n      );\n    } catch (e) {\n      return null;\n    }\n  }\n\n  public renderNoPropertiesInfo(action: Action) {\n    const submitForm = () => {\n      this.props.onUpdatedIntegration({\n        action,\n        moreConfigurationSteps: false,\n        values: null,\n      });\n    };\n    return this.props.children({\n      form: (\n        <IntegrationEditorNothingToConfigure\n          i18nTitle={'Configure action'}\n          i18nSubtitle={\n            'Fill in the required information for the selected action.'\n          }\n          i18nAlert={'There are no properties to configure for this action.'}\n        />\n      ),\n      isSubmitting: false,\n      isValid: true,\n      submitForm,\n    });\n  }\n\n  public render() {\n    const action = getActionById(\n      getConnectorActions(getConnectionConnector(this.props.connection)),\n      this.props.actionId\n    );\n    return (\n      this.renderConfigurationForm(action) ||\n      this.renderNoPropertiesInfo(action)\n    );\n  }\n}\n","import { getSteps, WithIntegrationHelpers } from '@syndesis/api';\nimport { Connection, Integration, Step } from '@syndesis/models';\nimport { IntegrationEditorLayout } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { PageTitle } from '../../../../../shared';\nimport {\n  IOnUpdatedIntegrationProps,\n  WithConfigurationForm,\n} from '../../../shared';\nimport {\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState,\n} from '../interfaces';\n\nexport interface IConfigureActionPageProps {\n  backHref: (\n    p: IConfigureActionRouteParams,\n    s: IConfigureActionRouteState\n  ) => H.LocationDescriptor;\n  cancelHref: (\n    p: IConfigureActionRouteParams,\n    s: IConfigureActionRouteState\n  ) => H.LocationDescriptor;\n  header: React.ReactNode;\n  mode: 'adding' | 'editing';\n  nextStepHref: (\n    p: IConfigureActionRouteParams,\n    s: IConfigureActionRouteState\n  ) => H.LocationDescriptorObject;\n  sidebar: (props: {\n    connection: Connection;\n    steps: Step[];\n    activeIndex: number;\n  }) => React.ReactNode;\n  postConfigureHref: (\n    integration: Integration,\n    p: IConfigureActionRouteParams,\n    s: IConfigureActionRouteState\n  ) => H.LocationDescriptorObject;\n}\n\n/**\n * This page shows the configuration form for a given action.\n *\n * Submitting the form will update an *existing* integration step in\n * the [position specified in the params]{@link IConfigureActionRouteParams#position}\n * of the first flow, set up as specified by the form values.\n *\n * This component expects some [url params]{@link IConfigureActionRouteParams}\n * and [state]{@link IConfigureActionRouteState} to be properly set in\n * the route object.\n *\n * **Warning:** this component will throw an exception if the route state is\n * undefined.\n */\nexport class ConfigureActionPage extends React.Component<\n  IConfigureActionPageProps\n> {\n  public render() {\n    return (\n      <WithIntegrationHelpers>\n        {({ addConnection, updateConnection }) => (\n          <WithRouteData<\n            IConfigureActionRouteParams,\n            IConfigureActionRouteState\n          >>\n            {(\n              { actionId, flowId, step = '0', position },\n              {\n                configuredProperties,\n                connection,\n                integration,\n                updatedIntegration,\n              },\n              { history }\n            ) => {\n              const stepAsNumber = parseInt(step, 10);\n              const positionAsNumber = parseInt(position, 10);\n              const onUpdatedIntegration = async ({\n                action,\n                moreConfigurationSteps,\n                values,\n              }: IOnUpdatedIntegrationProps) => {\n                updatedIntegration = await (this.props.mode === 'adding' &&\n                  stepAsNumber === 0\n                  ? addConnection\n                  : updateConnection)(\n                  updatedIntegration || integration,\n                  connection,\n                  action,\n                  flowId,\n                  positionAsNumber,\n                  values\n                );\n                if (moreConfigurationSteps) {\n                  history.push(\n                    this.props.nextStepHref(\n                      {\n                        actionId,\n                        flowId,\n                        position,\n                        step: `${stepAsNumber + 1}`,\n                      },\n                      {\n                        configuredProperties,\n                        connection,\n                        integration,\n                        updatedIntegration,\n                      }\n                    )\n                  );\n                } else {\n                  history.push(\n                    this.props.postConfigureHref(\n                      updatedIntegration,\n                      { actionId, flowId, step, position },\n                      {\n                        configuredProperties,\n                        connection,\n                        integration,\n                        updatedIntegration,\n                      }\n                    )\n                  );\n                }\n              };\n\n              return (\n                <WithConfigurationForm\n                  connection={connection}\n                  actionId={actionId}\n                  configurationStep={stepAsNumber}\n                  initialValue={configuredProperties}\n                  onUpdatedIntegration={onUpdatedIntegration}\n                >\n                  {({ form, submitForm, isSubmitting }) => (\n                    <>\n                      <PageTitle title={'Configure the action'} />\n                      <IntegrationEditorLayout\n                        header={this.props.header}\n                        sidebar={this.props.sidebar({\n                          activeIndex: positionAsNumber,\n                          connection,\n                          steps: getSteps(\n                            updatedIntegration || integration,\n                            flowId\n                          ),\n                        })}\n                        content={form}\n                        backHref={this.props.backHref(\n                          { actionId, flowId, step, position },\n                          {\n                            configuredProperties,\n                            connection,\n                            integration,\n                            updatedIntegration,\n                          }\n                        )}\n                        cancelHref={this.props.cancelHref(\n                          { actionId, flowId, step, position },\n                          {\n                            configuredProperties,\n                            connection,\n                            integration,\n                            updatedIntegration,\n                          }\n                        )}\n                        onNext={submitForm}\n                        isNextLoading={isSubmitting}\n                      />\n                    </>\n                  )}\n                </WithConfigurationForm>\n              );\n            }}\n          </WithRouteData>\n        )}\n      </WithIntegrationHelpers>\n    );\n  }\n}\n","import { getSteps, WithConnection } from '@syndesis/api';\nimport { IConnectionWithIconFile, Step } from '@syndesis/models';\nimport {\n  ButtonLink,\n  IntegrationEditorActionsListItem,\n  IntegrationEditorChooseAction,\n  IntegrationEditorLayout,\n  Loader,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouteData } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { ApiError, PageTitle } from '../../../../../shared';\nimport {\n  ISelectActionRouteParams,\n  ISelectActionRouteState,\n} from '../interfaces';\n\nexport interface ISelectActionPageProps {\n  backHref?: (\n    p: ISelectActionRouteParams,\n    s: ISelectActionRouteState\n  ) => H.LocationDescriptor;\n  cancelHref: (\n    p: ISelectActionRouteParams,\n    s: ISelectActionRouteState\n  ) => H.LocationDescriptor;\n  header: React.ReactNode;\n  sidebar: (props: {\n    steps: Step[];\n    activeIndex: number;\n    connection: IConnectionWithIconFile;\n  }) => React.ReactNode;\n  selectHref: (\n    actionId: string,\n    p: ISelectActionRouteParams,\n    s: ISelectActionRouteState\n  ) => H.LocationDescriptor;\n}\n\n/**\n * This page shows the list of actions of a connection containing either a\n * **to** or **from pattern, depending on the specified [position]{@link ISelectActionRouteParams#position}.\n *\n * This component expects some [params]{@link ISelectActionRouteParams} and\n * [state]{@link ISelectActionRouteState} to be properly set in the route\n * object.\n *\n * **Warning:** this component will throw an exception if the route state is\n * undefined.\n */\nexport class SelectActionPage extends React.Component<ISelectActionPageProps> {\n  public render() {\n    return (\n      <WithRouteData<ISelectActionRouteParams, ISelectActionRouteState>>\n        {({ connectionId, flowId, position }, { connection, integration }) => {\n          const positionAsNumber = parseInt(position, 10);\n          return (\n            <WithConnection id={connectionId} initialValue={connection}>\n              {({ data, hasData, error }) => (\n                <WithLoader\n                  error={error}\n                  loading={!hasData}\n                  loaderChildren={<Loader />}\n                  errorChildren={<ApiError />}\n                >\n                  {() => (\n                    <>\n                      <PageTitle title={'Choose an action'} />\n                      <IntegrationEditorLayout\n                        header={this.props.header}\n                        sidebar={this.props.sidebar({\n                          activeIndex: positionAsNumber,\n                          connection: connection as IConnectionWithIconFile,\n                          steps: getSteps(integration, flowId),\n                        })}\n                        content={\n                          <IntegrationEditorChooseAction\n                            i18nTitle={`${connection.name} - Choose Action`}\n                            i18nSubtitle={\n                              'Choose an action for the selected connectionName.'\n                            }\n                          >\n                            {(positionAsNumber > 0\n                              ? data.actionsWithTo\n                              : data.actionsWithFrom\n                            )\n                              .sort((a, b) => a.name.localeCompare(b.name))\n                              .map((a, idx) => (\n                                <IntegrationEditorActionsListItem\n                                  key={idx}\n                                  integrationName={a.name}\n                                  integrationDescription={\n                                    a.description || 'No description available.'\n                                  }\n                                  actions={\n                                    <ButtonLink\n                                      href={this.props.selectHref(\n                                        a.id!,\n                                        { connectionId, flowId, position },\n                                        { connection, integration }\n                                      )}\n                                    >\n                                      Select\n                                    </ButtonLink>\n                                  }\n                                />\n                              ))}\n                          </IntegrationEditorChooseAction>\n                        }\n                        backHref={\n                          this.props.backHref\n                            ? this.props.backHref(\n                                { connectionId, flowId, position },\n                                { connection, integration }\n                              )\n                            : undefined\n                        }\n                        cancelHref={this.props.cancelHref(\n                          { connectionId, flowId, position },\n                          { connection, integration }\n                        )}\n                      />\n                    </>\n                  )}\n                </WithLoader>\n              )}\n            </WithConnection>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { setIntegrationName, WithIntegrationHelpers } from '@syndesis/api';\nimport { AutoForm, IFormDefinition } from '@syndesis/auto-form';\nimport { Integration } from '@syndesis/models';\nimport { IntegrationEditorForm, IntegrationEditorLayout } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { PageTitle } from '../../../../shared';\nimport {\n  ISaveIntegrationForm,\n  ISaveIntegrationRouteParams,\n  ISaveIntegrationRouteState,\n} from './interfaces';\n\nexport interface ISaveIntegrationPageProps {\n  backHref: (\n    p: ISaveIntegrationRouteParams,\n    s: ISaveIntegrationRouteState\n  ) => H.LocationDescriptor;\n  cancelHref: (\n    p: ISaveIntegrationRouteParams,\n    s: ISaveIntegrationRouteState\n  ) => H.LocationDescriptor;\n  header: React.ReactNode;\n  postSaveHref: (i: Integration) => H.LocationDescriptorObject;\n}\n\n/**\n * This page asks for the details of the integration, and saves it.\n *\n * This component expects a [state]{@link ISaveIntegrationRouteState} to be\n * properly set in the route object.\n *\n * **Warning:** this component will throw an exception if the route state is\n * undefined.\n *\n * @todo toast notifications.\n * @todo redirect to the integration detail page once available.\n */\nexport class SaveIntegrationPage extends React.Component<\n  ISaveIntegrationPageProps\n> {\n  public render() {\n    return (\n      <WithRouteData<ISaveIntegrationRouteParams, ISaveIntegrationRouteState>>\n        {({ flowId }, { integration }, { history }) => (\n          <WithIntegrationHelpers>\n            {({ saveIntegration }) => {\n              const onSave = async (\n                { name, description }: ISaveIntegrationForm,\n                actions: any\n              ) => {\n                const updatedIntegration = setIntegrationName(\n                  integration,\n                  name\n                );\n                // TODO: set the description\n                await saveIntegration(updatedIntegration);\n                actions.setSubmitting(false);\n                // TODO: toast notification\n                history.push(this.props.postSaveHref(updatedIntegration));\n              };\n              const definition: IFormDefinition = {\n                name: {\n                  defaultValue: '',\n                  displayName: 'Name',\n                  order: 0,\n                  required: true,\n                  type: 'string',\n                },\n                // tslint:disable-next-line\n                description: {\n                  defaultValue: '',\n                  displayName: 'Description',\n                  order: 1,\n                  type: 'textarea',\n                },\n              };\n              return (\n                <AutoForm<ISaveIntegrationForm>\n                  i18nRequiredProperty={'* Required field'}\n                  definition={definition}\n                  initialValue={{\n                    description: integration.description,\n                    name: integration.name,\n                  }}\n                  onSave={onSave}\n                >\n                  {({\n                    fields,\n                    dirty,\n                    handleSubmit,\n                    isSubmitting,\n                    isValid,\n                    submitForm,\n                  }) => (\n                    <IntegrationEditorLayout\n                      header={this.props.header}\n                      content={\n                        <>\n                          <PageTitle title={'Save the integration'} />\n                          <IntegrationEditorForm\n                            i18nTitle={'Save the integration'}\n                            i18nSubtitle={\n                              'Update details about this integration.'\n                            }\n                            handleSubmit={handleSubmit}\n                          >\n                            {fields}\n                          </IntegrationEditorForm>\n                        </>\n                      }\n                      cancelHref={this.props.cancelHref(\n                        { flowId },\n                        { integration }\n                      )}\n                      backHref={this.props.backHref(\n                        { flowId },\n                        { integration }\n                      )}\n                      onNext={submitForm}\n                      isNextDisabled={dirty && !isValid}\n                      isNextLoading={isSubmitting}\n                      isLastStep={true}\n                    />\n                  )}\n                </AutoForm>\n              );\n            }}\n          </WithIntegrationHelpers>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import {\n  getConnectionIcon,\n  getEmptyIntegration,\n  getExtensionIcon,\n  getStepKindIcon,\n  getSteps,\n  visibleStepsByPosition,\n  WithConnections,\n  WithExtensions,\n  WithSteps,\n} from '@syndesis/api';\nimport {\n  ConnectionOverview,\n  Extension,\n  Step,\n  StepKind,\n} from '@syndesis/models';\nimport {\n  ButtonLink,\n  IntegrationEditorChooseConnection,\n  IntegrationEditorConnectionsListItem,\n  IntegrationEditorLayout,\n  IntegrationsListSkeleton,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouteData } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { ApiError, PageTitle } from '../../../../shared';\nimport {\n  ISelectConnectionRouteParams,\n  ISelectConnectionRouteState,\n} from './interfaces';\n\nexport interface IUIStep extends StepKind {\n  icon: string;\n}\n\nexport function toStepKindCollection(\n  connections: ConnectionOverview[],\n  extensions: Extension[],\n  steps: StepKind[]\n): IUIStep[] {\n  return [\n    ...connections.map(c => ({\n      ...c,\n      description: c.description || '',\n      icon: getConnectionIcon(process.env.PUBLIC_URL, c),\n      properties: undefined,\n    })),\n    ...extensions.reduce(\n      (extentionsByAction, extension) => {\n        extension.actions.forEach(a => {\n          let properties = {};\n          if (\n            a.descriptor &&\n            Array.isArray(a.descriptor.propertyDefinitionSteps)\n          ) {\n            properties = a.descriptor.propertyDefinitionSteps.reduce(\n              (acc, current) => {\n                return { ...acc, ...current.properties };\n              },\n              {}\n            );\n          }\n          if (a.actionType === 'step') {\n            extentionsByAction.push({\n              action: a,\n              configuredProperties: undefined,\n              description: a.description || '',\n              extension,\n              icon: `${process.env.PUBLIC_URL}${getExtensionIcon(extension)}`,\n              name: a.name,\n              properties,\n              stepKind: 'extension',\n            });\n          }\n        });\n        return extentionsByAction;\n      },\n      [] as IUIStep[]\n    ),\n    ...steps.map(s => ({\n      ...s,\n      icon: `${process.env.PUBLIC_URL}${getStepKindIcon(s.stepKind)}`,\n    })),\n  ].sort((a, b) => a.name.localeCompare(b.name));\n}\n\nexport const getStepKind = (stepOrConnection: ConnectionOverview | Step) => {\n  if ((stepOrConnection as ConnectionOverview).connectorId === 'api-provider') {\n    return 'api-provider';\n  }\n  if ((stepOrConnection as Step).stepKind) {\n    // not a connection\n  }\n  return 'endpoint';\n};\n\nexport interface ISelectConnectionPageProps {\n  backHref?: (\n    p: ISelectConnectionRouteParams,\n    s: ISelectConnectionRouteState\n  ) => H.LocationDescriptor;\n  cancelHref: (\n    p: ISelectConnectionRouteParams,\n    s: ISelectConnectionRouteState\n  ) => H.LocationDescriptor;\n  header: React.ReactNode;\n  apiProviderHref: (\n    p: ISelectConnectionRouteParams,\n    s: ISelectConnectionRouteState\n  ) => H.LocationDescriptorObject;\n  connectionHref: (\n    connection: ConnectionOverview,\n    p: ISelectConnectionRouteParams,\n    s: ISelectConnectionRouteState\n  ) => H.LocationDescriptorObject;\n  sidebar: (props: { steps: Step[]; activeIndex: number }) => React.ReactNode;\n}\n\n/**\n * This page shows the list of connections containing actions with a **to**\n * pattern.\n *\n * This component expects some [params]{@link ISelectConnectionRouteParams} and\n * [state]{@link ISelectConnectionRouteState} to be properly set in the route\n * object.\n *\n * **Warning:** this component will throw an exception if the route state is\n * undefined.\n */\nexport class SelectConnectionPage extends React.Component<\n  ISelectConnectionPageProps\n> {\n  public render() {\n    return (\n      <WithRouteData<ISelectConnectionRouteParams, ISelectConnectionRouteState>>\n        {(params, state, { history }) => {\n          const { flowId, position } = params;\n          const { integration = getEmptyIntegration() } = state;\n          const positionAsNumber = parseInt(position, 10) || 0;\n          const onStepClick = (connectionOrStep: ConnectionOverview | Step) => {\n            const stepKind = getStepKind(connectionOrStep);\n            switch (stepKind) {\n              case 'api-provider':\n                history.push(this.props.apiProviderHref(params, state));\n                break;\n              case 'endpoint':\n                history.push(\n                  this.props.connectionHref(\n                    connectionOrStep as ConnectionOverview,\n                    {\n                      ...params,\n                    },\n                    state\n                  )\n                );\n                break;\n            }\n          };\n          const integrationSteps = getSteps(integration, flowId);\n          return (\n            <>\n              <PageTitle title={'Choose a connection'} />\n              <IntegrationEditorLayout\n                header={this.props.header}\n                sidebar={this.props.sidebar({\n                  activeIndex: positionAsNumber,\n                  steps: integrationSteps,\n                })}\n                content={\n                  <WithConnections>\n                    {({\n                      data: connectionsData,\n                      hasData: hasConnectionsData,\n                      error: connectionsError,\n                    }) => (\n                      <WithExtensions>\n                        {({\n                          data: extensionsData,\n                          hasData: hasExtensionsData,\n                          error: extensionsError,\n                        }) => (\n                          <WithSteps>\n                            {({ items: steps }) => (\n                              <IntegrationEditorChooseConnection\n                                i18nTitle={'Choose a connection'}\n                                i18nSubtitle={\n                                  'Click the connection that completes the integration. If the connection you need is not available, click Create Connection.'\n                                }\n                              >\n                                <WithLoader\n                                  error={connectionsError || extensionsError}\n                                  loading={\n                                    !hasConnectionsData && !hasExtensionsData\n                                  }\n                                  loaderChildren={<IntegrationsListSkeleton />}\n                                  errorChildren={<ApiError />}\n                                >\n                                  {() => (\n                                    <>\n                                      {(visibleStepsByPosition(\n                                        integration,\n                                        flowId,\n                                        toStepKindCollection(\n                                          positionAsNumber === 0\n                                            ? connectionsData.connectionsWithFromAction\n                                            : connectionsData.connectionsWithToAction,\n                                          extensionsData.items,\n                                          steps\n                                        ),\n                                        positionAsNumber\n                                      ) as IUIStep[]).map(\n                                        (step, idx: number) => (\n                                          <IntegrationEditorConnectionsListItem\n                                            key={idx}\n                                            integrationName={step.name}\n                                            integrationDescription={\n                                              step.description ||\n                                              'No description available.'\n                                            }\n                                            icon={\n                                              <img\n                                                src={step.icon}\n                                                width={24}\n                                                height={24}\n                                              />\n                                            }\n                                            actions={\n                                              <ButtonLink\n                                                onClick={() =>\n                                                  onStepClick(step)\n                                                }\n                                              >\n                                                Select\n                                              </ButtonLink>\n                                            }\n                                          />\n                                        )\n                                      )}\n                                      <IntegrationEditorConnectionsListItem\n                                        integrationName={''}\n                                        integrationDescription={''}\n                                        icon={''}\n                                        actions={\n                                          <ButtonLink href={'#'}>\n                                            Create connection\n                                          </ButtonLink>\n                                        }\n                                      />\n                                    </>\n                                  )}\n                                </WithLoader>\n                              </IntegrationEditorChooseConnection>\n                            )}\n                          </WithSteps>\n                        )}\n                      </WithExtensions>\n                    )}\n                  </WithConnections>\n                }\n                backHref={\n                  this.props.backHref\n                    ? this.props.backHref(params, state)\n                    : undefined\n                }\n                cancelHref={this.props.cancelHref(params, state)}\n              />\n            </>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { getConnectionIcon } from '@syndesis/api';\nimport {\n  Breadcrumb,\n  IntegrationFlowStepGeneric,\n  IntegrationFlowStepWithOverview,\n  IntegrationVerticalFlow,\n} from '@syndesis/ui';\nimport * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { WithClosedNavigation } from '../../shared';\nimport {\n  IntegrationCreatorBreadcrumbs,\n  IntegrationEditorSidebar,\n} from './components';\nimport { AddStepPage } from './components/editor/AddStepPage';\nimport { ConfigureActionPage } from './components/editor/endpoint/ConfigureActionPage';\nimport { SelectActionPage } from './components/editor/endpoint/SelectActionPage';\nimport { SaveIntegrationPage } from './components/editor/SaveIntegrationPage';\nimport { SelectConnectionPage } from './components/editor/SelectConnectionPage';\nimport resolvers from './resolvers';\nimport routes from './routes';\n\nconst addStepPage = (\n  <AddStepPage\n    cancelHref={resolvers.list}\n    getEditAddStepHref={(position, p, s) =>\n      resolvers.create.configure.addStep.selectStep({\n        position: `${position}`,\n        ...p,\n        ...s,\n      })\n    }\n    getEditConfigureStepHrefCallback={(stepIdx, step, p, s) =>\n      resolvers.create.configure.editStep.connection.configureAction({\n        actionId: step.action!.id!,\n        connection: step.connection!,\n        position: `${stepIdx}`,\n        ...p,\n        ...s,\n      })\n    }\n    header={<IntegrationCreatorBreadcrumbs step={3} />}\n    nextHref={(p, s) =>\n      resolvers.create.configure.saveAndPublish({\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst saveIntegrationPage = (\n  <SaveIntegrationPage\n    backHref={(p, s) => resolvers.create.configure.index({ ...p, ...s })}\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={4} />}\n    postSaveHref={resolvers.list}\n  />\n);\n\nconst startStepSelectConnectionPage = (\n  <SelectConnectionPage\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={1} />}\n    apiProviderHref={(p, s) => ({ pathname: 'todo' })}\n    connectionHref={(connection, params, state) =>\n      resolvers.create.start.connection.selectAction({\n        connection,\n        ...params,\n        ...state,\n      })\n    }\n    sidebar={() => (\n      <IntegrationVerticalFlow>\n        {({ expanded }) => (\n          <>\n            <IntegrationFlowStepGeneric\n              icon={<i className={'fa fa-plus'} />}\n              i18nTitle={'1. Start'}\n              i18nTooltip={'Start'}\n              active={true}\n              showDetails={expanded}\n              description={'Choose a connection'}\n            />\n            <IntegrationFlowStepWithOverview\n              icon={<i className={'fa fa-plus'} />}\n              i18nTitle={'2. Finish'}\n              i18nTooltip={'Finish'}\n              active={false}\n              showDetails={expanded}\n              name={'n/a'}\n              action={'n/a'}\n              dataType={'n/a'}\n            />\n          </>\n        )}\n      </IntegrationVerticalFlow>\n    )}\n  />\n);\n\nconst startStepSelectActionPage = (\n  <SelectActionPage\n    backHref={resolvers.create.start.selectStep}\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={1} />}\n    sidebar={({ connection }) => (\n      <IntegrationVerticalFlow>\n        {({ expanded }) => (\n          <>\n            <IntegrationFlowStepGeneric\n              icon={\n                <img\n                  src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n                  width={24}\n                  height={24}\n                />\n              }\n              i18nTitle={`1. ${connection.connector!.name}`}\n              i18nTooltip={`1. ${connection.name}`}\n              active={true}\n              showDetails={expanded}\n              description={'Choose an action'}\n            />\n            <IntegrationFlowStepWithOverview\n              icon={<i className={'fa fa-plus'} />}\n              i18nTitle={'2. Finish'}\n              i18nTooltip={'Finish'}\n              active={false}\n              showDetails={expanded}\n              name={'n/a'}\n              action={'n/a'}\n              dataType={'n/a'}\n            />\n          </>\n        )}\n      </IntegrationVerticalFlow>\n    )}\n    selectHref={(actionId, p, s) =>\n      resolvers.create.start.connection.configureAction({\n        actionId,\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst startStepConfigureActionPage = (\n  <ConfigureActionPage\n    backHref={(p, s) =>\n      resolvers.create.start.connection.selectAction({ ...p, ...s })\n    }\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={1} subStep={2} />}\n    mode={'adding'}\n    nextStepHref={(p, s) =>\n      resolvers.create.start.connection.configureAction({\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ connection }) => (\n      <IntegrationVerticalFlow>\n        {({ expanded }) => (\n          <>\n            <IntegrationFlowStepGeneric\n              icon={\n                <img\n                  src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n                  width={24}\n                  height={24}\n                />\n              }\n              i18nTitle={`1. ${connection.connector!.name}`}\n              i18nTooltip={`1. ${connection.name}`}\n              active={true}\n              showDetails={expanded}\n              description={'Configure the action'}\n            />\n            <IntegrationFlowStepWithOverview\n              icon={<i className={'fa fa-plus'} />}\n              i18nTitle={'2. Finish'}\n              i18nTooltip={'Finish'}\n              active={false}\n              showDetails={expanded}\n              name={'n/a'}\n              action={'n/a'}\n              dataType={'n/a'}\n            />\n          </>\n        )}\n      </IntegrationVerticalFlow>\n    )}\n    postConfigureHref={(integration, params, state) => {\n      return resolvers.create.finish.selectStep({\n        integration,\n        ...params,\n        position: '1',\n      });\n    }}\n  />\n);\n\nconst finishStepSelectConnectionPage = (\n  <SelectConnectionPage\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={2} />}\n    apiProviderHref={(p, s) => ({ pathname: 'todo' })}\n    connectionHref={(connection, params, state) =>\n      resolvers.create.finish.connection.selectAction({\n        connection,\n        ...params,\n        ...state,\n      })\n    }\n    sidebar={({ steps }) => (\n      <IntegrationVerticalFlow>\n        {({ expanded }) => {\n          const startAction = steps[0];\n          return (\n            <>\n              <IntegrationFlowStepWithOverview\n                icon={\n                  <img\n                    src={getConnectionIcon(\n                      process.env.PUBLIC_URL,\n                      startAction.connection!\n                    )}\n                    width={24}\n                    height={24}\n                  />\n                }\n                i18nTitle={`1. ${startAction.connection!.name}`}\n                i18nTooltip={`1. ${startAction.connection!.name}`}\n                active={false}\n                showDetails={expanded}\n                name={startAction.connection!.connector!.name}\n                action={startAction.connection!.name!}\n                dataType={'TODO'}\n              />\n              <IntegrationFlowStepGeneric\n                icon={<i className={'fa fa-plus'} />}\n                i18nTitle={'2. Finish'}\n                i18nTooltip={'Finish'}\n                active={true}\n                showDetails={expanded}\n                description={'Choose a connection'}\n              />\n            </>\n          );\n        }}\n      </IntegrationVerticalFlow>\n    )}\n  />\n);\n\nconst finishStepSelectActionPage = (\n  <SelectActionPage\n    backHref={(p, s) => resolvers.create.finish.selectStep({ ...p, ...s })}\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={2} />}\n    sidebar={({ connection, steps }) => (\n      <IntegrationVerticalFlow>\n        {({ expanded }) => {\n          const startAction = steps[0];\n          return (\n            <>\n              <IntegrationFlowStepWithOverview\n                icon={\n                  <img\n                    src={getConnectionIcon(\n                      process.env.PUBLIC_URL,\n                      startAction.connection!\n                    )}\n                    width={24}\n                    height={24}\n                  />\n                }\n                i18nTitle={`1. ${startAction.connection!.name}`}\n                i18nTooltip={`1. ${startAction.connection!.name}`}\n                active={false}\n                showDetails={expanded}\n                name={startAction.connection!.connector!.name}\n                action={startAction.connection!.name!}\n                dataType={'TODO'}\n              />\n              <IntegrationFlowStepGeneric\n                icon={\n                  <img\n                    src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n                    width={24}\n                    height={24}\n                  />\n                }\n                i18nTitle={`2. ${connection.connector!.name}`}\n                i18nTooltip={`2. ${connection.name}`}\n                active={true}\n                showDetails={expanded}\n                description={'Choose an action'}\n              />\n            </>\n          );\n        }}\n      </IntegrationVerticalFlow>\n    )}\n    selectHref={(actionId, p, s) =>\n      resolvers.create.finish.connection.configureAction({\n        actionId,\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst finishStepConfigureActionPage = (\n  <ConfigureActionPage\n    backHref={(p, s) =>\n      resolvers.create.finish.connection.selectAction({ ...p, ...s })\n    }\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={2} subStep={2} />}\n    mode={'adding'}\n    nextStepHref={(p, s) =>\n      resolvers.create.finish.connection.configureAction({\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ connection, steps }) => (\n      <IntegrationVerticalFlow>\n        {({ expanded }) => {\n          const startAction = steps[0];\n          return (\n            <>\n              <IntegrationFlowStepWithOverview\n                icon={\n                  <img\n                    src={getConnectionIcon(\n                      process.env.PUBLIC_URL,\n                      startAction.connection!\n                    )}\n                    width={24}\n                    height={24}\n                  />\n                }\n                i18nTitle={`1. ${startAction.connection!.name}`}\n                i18nTooltip={`1. ${startAction.connection!.name}`}\n                active={false}\n                showDetails={expanded}\n                name={startAction.connection!.connector!.name}\n                action={startAction.connection!.name!}\n                dataType={'TODO'}\n              />\n              <IntegrationFlowStepGeneric\n                icon={\n                  <img\n                    src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n                    width={24}\n                    height={24}\n                  />\n                }\n                i18nTitle={`2. ${connection.connector!.name}`}\n                i18nTooltip={`2. ${connection.name}`}\n                active={true}\n                showDetails={expanded}\n                description={'Configure the action'}\n              />\n            </>\n          );\n        }}\n      </IntegrationVerticalFlow>\n    )}\n    postConfigureHref={(integration, params) =>\n      resolvers.create.configure.index({\n        integration,\n        ...params,\n      })\n    }\n  />\n);\n\nconst addStepSelectConnectionPage = (\n  <SelectConnectionPage\n    cancelHref={(p, s) => resolvers.create.configure.index({ ...p, ...s })}\n    header={<IntegrationCreatorBreadcrumbs step={3} />}\n    apiProviderHref={(p, s) => ({ pathname: 'todo' })}\n    connectionHref={(connection, p, s) =>\n      resolvers.create.configure.addStep.connection.selectAction({\n        connection,\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ steps, activeIndex }) => (\n      <IntegrationEditorSidebar\n        steps={steps}\n        addAtIndex={activeIndex}\n        addI18nTitle={`${activeIndex + 1}. Start`}\n        addI18nTooltip={'Start'}\n        addI18nDescription={'Choose a connection'}\n      />\n    )}\n  />\n);\n\nconst addStepSelectActionPage = (\n  <SelectActionPage\n    cancelHref={(p, s) => resolvers.create.configure.index({ ...p, ...s })}\n    header={<IntegrationCreatorBreadcrumbs step={3} />}\n    sidebar={({ connection, steps, activeIndex }) => (\n      <IntegrationEditorSidebar\n        steps={steps}\n        addAtIndex={activeIndex}\n        addIcon={\n          <img\n            src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n            height={24}\n            width={24}\n          />\n        }\n        addI18nTitle={`${activeIndex + 1}. ${connection.connector!.name}`}\n        addI18nTooltip={`${activeIndex + 1}. ${connection.name}`}\n        addI18nDescription={'Choose an action'}\n      />\n    )}\n    selectHref={(actionId, p, s) =>\n      resolvers.create.configure.addStep.connection.configureAction({\n        actionId,\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst addStepConfigureActionPage = (\n  <ConfigureActionPage\n    backHref={(p, s) =>\n      resolvers.create.configure.addStep.connection.selectAction({ ...p, ...s })\n    }\n    cancelHref={(p, s) => resolvers.create.configure.index({ ...p, ...s })}\n    header={<IntegrationCreatorBreadcrumbs step={3} />}\n    mode={'adding'}\n    nextStepHref={(p, s) =>\n      resolvers.create.configure.addStep.connection.configureAction({\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ connection, steps, activeIndex }) => (\n      <IntegrationEditorSidebar\n        steps={steps}\n        addAtIndex={activeIndex}\n        addIcon={\n          <img\n            src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n            height={24}\n            width={24}\n          />\n        }\n        addI18nTitle={`${activeIndex + 1}. ${connection.connector!.name}`}\n        addI18nTooltip={`${activeIndex + 1}. ${connection.name}`}\n        addI18nDescription={'Configure the action'}\n      />\n    )}\n    postConfigureHref={(integration, params) =>\n      resolvers.create.configure.index({\n        integration,\n        ...params,\n      })\n    }\n  />\n);\n\nconst editStepSelectActionPage = (\n  <SelectActionPage\n    cancelHref={(p, s) => resolvers.create.configure.index({ ...p, ...s })}\n    header={<IntegrationCreatorBreadcrumbs step={3} />}\n    sidebar={({ steps, activeIndex }) => (\n      <IntegrationEditorSidebar steps={steps} activeIndex={activeIndex} />\n    )}\n    selectHref={(actionId, p, s) =>\n      resolvers.create.configure.editStep.connection.configureAction({\n        actionId,\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst editStepConfigureActionPage = (\n  <ConfigureActionPage\n    backHref={(p, s) =>\n      resolvers.create.configure.editStep.connection.selectAction({\n        ...p,\n        ...s,\n      })\n    }\n    cancelHref={(p, s) => resolvers.create.configure.index({ ...p, ...s })}\n    header={<IntegrationCreatorBreadcrumbs step={3} />}\n    mode={'editing'}\n    nextStepHref={(p, s) =>\n      resolvers.create.configure.editStep.connection.configureAction({\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ steps, activeIndex }) => (\n      <IntegrationEditorSidebar steps={steps} activeIndex={activeIndex} />\n    )}\n    postConfigureHref={(integration, params) =>\n      resolvers.create.configure.index({\n        integration,\n        ...params,\n      })\n    }\n  />\n);\n\n/**\n * Entry point for the integration creator app. This is shown when an user clicks\n * the \"Create integration\" button somewhere in the app.\n *\n * Since all the creation routes will show the same breadcrumb and require the\n * left navigation bar to be closed to reclaim space, we do it here.\n *\n * Almost all of the routes *require* some state to be passed for them to\n * properly work, so an url that works for an user *will not work* for another.\n * If you try and open the same url on a different browser, the code will throw\n * an exception because of this.\n *\n * We should set up an error boundary[1] to catch these errors and tell the user\n * that he reached an invalid url, or redirect him to a safe page.\n *\n * [1] https://reactjs.org/docs/error-boundaries.html\n *\n * @todo add an error handler!\n * @todo i18n everywhere!\n */\nexport const IntegrationCreatorApp: React.FunctionComponent = () => {\n  return (\n    <WithClosedNavigation>\n      <Breadcrumb>\n        <Link to={resolvers.list()}>Integrations</Link>\n        <span>New integration</span>\n      </Breadcrumb>\n      <Switch>\n        {/* step 1.1 */}\n        <Route\n          path={routes.create.start.selectStep}\n          exact={true}\n          children={startStepSelectConnectionPage}\n        />\n        {/* step 1.2 */}\n        <Route\n          path={routes.create.start.connection.selectAction}\n          exact={true}\n          children={startStepSelectActionPage}\n        />\n        {/* step 1.3 */}\n        <Route\n          path={routes.create.start.connection.configureAction}\n          exact={true}\n          children={startStepConfigureActionPage}\n        />\n        {/* step 2.1 */}\n        <Route\n          path={routes.create.finish.selectStep}\n          exact={true}\n          children={finishStepSelectConnectionPage}\n        />\n        {/* step 2.2 */}\n        <Route\n          path={routes.create.finish.connection.selectAction}\n          exact={true}\n          children={finishStepSelectActionPage}\n        />\n        {/* step 2.3 */}\n        <Route\n          path={routes.create.finish.connection.configureAction}\n          exact={true}\n          children={finishStepConfigureActionPage}\n        />\n        {/* step 3: index */}\n        <Route\n          path={routes.create.configure.index}\n          exact={true}\n          children={addStepPage}\n        />\n        {/* step 3: add connection.1 */}\n        <Route\n          path={routes.create.configure.addStep.selectStep}\n          exact={true}\n          children={addStepSelectConnectionPage}\n        />\n        {/* step 3: add connection.2 */}\n        <Route\n          path={routes.create.configure.addStep.connection.selectAction}\n          exact={true}\n          children={addStepSelectActionPage}\n        />\n        {/* step 3: add connection.3 */}\n        <Route\n          path={routes.create.configure.addStep.connection.configureAction}\n          exact={true}\n          children={addStepConfigureActionPage}\n        />\n        {/* step 3: edit connection.2 (this is optional and can be reached only from the configuration page), must be declared before the configure route */}\n        <Route\n          path={routes.create.configure.editStep.connection.selectAction}\n          exact={true}\n          children={editStepSelectActionPage}\n        />\n        {/* step 3: edit connection.1 (when editing we link directly to the configuration step) */}\n        <Route\n          path={routes.create.configure.editStep.connection.configureAction}\n          exact={true}\n          children={editStepConfigureActionPage}\n        />\n        {/* step 4 */}\n        <Route\n          path={routes.create.configure.saveAndPublish}\n          exact={true}\n          children={saveIntegrationPage}\n        />\n      </Switch>\n    </WithClosedNavigation>\n  );\n};\n","import { getConnectionIcon } from '@syndesis/api';\nimport { Integration } from '@syndesis/models';\nimport { Breadcrumb } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { WithClosedNavigation } from '../../shared';\nimport {\n  IntegrationEditorBreadcrumbs,\n  IntegrationEditorSidebar,\n} from './components';\nimport { AddStepPage } from './components/editor/AddStepPage';\nimport { ConfigureActionPage } from './components/editor/endpoint/ConfigureActionPage';\nimport { SelectActionPage } from './components/editor/endpoint/SelectActionPage';\nimport { SaveIntegrationPage } from './components/editor/SaveIntegrationPage';\nimport { SelectConnectionPage } from './components/editor/SelectConnectionPage';\nimport resolvers from './resolvers';\nimport routes from './routes';\n\nconst addStepPage = (\n  <AddStepPage\n    cancelHref={resolvers.list}\n    getEditAddStepHref={(position, p, s) =>\n      resolvers.integration.edit.addStep.selectStep({\n        position: `${position}`,\n        ...p,\n        ...s,\n      })\n    }\n    getEditConfigureStepHrefCallback={(stepIdx, step, p, s) =>\n      resolvers.integration.edit.editStep.connection.configureAction({\n        actionId: step.action!.id!,\n        connection: step.connection!,\n        position: `${stepIdx}`,\n        ...p,\n        ...s,\n      })\n    }\n    header={<IntegrationEditorBreadcrumbs step={1} />}\n    nextHref={(p, s) =>\n      resolvers.integration.edit.saveAndPublish({\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst selectConnectionPage = (\n  <SelectConnectionPage\n    cancelHref={(p, s) => resolvers.integration.edit.index({ ...p, ...s })}\n    header={<IntegrationEditorBreadcrumbs step={1} />}\n    apiProviderHref={(p, s) => ({ pathname: 'todo' })}\n    connectionHref={(connection, p, s) =>\n      resolvers.integration.edit.addStep.connection.selectAction({\n        connection,\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ steps, activeIndex }) => (\n      <IntegrationEditorSidebar\n        steps={steps}\n        addAtIndex={activeIndex}\n        addI18nTitle={`${activeIndex + 1}. Start`}\n        addI18nTooltip={'Start'}\n        addI18nDescription={'Choose a connection'}\n      />\n    )}\n  />\n);\n\nconst saveIntegrationPage = (\n  <SaveIntegrationPage\n    backHref={(p, s) => resolvers.integration.edit.index({ ...p, ...s })}\n    cancelHref={resolvers.list}\n    header={<IntegrationEditorBreadcrumbs step={2} />}\n    postSaveHref={resolvers.list}\n  />\n);\n\nconst addStepSelectActionPage = (\n  <SelectActionPage\n    cancelHref={(p, s) => resolvers.integration.edit.index({ ...p, ...s })}\n    header={<IntegrationEditorBreadcrumbs step={1} />}\n    sidebar={({ connection, steps, activeIndex }) => (\n      <IntegrationEditorSidebar\n        steps={steps}\n        addAtIndex={activeIndex}\n        addIcon={\n          <img\n            src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n            height={24}\n            width={24}\n          />\n        }\n        addI18nTitle={`${activeIndex + 1}. ${connection.connector!.name}`}\n        addI18nTooltip={`${activeIndex + 1}. ${connection.name}`}\n        addI18nDescription={'Choose an action'}\n      />\n    )}\n    selectHref={(actionId, p, s) =>\n      resolvers.integration.edit.addStep.connection.configureAction({\n        actionId,\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst addStepConfigureActionPage = (\n  <ConfigureActionPage\n    backHref={(p, s) =>\n      resolvers.integration.edit.addStep.connection.selectAction({ ...p, ...s })\n    }\n    cancelHref={(p, s) => resolvers.integration.edit.index({ ...p, ...s })}\n    header={<IntegrationEditorBreadcrumbs step={1} />}\n    mode={'adding'}\n    nextStepHref={(p, s) =>\n      resolvers.integration.edit.addStep.connection.configureAction({\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ connection, steps, activeIndex }) => (\n      <IntegrationEditorSidebar\n        steps={steps}\n        addAtIndex={activeIndex}\n        addIcon={\n          <img\n            src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n            height={24}\n            width={24}\n          />\n        }\n        addI18nTitle={`${activeIndex + 1}. ${connection.connector!.name}`}\n        addI18nTooltip={`${activeIndex + 1}. ${connection.name}`}\n        addI18nDescription={'Configure the action'}\n      />\n    )}\n    postConfigureHref={(integration, params) =>\n      resolvers.integration.edit.index({\n        integration,\n        ...params,\n      })\n    }\n  />\n);\n\nconst editStepSelectActionPage = (\n  <SelectActionPage\n    cancelHref={(p, s) => resolvers.integration.edit.index({ ...p, ...s })}\n    header={<IntegrationEditorBreadcrumbs step={1} />}\n    sidebar={({ steps, activeIndex }) => (\n      <IntegrationEditorSidebar steps={steps} activeIndex={activeIndex} />\n    )}\n    selectHref={(actionId, p, s) =>\n      resolvers.integration.edit.editStep.connection.configureAction({\n        actionId,\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst editStepConfigureActionPage = (\n  <ConfigureActionPage\n    backHref={(p, s) =>\n      resolvers.integration.edit.editStep.connection.selectAction({\n        ...p,\n        ...s,\n      })\n    }\n    cancelHref={(p, s) => resolvers.integration.edit.index({ ...p, ...s })}\n    header={<IntegrationEditorBreadcrumbs step={1} />}\n    mode={'editing'}\n    nextStepHref={(p, s) =>\n      resolvers.integration.edit.editStep.connection.configureAction({\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ steps, activeIndex }) => (\n      <IntegrationEditorSidebar steps={steps} activeIndex={activeIndex} />\n    )}\n    postConfigureHref={(integration, params) =>\n      resolvers.integration.edit.index({\n        integration,\n        ...params,\n      })\n    }\n  />\n);\n\nexport interface IIntegrationEditorAppRouteState {\n  integration: Integration;\n}\n\n/**\n * Entry point for the integration editor app. This is shown when an user clicks\n * on the \"Edit\" button for any existing integration.\n *\n * Since all the creation routes will show the same breadcrumb and require the\n * left navigation bar to be closed to reclaim space, we do it here.\n *\n * Almost all of the routes *require* some state to be passed for them to\n * properly work, so an url that works for an user *will not work* for another.\n * If you try and open the same url on a different browser, the code will throw\n * an exception because of this.\n *\n * We should set up an error boundary[1] to catch these errors and tell the user\n * that he reached an invalid url, or redirect him to a safe page.\n *\n * [1] https://reactjs.org/docs/error-boundaries.html\n *\n * @todo add an error handler!\n * @todo i18n everywhere!\n */\nexport const IntegrationEditorApp: React.FunctionComponent = () => {\n  return (\n    <WithRouteData<null, IIntegrationEditorAppRouteState>>\n      {(_, { integration }) => (\n        <WithClosedNavigation>\n          <Breadcrumb>\n            <Link to={resolvers.list()}>Integrations</Link>\n            <Link\n              to={resolvers.integration.details({\n                integrationId: integration.id!,\n              })}\n            >\n              {integration.name}\n            </Link>\n            <span>Add to integration</span>\n          </Breadcrumb>\n          <Switch>\n            <Route\n              path={routes.integration.edit.index}\n              exact={true}\n              children={addStepPage}\n            />\n            <Route\n              path={routes.integration.edit.addStep.selectStep}\n              exact={true}\n              children={selectConnectionPage}\n            />\n            <Route\n              path={routes.integration.edit.addStep.connection.selectAction}\n              exact={true}\n              children={addStepSelectActionPage}\n            />\n            <Route\n              path={routes.integration.edit.addStep.connection.configureAction}\n              exact={true}\n              children={addStepConfigureActionPage}\n            />\n            <Route\n              path={routes.integration.edit.editStep.connection.selectAction}\n              exact={true}\n              children={editStepSelectActionPage}\n            />\n            <Route\n              path={routes.integration.edit.editStep.connection.configureAction}\n              exact={true}\n              children={editStepConfigureActionPage}\n            />\n            <Route\n              path={routes.integration.edit.saveAndPublish}\n              exact={true}\n              children={saveIntegrationPage}\n            />\n          </Switch>\n        </WithClosedNavigation>\n      )}\n    </WithRouteData>\n  );\n};\n","import { Integration } from '@syndesis/models';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { IntegrationDetailNavBar } from '../../shared';\n\n/**\n * @integrationId - the ID of the integration for which details are being displayed.\n */\nexport interface IActivityPageParams {\n  integrationId: string;\n}\n\nexport interface IActivityPageState {\n  integration: Integration;\n}\n\n/**\n * This page shows the second tab of the Integration Detail page.\n *\n * This component expects either an integrationId in the URL,\n * or an integration object set via the state.\n *\n */\nexport class ActivityPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<IActivityPageParams, IActivityPageState>>\n        {({ integrationId }, { integration }, { history }) => {\n          return (\n            <div>\n              <Translation ns={['integration', 'shared']}>\n                {t => <IntegrationDetailNavBar integration={integration} />}\n              </Translation>\n              <p>This is the Integration Detail Activity page.</p>\n            </div>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import {\n  canActivate,\n  canDeactivate,\n  canEdit,\n  getSteps,\n  WithIntegration,\n  WithIntegrationHelpers,\n} from '@syndesis/api';\nimport { IIntegrationOverviewWithDraft } from '@syndesis/models';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n  IIntegrationAction,\n  IntegrationDetailDescription,\n  IntegrationDetailHistoryListView,\n  IntegrationDetailInfo,\n  Loader,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport {\n  IntegrationDetailHistory,\n  IntegrationDetailSteps,\n} from '../../components';\nimport resolvers from '../../resolvers';\nimport { IntegrationDetailNavBar } from '../../shared';\n\n/**\n * @integrationId - the ID of the integration for which details are being displayed.\n */\nexport interface IIntegrationDetailsRouteParams {\n  integrationId: string;\n}\n\nexport interface IIntegrationDetailsRouteState {\n  integration?: IIntegrationOverviewWithDraft;\n}\n\n/**\n * @integrationId - the ID of the integration for which details are being displayed.\n */\nexport interface IIntegrationDetailsPageProps {\n  error: boolean;\n  integration: IIntegrationOverviewWithDraft;\n  integrationId: string;\n  loading: boolean;\n}\n\nexport interface IIntegrationDetailsPageState {\n  handleAction?: () => void;\n  integration?: IIntegrationOverviewWithDraft;\n  promptDialogButtonText?: string;\n  promptDialogIcon?: ConfirmationIconType;\n  promptDialogText?: string;\n  promptDialogTitle?: string;\n  showPromptDialog?: boolean;\n}\n\ninterface IPromptActionOptions {\n  promptDialogButtonStyle: ConfirmationButtonStyle;\n  promptDialogButtonText: string;\n  promptDialogIcon: ConfirmationIconType;\n  promptDialogText: string;\n  promptDialogTitle: string;\n  handleAction: () => void;\n}\n\n/**\n * This page shows the first, and default, tab of the Integration Detail page.\n *\n * This component expects either an integrationId in the URL,\n * or an integration object set via the state.\n *\n */\nexport class DetailsPage extends React.Component<\n  IIntegrationDetailsPageProps,\n  IIntegrationDetailsPageState\n> {\n  public constructor(props: IIntegrationDetailsPageProps) {\n    super(props);\n    this.state = {\n      showPromptDialog: false,\n    };\n    this.handleAction = this.handleAction.bind(this);\n    this.handleActionCancel = this.handleActionCancel.bind(this);\n    this.promptForAction = this.promptForAction.bind(this);\n  }\n\n  public handleActionCancel() {\n    this.setState({\n      showPromptDialog: false,\n    });\n  }\n\n  public handleAction() {\n    const action = this.state.handleAction;\n    this.setState({\n      showPromptDialog: false,\n    });\n    if (typeof action === 'function') {\n      action.apply(this);\n    } else {\n      throw Error('Undefined action set for confirmation dialog');\n    }\n  }\n\n  public promptForAction(options: IPromptActionOptions) {\n    this.setState({\n      ...options,\n      showPromptDialog: true,\n    });\n  }\n\n  public render() {\n    return (\n      <WithRouteData<IIntegrationDetailsRouteParams, null>>\n        {({ integrationId }) => {\n          return (\n            <WithIntegrationHelpers>\n              {({\n                deleteIntegration,\n                deployIntegration,\n                exportIntegration,\n                undeployIntegration,\n              }) => {\n                return (\n                  <WithIntegration integrationId={integrationId}>\n                    {({ data, hasData, error }) => (\n                      <WithLoader\n                        error={error}\n                        loading={!hasData}\n                        loaderChildren={<Loader />}\n                        errorChildren={<div>TODO</div>}\n                      >\n                        {() => (\n                          <div>\n                            <Translation ns={['integrations', 'shared']}>\n                              {t => {\n                                const deployments = data.deployments\n                                  ? data.deployments\n                                  : [];\n                                const editAction: IIntegrationAction = {\n                                  href: resolvers.integration.edit.index({\n                                    flowId: '0',\n                                    integration: data,\n                                  }),\n                                  label: 'Edit',\n                                };\n                                const startAction: IIntegrationAction = {\n                                  label: 'Start',\n                                  onClick: () =>\n                                    this.promptForAction({\n                                      handleAction: () =>\n                                        deployIntegration(\n                                          data.id!,\n                                          data.version!,\n                                          false\n                                        ),\n                                      promptDialogButtonStyle:\n                                        ConfirmationButtonStyle.NORMAL,\n                                      promptDialogButtonText: t('shared:Start'),\n                                      promptDialogIcon:\n                                        ConfirmationIconType.NONE,\n                                      promptDialogText: t(\n                                        'integrations:publishIntegrationModal',\n                                        { name: data.name }\n                                      ),\n                                      promptDialogTitle: t(\n                                        'integrations:publishIntegrationModalTitle'\n                                      ),\n                                    } as IPromptActionOptions),\n                                };\n                                const stopAction: IIntegrationAction = {\n                                  label: 'Stop',\n                                  onClick: () =>\n                                    this.promptForAction({\n                                      handleAction: () =>\n                                        undeployIntegration(\n                                          data.id!,\n                                          data.version!\n                                        ),\n                                      promptDialogButtonStyle:\n                                        ConfirmationButtonStyle.NORMAL,\n                                      promptDialogButtonText: t('shared:Stop'),\n                                      promptDialogIcon:\n                                        ConfirmationIconType.NONE,\n                                      promptDialogText: t(\n                                        'integrations:unpublishIntegrationModal',\n                                        { name: data.name }\n                                      ),\n                                      promptDialogTitle: t(\n                                        'integrations:unpublishIntegrationModalTitle'\n                                      ),\n                                    } as IPromptActionOptions),\n                                };\n                                const deleteAction: IIntegrationAction = {\n                                  label: 'Delete',\n                                  onClick: () =>\n                                    this.promptForAction({\n                                      handleAction: () =>\n                                        deleteIntegration(data.id!),\n                                      promptDialogButtonStyle:\n                                        ConfirmationButtonStyle.DANGER,\n                                      promptDialogButtonText: t(\n                                        'shared:Delete'\n                                      ),\n                                      promptDialogIcon:\n                                        ConfirmationIconType.DANGER,\n                                      promptDialogText: t(\n                                        'integrations:deleteIntegrationModal',\n                                        { name: data.name }\n                                      ),\n                                      promptDialogTitle: t(\n                                        'integrations:deleteIntegrationModalTitle'\n                                      ),\n                                    } as IPromptActionOptions),\n                                };\n                                const exportAction: IIntegrationAction = {\n                                  label: 'Export',\n                                  onClick: () =>\n                                    exportIntegration(\n                                      data.id!,\n                                      `${data.name}-export.zip`\n                                    ),\n                                };\n\n                                const actions: IIntegrationAction[] = [];\n                                if (canEdit(data)) {\n                                  actions.push(editAction);\n                                }\n                                if (canActivate(data)) {\n                                  actions.push(startAction);\n                                }\n                                if (canDeactivate(data)) {\n                                  actions.push(stopAction);\n                                }\n                                actions.push(deleteAction);\n                                actions.push(exportAction);\n\n                                return (\n                                  <>\n                                    <ConfirmationDialog\n                                      buttonStyle={\n                                        ConfirmationButtonStyle.NORMAL\n                                      }\n                                      i18nCancelButtonText={t('shared:Cancel')}\n                                      i18nConfirmButtonText={\n                                        this.state.promptDialogButtonText!\n                                      }\n                                      i18nConfirmationMessage={\n                                        this.state.promptDialogText!\n                                      }\n                                      i18nTitle={this.state.promptDialogTitle!}\n                                      icon={this.state.promptDialogIcon!}\n                                      showDialog={this.state.showPromptDialog!}\n                                      onCancel={this.handleActionCancel}\n                                      onConfirm={this.handleAction}\n                                    />\n                                    <IntegrationDetailInfo\n                                      name={data.name}\n                                      version={data.version}\n                                    />\n                                    <IntegrationDetailNavBar\n                                      integration={data}\n                                    />\n                                    <IntegrationDetailSteps\n                                      steps={getSteps(data, data.flows![0].id!)}\n                                    />\n                                    <IntegrationDetailDescription\n                                      description={data.description}\n                                      i18nNoDescription={t(\n                                        'integrations:detail:noDescription'\n                                      )}\n                                    />\n                                    <IntegrationDetailHistoryListView\n                                      hasHistory={deployments.length > 0}\n                                      isDraft={data.isDraft}\n                                      i18nTextBtnEdit={t('shared:Edit')}\n                                      i18nTextBtnPublish={t('shared:Publish')}\n                                      i18nTextDraft={t('shared:Draft')}\n                                      i18nTextHistory={t(\n                                        'integrations:detail:History'\n                                      )}\n                                      children={\n                                        <IntegrationDetailHistory\n                                          actions={actions}\n                                          deployments={deployments}\n                                          integrationId={data.id!}\n                                          updatedAt={data.updatedAt!}\n                                          version={data.version!}\n                                        />\n                                      }\n                                    />\n                                  </>\n                                );\n                              }}\n                            </Translation>\n                          </div>\n                        )}\n                      </WithLoader>\n                    )}\n                  </WithIntegration>\n                );\n              }}\n            </WithIntegrationHelpers>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { Integration } from '@syndesis/models';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { IntegrationDetailNavBar } from '../../shared';\n\n/**\n * @integrationId - the ID of the integration for which details are being displayed.\n */\nexport interface IMetricsPageParams {\n  integrationId: string;\n}\n\nexport interface IMetricsPageState {\n  integration: Integration;\n}\n\n/**\n * This page shows the second tab of the Integration Detail page.\n *\n * This component expects either an integrationId in the URL,\n * or an integration object set via the state.\n *\n */\nexport class MetricsPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<IMetricsPageParams, IMetricsPageState>>\n        {({ integrationId }, { integration }, { history }) => {\n          return (\n            <div>\n              <Translation ns={['integration', 'shared']}>\n                {t => <IntegrationDetailNavBar integration={integration} />}\n              </Translation>\n              <p>This is the Integration Detail Metrics page.</p>\n            </div>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { WithIntegrationHelpers } from '@syndesis/api';\nimport { Breadcrumb, ImportPageUI } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../../../i18n';\nimport { PageTitle } from '../../../../shared';\nimport resolvers from '../../resolvers';\n\nexport interface IImportPageState {\n  disableDropzone: boolean;\n  uploadFailedMessages?: string[];\n  uploadSuccessMessages?: string[];\n}\nexport class ImportPage extends React.Component<{}, IImportPageState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      disableDropzone: false,\n    };\n  }\n  public render() {\n    return (\n      <Translation ns={['integrations', 'shared']}>\n        {t => (\n          <WithIntegrationHelpers>\n            {({ importIntegration }) => {\n              const handleUploadAccepted = async (files: File[]) => {\n                let uploadFails: string[] = [];\n                let uploadWins: string[] = [];\n                this.setState({\n                  disableDropzone: true,\n                  uploadFailedMessages: uploadFails,\n                  uploadSuccessMessages: uploadWins,\n                });\n                for (const file of files) {\n                  try {\n                    await importIntegration(file);\n                    uploadWins = uploadWins.concat([\n                      i18n.t('integrations:ImportUploadSuccessMessage', {\n                        fileName: file.name,\n                      }),\n                    ]);\n                  } catch (err) {\n                    uploadFails = uploadFails.concat([\n                      i18n.t('integrations:ImportUploadFailedMessage', {\n                        fileName: file.name,\n                      }),\n                    ]);\n                  }\n                  this.setState({\n                    uploadFailedMessages: uploadFails,\n                    uploadSuccessMessages: uploadWins,\n                  });\n                }\n                this.setState({\n                  disableDropzone: false,\n                });\n              };\n              const handleUploadRejected = (failed: string) => {\n                return i18n.t('integrations:ImportUploadFailedAlertMessage', {\n                  fileName: failed,\n                });\n              };\n              return (\n                <>\n                  <PageTitle title={t('shared:Import')} />\n                  <Breadcrumb>\n                    <Link to={resolvers.list()}>\n                      {t('shared:Integrations')}\n                    </Link>\n                    <span>{t('integrations:ImportIntegration')}</span>\n                  </Breadcrumb>\n                  <ImportPageUI\n                    i18nPageTitle={t('integrations:ImportIntegration')}\n                    i18nPageDescription={t(\n                      'integrations:ImportIntegrationDescription'\n                    )}\n                    i18nNoFileSelectedMessage={t(\n                      'integrations:ImportNoFileSelectedMessage'\n                    )}\n                    i18nSelectedFileLabel={t(\n                      'integrations:ImportSelectedFileLabel'\n                    )}\n                    i18nInstructions={t(\n                      'integrations:ImportIntegrationInstructions'\n                    )}\n                    i18nHelpMessage={t('integrations:ImportHelpMessage')}\n                    i18nUploadSuccessMessages={this.state.uploadSuccessMessages}\n                    i18nUploadFailedMessages={this.state.uploadFailedMessages}\n                    onUploadRejected={handleUploadRejected}\n                    onUploadAccepted={handleUploadAccepted}\n                  />\n                </>\n              );\n            }}\n          </WithIntegrationHelpers>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { WithConnections, WithMonitoredIntegrations } from '@syndesis/api';\nimport { Connection, IntegrationWithMonitoring } from '@syndesis/models';\nimport {\n  IActiveFilter,\n  IFilterType,\n  IntegrationsListView,\n  ISortType,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport { PageTitle } from '../../../shared';\nimport { Integrations } from '../components';\nimport resolvers from '../resolvers';\n\nfunction getFilteredAndSortedIntegrations(\n  integrations: IntegrationWithMonitoring[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSortedIntegrations = integrations;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSortedIntegrations = filteredAndSortedIntegrations.filter(\n      (mi: IntegrationWithMonitoring) => {\n        if (filter.title === 'Name') {\n          return mi.integration.name.toLowerCase().includes(valueToLower);\n        }\n        if (filter.title === 'Connection') {\n          const connectionNames = mi.integration!.flows!.reduce(\n            (acc, flow) => [\n              ...acc,\n              ...flow\n                .steps!.filter(s => s.connection)\n                .map(s => s.connection!.name.toLowerCase()),\n            ],\n            [] as string[]\n          );\n          return connectionNames.reduce(\n            (found, n) => found || n.includes(valueToLower),\n            false\n          );\n        }\n        return false;\n      }\n    );\n  });\n\n  filteredAndSortedIntegrations = filteredAndSortedIntegrations.sort(\n    (miA, miB) => {\n      const left = isSortAscending ? miA : miB;\n      const right = isSortAscending ? miB : miA;\n      if (currentSortType === 'Name') {\n        return left.integration.name.localeCompare(right.integration.name);\n      }\n      return left.integration!.currentState!.localeCompare(\n        right.integration!.currentState!\n      );\n    }\n  );\n\n  return filteredAndSortedIntegrations;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterByConnection = {\n  filterType: 'select',\n  filterValues: [],\n  id: 'connection',\n  placeholder: i18n.t('filterByConnectionPlaceholder'),\n  title: i18n.t('shared:Connection'),\n};\n\nfunction getFilterTypes(connections: Connection[]): IFilterType[] {\n  return [\n    filterByName,\n    {\n      ...filterByConnection,\n      filterValues: connections.map(c => ({\n        id: c.id,\n        title: c.name,\n      })),\n    } as IFilterType,\n  ];\n}\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortByStatus = {\n  id: 'status',\n  isNumeric: false,\n  title: i18n.t('shared:Status'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName, sortByStatus];\n\nexport class IntegrationsPage extends React.Component {\n  public render() {\n    return (\n      <WithMonitoredIntegrations>\n        {({ data: integrationsData, hasData, error }) => (\n          <WithConnections>\n            {({ data: connectionsData }) => (\n              <Translation ns={['integrations', 'shared']}>\n                {t => (\n                  <WithListViewToolbarHelpers\n                    defaultFilterType={filterByName}\n                    defaultSortType={sortByName}\n                  >\n                    {helpers => {\n                      const filteredAndSortedIntegrations = getFilteredAndSortedIntegrations(\n                        integrationsData.items,\n                        helpers.activeFilters,\n                        helpers.currentSortType,\n                        helpers.isSortAscending\n                      );\n\n                      return (\n                        <>\n                          <PageTitle title={t('shared:Integrations')} />\n                          <IntegrationsListView\n                            linkToIntegrationImport={'/integrations/import'}\n                            linkToManageCiCd={resolvers.manageCicd.root()}\n                            linkToIntegrationCreation={resolvers.create.start.selectStep()}\n                            filterTypes={getFilterTypes(\n                              connectionsData.connectionsForDisplay\n                            )}\n                            sortTypes={sortTypes}\n                            resultsCount={filteredAndSortedIntegrations.length}\n                            {...helpers}\n                            i18nImport={t('shared:Import')}\n                            i18nManageCiCd={t('integrations:ManageCiCd')}\n                            i18nLinkCreateConnection={t(\n                              'shared:linkCreateIntegration'\n                            )}\n                            i18nResultsCount={t('shared:resultsCount', {\n                              count: filteredAndSortedIntegrations.length,\n                            })}\n                          >\n                            <Integrations\n                              error={error}\n                              loading={!hasData}\n                              integrations={filteredAndSortedIntegrations}\n                            />\n                          </IntegrationsListView>\n                        </>\n                      );\n                    }}\n                  </WithListViewToolbarHelpers>\n                )}\n              </Translation>\n            )}\n          </WithConnections>\n        )}\n      </WithMonitoredIntegrations>\n    );\n  }\n}\n","import {\n  DataMapperAdapter,\n  DocumentType,\n  InspectionType,\n} from '@syndesis/atlasmap-adapter';\nimport { Breadcrumb, ButtonLink, Container } from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface ITestAtlasmapPageState {\n  mappings?: string;\n}\n\nexport class TestAtlasmapPage extends React.Component<\n  {},\n  ITestAtlasmapPageState\n> {\n  public state: ITestAtlasmapPageState = {};\n\n  constructor(props: {}) {\n    super(props);\n    this.onReset = this.onReset.bind(this);\n    this.onMappings = this.onMappings.bind(this);\n  }\n\n  public onReset() {\n    this.setState({\n      mappings: undefined,\n    });\n  }\n\n  public onMappings(mappings: string) {\n    this.setState({\n      mappings,\n    });\n  }\n\n  public render() {\n    return (\n      <>\n        <Container>\n          <div className=\"toolbar-pf row\">\n            <div className=\"col-sm-12\">\n              <div className=\"toolbar-pf-actions\">\n                <div className=\"form-group\">\n                  <Breadcrumb>\n                    <span>Home</span>\n                    <span>Library</span>\n                    <span>Data</span>\n                  </Breadcrumb>\n                </div>\n                <div className=\"toolbar-pf-action-right\">\n                  <div className=\"form-group\" style={{ marginTop: '5px' }}>\n                    <ButtonLink>Cancel</ButtonLink>\n                    <ButtonLink\n                      disabled={!this.state.mappings}\n                      onClick={this.onReset}\n                    >\n                      Reset\n                    </ButtonLink>\n                    <ButtonLink as={'success'} disabled={!this.state.mappings}>\n                      Save\n                    </ButtonLink>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Container>\n        <div\n          style={{\n            display: 'flex',\n            flexFlow: 'column',\n            height: 'calc(100% - 57px)',\n          }}\n        >\n          <DataMapperAdapter\n            documentId={'-LRMAUOoTSCTd3Eg7_bi'}\n            inputName={'SQL Result'}\n            inputDescription={'Result of SQL [SELECT * from TODO]'}\n            inputDocumentType={DocumentType.JSON}\n            inputInspectionType={InspectionType.SCHEMA}\n            inputDataShape={\n              '{\"type\":\"object\",\"$schema\":\"http://json-schema.org/schema#\",\"title\":\"SQL_PARAM_OUT\",\"properties\":{\"id\":{\"type\":\"integer\",\"required\":true},\"task\":{\"type\":\"string\",\"required\":true},\"completed\":{\"type\":\"integer\",\"required\":true}}}'\n            }\n            outputName={'add_lead Parameter'}\n            outputDescription={'Parameters of Stored Procedure \"add_lead\"'}\n            outputDocumentType={DocumentType.JSON}\n            outputInspectionType={InspectionType.SCHEMA}\n            outputDataShape={\n              '{\"type\":\"object\",\"$schema\":\"http://json-schema.org/schema#\",\"title\":\"add_lead_IN\",\"properties\":{\"first_and_last_name\":{\"type\":\"string\",\"required\":true},\"company\":{\"type\":\"string\",\"required\":true},\"phone\":{\"type\":\"string\",\"required\":true},\"email\":{\"type\":\"string\",\"required\":true},\"lead_source\":{\"type\":\"string\",\"required\":true},\"lead_status\":{\"type\":\"string\",\"required\":true},\"rating\":{\"type\":\"string\",\"required\":true}}}'\n            }\n            mappings={this.state.mappings}\n            onMappings={this.onMappings}\n          />\n        </div>\n      </>\n    );\n  }\n}\n","import { WithEnvironmentHelpers, WithEnvironments } from '@syndesis/api';\nimport {\n  Breadcrumb,\n  CiCdList,\n  CiCdListEmptyState,\n  CiCdListItem,\n  CiCdListSkeleton,\n  CiCdManagePageUI,\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n  TagNameValidationError,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers, WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../../../i18n';\nimport { ApiError, PageTitle } from '../../../../shared';\nimport resolvers from '../../resolvers';\n\nfunction getFilteredAndSortedEnvironments(\n  environments: string[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let answer = environments;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    answer = answer.filter(name => name.toLowerCase().includes(valueToLower));\n  });\n  answer = answer.sort((a, b) => {\n    const left = isSortAscending ? a : b;\n    const right = isSortAscending ? b : a;\n    return left.localeCompare(right);\n  });\n  return answer.map(name => ({\n    i18nUsesText: '',\n    name,\n  }));\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nfunction createConfirmRemoveString(name: string) {\n  return i18n.t('integrations:ConfirmRemoveTag', { tag: name });\n}\n\nexport interface IManageCiCdPageState {\n  nameValidationError: TagNameValidationError;\n}\n\nexport class ManageCiCdPage extends React.Component<{}, IManageCiCdPageState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      nameValidationError: TagNameValidationError.NoErrors,\n    };\n  }\n  public render() {\n    return (\n      <Translation ns={['integrations', 'shared']}>\n        {t => (\n          <WithEnvironments>\n            {({ data, hasData, error, read }) => (\n              <WithListViewToolbarHelpers\n                defaultFilterType={filterByName}\n                defaultSortType={sortByName}\n              >\n                {helpers => {\n                  const filteredAndSortedEnvironments = getFilteredAndSortedEnvironments(\n                    data,\n                    helpers.activeFilters,\n                    helpers.currentSortType,\n                    helpers.isSortAscending\n                  );\n                  const handleValidateItem = (name: string) => {\n                    if (!name || name === '') {\n                      this.setState({\n                        nameValidationError: TagNameValidationError.NoName,\n                      });\n                    } else if (data.indexOf(name) !== -1) {\n                      this.setState({\n                        nameValidationError: TagNameValidationError.NameInUse,\n                      });\n                    } else {\n                      this.setState({\n                        nameValidationError: TagNameValidationError.NoErrors,\n                      });\n                    }\n                  };\n                  return (\n                    <WithEnvironmentHelpers>\n                      {({\n                        createEnvironment,\n                        deleteEnvironment,\n                        renameEnvironment,\n                      }) => (\n                        <>\n                          <PageTitle title={t('integrations:ManageCiCd')} />\n                          <Breadcrumb>\n                            <Link to={resolvers.list()}>\n                              {t('shared:Integrations')}\n                            </Link>\n                            <span>{t('integrations:ManageCiCd')}</span>\n                          </Breadcrumb>\n                          <CiCdManagePageUI\n                            onEditItem={(name: string, newName: string) =>\n                              renameEnvironment(name, newName).finally(read)\n                            }\n                            onAddItem={(name: string) =>\n                              createEnvironment(name).finally(read)\n                            }\n                            onRemoveItem={(name: string) =>\n                              deleteEnvironment(name).finally(read)\n                            }\n                            onValidateItem={handleValidateItem}\n                            filterTypes={filterTypes}\n                            sortTypes={sortTypes}\n                            {...helpers}\n                            resultsCount={filteredAndSortedEnvironments.length}\n                            i18nResultsCount={t('shared:resultsCount', {\n                              count: filteredAndSortedEnvironments.length,\n                            })}\n                            i18nAddNewButtonText={t('shared:AddNew')}\n                            i18nPageTitle={t('integrations:ManageCiCd')}\n                            i18nCancelButtonText={t('shared:Cancel')}\n                            i18nSaveButtonText={t('shared:Save')}\n                            i18nConfirmRemoveButtonText={t('shared:Yes')}\n                            i18nConfirmCancelButtonText={t('shared:No')}\n                            i18nRemoveConfirmationMessage={\n                              createConfirmRemoveString\n                            }\n                            i18nRemoveConfirmationTitle={t(\n                              'shared:ConfirmRemove'\n                            )}\n                            i18nRemoveConfirmationDetailMessage={t(\n                              'integrations:ConfirmRemoveTagDetail'\n                            )}\n                            i18nAddTagDialogTitle={t(\n                              'integrations:AddTagDialogTitle'\n                            )}\n                            i18nAddTagDialogDescription={t(\n                              'integrations:AddTagDialogDescription'\n                            )}\n                            i18nEditTagDialogTitle={t(\n                              'integrations:EditTagDialogTitle'\n                            )}\n                            i18nEditTagDialogDescription={t(\n                              'integrations:EditTagDialogDescription'\n                            )}\n                            i18nTagInputLabel={t('integrations:TagName')}\n                            i18nPageDescription={t(\n                              'integrations:ManageCiCdDescription'\n                            )}\n                            nameValidationError={this.state.nameValidationError}\n                            i18nNoNameError={t(\n                              'integrations:PleaseEnterATagName'\n                            )}\n                            i18nNameInUseError={t(\n                              'integrations:ThatTagNameIsInUse'\n                            )}\n                          >\n                            {({\n                              openAddDialog,\n                              openEditDialog,\n                              openRemoveDialog,\n                            }) => (\n                              <WithLoader\n                                error={error}\n                                loading={!hasData}\n                                loaderChildren={\n                                  <CiCdList children={<CiCdListSkeleton />} />\n                                }\n                                errorChildren={<ApiError />}\n                              >\n                                {() => (\n                                  <>\n                                    {filteredAndSortedEnvironments.length !==\n                                      0 && (\n                                      <CiCdList\n                                        children={filteredAndSortedEnvironments.map(\n                                          (listItem, index) => (\n                                            <CiCdListItem\n                                              key={index}\n                                              onEditClicked={openEditDialog}\n                                              onRemoveClicked={openRemoveDialog}\n                                              i18nEditButtonText={t(\n                                                'shared:Edit'\n                                              )}\n                                              i18nRemoveButtonText={t(\n                                                'shared:Remove'\n                                              )}\n                                              name={listItem.name}\n                                              i18nUsesText={\n                                                listItem.i18nUsesText\n                                              }\n                                            />\n                                          )\n                                        )}\n                                      />\n                                    )}\n                                    {filteredAndSortedEnvironments.length ===\n                                      0 && (\n                                      <CiCdListEmptyState\n                                        onAddNew={openAddDialog}\n                                        i18nTitle={t(\n                                          'integrations:NoEnvironmentsAvailable'\n                                        )}\n                                        i18nAddNewButtonText={t(\n                                          'shared:AddNew'\n                                        )}\n                                        i18nInfo={t(\n                                          'integrations:NoEnvironmentsAvailableInfo'\n                                        )}\n                                      />\n                                    )}\n                                  </>\n                                )}\n                              </WithLoader>\n                            )}\n                          </CiCdManagePageUI>\n                        </>\n                      )}\n                    </WithEnvironmentHelpers>\n                  );\n                }}\n              </WithListViewToolbarHelpers>\n            )}\n          </WithEnvironments>\n        )}\n      </Translation>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { IntegrationCreatorApp } from './IntegrationCreatorApp';\nimport { IntegrationEditorApp } from './IntegrationEditorApp';\nimport {\n  ActivityPage,\n  DetailsPage,\n  ImportPage,\n  IntegrationsPage,\n  MetricsPage,\n  TestAtlasmapPage,\n} from './pages';\nimport { ManageCiCdPage } from './pages/cicd';\nimport routes from './routes';\n\n/**\n * Entry point for the integrations section.\n *\n * Since the section is logically split in sub-apps, each with their own routes,\n * we do the same thing here: instead of listing all the routes in a single place\n * we have components called \"Apps\" that will define their own route handlers.\n *\n * @todo the IntegrationCreatorApp and IntegrationEditorApp could benefit from\n * some refactoring aimed to DRY the business logic that's embedded in every\n * page of the same type (especially the configuration ones).\n * Actually the IntegrationEditorApp is the result of a copy-paste of this folder\n * `syndesis/src/modules/integrations/pages/create/configure/editStep`,\n * with updated titles and links between the steps.\n * This is an hint that at least those 2 \"areas\" could be DRYed up, but it could\n * be worth exploring options to take it up a notch and figure out a way to\n * simplify also the other pages.\n */\nexport class IntegrationsModule extends React.Component {\n  public render() {\n    return (\n      <Switch>\n        <Route\n          path={routes.manageCicd.root}\n          exact={true}\n          component={ManageCiCdPage}\n        />\n        <Route path={routes.import.root} exact={true} component={ImportPage} />\n        <Route path={routes.create.root} component={IntegrationCreatorApp} />\n        <Route\n          path={routes.integration.edit.root}\n          component={IntegrationEditorApp}\n        />\n        <Route path={routes.list} exact={true} component={IntegrationsPage} />\n        <Route\n          path={'/integrations/atlasmap'}\n          exact={true}\n          component={TestAtlasmapPage}\n        />\n        <Route\n          path={routes.integration.details}\n          exact={true}\n          component={DetailsPage}\n        />\n        <Route\n          path={routes.integration.activity}\n          exact={true}\n          component={ActivityPage}\n        />\n        <Route\n          path={routes.integration.metrics}\n          exact={true}\n          component={MetricsPage}\n        />\n      </Switch>\n    );\n  }\n}\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { I18nextProvider, Translation } from 'react-i18next';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { App } from './app';\nimport i18n from './i18n';\nimport './index.css';\nimport { ConnectionsModule } from './modules/connections';\nimport { CustomizationsModule } from './modules/customizations';\nimport { DashboardModule } from './modules/dashboard';\nimport { DataModule } from './modules/data';\nimport { IntegrationsModule } from './modules/integrations';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <Router>\n    <I18nextProvider i18n={i18n}>\n      <Translation ns={['shared']}>\n        {t => (\n          <App\n            routes={[\n              {\n                component: DashboardModule,\n                exact: true,\n                icon: 'fa fa-tachometer-alt',\n                label: t('Home'),\n                to: '/',\n              },\n              {\n                component: IntegrationsModule,\n                icon: 'pficon pficon-integration',\n                label: t('Integrations'),\n                to: '/integrations',\n              },\n              {\n                component: ConnectionsModule,\n                icon: 'pficon pficon-plugged',\n                label: t('Connections'),\n                to: '/connections',\n              },\n              {\n                component: CustomizationsModule,\n                icon: 'fa fa-cube',\n                label: t('Customizations'),\n                to: '/customizations',\n              },\n              {\n                component: DataModule,\n                icon: 'fa fa-database',\n                label: t('Data'),\n                to: '/data',\n              },\n              // {\n              // component: TODO,\n              // icon: 'pficon pficon-settings',\n              // label: t('Settings'),\n              // to: '/settings',\n              // },\n            ]}\n          />\n        )}\n      </Translation>\n    </I18nextProvider>\n  </Router>,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n","/* tslint:disable:object-literal-sort-keys no-empty-interface */\nimport { RestDataService } from '@syndesis/models';\nimport { makeResolver, makeResolverNoParams } from '@syndesis/utils';\nimport routes from './routes';\n\n// TODO: unit test every single one of these resolvers 😫\nexport default {\n  virtualizations: {\n    views: {\n      root: makeResolver<{ virtualization: RestDataService }>(\n        routes.virtualizations.virtualization.views.root,\n        ({ virtualization }) => ({\n          params: {\n            virtualizationId: virtualization.keng__id,\n          },\n          state: {\n            virtualization,\n          },\n        })\n      ),\n      importSource: {\n        root: makeResolverNoParams(\n          routes.virtualizations.virtualization.views.importSource.root\n        ),\n        selectConnection: makeResolver<{ virtualization: RestDataService }>(\n          routes.virtualizations.virtualization.views.importSource\n            .selectConnection,\n          ({ virtualization }) => ({\n            params: {\n              virtualizationId: virtualization.keng__id,\n            },\n            state: {\n              virtualization,\n            },\n          })\n        ),\n        selectViews: makeResolver<{\n          connectionId: string;\n          virtualization: RestDataService;\n        }>(\n          routes.virtualizations.virtualization.views.importSource.selectViews,\n          ({ connectionId, virtualization }) => ({\n            params: {\n              virtualizationId: virtualization.keng__id,\n            },\n            state: {\n              connectionId,\n              virtualization,\n            },\n          })\n        ),\n      },\n    },\n    relationship: makeResolver<{ virtualization: RestDataService }>(\n      routes.virtualizations.virtualization.relationship,\n      ({ virtualization }) => ({\n        params: {\n          virtualizationId: virtualization.keng__id,\n        },\n        state: {\n          virtualization,\n        },\n      })\n    ),\n    sqlClient: makeResolver<{ virtualization: RestDataService }>(\n      routes.virtualizations.virtualization.sqlClient,\n      ({ virtualization }) => ({\n        params: {\n          virtualizationId: virtualization.keng__id,\n        },\n        state: {\n          virtualization,\n        },\n      })\n    ),\n    metrics: makeResolver<{ virtualization: RestDataService }>(\n      routes.virtualizations.virtualization.metrics,\n      ({ virtualization }) => ({\n        params: {\n          virtualizationId: virtualization.keng__id,\n        },\n        state: {\n          virtualization,\n        },\n      })\n    ),\n    create: makeResolverNoParams(routes.virtualizations.create),\n    import: makeResolverNoParams(routes.virtualizations.import),\n    list: makeResolverNoParams(routes.virtualizations.list),\n  },\n  root: makeResolverNoParams(routes.virtualizations.list),\n};\n"],"sourceRoot":""}