{"version":3,"sources":["../../src/ApiContext.tsx","../../../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../../src/callFetch.ts","../../src/Fetch.tsx","../../src/Stream.tsx","../../src/SyndesisFetch.tsx","../../src/DVFetch.tsx","../../src/constants.ts","../../src/ServerEventsContext.tsx","../../src/WithIntegrationHelpers.tsx","../../src/WithChangeListener.tsx","../../src/WithApiConnectors.tsx","../../src/WithPolling.tsx","../../src/WithEnvironments.tsx","../../src/WithEnvironmentHelpers.tsx","../../src/WithExtension.tsx","../../src/WithExtensionHelpers.tsx","../../src/WithExtensionIntegrations.tsx","../../src/WithExtensions.tsx","../../src/WithIntegrations.tsx","../../src/WithIntegrationTags.tsx","../../src/WithMonitoredIntegrations.tsx","../../src/WithIntegrationsMetrics.tsx","../../src/WithConnections.tsx","../../src/helpers/connectionFunctions.ts","../../src/helpers/integrationFunctions.ts","../../src/WithConnection.tsx","../../src/WithConnectionHelpers.tsx","../../src/WithConnector.tsx","../../src/WithConnectors.tsx","../../src/WithSteps.tsx","../../src/WithServerEvents.tsx","../../src/WithViews.tsx","../../src/WithViewEditorStates.tsx","../../src/WithVirtualizationHelpers.tsx","../../src/WithVirtualization.tsx","../../src/WithVirtualizations.tsx","../../src/WithVirtualizationConnectionStatuses.tsx","../../src/WithVirtualizationConnectionSchema.tsx","../../src/helpers/serializeIntegration.ts","../../src/helpers/deserializeIntegration.ts","modules/customizations/resolvers.ts","../../src/DataMapperAdapter.tsx","i18n/locales/index.ts","i18n/index.ts","modules/integrations/resolvers.ts","shared/ApiError.tsx","shared/ModuleLoader.tsx","shared/PageNotFound.tsx","shared/PageTitle.tsx","shared/WithClosedNavigation.tsx","shared/WithErrorBoundary.tsx","shared/index.ts","modules/integrations/routes.ts","modules/integrations/components/IntegrationEditorStepAdder.tsx","modules/dashboard/routes.ts","modules/dashboard/resolvers.ts","modules/resolvers.ts","../../src/Shared/ConfirmationDialog.tsx","../../src/Shared/Dialog.tsx","../../src/Layout/Container.tsx","../../src/Shared/DndFileChooser.tsx","../../src/Layout/AppLayout.tsx","../../src/Layout/AppTopMenu.tsx","../../src/Layout/ButtonLink.tsx","../../src/Layout/Loader.tsx","../../src/Layout/PfNavLink.tsx","../../src/Layout/PfVerticalNavItem.tsx","../../src/Layout/TabBarItem.tsx","../../src/Layout/WizardSteps.tsx","../../src/Shared/InlineTextEdit.tsx","../../src/Shared/ListViewToolbar.tsx","../../src/Shared/LogViewer.tsx","../../src/Shared/Notifications.tsx","../../src/Shared/SimplePageHeader.tsx","../../src/Shared/ProgressWithLink.tsx","../../src/Shared/PfDropdownItem.tsx","../../src/Connection/ConnectionCard.tsx","../../src/Connection/ConnectionDetailsForm.tsx","../../src/Connection/ConnectionDetailsHeader.tsx","../../src/Connection/ConnectionsGrid.tsx","../../src/Connection/ConnectionsGridCell.tsx","../../src/Connection/ConnectionsListView.tsx","../../src/Connection/ConnectorConfigurationForm.tsx","../../src/Integration/CiCd/CiCdUIModels.ts","../../src/Customization/ApiConnectorDetailCard.tsx","../../src/Customization/ApiConnectorInfo.tsx","../../src/Customization/ApiConnectorReview.tsx","../../src/Customization/ApiConnectorDetail.tsx","../../src/Customization/ApiConnectorListItem.tsx","../../src/Customization/ApiConnectorListView.tsx","../../src/Customization/ExtensionDetail.tsx","../../src/Customization/ExtensionImportCard.tsx","../../src/Customization/ExtensionImportReview.tsx","../../src/Customization/ExtensionIntegrationsTable.tsx","../../src/Customization/ExtensionListItem.tsx","../../src/Customization/ExtensionListView.tsx","../../src/Customization/ExtensionOverview.tsx","../../src/Customization/ExtensionSupports.tsx","../../src/Dashboard/AggregatedMetricCard.tsx","../../src/Dashboard/ConnectionsMetric.tsx","../../src/Dashboard/Dashboard.tsx","../../src/Dashboard/IntegrationBoard.tsx","../../src/Dashboard/RecentUpdatesCard.tsx","../../src/Integration/CiCd/CiCdEditDialog.tsx","../../src/Integration/CiCd/CiCdList.tsx","../../src/Integration/CiCd/CiCdListEmptyState.tsx","../../src/Integration/CiCd/CiCdListItem.tsx","../../src/Integration/CiCd/CiCdListView.tsx","../../src/Integration/CiCd/CiCdManagePageUI.tsx","../../src/Integration/CiCd/CiCdListSkeleton.tsx","../../src/Integration/CiCd/TagIntegrationDialog.tsx","../../src/Integration/CiCd/TagIntegrationListItem.tsx","../../src/Integration/CiCd/TagIntegrationDialogEmptyState.tsx","../../src/Integration/CiCd/TagIntegrationDialogBody.tsx","../../src/Integration/Import/ImportPageUI.tsx","../../src/Integration/IntegrationDetailDescription.tsx","../../src/Integration/IntegrationDetailEditableName.tsx","../../src/Integration/IntegrationDetailHistoryListView.tsx","../../src/Integration/IntegrationDetailHistoryListViewItem.tsx","../../src/Integration/IntegrationDetailInfo.tsx","../../src/Integration/IntegrationEditorActionsListItem.tsx","../../src/Integration/IntegrationEditorChooseAction.tsx","../../src/Integration/IntegrationEditorChooseConnection.tsx","../../src/Integration/IntegrationEditorConnectionsListItem.tsx","../../src/Integration/IntegrationEditorForm.tsx","../../src/Integration/IntegrationEditorNothingToConfigure.tsx","../../src/Integration/IntegrationEditorStepsList.tsx","../../src/Integration/IntegrationEditorStepsListItem.tsx","../../src/Integration/IntegrationFlowAddStep.tsx","../../src/Integration/IntegrationFlowStep.tsx","../../src/Integration/IntegrationFlowStepDetails.tsx","../../src/Integration/IntegrationFlowStepGeneric.tsx","../../src/Integration/IntegrationIcon.tsx","../../src/Integration/IntegrationStatus.tsx","../../src/Integration/models.ts","../../src/Integration/IntegrationStatusDetail.tsx","../../src/Integration/IntegrationStepsHorizontalView.tsx","../../src/Integration/IntegrationVerticalFlow.tsx","../../src/Integration/IntegrationsList.tsx","../../src/Integration/IntegrationsListItem.tsx","../../src/Integration/IntegrationsListItemActions.tsx","../../src/Integration/IntegrationsListSkeleton.tsx","../../src/Data/DvConnection/DvConnectionCard.tsx","../../src/Integration/IntegrationsListView.tsx","../../src/Dashboard/TopIntegrationsCard.tsx","../../src/Dashboard/UptimeMetric.tsx","../../src/Data/Virtualizations/Views/ViewListItem.tsx","../../src/Data/Virtualizations/Views/ViewList.tsx","../../src/Data/DvConnection/DvConnectionsGrid.tsx","../../src/Data/DvConnection/DvConnectionsGridCell.tsx","../../src/Data/DvConnection/DvConnectionsListView.tsx","../../src/Data/Virtualizations/Views/ViewInfoListItem.tsx","../../src/Data/Virtualizations/Views/ViewInfoList.tsx","../../src/Data/Virtualizations/VirtualizationListItem.tsx","../../src/Data/Virtualizations/models.ts","../../src/Data/Virtualizations/VirtualizationList.tsx","../../src/Data/Virtualizations/VirtualizationPublishStatus.tsx","../../src/Data/Virtualizations/VirtualizationPublishStatusDetail.tsx","../../src/Connection/ConnectionCreatorLayout.tsx","../../src/Connection/ConnectionSkeleton.tsx","../../src/Customization/ApiConnectorListSkeleton.tsx","../../src/Customization/ExtensionListSkeleton.tsx","../../src/Dashboard/RecentUpdatesItem.tsx","../../src/Dashboard/RecentUpdatesSkeleton.tsx","../../src/Data/Virtualizations/Views/ViewListSkeleton.tsx","../../src/Data/DvConnection/DvConnectionSkeleton.tsx","../../src/Data/Virtualizations/Views/ViewInfoListSkeleton.tsx","../../src/Data/Virtualizations/Views/ViewsCreateLayout.tsx","../../src/Data/Virtualizations/VirtualizationListSkeleton.tsx","../../src/Integration/IntegrationActionSelectorCard.tsx","../../src/Integration/IntegrationEditorLayout.tsx","../../src/Integration/IntegrationFlowStepWithOverview.tsx","../../src/Integration/IntegrationsListItemUnreadable.tsx","../../src/Layout/Breadcrumb.tsx","../../src/Layout/TabBar.tsx","../../src/Layout/WizardStep.tsx","../../src/Shared/GenericTable.tsx","../../src/Shared/UnrecoverableError.tsx","modules/integrations/components/TagIntegrationDialogWrapper.tsx","modules/integrations/components/Integrations.tsx","modules/integrations/components/IntegrationCreatorBreadcrumbs.tsx","modules/integrations/components/IntegrationEditorBreadcrumbs.tsx","modules/integrations/components/IntegrationEditorSidebar.tsx","modules/integrations/components/index.ts","modules/customizations/routes.ts","app/syndesis_logo_full_darkbkg.svg","modules/data/routes.ts","modules/connections/resolvers.ts","app/AppContext.tsx","app/WithConfig.tsx","app/App.tsx","app/index.ts","modules/connections/routes.ts","../../src/widgets/helpers.ts","../../src/widgets/FormInputComponent.tsx","../../src/widgets/FormSelectComponent.tsx","../../src/widgets/FormTextAreaComponent.tsx","../../src/widgets/FormCheckboxComponent.tsx","../../src/widgets/FormHiddenComponent.tsx","../../src/widgets/FormDurationComponent.tsx","../../src/FormBuilder.tsx","../../src/AutoForm.tsx","../../src/key.ts","../../src/WithListViewToolbarHelpers.tsx","../../src/WithLoader.tsx","../../src/WithRouteData.tsx","../../src/WithRouter.tsx","../../src/makeResolver.ts","../../src/OptionalIntUtil.ts","modules/connections/components/ConnectionCreatorBreadcrumbs.tsx","modules/connections/components/Connections.tsx","modules/connections/components/ConnectionsWithToolbar.tsx","modules/connections/components/WithConnectorForm.tsx","modules/connections/components/index.ts","../../packages/atlasmap-assembly/dist/atlasmap/runtime.js","../../packages/atlasmap-assembly/dist/atlasmap/polyfills.js","../../packages/atlasmap-assembly/dist/atlasmap/styles.js","../../packages/atlasmap-assembly/dist/atlasmap/scripts.js","../../packages/atlasmap-assembly/dist/atlasmap/vendor.js","../../packages/atlasmap-assembly/dist/atlasmap/main.js","modules/connections/pages/ConnectionDetailsPage.tsx","modules/connections/pages/ConnectionsPage.tsx","modules/connections/pages/create/ConfigurationPage.tsx","modules/connections/pages/create/ConnectorsPage.tsx","modules/connections/pages/create/index.ts","modules/connections/pages/create/ReviewPage.tsx","modules/connections/ConnectionsCreatorApp.tsx","modules/connections/index.tsx","modules/customizations/shared/CustomizationsNavBar.tsx","modules/customizations/pages/ApiConnectorsPage.tsx","modules/customizations/shared/ExtensionIntegrations.tsx","modules/customizations/pages/ExtensionDetailsPage.tsx","modules/customizations/customizationsUtils.ts","modules/customizations/pages/ExtensionImportPage.tsx","modules/customizations/pages/ExtensionsPage.tsx","modules/data/shared/VirtualizationUtils.ts","modules/customizations/CustomizationsApp.tsx","modules/customizations/index.tsx","modules/dashboard/index.tsx","modules/routes.ts","modules/data/shared/HeaderView.tsx","modules/data/shared/VirtualizationNavBar.tsx","modules/data/shared/ViewsCreateSteps.tsx","modules/data/shared/ViewInfosContent.tsx","modules/data/shared/ViewSqlForm.tsx","modules/data/shared/ViewSqlFormAndTable.tsx","modules/data/shared/DvConnections.tsx","modules/data/shared/DvConnectionsWithToolbar.tsx","modules/data/pages/views/SelectConnectionPage.tsx","modules/data/pages/views/SelectViewsPage.tsx","modules/data/CreateViewsApp.tsx","modules/data/pages/VirtualizationCreatePage.tsx","modules/data/pages/VirtualizationMetricsPage.tsx","modules/data/pages/VirtualizationRelationshipPage.tsx","modules/data/pages/VirtualizationsPage.tsx","modules/data/pages/VirtualizationSqlClientPage.tsx","modules/data/pages/VirtualizationViewsPage.tsx","modules/data/index.tsx","modules/integrations/components/editor/AddStepPage.tsx","modules/integrations/shared/IntegrationDetailNavBar.tsx","modules/integrations/shared/WithConfigurationForm.tsx","modules/integrations/components/editor/endpoint/ConfigureActionPage.tsx","modules/integrations/components/editor/endpoint/SelectActionPage.tsx","modules/integrations/components/editor/SaveIntegrationPage.tsx","modules/integrations/components/editor/SelectConnectionPage.tsx","modules/integrations/IntegrationCreatorApp.tsx","modules/integrations/IntegrationEditorApp.tsx","modules/integrations/pages/detail/ActivityPage.tsx","modules/integrations/pages/detail/DetailsPage.tsx","modules/integrations/pages/detail/MetricsPage.tsx","modules/integrations/pages/import/ImportPage.tsx","modules/integrations/pages/IntegrationsPage.tsx","modules/integrations/pages/TestAtlasmapPage.tsx","modules/integrations/pages/cicd/ManageCiCdPage.tsx","modules/integrations/index.tsx","registerServiceWorker.ts","index.tsx","modules/data/resolvers.ts"],"names":["ApiContextDefaultValue","apiUri","dvApiUri","headers","ApiContext","React","_Pact","onFulfilled","onRejected","result","state","this","s","callback","_settle","e","o","_this","value","v","pact","then","observer","_catch","body","recover","const","_earlyReturn","_AsyncGenerator","entry","_entry","_pact","_resolve","_return","_promise","_wrapReturnedValue","done","_wrapYieldedValue","Symbol","Promise","resolve","returnValue","error","reject","callFetch","ref","method","includeAccept","includeContentType","includeReferrerPolicy","fetch","url","contentType","JSON","cache","credentials","Object","assign","mode","redirect","Fetch","constructor","props","read","bind","data","initialValue","defaultValue","hasData","loading","componentDidMount","componentDidUpdate","prevProps","shouldComponentUpdate","nextProps","nextState","equal","render","children","response","setState","_this3","baseUrl","ok","Error","statusText","indexOf","text","_response$text","json","_response$json","deepmerge","errorMessage","message","Stream","reader","getReader","textDecoder","TextDecoder","pushData","concat","onSave","cancel","componentWillUnmount","SyndesisFetch","stream","FetchOrStream","createElement","Consumer","MessageLevel","DataShapeKinds","MessageCode","DVFetch","ServerEventsContextDefaultValue","ServerEventsContext","IntegrationType","ConsoleLinkType","DetailedStatus","SPLIT","AGGREGATE","WithIntegrationHelpersWrapped","addConnection","deleteIntegration","deployIntegration","exportIntegration","importIntegration","saveIntegration","undeployIntegration","updateConnection","updateOrAddConnection","tagIntegration","getActionDescriptor","connectionId","actionId","configuredProperties","integration","connection","action","flow","position","id","actionDescriptor","produce","draft","step","Array","Set","file","fileName","blob","_body$blob","saveAs","version","isIntegrationDeployment","targetState","integrationId","environments","WithChangeListener","changeListener","registerChangeListener","unregisterChangeListener","event","filter","WithApiConnectors","changeFilter","change","items","totalCount","disableUpdates","WithPolling","poller","startPolling","stopPolling","setPoller","func","polling","pollingTimer","setInterval","clearInterval","undefined","WithEnvironments","this$1","WithEnvironmentHelpersWrapped","createEnvironment","deleteEnvironment","renameEnvironment","name","stringifyBody","newName","WithExtension","extensionId","actions","extensionType","schemaVersion","WithExtensionHelpersWrapped","deleteExtension","importExtension","uploadExtension","FormData","WithExtensionIntegrations","WithExtensions","WithIntegrations","WithIntegrationTags","WithMonitoredIntegrations","getMonitoredIntegrations","integrations","map","i","monitoring","WithIntegrationsMetrics","errors","integrationDeploymentMetrics","lastProcessed","Date","now","messages","metricsProvider","start","topIntegrations","getConnectionsForDisplay","connections","c","metadata","getConnectionsWithFromAction","connector","some","getConnectionsWithToAction","transformResponse","connectionsForDisplay","connectionsWithFromAction","connectionsWithToAction","dangerouslyUnfilteredConnections","WithConnections","getActionsWithFrom","a","getActionsWithTo","getConnectionIcon","icon","iconFile","File","URL","NEW_INTEGRATION","tags","getStep","getExtensionIcon","extension","getStepKindIcon","stepKind","getStepIcon","flowIndex","stepIndex","WithConnection","actionsWithFrom","actionsWithTo","WithConnectionHelpersWrapped","createConnection","deleteConnection","validateConfiguration","saveConnection","validateName","description","connectorId","values","proposedName","isError","testConn","WithConnector","getConnectorsForDisplay","connectors","transformConnectorsResponse","connectorsForDisplay","obj","WithConnectors","WithServerEvents","starting","started","unmounting","retries","preferredProtocol","changeListeners","messageListeners","registerMessageListener","unregisterMessageListener","listener","l","close","webSocket","eventSource","startConnection","onFailure","reconnectIn","setTimeout","connectUsingWebSockets","reservation","wsApiEndpoint","replace","connectWebSocket","connectEventSource","postMessageEvent","messageEvent","forEach","postChangeEvent","changeEvent","EventSource","addEventListener","onError","WebSocket","onmessage","onclose","ALL_STEPS","anyPrevious","anySubsequent","previousSteps","subsequentSteps","previousStep","dataShapeExists","subsequentStep","stepsHaveOutputDataShape","steps","ANY","requiresInputOutputDataShapes","properties","requiresOutputDataShape","type","displayName","placeholder","required","rows","hasPrecedingCollection","contextLoggingEnabled","bodyLoggingEnabled","customText","length","toLowerCase","positionNextSplit","positionNextAggregate","requiresConsistentSplitAggregate","input","inputDataShape","outputDataShape","previousDataShape","noCollectionSupportP","WithViews","vdbId","WithViewEditorStates","idPattern","WithVirtualizationHelpersWrapped","createVirtualization","updateViewEditorStates","deleteView","deleteViewEditorState","deleteVirtualization","publishVirtualization","queryVirtualization","refreshVirtualizationViews","unpublishServiceVdb","virtName","virtDesc","newVirtualization","keng__dataPath","username","keng__id","tko__description","virtualization","viewName","vdbName","serviceVdbName","editorStateId","_this2","virtualizationName","pubVirtualization","sqlQuery","rowlimit","rowOffset","queryBody","limit","offset","query","target","viewEditorStateId","viewEditorStates","_this9","WithVirtualization","virtualizationId","drivers","keng___links","keng__baseUri","keng__hasChildren","keng__kType","publishedState","serviceVdbVersion","serviceViewDefinitions","serviceViewModel","WithVirtualizations","WithVirtualizationConnectionStatuses","WithVirtualizationConnectionSchema","apiContext","descriptor","propertyDefinitionSteps","key","nextIntegration","btoa","encodeURIComponent","decodeURIComponent","atob","_syndesis_utils__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_routes__WEBPACK_IMPORTED_MODULE_1__","__webpack_exports__","apiConnectors","apiConnector","makeResolver","routes","_ref","params","apiConnectorId","create","upload","makeResolverNoParams","review","security","save","list","extensions","details","_ref2","update","_ref3","import","root","DocumentType","InspectionType","runtime","require","polyfills","styles","scripts","vendor","main","DataMapperAdapter","iframe","messageChannel","MessageChannel","onIframeLoad","onMessages","componentWillReceiveProps","prevPayload","_","nextPayload","updateDataMapperApp","removeEventListener","messagePort","port1","contentWindow","postMessage","port2","payload","onMappings","mappings","documentId","inputDescription","inputDocumentType","inputInspectionType","inputName","outputDescription","outputDocumentType","outputInspectionType","outputName","srcDoc","style","width","height","frameBorder","allowtransparency","extraProps","el","en","app","appEn","it","appIt","modules","connectionsEn","connectionsIt","customizations","customizationsEn","customizationsIt","dashboard","dashboardEn","dashboardIt","dataEn","dataIt","integrationsEn","integrationsIt","options","interpolation","escapeValue","debug","resources","shared","defaultNS","fallbackLng","fallbackNS","keySeparator","ns","i18n","use","LanguageDetector","init","configureIndexMapper","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","configureSelectConnectionMapper","rest","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_configureIndexMapper","configureSelectActionMapper","_configureSelectConne","configureConfigureActionMapper","_ref4","updatedIntegration","_configureSelectActio","positionAsNumber","parseInt","stepObject","listResolver","manageCicdResolver","manageCicd","createRootResolver","createStartSelectStepResolver","makeResolverNoParamsWithDefaults","selectStep","getEmptyIntegration","createStartSelectActionResolver","selectAction","createStartConfigureActionResolver","configureAction","createFinishSelectStepResolver","finish","createFinishSelectActionResolver","createFinishConfigureActionResolver","createConfigureIndexResolver","configure","index","createConfigureAddStepSelectStepResolver","addStep","createConfigureAddStepSelectActionResolver","createConfigureAddStepConfigureActionResolver","createConfigureEditStepSelectActionResolver","editStep","createConfigureEditStepConfigureActionResolver","createConfigureEditStepSaveAndPublishResolver","saveAndPublish","_ref5","integrationActivityResolver","activity","_ref6","integrationDetailsResolver","_ref7","integrationEditIndexResolver","edit","integrationEditAddStepSelectStepResolver","integrationEditAddStepSelectActionResolver","integrationEditAddStepConfigureActionResolver","integrationEditEditStepSelectActionResolver","integrationEditEditStepConfigureActionResolver","integrationEditSaveAndPublish","metricsResolver","metrics","_ref8","ApiError","react","es","t","ui","i18nTitle","i18nInfo","i18nHelp","i18nRefreshLabel","i18nReportIssue","errorInfo","ModuleLoader","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","timedOut","console","i18nShowErrorInfoLabel","pastDelay","PageNotFound","PageTitle","_React$PureComponent","config","Helmet_default","title","WithClosedNavigation","context","AppContext","hideNavigation","showNavigation","WithErrorBoundary","_getPrototypeOf2","_len","args","_key","call","nextContext","errorComponent","d","ApiError_ApiError","ModuleLoader_ModuleLoader","PageNotFound_PageNotFound","PageTitle_PageTitle","WithClosedNavigation_WithClosedNavigation","WithErrorBoundary_WithErrorBoundary","named_urls__WEBPACK_IMPORTED_MODULE_0__","stepRoutes","apiProvider","include","specification","dataMapper","basicFilter","template","describeData","editorRoutes","IntegrationEditorStepAdder","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","_home_circleci_repo_app_ui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_6__","_syndesis_ui__WEBPACK_IMPORTED_MODULE_5__","idx","stepName","stepDescription","src","href","configureStepHref","as","className","active","showDetails","addStepHref","i18nAddStep","route","dashboard_resolvers","reverse","ConfirmationIconType","ConfirmationButtonStyle","ConfirmationDialog","MessageDialog","accessibleName","accessibleDescription","NONE","Icon","onHide","onCancel","primaryAction","onConfirm","primaryActionButtonContent","i18nConfirmButtonText","primaryActionButtonBsStyle","buttonStyle","primaryContent","i18nConfirmationMessage","secondaryAction","secondaryActionButtonContent","i18nCancelButtonText","secondaryContent","i18nDetailsMessage","show","showDialog","Dialog","footer","Container","classnames","DndFileChooser","files","notifications","handleAcceptedFiles","handleRejectedFiles","getSelectedFileMessage","i18nNoFileSelectedMessage","getUploadMessage","i18nUploadSuccessMessage","i18nUploadFailedMessage","i18nUploadSuccessMessages","i18nUploadFailedMessages","acceptedFiles","onUploadAccepted","rejectedFiles","Dropzone","accept","fileExtensions","disabled","disableDropzone","multiple","allowMultiple","onDropAccepted","onDropRejected","getInputProps","Grid","fluid","getRootProps","refKey","Row","Col","dangerouslySetInnerHTML","__html","i18nInstructions","xs","i18nSelectedFileLabel","AppLayout","isNavOpen","onNavToggle","Header","PageHeader","logo","pictograph","logoProps","toolbar","appNav","showNavToggle","Sidebar","PageSidebar","nav","Nav","NavList","Page","header","sidebar","PageSection","AppTopMenu","isOpen","onToggle","onSelect","Dropdown","isPlain","toggle","DropdownToggle","dropdownItems","ButtonLink","size","Link","to","onClick","Loader","inline","Spinner","inverse","PfNavLink","classNameProp","exact","isActiveProp","location","strict","styleProp","label","path","pathname","escapedPath","Route","match","isActive","childLocation","joinClassnames","activeClassName","activeStyle","PfVerticalNavItem","classNames","WizardSteps","mainSteps","altSteps","ReadWidget","allowEditing","onEdit","EditWidget","errorMsg","saving","asTextarea","onChange","Fragment","FormGroup","controlId","validationState","valid","FormControl","componentClass","InlineEdit","ConfirmButton","CancelButton","HelpBlock","InputGroup","Button","InlineTextEdit","i18nPlaceholder","isTextArea","onValidate","attrs","currentValue","setCurrentValue","editing","setEditing","setSaving","useState","ref$4_0","ref$4","setValidity","validate","valueToValidate","handleConfirm","success","handleChange","isEditing","renderValue","renderEdit","ListViewToolbar","renderInput","currentFilterType","Filter","ValueSelector","filterValues","onFilterValueSelected","filterType","onUpdateCurrentValue","onKeyPress","onValueKeyPress","Toolbar","TypeSelector","filterTypes","onFilterTypeSelected","onSelectFilterType","Sort","sortTypes","currentSortType","onSortTypeSelected","onUpdateCurrentSortType","DirectionSelector","isNumeric","isAscending","isSortAscending","onToggleCurrentSortDirection","Results","i18nResultsCount","activeFilters","List","item","Item","onRemove","onRemoveFilter","filterData","onClearFilters","LogViewer","count","followScroll","previousCount","renderRow","parent","CellMeasurer","cellMeasurerCache","columnIndex","rowIndex","toggleFollow","CellMeasurerCache","fixedWidth","minHeight","getDerivedStateFromProps","sm","AutoSizer","disableHeight","disableWidth","deferredMeasurementCache","rowCount","rowHeight","rowRenderer","scrollToLine","scrollToIndex","Switch","labelText","Notifications","ToastNotificationList","notification","TimedToastNotification","persistent","onDismiss","timerdelay","notificationTimerDelay","SimplePageHeader","i18nDescription","Title","headingLevel","TitleLevel","h2","Text","ProgressWithLink","currentStep","totalSteps","logUrl","i18nLogUrlText","ProgressBar","max","PfDropdownItem","superclass","DropdownItem","ConnectionCard","showDeleteDialog","menuProps","doCancel","doDelete","onDelete","DANGER","i18nCancelLabel","i18nDeleteLabel","i18nDeleteModalMessage","i18nDeleteModalTitle","Card","matchHeight","DropdownKebab","pullRight","i18nMenuTitle","role","tabIndex","i18nViewLabel","editHref","i18nEditLabel","isDeleteEnabled","alt","ConnectionDetailsForm","onSubmit","handleSubmit","validationResults","Alert","bsStyle","isWorking","isValid","i18nValidateLabel","onCancelEditing","i18nSaveLabel","onStartEditing","ConnectionDetailsHeader","connectionIcon","connectionName","i18nNamePlaceholder","onChangeName","i18nDescriptionLabel","connectionDescription","i18nDescriptionPlaceholder","onChangeDescription","i18nUsageMessage","ConnectionsGrid","CardGrid","ConnectionsGridCell","md","ConnectionsListView","linkToConnectionCreate","ConnectorConfigurationForm","i18nFormTitle","TagNameValidationError","ApiConnectorDetailCard","CardBody","ApiConnectorInfo","ApiConnectorReview","ApiConnectorDetail","CardHeading","CardTitle","ApiConnectorListItem","handleDelete","handleDetails","getDeleteTooltip","Tooltip","i18nDeleteTip","i18nDelete","getDetailsTooltip","i18nDetailsTip","i18nDetails","onDetails","ListViewItem","OverlayTrigger","overlay","placement","usedBy","additionalInfo","ListViewInfoItem","i18nUsedByMessage","apiConnectorDescription","heading","apiConnectorName","hideCloseIcon","leftContent","apiConnectorIcon","stacked","ApiConnectorListView","getCreateConnectorTooltip","linkCreateApiConnector","ListView","EmptyState","i18nEmptyStateTitle","i18nEmptyStateInfo","Action","i18nLinkCreateApiConnector","i18nLinkCreateApiConnectorTip","ExtensionDetail","getUpdateTooltip","i18nUpdateTip","i18nUpdate","i18nCancelText","extensionName","i18nIdMessage","linkUpdateExtension","extensionUses","h3","integrationsSection","ExtensionImportCard","Body","i18nImportInstructions","i18nAlertMessage","dndDisabled","i18nHelpMessage","i18nDndHelpMessage","i18nDndInstructions","i18nDndNoFileSelectedMessage","i18nDndSelectedFileLabel","i18nDndUploadFailedMessage","i18nDndUploadSuccessMessage","onDndUploadAccepted","onUploadRejected","onDndUploadRejected","ExtensionImportReview","handleImport","getActions","onImport","extensionUid","i18nNameLabel","extensionDescription","i18nTypeLabel","i18nExtensionTypeMessage","i18nActionsLabel","xsOffset","i18nImport","cancelLink","i18nCancel","ExtensionIntegrationsTable","getColumns","headerFormat","Table","cell","formatters","rowData","i18nName","property","onIntegrationSelected","onSelectIntegration","PfProvider","striped","bordered","hover","columns","rowKey","ExtensionListItem","detailsPageLink","i18nExtensionType","extensionIcon","ExtensionListView","getImportTooltip","i18nLinkImportExtensionTip","i18nLinkImportExtension","linkImportExtension","ExtensionOverview","i18nType","i18nLastUpdate","i18nLastUpdateDate","ExtensionSupports","extensionActions","AggregatedMetricCard","accented","aggregated","AggregateStatusCount","AggregateStatusNotifications","AggregateStatusNotification","ConnectionsMetric","Dashboard","linkToIntegrations","i18nLinkToIntegrations","linkToIntegrationCreation","integrationBoard","marginTop","i18nConnections","linkToConnections","i18nLinkToConnections","linkToConnectionCreation","IntegrationBoard","colors","Pending","patternfly","black200","Published","blue400","Stopped","black300","i18nIntegrationStateRunning","runningIntegrations","i18nIntegrationStateStopped","stoppedIntegrations","i18nIntegrationStatePending","pendingIntegrations","DonutChart","tooltip","contents","pfDonutTooltipContents","secondary","i18nIntegrations","i18nTotal","legend","RecentUpdatesCard","CiCdEditDialog","tagName","handleClick","trim","validationError","NoErrors","htmlFor","i18nInputLabel","NoName","i18nNoNameError","NameInUse","i18nNameInUseError","CiCdList","CiCdListEmptyState","bsSize","onAddNew","i18nAddNewButtonText","CiCdListItem","handleEditClicked","handleRemoveClicked","onEditClicked","onRemoveClicked","i18nUsesText","CiCdListView","resultsCount","CiCdManagePageUI","showAddDialog","showEditDialog","showRemoveDialog","openAddDialog","closeAddDialog","openEditDialog","closeEditDialog","openRemoveDialog","closeRemoveDialog","handleSave","handleRemoveConfirm","onEditItem","currentItemName","onAddItem","onRemoveItem","i18nPageTitle","i18nPageDescription","i18nAddTagDialogTitle","i18nAddTagDialogDescription","i18nTagInputLabel","i18nSaveButtonText","nameValidationError","onValidateItem","i18nEditTagDialogTitle","i18nEditTagDialogDescription","NORMAL","i18nConfirmCancelButtonText","i18nConfirmRemoveButtonText","i18nRemoveConfirmationMessage","i18nRemoveConfirmationTitle","i18nRemoveConfirmationDetailMessage","onFilterAdded","ItemSkeleton","ContentLoader","speed","primaryColor","secondaryColor","x","y","rx","ry","min","Math","CiCdListSkeleton","TagIntegrationDialog","disableSave","initialItems","selected","acc","current","itemsDraft","TagIntegrationListItem","checked","checkboxInput","defaultChecked","TagIntegrationDialogEmptyState","background","border","i18nGoToManageCiCdButtonText","TagIntegrationDialogBody","manageCiCdHref","i18nEmptyStateButtonText","ImportPageUI","IntegrationDetailDescription","IntegrationDetailEditableName","IntegrationDetailHistoryListView","integrationIsDraft","i18nTextDraft","IntegrationDetailHistoryListViewItem","MenuItem","i18nTextHistoryMenuReplaceDraft","i18nTextHistoryMenuUnpublish","i18nTextLastPublished","integrationUpdatedAt","IntegrationDetailInfo","IntegrationEditorActionsListItem","integrationName","integrationDescription","IntegrationEditorChooseAction","IntegrationEditorChooseConnection","IntegrationEditorConnectionsListItem","IntegrationEditorForm","IntegrationEditorNothingToConfigure","i18nAlert","IntegrationEditorStepsList","IntegrationEditorStepsListItem","IntegrationFlowAddStep","showTooltip","containerRef","createRef","hideTooltip","toggleTooltip","onMouseEnter","onMouseLeave","onTouchStart","IntegrationFlowStep","i18nTooltip","trigger","rootClose","GenericDescription","StepOverview","actionI18nLabel","dataTypeI18nLabel","dataType","nameI18nLabel","IntegrationFlowStepDetails","IntegrationIcon","finishConnectionIcon","startConnectionIcon","IntegrationStatus","labelType","currentState","Label","IntegrationStatusDetail","fallbackText","i18nProgressPending","IntegrationStepsHorizontalView","ListViewIcon","slice","opt","xsHidden","IntegrationVerticalFlow","expanded","localStorage","toggleExpanded","IntegrationsList","IntegrationsListItem","isConfigurationRequired","i18nConfigurationRequired","InfoItem","monitoringValue","monitoringCurrentStep","monitoringTotalSteps","monitoringLogUrl","i18nProgressStarting","i18nProgressStopping","i18nPublished","i18nUnpublished","i18nError","IntegrationsListItemActions","detailsHref","getRandom$1","ConnectionStatus","cx","cy","r","getRandom","IntegrationsListSkeleton","IntegrationsListView","linkToManageCiCd","i18nManageCiCd","linkToIntegrationImport","TopIntegrationsCard","DropdownButton","i18nLast30Days","eventKey","i18nLast60Days","UptimeMetric","startAsHuman","toLocaleString","ViewListItem","handleEdit","handleCancel","getEditTooltip","i18nEdit","viewDescription","viewIcon","i18nEditTip","ViewList","getImportViewsTooltip","linkImportViewsHRef","i18nImportViews","getCreateViewTooltip","linkCreateViewHRef","hasListData","i18nCreateView","i18nCreateViewTip","i18nImportViewsTip","DvConnectionCard","toggleSelected","connName","ACTIVE","isSelected","onSelectionChanged","dvStatus","DvConnectionsGrid","DvConnectionsGridCell","DvConnectionsListView","ViewInfoListItem","handleCheckboxToggle","itemSelected","temp","getNodePathStr","nodePath","segment","isUpdateView","ViewInfoList","VirtualizationListItem","showConfirmationDialog","handleExport","handleUnpublish","handlePublish","onExport","onPublish","onUnpublish","handleAcceptConfirmation","currentPublishedState","isPublished","publishInProgress","WARNING","i18nUnpublish","i18nUnpublishModalMessage","i18nUnpublishModalTitle","VirtualizationPublishStatusDetail","publishingLogUrl","stepText","publishingStepText","publishingCurrentStep","publishingTotalSteps","i18nPublishInProgress","i18nPublishLogUrlText","VirtualizationPublishStatus","i18nDraft","i18nExport","i18nPublish","virtualizationDescription","VirtualizationList","getCreateVirtualizationTooltip","i18nLinkCreateVirtualizationTip","i18nLinkCreateVirtualization","getImportVirtualizationTooltip","i18nImportTip","linkCreateHRef","content","onBack","onNext","cancelHref","backHref","nextHref","isNextLoading","isNextDisabled","extraButtons","isLastStep","integrationCurrentState","integrationDate","onCreateViews","rawObject","window","PfBreadcrumb","Breadcrumb","margin","paddingLeft","bsClass","isDisabled","isAlt","subSteps","showErrorInfo","setShowErrorInfo","Help","textAlign","componentStack","TagIntegrationDialogWrapper","assertThisInitialized","newEnvironments","targetIntegrationId","api","hasTags","tagError","hasEnvironments","environmentsError","utils","loaderChildren","errorChildren","mappedItems","stringify","Integrations","showActionPromptDialog","showCiCdPromptDialog","handleAction","handleActionCancel","promptForAction","closeCiCdDialog","promptDialogButtonText","promptDialogIcon","promptDialogText","promptDialogTitle","getPodLogUrl","pushNotification","TagIntegrationDialogWrapper_TagIntegrationDialogWrapper","resolvers","mi","editAction","startAction","_handleAction","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","t0","stop","promptDialogButtonStyle","stopAction","_handleAction2","_callee2","_context2","err","deleteAction","_handleAction3","_callee3","_context3","exportAction","ciCdAction","promptForCiCd","canEdit","push","canActivate","canDeactivate","board","warnings","notices","detailedState","getStartIcon","apiEndpoint","getFinishIcon","IntegrationCreatorBreadcrumbs","toggleActive","activeSubstep","subStep","IntegrationEditorBreadcrumbs","IntegrationEditorSidebar","activeIndex","hasAddStep","addAtIndex","activeAddStep","addIcon","addI18nTitle","addI18nTooltip","addI18nDescription","process","Integrations_Integrations","IntegrationCreatorBreadcrumbs_IntegrationCreatorBreadcrumbs","IntegrationEditorBreadcrumbs_IntegrationEditorBreadcrumbs","IntegrationEditorSidebar_IntegrationEditorSidebar","module","exports","p","virtualizations","relationship","sqlClient","views","importSource","selectConnection","selectViews","selectConnector","configureConnector","WithConfig","_componentDidMount","configResponse","_config","sent","App","logout","removeNotificationAction","notifToRemove","n","msg","toConsumableArray","toString","linkType","namespace","podName","consoleUrl","data-testid","WithConfig_WithConfig","minWait","Provider","apiBase","datavirt","dvUrl","SYNDESIS-XSRF-TOKEN","functions","appTitle","renderAppNav","verticalNav","renderVerticalNav","minWidth","logoHref","onNavigationCollapse","onNavigationExpand","component","App_App","getValidationState","field","form","FormInputComponent","ControlLabel","fieldAttributes","FormSelectComponent","enum","FormTextAreaComponent","FormCheckboxComponent","Checkbox","FormHiddenComponent","durations","calculateValue","duration","FormDurationComponent","inputField","handleOnSelect","handleBlur","receiveInputRef","newDuration","setFieldValue","valueAsNumber","Form","isSubmitting","onBlur","inputRef","FormBuilder","getField","componentTypemaps","checkbox","hidden","select","textarea","Field","i18nRequiredProperty","fields","enrichAndOrderProperties","definition","massagedValue","sanitizeValues","keys","reduce","prop","sort","b","massageType","secret","massageRequired","massageValue","String","AutoForm","Formik","initialValues","touched","dirty","isValidating","resetForm","validateForm","submitForm","ALPHABET","RANDOMNESS","lastTimestamp","let","WithListViewToolbarHelpers","keyEvent","filterValue","updated","sortType","defaultFilterType","defaultSortType","filterCategory","WithLoader","loaded","waitTimeout","clearTimeout","WithRouteData","WithRouterBase","WithRouter","withRouter","timestamp","getTime","remainingTimestamp","defaultRoute","mapper","present","asInt","optional","ConnectionCreatorBreadcrumbs","Connections","_x","_x2","fill","getConnectionHref","includeConnectionMenu","getConnectionEditHref","uses","filterByName","sortByName","ConnectionsWithToolbar","helpers","filteredAndSortedConnections","valueToLower","includes","miA","miB","right","localeCompare","getFilteredAndSortedConnections","i18nLinkCreateConnection","Connections_Connections","defaultProps","includeHidden","WithConnectorForm","def","objectSpread","shouldValidateAgainstBackend","validateFormAgainstBackend","status","find","scope","parameters","auto_form","enableValidationAgainstBackend","ConnectionCreatorBreadcrumbs_ConnectionCreatorBreadcrumbs","ConnectionsWithToolbar_ConnectionsWithToolbar","WithConnectorForm_WithConnectorForm","ConnectionDetailsPage","numUsedBy","history","dist_api","updatedConnection","abrupt","saveDescription","_ref9","saved","saveName","_ref10","validation","doValidateName","_x3","saveConnector","_ref11","_callee4","_context4","setSubmitting","_x4","_x5","_ref12","_callee5","_context5","_x6","cancelEditing","startEditing","components","_ref13","i18nUsageLabel","getUsedByMessage","ConnectionsPage","ConfigurationPage","ConnectorsPage","ReviewPage","ConnectionsCreatorApp","ConnectionsModule","ConnectionDetailsPage_ConnectionDetailsPage","CustomizationsNavBar","ApiConnectorsPage","optionalIntValue","alert","filteredAndSorted","thisApi","thatApi","getFilteredAndSortedApiConnectors","CustomizationsNavBar_CustomizationsNavBar","backgroundColor","filterUndefinedId","ExtensionIntegrations","getUsageMessage","ExtensionDetailsPage","handleSelectIntegration","selectedIntegrationId","i18nOverviewSectionTitle","i18nSupportsSectionTitle","i18nUsageSectionTitle","ExtensionIntegrations_ExtensionIntegrations","overviewSection","lastUpdated","i18nTypeMessage","getTypeMessage","supportsSection","getExtensionTypeName","ExtensionImportPage","actionDescription","actionName","onDndUploadRejectedHandler","failedFileName","onDndUploadAcceptedHandler","uploaded","dndUploadFailedMessage","dndUploadSuccessMessage","t1","importExtensionId","getActionsLabel","i18nIdLabel","i18nActionText","getActionText","DvConnectionStatus","DvConnectionSelection","ExtensionsPage","thisExtension","thatExtension","getFilteredAndSortedExtensions","i18nNameFilterPlaceholder","CustomizationApp","Redirect","CustomizationsModule","CustomizationsApp","LoadableDashboardPage","Loadable","loader","DashboardModule","baseurl","modules_routes","HeaderView","VirtualizationNavBar","ViewsCreateSteps","PREVIEW_VDB_NAME","SCHEMA_MODEL_SUFFIX","generateViewEditorStates","viewInfos","editorStates","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","iterator","viewInfo","srcPaths","viewSourceNode","projCols","viewDefn","compositions","isComplete","keng__description","projectedColumns","sourcePaths","editorState","viewDefinition","return","getDvConnectionStatus","conn","dvState","INACTIVE","isDvConnectionSelected","dvSelected","SELECTED","getPreviewSql","sourcePath","split","getConnectionName","segments","getNodeName","getPreviewTableName","getFilteredAndSortedSchemaNodes","schemaNodes","selectedViewNames","existingViewNames","generateViewInfos","schemaNode","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","seg","queryable","vwName","selectedState","findIndex","hasExistingView","view","isUpdate","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","thisViewInfo","thatViewInfo","ViewInfosContent","displayedViews","handleViewSelectionChange","onViewSelected","onViewDeselected","ViewSqlForm","queryResults","queryResultsEmpty","querySql","updateQueryResults","viewSelected","results","onQueryResultsChanged","viewSql","selectedView","formDefinition","rowLimit","componentProperty","deprecated","javaType","kind","order","sqlStatement","doSubmit","targetVdb","ViewSqlFormAndTable","setQueryResults","defaultCellFormat","Heading","defaultHeaderFormat","Cell","ViewSqlForm_ViewSqlForm","row","defineProperty","Info","DvConnections","handleConnSourceSelectionChanged","onConnectionSelectionChanged","dvSourceStatuses","selectedConn","conns","virtualizationsSourceStatuses","dvConns","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_loop","connStatus","virtSrcStatus","virtStatus","sourceName","vdbState","schemaState","selectionState","NOTSELECTED","_iterator4","generateDvConnections","DvConnectionsWithToolbar","selectedConnection","handleConnectionSelectionChanged","DvConnections_DvConnections","SelectConnectionPage","selConn","ViewsCreateSteps_ViewsCreateSteps","DvConnectionsWithToolbar_DvConnectionsWithToolbar","SelectViewsPage","selectedViews","hasSelectedTables","handleAddView","handleRemoveView","viewNames","splice","handleCreateViews","ViewInfosContent_ViewInfosContent","getExistingViewNames","CreateViewsApp","VirtualizationCreatePage","virtDescription","handleCreate","VirtualizationMetricsPage","HeaderView_HeaderView","VirtualizationNavBar_VirtualizationNavBar","VirtualizationRelationshipPage","VirtualizationsPage","thisVirtualization","thatVirtualization","getFilteredAndSortedVirtualizations","i18nCreateDataVirtualization","i18nCreateDataVirtualizationTip","handleImportVirt","publishingDetails","publishStepDetails","stepNumber","stepTotal","publishLogUrl","getPublishingDetails","handleExportVirtualization","VirtualizationSqlClientPage","ViewSqlFormAndTable_ViewSqlFormAndTable","VirtualizationViewsPage","handleDeleteView","viewDefinitions","thisView","thatView","getFilteredAndSortedViewDefns","onImportView","handleImportView","handleEditView","DataModule","AddStepPage","getSteps","getEditAddStepHref","stepIdx","getEditConfigureStepHrefCallback","IntegrationDetailNavBar","WithConfigurationForm","getActionSteps","getActionStep","configurationStep","getActionStepDefinition","moreConfigurationSteps","onUpdatedIntegration","i18nSubtitle","getActionById","getConnectorActions","getConnectionConnector","renderConfigurationForm","renderNoPropertiesInfo","ConfigureActionPage","_ref2$step","stepAsNumber","flowAsNumber","nextStepHref","postConfigureHref","WithConfigurationForm_WithConfigurationForm","SelectActionPage","selectHref","SaveIntegrationPage","setIntegrationName","postSaveHref","_state$integration","connectionsData","hasConnectionsData","connectionsError","extensionsData","hasExtensionsData","extensionsError","toStepKindCollection","connectionOrStep","stepOrConnection","apiProviderHref","connectionHref","onStepClick","addStepPage","AddStepPage_AddStepPage","integrations_components","saveIntegrationPage","SaveIntegrationPage_SaveIntegrationPage","startStepSelectConnectionPage","editor_SelectConnectionPage_SelectConnectionPage","startStepSelectActionPage","SelectActionPage_SelectActionPage","startStepConfigureActionPage","ConfigureActionPage_ConfigureActionPage","finishStepSelectConnectionPage","startStep","finishStepSelectActionPage","finishStepConfigureActionPage","addStepSelectConnectionPage","addStepSelectActionPage","addStepConfigureActionPage","_ref14","editStepSelectActionPage","_ref15","editStepConfigureActionPage","_ref16","IntegrationCreatorApp","selectConnectionPage","IntegrationEditorApp","ActivityPage","IntegrationDetailNavBar_IntegrationDetailNavBar","DetailsPage","MetricsPage","ImportPage","handleUploadAccepted","uploadFails","uploadWins","uploadFailedMessages","uploadSuccessMessages","failed","filterByConnection","sortByStatus","IntegrationsPage","integrationsData","filteredAndSortedIntegrations","flows","found","left","getFilteredAndSortedIntegrations","TestAtlasmapPage","onReset","display","flexFlow","atlasmap_adapter","SCHEMA","createConfirmRemoveString","tag","ManageCiCdPage","filteredAndSortedEnvironments","answer","getFilteredAndSortedEnvironments","handleValidateItem","finally","listItem","i18nEditButtonText","i18nRemoveButtonText","IntegrationsModule","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","ReactDOM","BrowserRouter","document","getElementById","origin","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.bb0d4b47.chunk.js","sourcesContent":["import * as React from 'react';\n\nexport interface IApiContext {\n  apiUri: string;\n  dvApiUri: string;\n  headers: { [name: string]: string };\n}\n\nexport const ApiContextDefaultValue = {\n  apiUri: 'http://example.com',\n  dvApiUri: 'http://example.com',\n  headers: {},\n} as IApiContext;\n\nexport const ApiContext = React.createContext<IApiContext>(\n  ApiContextDefaultValue\n);\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = (function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof Symbol !== \"undefined\") {\n\t\tvar iteratorSymbol = Symbol.iterator;\n\t\tif (iteratorSymbol && (iteratorSymbol in target)) {\n\t\t\tvar iterator = target[iteratorSymbol](), step, pact, reject;\n\t\t\tfunction _cycle(result) {\n\t\t\t\ttry {\n\t\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (pact) {\n\t\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpact = result;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t_cycle();\n\t\t\tif (iterator.return) {\n\t\t\t\tvar _fixup = function(value) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\t\titerator.return();\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch(e) {\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\tif (pact && pact.then) {\n\t\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t_fixup();\n\t\t\t}\n\t\t\treturn pact;\n\t\t}\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"value is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof Symbol !== \"undefined\") {\n\t\tvar asyncIteratorSymbol = Symbol.asyncIterator;\n\t\tif (asyncIteratorSymbol && (asyncIteratorSymbol in target)) {\n\t\t\tvar pact = new _Pact();\n\t\t\tvar iterator = target[asyncIteratorSymbol]();\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t\treturn pact;\n\t\t\tfunction _resumeAfterBody(result) {\n\t\t\t\tif (check && !check()) {\n\t\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t\t}\n\t\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t\t}\n\t\t\tfunction _resumeAfterNext(step) {\n\t\t\t\tif (step.done) {\n\t\t\t\t\t_settle(pact, 1);\n\t\t\t\t} else {\n\t\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction _reject(error) {\n\t\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t\t}\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = (function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype[Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))] = function() {\n\t\treturn this;\n\t};\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","export interface IFetchHeaders {\n  [s: string]: string;\n}\nexport interface IFetch {\n  url: string;\n  method: 'GET' | 'PUT' | 'POST' | 'DELETE';\n  headers?: IFetchHeaders;\n  body?: any;\n\n  /**\n   * Indicates if the content type should be included in the headers. Defaults to `true`. When using a\n   * content type of 'multipart/form-data' this should be set to `false` but you still need to set the\n   * content type.\n   */\n  includeContentType?: boolean;\n\n  /**\n   * Defaults to 'application/json; charset=utf-8' if not set.\n   */\n  contentType?: string;\n\n  /**\n   * Indicates if 'accept' should be included in the headers. Defaults to `true`.\n   */\n  includeAccept?: boolean;\n\n  /**\n   * Defaults to 'application/json,text/plain,*&#47*' if not set.\n   */\n  accept?: string;\n\n  /**\n   * Indicates if a 'Referer Policy' of 'no-referrer' should be included.\n   */\n  includeReferrerPolicy?: boolean;\n\n  /**\n   * Whether or not to stringify the data to JSON, overrides the content type\n   */\n  stringifyBody?: boolean;\n}\n\nexport function callFetch({\n  url,\n  method,\n  headers = {},\n  body,\n  includeContentType = true,\n  contentType = 'application/json; charset=utf-8',\n  includeAccept = true,\n  accept = 'application/json,text/plain,*/*',\n  includeReferrerPolicy = true,\n  stringifyBody = true,\n}: IFetch) {\n  if (includeAccept) {\n    const acceptId = 'Accept';\n    headers[acceptId] = accept;\n  }\n\n  if (includeContentType) {\n    const contentTypeId = 'Content-Type';\n    headers[contentTypeId] = contentType;\n  }\n\n  if (includeReferrerPolicy) {\n    const referrerPolicyId = 'referrerPolicy';\n    headers[referrerPolicyId] = 'no-referrer';\n  }\n\n  return fetch(url, {\n    body:\n      contentType.includes('application/json') && stringifyBody\n        ? JSON.stringify(body)\n        : body,\n    cache: 'no-cache',\n    credentials: 'include',\n    headers: {\n      ...headers,\n    },\n    method,\n    mode: 'cors',\n    redirect: 'follow',\n  });\n}\n","import deepmerge from 'deepmerge';\nimport * as React from 'react';\nimport equal from 'react-fast-compare';\nimport { callFetch, IFetchHeaders } from './callFetch';\n\nexport interface IFetchState<T> {\n  data: T;\n  error: boolean;\n  errorMessage?: string;\n  hasData: boolean;\n  loading: boolean;\n}\n\nexport interface IFetchRenderProps<T> {\n  response: IFetchState<T>;\n  read(): Promise<void>;\n}\n\nexport interface IFetchProps<T> {\n  baseUrl: string;\n  url: string;\n  headers?: IFetchHeaders;\n  contentType?: string;\n  defaultValue: T;\n  initialValue?: T;\n  children(props: IFetchRenderProps<T>): any;\n}\n\nexport class Fetch<T> extends React.Component<IFetchProps<T>, IFetchState<T>> {\n  public constructor(props: IFetchProps<T>) {\n    super(props);\n    this.read = this.read.bind(this);\n    this.state = {\n      data: this.props.initialValue || this.props.defaultValue,\n      error: false,\n      hasData: !!this.props.initialValue,\n      loading: true,\n    };\n  }\n\n  public async componentDidMount() {\n    this.read();\n  }\n\n  public async componentDidUpdate(prevProps: IFetchProps<T>) {\n    if (prevProps.url !== this.props.url) {\n      this.read();\n    }\n  }\n\n  public shouldComponentUpdate(\n    nextProps: IFetchProps<T>,\n    nextState: IFetchState<T>\n  ): boolean {\n    return !equal(this.props, nextProps) || !equal(this.state, nextState);\n  }\n\n  public render() {\n    return this.props.children({\n      read: this.read,\n      response: this.state,\n    });\n  }\n\n  public async read() {\n    try {\n      this.setState({ loading: true });\n      const response = await callFetch({\n        contentType: this.props.contentType,\n        headers: this.props.headers,\n        method: 'GET',\n        url: `${this.props.baseUrl}${this.props.url}`,\n      });\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      let data;\n      if (\n        !this.props.contentType ||\n        this.props.contentType.indexOf('application/json') === 0\n      ) {\n        data = await response.json();\n        if (this.props.defaultValue) {\n          data = deepmerge(this.props.defaultValue, data);\n        }\n      } else {\n        data = await response.text();\n      }\n      this.setState({ data, hasData: true, loading: false });\n    } catch (e) {\n      this.setState({\n        data: this.props.defaultValue,\n        error: true,\n        errorMessage: e.message,\n        hasData: false,\n        loading: false,\n      });\n    }\n  }\n}\n","import { callFetch } from './callFetch';\nimport { Fetch, IFetchProps } from './Fetch';\n\nexport class Stream extends Fetch<string[]> {\n  protected reader: ReadableStreamReader | undefined;\n\n  public async componentDidUpdate(prevProps: IFetchProps<string[]>) {\n    if (prevProps.url !== this.props.url) {\n      if (this.reader) {\n        this.reader.cancel();\n      }\n      this.read();\n    }\n  }\n\n  public componentWillUnmount() {\n    if (this.reader) {\n      this.reader.cancel();\n    }\n  }\n\n  public read = async () => {\n    try {\n      this.setState({\n        loading: true,\n      });\n\n      callFetch({\n        contentType: this.props.contentType,\n        headers: this.props.headers,\n        method: 'GET',\n        url: `${this.props.baseUrl}${this.props.url}`,\n      })\n        .then(response => response.body)\n        .then(body => {\n          this.reader = body!.getReader();\n          const textDecoder = new TextDecoder('utf-8');\n          const pushData = ({\n            done,\n            value,\n          }: {\n            done: boolean;\n            value: Uint8Array;\n          }) => {\n            if (done) {\n              this.setState({\n                loading: false,\n              });\n            } else {\n              this.setState({\n                data: [...(this.state.data || []), textDecoder.decode(value)],\n              });\n\n              this.reader!.read().then(pushData);\n            }\n          };\n\n          this.reader.read().then(pushData);\n        });\n    } catch (e) {\n      this.setState({\n        error: true,\n        errorMessage: e.message,\n        loading: false,\n      });\n    }\n  };\n\n  public onSave = async () => {\n    throw new Error(`Can't save from a stream`);\n  };\n}\n","import * as React from 'react';\nimport { ApiContext } from './ApiContext';\nimport { Fetch, IFetchRenderProps } from './Fetch';\nimport { Stream } from './Stream';\n\nexport interface ISyndesisFetchProps<T> {\n  autoload?: boolean;\n  contentType?: string;\n  url: string;\n  stream?: boolean;\n  defaultValue: T;\n  initialValue?: T;\n  children(props: IFetchRenderProps<T>): any;\n}\n\nexport class SyndesisFetch<T> extends React.Component<ISyndesisFetchProps<T>> {\n  public render() {\n    const { url, stream, ...props } = this.props;\n\n    const FetchOrStream = stream ? Stream : Fetch;\n\n    return (\n      <ApiContext.Consumer>\n        {({ apiUri, headers }) => (\n          <FetchOrStream\n            baseUrl={apiUri}\n            url={url}\n            headers={headers}\n            {...props}\n          />\n        )}\n      </ApiContext.Consumer>\n    );\n  }\n}\n","import * as React from 'react';\nimport { ApiContext } from './ApiContext';\nimport { Fetch, IFetchRenderProps } from './Fetch';\n\nexport interface IDVFetchProps<T> {\n  autoload?: boolean;\n  contentType?: string;\n  url: string;\n  stream?: boolean;\n  defaultValue: T;\n  initialValue?: T;\n  children(props: IFetchRenderProps<T>): any;\n}\n\nexport class DVFetch<T> extends React.Component<IDVFetchProps<T>> {\n  public render() {\n    const { url, stream, ...props } = this.props;\n\n    return (\n      <ApiContext.Consumer>\n        {({ apiUri, dvApiUri, headers }) => (\n          <Fetch baseUrl={dvApiUri} url={url} headers={{}} {...props} />\n        )}\n      </ApiContext.Consumer>\n    );\n  }\n}\n","// Enum for the LeveledMessage level field\nexport enum MessageLevel {\n  INFO = 'INFO',\n  WARN = 'WARN',\n  ERROR = 'ERROR',\n}\n\n// Data shape kind enum when working with the DataShape type\nexport enum DataShapeKinds {\n  ANY = 'any',\n  JAVA = 'java',\n  JSON_SCHEMA = 'json-schema',\n  JSON_INSTANCE = 'json-instance',\n  XML_SCHEMA = 'xml-schema',\n  XML_SCHEMA_INSPECTED = 'xml-schema-inspected',\n  XML_INSTANCE = 'xml-instance',\n  NONE = 'none',\n}\n\n// These are message codes that we know about\nexport enum MessageCode {\n  SYNDESIS000 = 'SYNDESIS000', // generic message\n  SYNDESIS001 = 'SYNDESIS001', // One or more properties have been updated\n  SYNDESIS002 = 'SYNDESIS002', // One or more properties have been added or removed\n  SYNDESIS003 = 'SYNDESIS003', // Connector has been deleted\n  SYNDESIS004 = 'SYNDESIS004', // Extension has been deleted\n  SYNDESIS005 = 'SYNDESIS005', // Action has been deleted\n  SYNDESIS006 = 'SYNDESIS006', // One or more required properties is not set\n  SYNDESIS007 = 'SYNDESIS007', // Secrets update needed\n  SYNDESIS008 = 'SYNDESIS008', // Validation Error\n}\n\n// Integration status types and consts\nexport const PENDING = 'Pending';\nexport const PUBLISHED = 'Published';\nexport const UNPUBLISHED = 'Unpublished';\nexport const ERROR = 'Error';\n\nexport type IntegrationStatus =\n  | 'Pending'\n  | 'Published'\n  | 'Unpublished'\n  | 'Error';\n\nexport enum IntegrationType {\n  SingleFlow = 'SingleFlow',\n  ApiProvider = 'ApiProvider',\n  MultiFlow = 'MultiFlow',\n}\n\n// These types are for the integration detailed state\n// TODO: this should come from the swagger but it's missing\nexport enum ConsoleLinkType {\n  Events = 'EVENTS',\n  Logs = 'LOGS',\n}\n\nexport enum DetailedStatus {\n  Assembling = 'ASSEMBLING',\n  Building = 'BUILDING',\n  Deploying = 'DEPLOYING',\n  Starting = 'STARTING',\n}\n\n// Special sekret connection metadata keys\nexport const HIDE_FROM_STEP_SELECT = 'hide-from-step-select';\nexport const HIDE_FROM_CONNECTION_PAGES = 'hide-from-connection-pages';\n\n// stuff used by the ui to compute the StepKinds\nexport const EXTENSION = 'extension';\nexport const ENDPOINT = 'endpoint';\nexport const CONNECTION = ENDPOINT;\nexport const DATA_MAPPER = 'mapper';\nexport const BASIC_FILTER = 'ruleFilter';\nexport const ADVANCED_FILTER = 'expressionFilter';\nexport const STORE_DATA = 'storeData';\nexport const SET_DATA = 'setData';\nexport const CALL_ROUTE = 'callRoute';\nexport const CONDITIONAL_PROCESSING = 'conditionalProcessing';\nexport const SPLIT = 'split';\nexport const AGGREGATE = 'aggregate';\nexport const LOG = 'log';\nexport const TEMPLATE = 'template';\n","import * as React from 'react';\nimport { IChangeEvent, IMessageEvent } from './WithServerEvents';\n\nexport interface IServerEventsContext {\n  registerChangeListener: (listener: (event: IChangeEvent) => void) => void;\n  registerMessageListener: (listener: (event: IMessageEvent) => void) => void;\n  unregisterChangeListener: (listener: (event: IChangeEvent) => void) => void;\n  unregisterMessageListener: (listener: (event: IMessageEvent) => void) => void;\n}\n\nexport const ServerEventsContextDefaultValue = {} as IServerEventsContext;\n\nexport const ServerEventsContext = React.createContext<IServerEventsContext>(\n  ServerEventsContextDefaultValue\n);\n","import {\n  Action,\n  ActionDescriptor,\n  Connection,\n  Integration,\n  Step,\n} from '@syndesis/models';\nimport { saveAs } from 'file-saver';\nimport produce from 'immer';\nimport * as React from 'react';\nimport { ApiContext, IApiContext } from './ApiContext';\nimport { callFetch } from './callFetch';\nimport { PUBLISHED, UNPUBLISHED } from './constants';\n\ntype UpdateOrAddConnection = (\n  integration: Integration,\n  connection: Connection,\n  action: Action,\n  flow: number,\n  position: number,\n  configuredProperties: any\n) => Promise<Integration>;\n\nexport interface IWithIntegrationHelpersChildrenProps {\n  /**\n   * adds a step of type connection to the provided integration object.\n   *\n   * @param integration - the integration object to modify\n   * @param connection - the connection object that's been used to set up the\n   * step\n   * @param action - the action that's been used to set up the step\n   * @param flow - the zero-based index of the flow where to add the step\n   * @param position - the zero-based index of the steps where to add the step\n   * @param configuredProperties - the values configured by the user for the step\n   *\n   * @todo should we check `flow` and `position` to see if they are valid?\n   * @todo perhaps rename it with a better name\n   */\n  addConnection: UpdateOrAddConnection;\n  /**\n   * updates a step of type connection to the provided integration object.\n   *\n   * @param integration - the integration object to modify\n   * @param connection - the connection object that's been used to set up the\n   * step\n   * @param action - the action that's been used to set up the step\n   * @param flow - the zero-based index of the flow where to add the step\n   * @param position - the zero-based index of the steps where to add the step\n   * @param configuredProperties - the values configured by the user for the step\n   *\n   * @todo perhaps rename it with a better name\n   * @todo should we check `flow` and `position` to see if they are valid?\n   */\n  updateConnection: UpdateOrAddConnection;\n  /**\n   * updates a step of type connection to the provided integration object if\n   * a step exists at the provided `flow` and `position` indexes; a new step is\n   * added otherwise.\n   *\n   * @param integration - the integration object to modify\n   * @param connection - the connection object that's been used to set up the\n   * step\n   * @param action - the action that's been used to set up the step\n   * @param flow - the zero-based index of the flow where to add the step\n   * @param position - the zero-based index of the steps where to add the step\n   * @param configuredProperties - the values configured by the user for the step\n   *\n   * @todo perhaps rename it with a better name\n   * @todo should we check `flow` and `position` to see if they are valid?\n   */\n  updateOrAddConnection: UpdateOrAddConnection;\n  /**\n   * Delete the integration with the specified ID, empty response is returned\n   * @param id\n   */\n  deleteIntegration(id: string): Promise<void>;\n  /**\n   * Deploy the integration with the specified ID and version.  Empty response is returned\n   *\n   * @param id\n   * @param version\n   * @param isIntegrationDeployment\n   */\n  deployIntegration(\n    id: string,\n    version: string | number,\n    isIntegrationDeployment?: boolean\n  ): Promise<void>;\n  /**\n   * Uploads and imports the supplied file as a new integration\n   * @param file\n   */\n  importIntegration(file: File): Promise<void>;\n  /**\n   * Requests a .zip file of the integration, using the specified filename\n   * @param id\n   * @param fileName\n   */\n  exportIntegration(id: string, fileName: string): Promise<void>;\n  /**\n   * asynchronously saves the provided integration, returning the saved\n   * integration in case of success.\n   *\n   * @param integration\n   *\n   * @todo make the returned object immutable to avoid uncontrolled changes\n   */\n  saveIntegration(integration: Integration): Promise<Integration>;\n  /**\n   * Tags the integration with the given CI/CD environments\n   * @param integrationId\n   * @param environments\n   */\n  tagIntegration(\n    integrationId: string,\n    environments: string[]\n  ): Promise<Response>;\n  /**\n   * Request that the given integration ID at the given version be deactivated, empty response is returned\n   * @param id\n   * @param version\n   */\n  undeployIntegration(id: string, version: string | number): Promise<void>;\n}\n\nexport interface IWithIntegrationHelpersProps {\n  children(props: IWithIntegrationHelpersChildrenProps): any;\n}\n\nexport class WithIntegrationHelpersWrapped extends React.Component<\n  IWithIntegrationHelpersProps & IApiContext\n> {\n  constructor(props: IWithIntegrationHelpersProps & IApiContext) {\n    super(props);\n    this.addConnection = this.addConnection.bind(this);\n    this.deleteIntegration = this.deleteIntegration.bind(this);\n    this.deployIntegration = this.deployIntegration.bind(this);\n    this.exportIntegration = this.exportIntegration.bind(this);\n    this.importIntegration = this.importIntegration.bind(this);\n    this.saveIntegration = this.saveIntegration.bind(this);\n    this.undeployIntegration = this.undeployIntegration.bind(this);\n    this.updateConnection = this.updateConnection.bind(this);\n    this.updateOrAddConnection = this.updateOrAddConnection.bind(this);\n    this.tagIntegration = this.tagIntegration.bind(this);\n  }\n\n  public async getActionDescriptor(\n    connectionId: string,\n    actionId: string,\n    configuredProperties: any\n  ): Promise<ActionDescriptor | null> {\n    if (configuredProperties) {\n      const response = await callFetch({\n        body: configuredProperties,\n        headers: this.props.headers,\n        method: 'POST',\n        url: `${\n          this.props.apiUri\n        }/connections/${connectionId}/actions/${actionId}`,\n      });\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return (await response.json()) as ActionDescriptor;\n    } else {\n      return null;\n    }\n  }\n\n  public async addConnection(\n    integration: Integration,\n    connection: Connection,\n    action: Action,\n    flow: number,\n    position: number,\n    configuredProperties: any\n  ): Promise<Integration> {\n    const actionDescriptor = await this.getActionDescriptor(\n      connection.id!,\n      action.id!,\n      configuredProperties\n    );\n    return produce(integration, draft => {\n      const step: Step = {\n        action,\n        configuredProperties,\n        connection,\n        id: draft.flows![flow].id,\n      };\n      if (actionDescriptor) {\n        step.action!.descriptor = actionDescriptor;\n      }\n      step.stepKind = 'endpoint';\n      draft.flows![flow].steps!.splice(position, 0, step);\n      draft.tags = Array.from(new Set([...(draft.tags || []), connection.id!]));\n    });\n  }\n\n  public async deleteIntegration(id: string) {\n    const response = await callFetch({\n      headers: this.props.headers,\n      method: 'DELETE',\n      url: `${this.props.apiUri}/integrations/${id}`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n  }\n\n  public async importIntegration(file: File) {\n    const response = await callFetch({\n      body: file,\n      contentType: 'application/zip',\n      headers: this.props.headers,\n      includeContentType: false,\n      method: 'POST',\n      url: `${this.props.apiUri}/integration-support/import`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n  }\n\n  public async exportIntegration(id: string, fileName: string) {\n    return callFetch({\n      headers: this.props.headers,\n      method: 'GET',\n      url: `${this.props.apiUri}/integration-support/export.zip?id=${id}`,\n    }).then(async body => saveAs(await body.blob(), fileName));\n  }\n\n  public async deployIntegration(\n    id: string,\n    version: string | number,\n    isIntegrationDeployment = false\n  ) {\n    const response = await callFetch({\n      body: isIntegrationDeployment ? { targetState: PUBLISHED } : {},\n      headers: this.props.headers,\n      method: isIntegrationDeployment ? 'POST' : 'PUT',\n      url: isIntegrationDeployment\n        ? `${\n            this.props.apiUri\n          }/integrations/${id}/deployments/${version}/targetState`\n        : `${this.props.apiUri}/integrations/${id}/deployments`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n  }\n\n  public async undeployIntegration(id: string, version: string | number) {\n    const response = await callFetch({\n      body: { targetState: UNPUBLISHED },\n      headers: this.props.headers,\n      method: 'POST',\n      url: `${\n        this.props.apiUri\n      }/integrations/${id}/deployments/${version}/targetState`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n  }\n\n  public async updateConnection(\n    integration: Integration,\n    connection: Connection,\n    action: Action,\n    flow: number,\n    position: number,\n    configuredProperties: any\n  ): Promise<Integration> {\n    const actionDescriptor = await this.getActionDescriptor(\n      connection.id!,\n      action.id!,\n      configuredProperties\n    );\n    return produce(integration, draft => {\n      const step: Step = {\n        action,\n        configuredProperties,\n        connection,\n        id: draft.flows![flow].id,\n      };\n      if (actionDescriptor) {\n        step.action!.descriptor = actionDescriptor;\n      }\n      step.stepKind = 'endpoint';\n      draft.flows![flow].steps![position] = step;\n    });\n  }\n  public async updateOrAddConnection(\n    integration: Integration,\n    connection: Connection,\n    action: Action,\n    flow: number,\n    position: number,\n    configuredProperties: any\n  ): Promise<Integration> {\n    const actionDescriptor = await this.getActionDescriptor(\n      connection.id!,\n      action.id!,\n      configuredProperties\n    );\n    return produce(integration, draft => {\n      const step: Step = {\n        action,\n        configuredProperties,\n        connection,\n        id: draft.flows![flow].id,\n      };\n      if (actionDescriptor) {\n        step.action!.descriptor = actionDescriptor;\n      }\n      step.stepKind = 'endpoint';\n      if (draft.flows![flow].steps![position]) {\n        draft.flows![flow].steps![position] = step;\n      } else {\n        draft.flows![flow].steps!.splice(position, 0, step);\n        draft.tags = Array.from(\n          new Set([...(draft.tags || []), connection.id!])\n        );\n      }\n    });\n  }\n\n  public async saveIntegration(integration: Integration): Promise<Integration> {\n    const response = await callFetch({\n      body: integration,\n      headers: this.props.headers,\n      method: integration.id ? 'PUT' : 'POST',\n      url: integration.id\n        ? `${this.props.apiUri}/integrations/${integration.id}`\n        : `${this.props.apiUri}/integrations`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return !integration.id\n      ? ((await response.json()) as Integration)\n      : Promise.resolve(integration);\n  }\n\n  public async tagIntegration(integrationId: string, environments: []) {\n    return callFetch({\n      body: environments,\n      headers: this.props.headers,\n      method: 'PUT',\n      url: `${this.props.apiUri}/public/integrations/${integrationId}/tags`,\n    });\n  }\n\n  public render() {\n    return this.props.children({\n      addConnection: this.addConnection,\n      deleteIntegration: this.deleteIntegration,\n      deployIntegration: this.deployIntegration,\n      exportIntegration: this.exportIntegration,\n      importIntegration: this.importIntegration,\n      saveIntegration: this.saveIntegration,\n      tagIntegration: this.tagIntegration,\n      undeployIntegration: this.undeployIntegration,\n      updateConnection: this.updateConnection,\n      updateOrAddConnection: this.updateOrAddConnection,\n    });\n  }\n}\n\n/**\n * This component provides provides through a render propr a number of helper\n * functions useful when working with an integration.\n *\n * Some of these helpers are available also as stand-alone functions\n * (packages/api/src/integrationHelpers/index.ts), but this component provides\n * methods like `saveIntegration` that can talk with the backend without any\n * additional information provided.\n *\n * Methods that modify an integration return a immutable copy of the original\n * object, to reduce the risk of bugs.\n *\n * @see [addConnection]{@link IWithIntegrationHelpersChildrenProps#addConnection}\n * @see [updateConnection]{@link IWithIntegrationHelpersChildrenProps#updateConnection}\n * @see [updateOrAddConnection]{@link IWithIntegrationHelpersChildrenProps#updateOrAddConnection}\n * @see [saveIntegration]{@link IWithIntegrationHelpersChildrenProps#saveIntegration}\n */\nexport const WithIntegrationHelpers: React.FunctionComponent<\n  IWithIntegrationHelpersProps\n> = props => (\n  <ApiContext.Consumer>\n    {apiContext => <WithIntegrationHelpersWrapped {...props} {...apiContext} />}\n  </ApiContext.Consumer>\n);\n","import * as React from 'react';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IWithChangeListenerProps {\n  filter: (change: IChangeEvent) => boolean;\n  read: () => void;\n  registerChangeListener: (listener: (event: IChangeEvent) => void) => void;\n  unregisterChangeListener: (listener: (event: IChangeEvent) => void) => void;\n  children(): any;\n}\n\nexport class WithChangeListener extends React.Component<\n  IWithChangeListenerProps\n> {\n  public constructor(props: IWithChangeListenerProps) {\n    super(props);\n    this.changeListener = this.changeListener.bind(this);\n  }\n\n  public render() {\n    return this.props.children();\n  }\n\n  public async componentDidMount() {\n    this.props.registerChangeListener(this.changeListener);\n  }\n\n  public async componentWillUnmount() {\n    this.props.unregisterChangeListener(this.changeListener);\n  }\n\n  public changeListener(event: IChangeEvent) {\n    if (this.props.filter(event)) {\n      this.props.read();\n    }\n  }\n}\n","import { Connector } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IApiConnectorsResponse {\n  items: Connector[];\n  totalCount: number;\n}\n\nexport interface IWithApiConnectorsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IApiConnectorsResponse>): any;\n}\n\nexport class WithApiConnectors extends React.Component<\n  IWithApiConnectorsProps\n> {\n  public changeFilter(change: IChangeEvent) {\n    return change.kind.startsWith('connector');\n  }\n\n  public render() {\n    return (\n      <SyndesisFetch<IApiConnectorsResponse>\n        url={'/connectors?query=connectorGroupId%3Dswagger-connector-template'}\n        defaultValue={{\n          items: [],\n          totalCount: 0,\n        }}\n      >\n        {({ read, response }) => {\n          if (this.props.disableUpdates) {\n            return this.props.children(response);\n          }\n          return (\n            <ServerEventsContext.Consumer>\n              {({ registerChangeListener, unregisterChangeListener }) => (\n                <WithChangeListener\n                  read={read}\n                  registerChangeListener={registerChangeListener}\n                  unregisterChangeListener={unregisterChangeListener}\n                  filter={this.changeFilter}\n                >\n                  {() => this.props.children(response)}\n                </WithChangeListener>\n              )}\n            </ServerEventsContext.Consumer>\n          );\n        }}\n      </SyndesisFetch>\n    );\n  }\n}\n","import * as React from 'react';\n\nexport interface IWithPollingProps {\n  polling: number;\n  read: () => void;\n  children(): any;\n}\n\nexport class WithPolling extends React.Component<IWithPollingProps> {\n  public pollingTimer?: number;\n\n  public constructor(props: IWithPollingProps) {\n    super(props);\n    this.poller = this.poller.bind(this);\n  }\n\n  public async componentDidMount() {\n    this.startPolling();\n  }\n\n  public async componentWillUnmount() {\n    this.stopPolling();\n  }\n\n  public render() {\n    return this.props.children();\n  }\n\n  public poller() {\n    this.props.read();\n  }\n\n  public setPoller(func: () => void) {\n    this.poller = func;\n  }\n\n  private startPolling() {\n    this.stopPolling();\n    if (this.props.polling) {\n      this.pollingTimer = setInterval(this.poller, this.props.polling) as any;\n    }\n  }\n\n  private stopPolling() {\n    if (this.pollingTimer) {\n      clearInterval(this.pollingTimer);\n      this.pollingTimer = undefined;\n    }\n  }\n}\n","import * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithPolling } from './WithPolling';\n\nexport interface IWithEnvironmentsRenderProps extends IFetchState<string[]> {\n  read(): Promise<void>;\n}\n\nexport interface IWithEnvironmentsProps {\n  disableUpdates?: boolean;\n  children(props: IWithEnvironmentsRenderProps): any;\n}\n\nexport class WithEnvironments extends React.Component<IWithEnvironmentsProps> {\n  public render() {\n    return (\n      <SyndesisFetch<string[]> url={'/public/environments'} defaultValue={[]}>\n        {({ read, response }) => {\n          if (this.props.disableUpdates) {\n            return this.props.children({ ...response, read });\n          }\n          return (\n            <WithPolling read={read} polling={5000}>\n              {() => this.props.children({ ...response, read })}\n            </WithPolling>\n          );\n        }}\n      </SyndesisFetch>\n    );\n  }\n}\n","import * as React from 'react';\nimport { ApiContext, IApiContext } from './ApiContext';\nimport { callFetch } from './callFetch';\n\n/**\n *\n */\nexport interface IWithEnvironmentHelpersChildrenProps {\n  deleteEnvironment(name: string): Promise<any>;\n  createEnvironment(name: string): Promise<any>;\n  renameEnvironment(name: string, newName: string): Promise<any>;\n}\n\nexport interface IWithEnvironmentHelpersProps {\n  children(props: IWithEnvironmentHelpersChildrenProps): any;\n}\n\nexport class WithEnvironmentHelpersWrapped extends React.Component<\n  IWithEnvironmentHelpersProps & IApiContext\n> {\n  constructor(props: IWithEnvironmentHelpersProps & IApiContext) {\n    super(props);\n    this.createEnvironment = this.createEnvironment.bind(this);\n    this.deleteEnvironment = this.deleteEnvironment.bind(this);\n    this.renameEnvironment = this.renameEnvironment.bind(this);\n  }\n\n  public async createEnvironment(name: string) {\n    const response = await callFetch({\n      body: name,\n      headers: this.props.headers,\n      method: 'PUT' /* @todo this won't actually work */,\n      stringifyBody: false,\n      url: `${this.props.apiUri}/public/environments/${name}`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return await response.body;\n  }\n\n  public async deleteEnvironment(name: string) {\n    const response = await callFetch({\n      headers: this.props.headers,\n      method: 'DELETE',\n      url: `${this.props.apiUri}/public/environments/${name}`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return await response.body;\n  }\n\n  public async renameEnvironment(name: string, newName: string) {\n    const response = await callFetch({\n      body: newName,\n      headers: this.props.headers,\n      method: 'PUT',\n      stringifyBody: false,\n      url: `${this.props.apiUri}/public/environments/${name}`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return await response.body;\n  }\n\n  public render() {\n    return this.props.children({\n      createEnvironment: this.createEnvironment,\n      deleteEnvironment: this.deleteEnvironment,\n      renameEnvironment: this.renameEnvironment,\n    });\n  }\n}\n\nexport const WithEnvironmentHelpers: React.FunctionComponent<\n  IWithEnvironmentHelpersProps\n> = props => (\n  <ApiContext.Consumer>\n    {apiContext => <WithEnvironmentHelpersWrapped {...props} {...apiContext} />}\n  </ApiContext.Consumer>\n);\n","import { Extension } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { SyndesisFetch } from './SyndesisFetch';\n\nexport interface IWithExtensionProps {\n  extensionId: string;\n  initialValue?: Extension;\n  children(props: IFetchState<Extension>): any;\n}\n\n/**\n * A component that fetches the extension with the specified identifier.\n * @see [extensionId]{@link IWithExtensionProps#extensionId}\n */\nexport class WithExtension extends React.Component<IWithExtensionProps> {\n  public render() {\n    return (\n      <SyndesisFetch<Extension>\n        url={`/extensions/${this.props.extensionId}`}\n        defaultValue={{\n          actions: [],\n          extensionType: 'Steps',\n          name: '',\n          schemaVersion: '',\n        }}\n        initialValue={this.props.initialValue}\n      >\n        {({ response }) => this.props.children(response)}\n      </SyndesisFetch>\n    );\n  }\n}\n","import { Extension } from '@syndesis/models';\nimport * as React from 'react';\nimport { ApiContext, IApiContext } from './ApiContext';\nimport { callFetch } from './callFetch';\n\nexport interface IWithExtensionHelpersChildrenProps {\n  deleteExtension(extensionId: string): Promise<void>;\n  importExtension(extensionId: string): Promise<void>;\n  uploadExtension(file: File, extensionId?: string): Promise<Extension>;\n}\n\nexport interface IWithExtensionHelpersProps {\n  children(props: IWithExtensionHelpersChildrenProps): any;\n}\n\nexport class WithExtensionHelpersWrapped extends React.Component<\n  IWithExtensionHelpersProps & IApiContext\n> {\n  constructor(props: IWithExtensionHelpersProps & IApiContext) {\n    super(props);\n    this.deleteExtension = this.deleteExtension.bind(this);\n    this.importExtension = this.importExtension.bind(this);\n    this.uploadExtension = this.uploadExtension.bind(this);\n  }\n\n  /**\n   * Deletes the extension with the specified identifier.\n   * @param extensionId the ID of the extension being deleted\n   */\n  public async deleteExtension(extensionId: string): Promise<void> {\n    const response = await callFetch({\n      headers: this.props.headers,\n      method: 'DELETE',\n      url: `${this.props.apiUri}/extensions/${extensionId}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Imports the extension with the specified identifier.\n   * @param extensionId the ID of the extension being imported\n   */\n  public async importExtension(extensionId: string): Promise<void> {\n    const response = await callFetch({\n      headers: this.props.headers,\n      method: 'POST',\n      url: `${this.props.apiUri}/extensions/${extensionId}/install`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Updates the extension with the specified identifier or creates a new extension if there is no identifier.\n   * @param extensionId the ID of the extension being uploaded\n   */\n  public async uploadExtension(\n    file: File,\n    extensionId?: string\n  ): Promise<Extension> {\n    const data = new FormData();\n    data.append('file', file, file.name);\n\n    const url = `${this.props.apiUri}/extensions`;\n\n    const response = await callFetch({\n      body: data,\n      contentType: 'multipart/form-data',\n      headers: this.props.headers,\n      includeAccept: false,\n      includeContentType: false,\n      includeReferrerPolicy: false,\n      method: 'POST',\n      url: extensionId ? `${url}?updatedId=${extensionId}` : url,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return (await response.json()) as Extension;\n  }\n\n  public render() {\n    return this.props.children({\n      deleteExtension: this.deleteExtension,\n      importExtension: this.importExtension,\n      uploadExtension: this.uploadExtension,\n    });\n  }\n}\n\nexport const WithExtensionHelpers: React.FunctionComponent<\n  IWithExtensionHelpersProps\n> = props => (\n  <ApiContext.Consumer>\n    {apiContext => <WithExtensionHelpersWrapped {...props} {...apiContext} />}\n  </ApiContext.Consumer>\n);\n","import { IntegrationOverview } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IWithExtensionIntegrationsProps {\n  extensionId: string;\n  disableUpdates?: boolean;\n  children(props: IFetchState<IntegrationOverview[]>): any;\n}\n\n/**\n * A component that fetches the integrations that a specified extension is used by.\n * @see [extensionId]{@link IWithExtensionIntegrationsProps#extensionId}\n */\nexport class WithExtensionIntegrations extends React.Component<\n  IWithExtensionIntegrationsProps\n> {\n  public changeFilter(change: IChangeEvent) {\n    return (\n      // rerun fetch if there was a change in integrations\n      change.kind === 'integration' || change.kind === 'integration-deployment'\n    );\n  }\n\n  public render() {\n    return (\n      <SyndesisFetch<IntegrationOverview[]>\n        url={`/extensions/${this.props.extensionId}/integrations`}\n        defaultValue={[]}\n      >\n        {({ read, response }) =>\n          this.props.disableUpdates ? (\n            this.props.children(response)\n          ) : (\n            <ServerEventsContext.Consumer>\n              {({ registerChangeListener, unregisterChangeListener }) => (\n                <WithChangeListener\n                  read={read}\n                  registerChangeListener={registerChangeListener}\n                  unregisterChangeListener={unregisterChangeListener}\n                  filter={this.changeFilter}\n                >\n                  {() => this.props.children(response)}\n                </WithChangeListener>\n              )}\n            </ServerEventsContext.Consumer>\n          )\n        }\n      </SyndesisFetch>\n    );\n  }\n}\n","import { Extension } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IExtensionsResponse {\n  items: Extension[];\n  totalCount: number;\n}\n\nexport interface IWithExtensionsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IExtensionsResponse>): any;\n}\n\n/**\n * A component that fetches all the extensions.\n */\nexport class WithExtensions extends React.Component<IWithExtensionsProps> {\n  public changeFilter(change: IChangeEvent) {\n    return change.kind === 'extension';\n  }\n\n  public render() {\n    return (\n      <SyndesisFetch<IExtensionsResponse>\n        url={'/extensions'}\n        defaultValue={{ items: [], totalCount: 0 }}\n      >\n        {({ read, response }) =>\n          this.props.disableUpdates ? (\n            this.props.children(response)\n          ) : (\n            <ServerEventsContext.Consumer>\n              {({ registerChangeListener, unregisterChangeListener }) => (\n                <WithChangeListener\n                  read={read}\n                  registerChangeListener={registerChangeListener}\n                  unregisterChangeListener={unregisterChangeListener}\n                  filter={this.changeFilter}\n                >\n                  {() => this.props.children(response)}\n                </WithChangeListener>\n              )}\n            </ServerEventsContext.Consumer>\n          )\n        }\n      </SyndesisFetch>\n    );\n  }\n}\n","import { IntegrationOverview } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IIntegrationsResponse {\n  items: IntegrationOverview[];\n  totalCount: number;\n}\n\nexport interface IWithIntegrationsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IIntegrationsResponse>): any;\n}\n\nexport class WithIntegrations extends React.Component<IWithIntegrationsProps> {\n  public changeFilter(change: IChangeEvent) {\n    return (\n      change.kind === 'integration' || change.kind === 'integration-deployment'\n    );\n  }\n\n  public render() {\n    return (\n      <SyndesisFetch<IIntegrationsResponse>\n        url={'/integrations'}\n        defaultValue={{ items: [], totalCount: 0 }}\n      >\n        {({ read, response }) =>\n          this.props.disableUpdates ? (\n            this.props.children(response)\n          ) : (\n            <ServerEventsContext.Consumer>\n              {({ registerChangeListener, unregisterChangeListener }) => (\n                <WithChangeListener\n                  read={read}\n                  registerChangeListener={registerChangeListener}\n                  unregisterChangeListener={unregisterChangeListener}\n                  filter={this.changeFilter}\n                >\n                  {() => this.props.children(response)}\n                </WithChangeListener>\n              )}\n            </ServerEventsContext.Consumer>\n          )\n        }\n      </SyndesisFetch>\n    );\n  }\n}\n","import * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { SyndesisFetch } from './SyndesisFetch';\n\nexport interface IWithIntegrationTagsProps {\n  integrationId: string;\n  initialValue?: Map<string, any>;\n  children(props: IFetchState<Map<string, any>>): any;\n}\n\nexport class WithIntegrationTags extends React.Component<\n  IWithIntegrationTagsProps\n> {\n  public render() {\n    return (\n      <SyndesisFetch<Map<string, any>>\n        url={`/public/integrations/${this.props.integrationId}/tags`}\n        defaultValue={{} as Map<string, any>}\n        initialValue={this.props.initialValue}\n      >\n        {({ response }) => this.props.children(response)}\n      </SyndesisFetch>\n    );\n  }\n}\n","import {\n  Integration,\n  IntegrationMonitoring,\n  IntegrationWithMonitoring,\n} from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IIntegrationsResponse, WithIntegrations } from './WithIntegrations';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IMonitoredIntegrationsResponse {\n  items: IntegrationWithMonitoring[];\n  totalCount: number;\n}\n\nexport interface IWithMonitoredIntegrationsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IMonitoredIntegrationsResponse>): any;\n}\n\nexport class WithMonitoredIntegrations extends React.Component<\n  IWithMonitoredIntegrationsProps\n> {\n  public changeFilter(change: IChangeEvent) {\n    return (\n      change.kind === 'integration-deployment' ||\n      change.kind === 'integration-deployment-state-details'\n    );\n  }\n  public getMonitoredIntegrations(\n    integrations: IIntegrationsResponse,\n    response: IFetchState<IntegrationMonitoring[]>\n  ) {\n    return {\n      items: integrations.items.map(\n        (i: Integration): IntegrationWithMonitoring => ({\n          integration: i,\n          monitoring: response.data.find(\n            (o: IntegrationMonitoring) => o.integrationId === i.id\n          ),\n        })\n      ),\n      totalCount: integrations.totalCount,\n    } as IMonitoredIntegrationsResponse;\n  }\n  public render() {\n    return (\n      <WithIntegrations disableUpdates={this.props.disableUpdates}>\n        {({ data: integrations, ...props }) => (\n          <SyndesisFetch<IntegrationMonitoring[]>\n            url={'/monitoring/integrations'}\n            defaultValue={[]}\n          >\n            {({ read, response }) => {\n              if (this.props.disableUpdates) {\n                const data = this.getMonitoredIntegrations(\n                  integrations,\n                  response\n                );\n                return this.props.children({ ...props, data });\n              }\n              return (\n                <ServerEventsContext.Consumer>\n                  {({ registerChangeListener, unregisterChangeListener }) => (\n                    <WithChangeListener\n                      read={read}\n                      registerChangeListener={registerChangeListener}\n                      unregisterChangeListener={unregisterChangeListener}\n                      filter={this.changeFilter}\n                    >\n                      {() => {\n                        const data = this.getMonitoredIntegrations(\n                          integrations,\n                          response\n                        );\n                        return this.props.children({ ...props, data });\n                      }}\n                    </WithChangeListener>\n                  )}\n                </ServerEventsContext.Consumer>\n              );\n            }}\n          </SyndesisFetch>\n        )}\n      </WithIntegrations>\n    );\n  }\n}\n","import { IntegrationMetricsSummary } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithPolling } from './WithPolling';\n\nexport interface IWithIntegrationsMetricsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IntegrationMetricsSummary>): any;\n}\n\nexport class WithIntegrationsMetrics extends React.Component<\n  IWithIntegrationsMetricsProps\n> {\n  public render() {\n    return (\n      <SyndesisFetch<IntegrationMetricsSummary>\n        url={'/metrics/integrations'}\n        defaultValue={{\n          errors: 0, // int64\n          id: '-1',\n          integrationDeploymentMetrics: [],\n          lastProcessed: `${Date.now()}`, // date-time\n          messages: 0, // int64\n          metricsProvider: 'null',\n          start: `${Date.now()}`, // date-time\n          topIntegrations: {},\n        }}\n      >\n        {({ read, response }) => {\n          if (this.props.disableUpdates) {\n            return this.props.children(response);\n          }\n          return (\n            <WithPolling read={read} polling={5000}>\n              {() => this.props.children(response)}\n            </WithPolling>\n          );\n        }}\n      </SyndesisFetch>\n    );\n  }\n}\n","import { ConnectionOverview } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport function getConnectionsForDisplay(connections: ConnectionOverview[]) {\n  return connections.filter(\n    c => !c.metadata || !c.metadata['hide-from-connection-pages']\n  );\n}\n\nexport function getConnectionsWithFromAction(\n  connections: ConnectionOverview[]\n) {\n  return connections.filter(connection => {\n    if (!connection.connector) {\n      // safety net\n      return true;\n    }\n    return connection.connector.actions.some(action => {\n      return action.pattern === 'From';\n    });\n  });\n}\n\nexport function getConnectionsWithToAction(connections: ConnectionOverview[]) {\n  return connections.filter(connection => {\n    if (!connection.connector) {\n      // safety net\n      return true;\n    }\n    if (connection.connectorId === 'api-provider') {\n      // api provider can be used only for From actions\n      return false;\n    }\n    return connection.connector.actions.some(action => {\n      return action.pattern === 'To';\n    });\n  });\n}\n\nexport interface IConnectionsFetchResponse {\n  readonly items: ConnectionOverview[];\n  readonly totalCount: number;\n}\n\nexport interface IConnectionsResponse {\n  readonly connectionsForDisplay: ConnectionOverview[];\n  readonly connectionsWithToAction: ConnectionOverview[];\n  readonly connectionsWithFromAction: ConnectionOverview[];\n  readonly dangerouslyUnfilteredConnections: ConnectionOverview[];\n  readonly totalCount: number;\n}\n\nexport interface IWithConnectionsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IConnectionsResponse>): any;\n}\n\nexport function transformResponse(\n  response: IFetchState<IConnectionsFetchResponse>\n): IFetchState<IConnectionsResponse> {\n  return {\n    ...response,\n    data: {\n      connectionsForDisplay: getConnectionsForDisplay(response.data.items),\n      connectionsWithFromAction: getConnectionsWithFromAction(\n        response.data.items\n      ),\n      connectionsWithToAction: getConnectionsWithToAction(response.data.items),\n      dangerouslyUnfilteredConnections: response.data.items,\n      totalCount: response.data.totalCount,\n    },\n  };\n}\n\nexport class WithConnections extends React.Component<IWithConnectionsProps> {\n  public changeFilter(change: IChangeEvent) {\n    return change.kind.startsWith('connection');\n  }\n\n  public render() {\n    return (\n      <SyndesisFetch<IConnectionsFetchResponse>\n        url={'/connections'}\n        defaultValue={{\n          items: [],\n          totalCount: 0,\n        }}\n      >\n        {({ read, response }) => {\n          if (this.props.disableUpdates) {\n            return this.props.children(transformResponse(response));\n          }\n          return (\n            <ServerEventsContext.Consumer>\n              {({ registerChangeListener, unregisterChangeListener }) => (\n                <WithChangeListener\n                  read={read}\n                  registerChangeListener={registerChangeListener}\n                  unregisterChangeListener={unregisterChangeListener}\n                  filter={this.changeFilter}\n                >\n                  {() => this.props.children(transformResponse(response))}\n                </WithChangeListener>\n              )}\n            </ServerEventsContext.Consumer>\n          );\n        }}\n      </SyndesisFetch>\n    );\n  }\n}\n","import {\n  Action,\n  ActionDescriptor,\n  ActionDescriptorStep,\n  ConfigurationProperty,\n  ConnectionOverview,\n  Connector,\n  IConnectionWithIconFile,\n} from '@syndesis/models';\n\nexport function getActionsWithFrom(actions: Action[] = []) {\n  return actions.filter(a => a.pattern === 'From');\n}\n\nexport function getActionsWithTo(actions: Action[] = []) {\n  return actions.filter(a => a.pattern === 'To');\n}\n\nexport function getConnectionConnector(\n  connection: ConnectionOverview\n): Connector {\n  if (!connection.connector) {\n    throw Error(`FATAL: Connection ${connection.id} doesn't have a connector`);\n  }\n  return connection.connector;\n}\n\nexport function getConnectorActions(connector: Connector): Action[] {\n  return connector.actions;\n}\n\nexport function getActionById(actions: Action[], actionId: string): Action {\n  const action = actions.find(a => a.id === actionId);\n  if (!action) {\n    throw Error(`FATAL: Action ${actionId} not found`);\n  }\n  return action;\n}\n\nexport function getActionDescriptor(action: Action): ActionDescriptor {\n  if (!action.descriptor) {\n    throw Error(`FATAL: Action ${action.id} doesn't have any descriptor`);\n  }\n  return action.descriptor;\n}\n\nexport function getActionSteps(\n  descriptor: ActionDescriptor\n): ActionDescriptorStep[] {\n  if (!descriptor.propertyDefinitionSteps) {\n    throw Error(`FATAL: Descriptor doesn't have any definition`);\n  }\n  return descriptor.propertyDefinitionSteps;\n}\n\nexport function getActionStep(\n  steps: ActionDescriptorStep[],\n  step: number\n): ActionDescriptorStep {\n  if (step > steps.length - 1) {\n    throw Error(`FATAL: Step ${step} does not exist in the descriptor steps`);\n  }\n  return steps[step];\n}\n\nexport function getActionStepDefinition(\n  step: ActionDescriptorStep\n): {\n  [name: string]: ConfigurationProperty;\n} {\n  if (!step.properties) {\n    throw Error(`FATAL: Step ${step} does not have valid properties`);\n  }\n  return step.properties;\n}\n\nexport function getConnectionIcon(\n  apiUri: string,\n  connection: IConnectionWithIconFile\n) {\n  if (\n    typeof connection.icon === 'undefined' &&\n    typeof connection.iconFile === 'undefined'\n  ) {\n    // The connection has no icon for whatever reason\n    // TODO: sensible default icon\n    return '';\n  }\n  // Connections created from the API client connector can have a custom icon file\n  if (connection.iconFile || connection.icon instanceof File) {\n    const file = connection.iconFile || connection.icon;\n    const tempIconBlobPath = URL.createObjectURL(file);\n    return tempIconBlobPath;\n  }\n  // The connection has an embedded icon\n  if (connection.icon.toLowerCase().startsWith('data:')) {\n    return connection.icon;\n  }\n  // The connection's icon is stored in the DB in some weird way\n  if (\n    connection.icon.toLowerCase().startsWith('db:') ||\n    connection.icon.toLowerCase().startsWith('extension:')\n  ) {\n    return `${apiUri}/connectors/${connection.id}/icon?${connection.icon}`;\n  }\n  // Legacy connections rely on the icon being in the UI's assets\n  return `./../../icons/${connection.icon}.connection.png`;\n}\n","import {\n  Extension,\n  IConnectionWithIconFile,\n  Integration,\n  IntegrationOverview,\n  Step,\n} from '@syndesis/models';\nimport { key } from '@syndesis/utils';\nimport produce from 'immer';\nimport { getConnectionIcon } from './connectionFunctions';\n\nexport const NEW_INTEGRATION = {\n  name: '',\n  tags: [],\n} as Integration;\n\n/**\n * returns an empty integration object.\n *\n * @todo make the returned object immutable to avoid uncontrolled changes\n */\nexport function getEmptyIntegration(): Integration {\n  return produce(NEW_INTEGRATION, draft => {\n    draft.flows = [\n      {\n        id: key(),\n        name: '',\n        steps: [],\n      },\n    ];\n  });\n}\n\n/**\n * updates the name of an integration.\n *\n * @param integration\n * @param name\n */\n\nexport function setIntegrationName(\n  integration: Integration,\n  name: string\n): Integration {\n  return produce(integration, nextIntegration => {\n    nextIntegration.name = name;\n  });\n}\n\n/**\n * returns true if the provided integration can be published; returns false\n * otherwise.\n *\n * @param integration\n */\nexport function canPublish(integration: IntegrationOverview) {\n  return integration.currentState !== 'Pending';\n}\n\n/**\n * returns true if the provided integration can be activated; returns false\n * otherwise.\n *\n * @param integration\n */\nexport function canActivate(integration: IntegrationOverview) {\n  return (\n    integration.currentState !== 'Pending' &&\n    integration.currentState !== 'Published'\n  );\n}\n\n/**\n * returns true if the provided integration can be edited; returns false\n * otherwise.\n *\n * @param integration\n */\nexport function canEdit(integration: IntegrationOverview) {\n  return integration.currentState !== 'Pending';\n}\n\n/**\n * returns true if the provided integration can be deactivated; returns false\n * otherwise.\n *\n * @param integration\n */\nexport function canDeactivate(integration: IntegrationOverview) {\n  return integration.currentState !== 'Unpublished';\n}\n\n/**\n * returns the list of steps of the provided integration.\n *\n * @param value\n * @param flow\n *\n * @todo make the returned object immutable to avoid uncontrolled changes\n */\nexport function getSteps(integration: Integration, flow: number): Step[] {\n  try {\n    return integration.flows![flow].steps!;\n  } catch (e) {\n    throw new Error(`Can't find steps in position flow:${flow}`);\n  }\n}\n\n/**\n * returns a specific step of the provided integration.\n *\n * @param value\n * @param flow\n *\n * @todo make the returned object immutable to avoid uncontrolled changes\n */\n\nexport function getStep(\n  integration: Integration,\n  flow: number,\n  step: number\n): Step {\n  try {\n    return integration.flows![flow].steps![step];\n  } catch (e) {\n    throw new Error(`Can't find a step in position flow:${flow} step:${step}`);\n  }\n}\n\n/**\n * Returns the start icon representing the provided integration\n * @param integration\n */\nexport function getStartIcon(apiUri: string, integration: Integration) {\n  return getStepIcon(apiUri, integration, 0, 0);\n}\n\n/**\n * Returns the ending icon representing the provided integration\n * @param integration\n */\nexport function getFinishIcon(apiUri: string, integration: Integration) {\n  const flow = integration.flows![0];\n  return getStepIcon(apiUri, integration, 0, flow.steps!.length - 1);\n}\n\nexport function getExtensionIcon(extension: Extension) {\n  return extension.icon || ''; // TODO: a default icon?\n}\n\nexport function getStepKindIcon(stepKind: Step['stepKind']) {\n  return `/icons/steps/${stepKind}.svg`;\n}\n\n/**\n * Returns the icon for the supplied step index of the supplied flow index\n * @param integration\n * @param flowIndex\n * @param stepIndex\n */\nexport function getStepIcon(\n  apiUri: string,\n  integration: Integration,\n  flowIndex: number,\n  stepIndex: number\n): string {\n  const step = getStep(integration, flowIndex, stepIndex);\n  // The step is a connection\n  if (step.connection) {\n    const connection = step.connection as IConnectionWithIconFile;\n    return getConnectionIcon(apiUri, connection);\n  }\n  // The step is an extension\n  if (step.extension) {\n    return getExtensionIcon(step.extension);\n  }\n  // It's just a step\n  return getStepKindIcon(step.stepKind);\n}\n","import { Action, ConnectionOverview } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { getActionsWithFrom, getActionsWithTo } from './helpers';\nimport { SyndesisFetch } from './SyndesisFetch';\n\nexport interface IConnectionOverviewExtended extends ConnectionOverview {\n  readonly actionsWithFrom: Action[];\n  readonly actionsWithTo: Action[];\n}\n\nexport interface IWithConnectionProps {\n  id: string;\n  initialValue?: ConnectionOverview;\n  children(props: IFetchState<IConnectionOverviewExtended>): any;\n}\n\nexport class WithConnection extends React.Component<IWithConnectionProps> {\n  public render() {\n    return (\n      <SyndesisFetch<ConnectionOverview>\n        url={`/connections/${this.props.id}`}\n        defaultValue={{\n          name: '',\n        }}\n        initialValue={this.props.initialValue}\n      >\n        {({ response }) =>\n          this.props.children({\n            ...response,\n            data: {\n              ...response.data,\n              actionsWithFrom: getActionsWithFrom(\n                response.data.connector ? response.data.connector.actions : []\n              ),\n              actionsWithTo: getActionsWithTo(\n                response.data.connector ? response.data.connector.actions : []\n              ),\n            },\n          })\n        }\n      </SyndesisFetch>\n    );\n  }\n}\n","import { Connection, Connector } from '@syndesis/models';\nimport produce from 'immer';\nimport * as React from 'react';\nimport { ApiContext, IApiContext } from './ApiContext';\nimport { callFetch } from './callFetch';\n\nexport interface IConfigurationValidationViolation {\n  code: string;\n  description: string;\n  parameters: string[];\n  attributes: { [key: string]: string };\n}\n\nexport interface IConfigurationValidation {\n  status: 'OK' | 'ERROR';\n  scope: 'PARAMETERS' | 'CONNECTIVITY';\n  errors?: IConfigurationValidationViolation[];\n}\n\nexport interface IValidationResult {\n  isError: boolean;\n  error?: string;\n  message?: string;\n  property?: string;\n}\n\nexport interface IWithConnectionHelpersChildrenProps {\n  /**\n   * asynchronously saves the provided connection, returning the saved\n   * connection in case of success.\n   *\n   * @param connection\n   *\n   * @todo make the returned object immutable to avoid uncontrolled changes\n   */\n  validateConfiguration(\n    connectionId: string,\n    values: { [key: string]: string }\n  ): Promise<IConfigurationValidation[]>;\n  /**\n   * create a new Connection object starting from a Connector.\n   *\n   * @param connector\n   * @param name\n   * @param description\n   */\n  createConnection(\n    connector: Connector,\n    name: string,\n    description: string,\n    configuredProperties: { [key: string]: string }\n  ): Connection;\n  /**\n   * asynchronously saves the provided connection, returning the saved\n   * connection in case of success.\n   *\n   * @param connection\n   *\n   * @todo make the returned object immutable to avoid uncontrolled changes\n   */\n  saveConnection(connection: Connection): Promise<Connection>;\n  /**\n   * create a new Connection object starting from an existing Connection.\n   *\n   * @param connection\n   * @param name\n   * @param description\n   * @param configuredProperties\n   */\n  updateConnection(\n    connection: Connection,\n    name?: string,\n    description?: string,\n    configuredProperties?: { [key: string]: string }\n  ): Connection;\n  /**\n   * asynchronously deletes the provided connection.\n   *\n   * @param connectionId the connection ID\n   */\n  deleteConnection(connectionId: string): Promise<void>;\n  /**\n   *  Asynchronously validates the proposed connection name.\n   *\n   * @param connection the connection whose name is being changed\n   * @param proposedName the name being validated\n   * @returns a validation result\n   */\n  validateName(\n    connection: Connection,\n    proposedName: string\n  ): Promise<IValidationResult>;\n}\n\nexport interface IWithConnectionHelpersProps {\n  children(props: IWithConnectionHelpersChildrenProps): any;\n}\n\nexport class WithConnectionHelpersWrapped extends React.Component<\n  IWithConnectionHelpersProps & IApiContext\n> {\n  constructor(props: IWithConnectionHelpersProps & IApiContext) {\n    super(props);\n    this.createConnection = this.createConnection.bind(this);\n    this.deleteConnection = this.deleteConnection.bind(this);\n    this.updateConnection = this.updateConnection.bind(this);\n    this.validateConfiguration = this.validateConfiguration.bind(this);\n    this.saveConnection = this.saveConnection.bind(this);\n    this.validateName = this.validateName.bind(this);\n  }\n\n  public createConnection(\n    connector: Connector,\n    name: string,\n    description: string,\n    configuredProperties: { [key: string]: string }\n  ): Connection {\n    const connection = {} as Connection;\n    return produce(connection, draft => {\n      connection.name = name;\n      connection.description = description;\n      connection.configuredProperties = configuredProperties;\n      connection.connector = connector;\n      connection.connectorId = connector.id;\n      connection.icon = connector.icon;\n    });\n  }\n\n  public async deleteConnection(connectionId: string): Promise<void> {\n    const response = await callFetch({\n      headers: this.props.headers,\n      method: 'DELETE',\n      url: `${this.props.apiUri}/connections/${connectionId}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  public updateConnection(\n    connection: Connection,\n    name?: string,\n    description?: string,\n    configuredProperties?: { [key: string]: string }\n  ): Connection {\n    return produce(connection, draft => {\n      connection.name = name || connection.name;\n      // allow empty descriptions\n      connection.description =\n        description === undefined ? connection.description : description;\n      connection.configuredProperties =\n        configuredProperties || connection.configuredProperties;\n    });\n  }\n\n  public async validateConfiguration(\n    connectorId: string,\n    values: { [key: string]: string }\n  ): Promise<IConfigurationValidation[]> {\n    const response = await callFetch({\n      body: values,\n      headers: this.props.headers,\n      method: 'POST',\n      url: `${this.props.apiUri}/connectors/${connectorId}/verifier`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return (await response.json()) as IConfigurationValidation[];\n  }\n\n  public async saveConnection(connection: Connection): Promise<Connection> {\n    const response = await callFetch({\n      body: connection,\n      headers: this.props.headers,\n      method: connection.id ? 'PUT' : 'POST',\n      url: connection.id\n        ? `${this.props.apiUri}/connections/${connection.id}`\n        : `${this.props.apiUri}/connections`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return !connection.id\n      ? ((await response.json()) as Connection)\n      : Promise.resolve(connection);\n  }\n\n  public async validateName(\n    connection: Connection,\n    proposedName: string\n  ): Promise<IValidationResult> {\n    // short circuit if name has not changed\n    if (connection.name === proposedName) {\n      return {\n        isError: false,\n      };\n    }\n\n    const testConn = { name: proposedName };\n    const response = await callFetch({\n      body: testConn,\n      headers: this.props.headers,\n      method: 'POST',\n      url: `${this.props.apiUri}/connections/validation`,\n    });\n\n    if (response.ok) {\n      return {\n        isError: false,\n      };\n    }\n\n    // return the first error\n    const result = await response.json();\n    return {\n      isError: true,\n      ...result[0],\n    };\n  }\n\n  public render() {\n    return this.props.children({\n      createConnection: this.createConnection,\n      deleteConnection: this.deleteConnection,\n      saveConnection: this.saveConnection,\n      updateConnection: this.updateConnection,\n      validateConfiguration: this.validateConfiguration,\n      validateName: this.validateName,\n    });\n  }\n}\n\n/**\n * This component provides provides through a render propr a number of helper\n * functions useful when working with a connection.\n *\n * Methods that modify a connection return a immutable copy of the original\n * object, to reduce the risk of bugs.\n *\n * @see [saveConnection]{@link IWithConnectionHelpersChildrenProps#saveConnection}\n */\nexport const WithConnectionHelpers: React.FunctionComponent<\n  IWithConnectionHelpersProps\n> = props => (\n  <ApiContext.Consumer>\n    {apiContext => <WithConnectionHelpersWrapped {...props} {...apiContext} />}\n  </ApiContext.Consumer>\n);\n","import { Connector } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { SyndesisFetch } from './SyndesisFetch';\n\nexport interface IWithConnectorProps {\n  id: string;\n  initialValue?: Connector;\n  children(props: IFetchState<Connector>): any;\n}\n\nexport class WithConnector extends React.Component<IWithConnectorProps> {\n  public render() {\n    return (\n      <SyndesisFetch<Connector>\n        url={`/connectors/${this.props.id}`}\n        defaultValue={{\n          actions: [],\n          name: '',\n        }}\n        initialValue={this.props.initialValue}\n      >\n        {({ response }) => this.props.children(response)}\n      </SyndesisFetch>\n    );\n  }\n}\n","import { Connector } from '@syndesis/models';\nimport * as React from 'react';\nimport { IFetchState } from './Fetch';\nimport { ServerEventsContext } from './ServerEventsContext';\nimport { SyndesisFetch } from './SyndesisFetch';\nimport { WithChangeListener } from './WithChangeListener';\nimport { IChangeEvent } from './WithServerEvents';\n\nexport interface IConnectorsFetchResponse {\n  readonly items: Connector[];\n  readonly totalCount: number;\n}\n\nexport interface IConnectorsResponse {\n  readonly connectorsForDisplay: Connector[];\n  readonly dangerouslyUnfilteredConnections: Connector[];\n  readonly totalCount: number;\n}\n\nexport interface IWithConnectorsProps {\n  disableUpdates?: boolean;\n  children(props: IFetchState<IConnectorsResponse>): any;\n}\n\nexport function getConnectorsForDisplay(connectors: Connector[]) {\n  return connectors.filter(\n    c => !c.metadata || !c.metadata['hide-from-connection-pages']\n  );\n}\n\nexport function transformConnectorsResponse(\n  response: IFetchState<IConnectorsFetchResponse>\n): IFetchState<IConnectorsResponse> {\n  return {\n    ...response,\n    data: {\n      connectorsForDisplay: getConnectorsForDisplay(response.data.items),\n      dangerouslyUnfilteredConnections: response.data.items,\n      totalCount: response.data.totalCount,\n    },\n  };\n}\n\nexport class WithConnectors extends React.Component<IWithConnectorsProps> {\n  public changeFilter(change: IChangeEvent) {\n    return change.kind.startsWith('connector');\n  }\n  public render() {\n    return (\n      <SyndesisFetch<IConnectorsFetchResponse>\n        url={'/connectors'}\n        defaultValue={{\n          items: [],\n          totalCount: 0,\n        }}\n      >\n        {({ read, response }) => {\n          if (this.props.disableUpdates) {\n            return this.props.children(transformConnectorsResponse(response));\n          }\n          return (\n            <ServerEventsContext.Consumer>\n              {({ registerChangeListener, unregisterChangeListener }) => (\n                <WithChangeListener\n                  read={read}\n                  registerChangeListener={registerChangeListener}\n                  unregisterChangeListener={unregisterChangeListener}\n                  filter={this.changeFilter}\n                >\n                  {() =>\n                    this.props.children(transformConnectorsResponse(response))\n                  }\n                </WithChangeListener>\n              )}\n            </ServerEventsContext.Consumer>\n          );\n        }}\n      </SyndesisFetch>\n    );\n  }\n}\n","/* tslint:disable:object-literal-sort-keys */\nimport { Step, StepKind } from '@syndesis/models';\nimport {\n  ADVANCED_FILTER,\n  AGGREGATE,\n  BASIC_FILTER,\n  DATA_MAPPER,\n  DataShapeKinds,\n  LOG,\n  SPLIT,\n  TEMPLATE,\n} from './constants';\n\nconst ALL_STEPS: StepKind[] = [\n  requiresInputOutputDataShapes(\n    {\n      id: undefined,\n      connection: undefined,\n      action: undefined,\n      name: 'Data Mapper',\n      description: 'Map fields from the input type to the output type.',\n      stepKind: DATA_MAPPER,\n      properties: {},\n      configuredProperties: undefined,\n    },\n    true,\n    false\n  ),\n  requiresOutputDataShape(\n    {\n      id: undefined,\n      connection: undefined,\n      action: undefined,\n      name: 'Basic Filter',\n      description:\n        'Continue the integration only if criteria you specify in simple input fields are met. Suitable for' +\n        ' most integrations.',\n      stepKind: BASIC_FILTER,\n      properties: undefined,\n      configuredProperties: undefined,\n    },\n    true\n  ),\n  requiresOutputDataShape({\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Template',\n    stepKind: TEMPLATE,\n    description:\n      'Upload or create a Freemarker, Mustache or Velocity template to define consistent output data.',\n    configuredProperties: undefined,\n    properties: undefined,\n  }),\n  noCollectionSupport({\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Advanced Filter',\n    description:\n      'Continue the integration only if criteria you define in scripting language expressions are met.',\n    stepKind: ADVANCED_FILTER,\n    properties: {\n      filter: {\n        type: 'textarea',\n        displayName: 'Only continue if',\n        placeholder: `Examples of Simple Language filter expressions:\n$\\{in.header.type\\} == 'widget' // Evaluates true when type = widget\n$\\{in.body.title\\} // Evaluates true when body contains title.\n`,\n        required: true,\n        rows: 10,\n      },\n    },\n    configuredProperties: undefined,\n  }),\n  {\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Log',\n    stepKind: LOG,\n    description: \"Send a message to the integration's log.\",\n    configuredProperties: undefined,\n    properties: {\n      contextLoggingEnabled: {\n        type: 'boolean',\n        displayName: 'Message Context',\n        required: false,\n      },\n      bodyLoggingEnabled: {\n        type: 'boolean',\n        displayName: 'Message Body',\n        required: false,\n      },\n      customText: {\n        type: 'string',\n        displayName: 'Custom Text',\n        required: false,\n      },\n      /*\n      loggingLevel: {\n        type: 'select',\n        displayName: 'Level',\n        value: 'INFO',\n        required: true,\n        enum: [\n          { value: 'INFO', label: 'INFO' },\n          { value: 'WARN', label: 'WARN' },\n          { value: 'ERROR', label: 'ERROR'},\n          {value: 'DEBUG', label: 'DEBUG'},\n          {value: 'TRACE', label: 'TRACE'}],\n      },\n      */\n    },\n  },\n  requiresOutputDataShape({\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Split',\n    description: 'Process each item in a set of data individually',\n    stepKind: SPLIT,\n    properties: {},\n    configuredProperties: undefined,\n  }),\n  requiresConsistentSplitAggregate({\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Aggregate',\n    description: 'End processing items in a foreach',\n    stepKind: AGGREGATE,\n    properties: {},\n    configuredProperties: undefined,\n  }),\n  /*\n  {\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Store Data',\n    stepKind: STORE_DATA,\n    description:\n      'Store data from an invocation to be used later in the integration',\n    properties: {},\n    configuredProperties: undefined,\n  },\n  {\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Set Data',\n    stepKind: SET_DATA,\n    description: 'Enrich data used within an integration',\n    properties: {},\n    configuredProperties: undefined,\n  },\n  {\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Call Route',\n    stepKind: CALL_ROUTE,\n    description:\n      'Call a child integration route from the main integration flow',\n    properties: {},\n    configuredProperties: undefined,\n  },\n  {\n    id: undefined,\n    connection: undefined,\n    action: undefined,\n    name: 'Conditional Processing',\n    stepKind: CONDITIONAL_PROCESSING,\n    description: 'Add conditions and multiple paths for processing data',\n    properties: {},\n    configuredProperties: undefined,\n  }\n  */\n];\n\nfunction stepsHaveOutputDataShape(steps: Step[]): boolean {\n  return (\n    steps.filter(\n      s =>\n        s &&\n        s.action &&\n        s.action.descriptor &&\n        s.action.descriptor.outputDataShape &&\n        s.action.descriptor.outputDataShape.kind &&\n        s.action.descriptor.outputDataShape.kind.toLowerCase() !==\n          DataShapeKinds.NONE &&\n        s.action.descriptor.outputDataShape.kind.toLowerCase() !==\n          DataShapeKinds.ANY\n    ).length > 0\n  );\n}\n\nfunction stepsHaveInputDataShape(steps: Step[]): boolean {\n  return (\n    steps.filter(\n      s =>\n        s &&\n        s.action &&\n        s.action.descriptor &&\n        s.action.descriptor.inputDataShape &&\n        s.action.descriptor.inputDataShape.kind &&\n        s.action.descriptor.inputDataShape.kind.toLowerCase() !==\n          DataShapeKinds.NONE &&\n        s.action.descriptor.inputDataShape.kind.toLowerCase() !==\n          DataShapeKinds.ANY\n    ).length > 0\n  );\n}\n\nfunction requiresInputOutputDataShapes(\n  obj: StepKind,\n  anyPrevious = true,\n  anySubsequent = true\n): StepKind {\n  obj.visible = (\n    position: number,\n    previousSteps: Step[],\n    subsequentSteps: Step[]\n  ) => {\n    if (!anyPrevious) {\n      // only test the first previous step that has some kind of data shape\n      const previousStep = previousSteps\n        .reverse()\n        .find(s => dataShapeExists(s));\n      previousSteps = previousStep ? [previousStep] : [];\n    }\n    if (!anySubsequent) {\n      // only test the next subsequent step that has a data shape\n      const subsequentStep = previousSteps.find(s => dataShapeExists(s, true));\n      subsequentSteps = subsequentStep ? [subsequentStep] : [];\n    }\n    return (\n      stepsHaveOutputDataShape(previousSteps) &&\n      stepsHaveInputDataShape(subsequentSteps)\n    );\n  };\n  return obj;\n}\n\nfunction dataShapeExists(step: Step, input = false): boolean {\n  if (input) {\n    return !!(\n      step &&\n      step.action &&\n      step.action.descriptor &&\n      step.action.descriptor.inputDataShape\n    );\n  } else {\n    return !!(\n      step &&\n      step.action &&\n      step.action.descriptor &&\n      step.action.descriptor.outputDataShape\n    );\n  }\n}\n\nfunction hasPrecedingCollection(previousSteps: Step[]) {\n  const previousDataShape = previousSteps\n    .reverse()\n    .find(s => dataShapeExists(s));\n  return (\n    previousDataShape &&\n    previousDataShape.action &&\n    previousDataShape.action.descriptor &&\n    previousDataShape.action.descriptor.outputDataShape &&\n    previousDataShape.action.descriptor.outputDataShape.metadata &&\n    previousDataShape.action.descriptor.outputDataShape.metadata.variant ===\n      'collection'\n  );\n}\n\nfunction noCollectionSupport(obj: StepKind) {\n  obj.visible = (\n    position: number,\n    previousSteps: Step[],\n    subsequentSteps: Step[]\n  ) => {\n    return !hasPrecedingCollection(previousSteps);\n  };\n  return obj;\n}\n\nfunction requiresOutputDataShape(\n  obj: StepKind,\n  noCollectionSupportP = false\n): StepKind {\n  if (noCollectionSupportP) {\n    obj.visible = (\n      position: number,\n      previousSteps: Step[],\n      subsequentSteps: Step[]\n    ) => {\n      return (\n        stepsHaveOutputDataShape(previousSteps) &&\n        !hasPrecedingCollection(previousSteps)\n      );\n    };\n  } else {\n    obj.visible = (\n      position: number,\n      previousSteps: Step[],\n      subsequentSteps: Step[]\n    ) => {\n      return stepsHaveOutputDataShape(previousSteps);\n    };\n  }\n  return obj;\n}\n\nfunction requiresConsistentSplitAggregate(obj: StepKind): StepKind {\n  obj.visible = (\n    position: number,\n    previousSteps: Step[],\n    subsequentSteps: Step[]\n  ) => {\n    const countPreviousSplit = previousSteps.filter(s => s.stepKind === SPLIT)\n      .length;\n    const countPreviousAggregate = previousSteps.filter(\n      s => (s.stepKind || '').toLowerCase() === AGGREGATE\n    ).length;\n\n    if (countPreviousSplit <= countPreviousAggregate) {\n      return false;\n    }\n\n    const positionNextSplit = subsequentSteps.findIndex(\n      s => s.stepKind === SPLIT\n    );\n    const positionNextAggregate = subsequentSteps.findIndex(\n      s => s.stepKind === AGGREGATE\n    );\n\n    if (positionNextSplit === -1) {\n      return positionNextAggregate === -1;\n    }\n\n    return (\n      positionNextAggregate === -1 || positionNextSplit < positionNextAggregate\n    );\n  };\n  return obj;\n}\n\nexport interface IStepsResponse {\n  items: StepKind[];\n}\n\nexport interface IWithStepsProps {\n  disableUpdates?: boolean;\n  children(props: IStepsResponse): any;\n}\n\nexport const WithSteps: React.FunctionComponent<IWithStepsProps> = ({\n  children,\n}) => {\n  return children({\n    items: ALL_STEPS,\n  });\n};\n","import * as React from 'react';\nimport { callFetch, IFetchHeaders } from './callFetch';\n\nexport interface IChangeEvent {\n  action: string;\n  kind: string;\n  id: string;\n}\n\nexport interface IMessageEvent {\n  id: string;\n  data: string;\n  event: string;\n}\n\nexport interface IWithEventsProps {\n  apiUri: string;\n  headers: IFetchHeaders;\n  children(props: IWithEventsState): any;\n}\n\nexport interface IWithEventsState {\n  registerChangeListener: (listener: (event: IChangeEvent) => void) => void;\n  registerMessageListener: (listener: (event: IMessageEvent) => void) => void;\n  unregisterChangeListener: (listener: (event: IChangeEvent) => void) => void;\n  unregisterMessageListener: (listener: (event: IMessageEvent) => void) => void;\n}\n\nconst RECONNECT_TIME = 5000;\n\nexport class WithServerEvents extends React.Component<\n  IWithEventsProps,\n  IWithEventsState\n> {\n  private starting = false;\n  private started = false;\n  private unmounting = false;\n  private retries = 0;\n  private preferredProtocol: string = '';\n  private eventSource: EventSource | undefined;\n  private webSocket: WebSocket | undefined;\n  private changeListeners: Array<(event: IChangeEvent) => void>;\n  private messageListeners: Array<(event: IMessageEvent) => void>;\n\n  public constructor(props: IWithEventsProps) {\n    super(props);\n    this.changeListeners = [];\n    this.messageListeners = [];\n    this.registerChangeListener = this.registerChangeListener.bind(this);\n    this.registerMessageListener = this.registerMessageListener.bind(this);\n    this.unregisterChangeListener = this.unregisterChangeListener.bind(this);\n    this.unregisterMessageListener = this.unregisterMessageListener.bind(this);\n  }\n\n  public registerChangeListener(listener: (event: IChangeEvent) => void) {\n    this.changeListeners = [...this.changeListeners, listener];\n  }\n\n  public registerMessageListener(listener: (event: IMessageEvent) => void) {\n    this.messageListeners = [...this.messageListeners, listener];\n  }\n\n  public unregisterChangeListener(listener: (event: IChangeEvent) => void) {\n    this.changeListeners = this.changeListeners.filter(l => l !== listener);\n  }\n\n  public unregisterMessageListener(listener: (event: IMessageEvent) => void) {\n    this.messageListeners = this.messageListeners.filter(l => l !== listener);\n  }\n\n  public async componentDidMount() {\n    this.start();\n  }\n\n  public async componentWillUnmount() {\n    this.unmounting = true;\n    this.close();\n    this.changeListeners = [];\n    this.messageListeners = [];\n  }\n\n  public render() {\n    return this.props.children({\n      registerChangeListener: this.registerChangeListener,\n      registerMessageListener: this.registerMessageListener,\n      unregisterChangeListener: this.unregisterChangeListener,\n      unregisterMessageListener: this.unregisterMessageListener,\n    });\n  }\n\n  private close() {\n    this.started = false;\n    this.starting = false;\n    if (this.webSocket) {\n      this.webSocket.close();\n      this.webSocket = undefined;\n    }\n    if (this.eventSource) {\n      this.eventSource.close();\n      this.eventSource = undefined;\n    }\n  }\n\n  private start() {\n    this.startConnection(this.retries % 2 === 0);\n  }\n\n  private onFailure(error: any) {\n    this.close();\n    if (this.unmounting) {\n      return;\n    }\n    this.retries++;\n    // Initialy retry very quickly.\n    let reconnectIn = RECONNECT_TIME;\n    if (this.retries < 3) {\n      reconnectIn = 1;\n    }\n    setTimeout(() => {\n      // console.log('Reconnecting');\n      switch (this.preferredProtocol) {\n        // Once we find a protocol that works, keep using it.\n        case 'ws':\n          this.startConnection(true);\n          break;\n        case 'es':\n          this.startConnection(false);\n          break;\n        default:\n          // Keep flipping between WS and ES untill we find one that works.\n          this.startConnection(this.retries % 2 === 0);\n          break;\n      }\n    }, reconnectIn);\n  }\n\n  private async startConnection(connectUsingWebSockets: boolean) {\n    if (this.starting || this.started || this.unmounting) {\n      return;\n    }\n    this.starting = true;\n    try {\n      const response = await callFetch({\n        body: '',\n        headers: this.props.headers,\n        method: 'POST',\n        url: `${this.props.apiUri}/event/reservations`,\n      });\n      let reservation = await response.json();\n      reservation = reservation.data;\n      if (connectUsingWebSockets) {\n        let wsApiEndpoint = this.props.apiUri.replace(/^http/, 'ws');\n        wsApiEndpoint += '/event/streams.ws/' + reservation;\n        // console.log('Connecting using web socket');\n        this.starting = false;\n        this.started = true;\n        this.connectWebSocket(wsApiEndpoint);\n      } else {\n        this.starting = false;\n        this.started = true;\n        // console.log('Connecting using server side events');\n        this.connectEventSource(\n          this.props.apiUri + '/event/streams/' + reservation\n        );\n      }\n    } catch (error) {\n      this.onFailure(error);\n      throw error;\n    }\n  }\n\n  private postMessageEvent(messageEvent: IMessageEvent) {\n    this.messageListeners.forEach(listener => {\n      listener(messageEvent);\n    });\n  }\n\n  private postChangeEvent(changeEvent: IChangeEvent) {\n    this.changeListeners.forEach(listener => {\n      listener(changeEvent);\n    });\n  }\n\n  private connectEventSource(url: string) {\n    this.eventSource = new EventSource(url);\n    this.eventSource.addEventListener('message', (event: any) => {\n      this.started = true;\n      this.starting = false;\n      this.preferredProtocol = 'es';\n      // console.log('sse.message: ', event.data);\n      this.postMessageEvent(event);\n    });\n    this.eventSource.addEventListener('change-event', (event: any) => {\n      this.started = true;\n      const value = JSON.parse(event.data) as IChangeEvent;\n      // console.log('sse.change-event: ', value);\n      this.postChangeEvent(value);\n    });\n    const onError = (event: any) => {\n      // console.log('sse.close: ', event);\n      this.onFailure(event);\n    };\n    this.eventSource.addEventListener('close', onError);\n    this.eventSource.addEventListener('error', onError);\n    return this.eventSource;\n  }\n\n  private connectWebSocket(url: string) {\n    this.webSocket = new WebSocket(url);\n    this.webSocket.onmessage = event => {\n      this.started = true;\n      this.starting = false;\n      const messageEvent = JSON.parse(event.data) as IMessageEvent;\n      switch (messageEvent.event) {\n        case 'message':\n          this.preferredProtocol = 'ws';\n          // console.log('ws.message: ', messageEvent.data);\n          this.postMessageEvent(messageEvent);\n          break;\n        case 'change-event':\n          const value = JSON.parse(messageEvent.data) as IChangeEvent;\n          // console.log('ws.change-event: ', value);\n          this.postChangeEvent(value);\n          break;\n        default:\n        // I guess we don't care what happens here...\n        // console.log('ws.unknown-message: ', event);\n      }\n    };\n    this.webSocket.onclose = event => {\n      // console.log('ws.onclose: ', event);\n      this.onFailure(event);\n    };\n    return this.webSocket;\n  }\n}\n","import { RestViewDefinition } from '@syndesis/models';\nimport * as React from 'react';\nimport { DVFetch } from './DVFetch';\nimport { IFetchState } from './Fetch';\n\nexport interface IWithViewProps {\n  vdbId: string;\n  initialValue?: RestViewDefinition[];\n  children(props: IFetchState<RestViewDefinition[]>): any;\n}\n\n/**\n * A component that fetches the specified VDB views.\n * @see [vdbId]{@link IWithViewProps#vdbId}\n */\nexport class WithViews extends React.Component<IWithViewProps> {\n  public render() {\n    return (\n      <DVFetch<RestViewDefinition[]>\n        url={`workspace/vdbs/${this.props.vdbId}/Models/views/Views`}\n        defaultValue={[]}\n        initialValue={this.props.initialValue}\n      >\n        {({ read, response }) => this.props.children(response)}\n      </DVFetch>\n    );\n  }\n}\n","import { ViewEditorState } from '@syndesis/models';\nimport * as React from 'react';\nimport { DVFetch } from './DVFetch';\nimport { IFetchState } from './Fetch';\n\nexport interface IWithViewEditorStatesRenderProps\n  extends IFetchState<ViewEditorState[]> {\n  read(): Promise<void>;\n}\n\nexport interface IWithViewEditorStatesProps {\n  idPattern?: string;\n  children(props: IWithViewEditorStatesRenderProps): any;\n}\n\nexport class WithViewEditorStates extends React.Component<\n  IWithViewEditorStatesProps\n> {\n  public render() {\n    return (\n      <DVFetch<ViewEditorState[]>\n        url={\n          'service/userProfile/viewEditorState' +\n          (this.props.idPattern ? '?pattern=' + this.props.idPattern : '')\n        }\n        defaultValue={[]}\n      >\n        {({ read, response }) => this.props.children({ ...response, read })}\n      </DVFetch>\n    );\n  }\n}\n","import {\n  QueryResults,\n  RestDataService,\n  ViewEditorState,\n} from '@syndesis/models';\nimport * as React from 'react';\nimport { ApiContext, IApiContext } from './ApiContext';\nimport { callFetch } from './callFetch';\n\nconst WORKSPACE_ROOT = '/tko:komodo/tko:workspace/';\n\nexport interface IWithVirtualizationHelpersChildrenProps {\n  createVirtualization(\n    virtualizationName: string,\n    virtualizationDescription?: string\n  ): Promise<RestDataService>;\n  deleteView(virtualization: RestDataService, viewName: string): Promise<void>;\n  deleteViewEditorState(viewEditorStateId: string): Promise<void>;\n  deleteVirtualization(virtualizationName: string): Promise<void>;\n  publishVirtualization(virtualizationName: string): Promise<void>;\n  queryVirtualization(\n    virtualizationName: string,\n    query: string,\n    limit: number,\n    offset: number\n  ): Promise<QueryResults>;\n  refreshVirtualizationViews(\n    virtualizationName: string,\n    viewEditorStates: ViewEditorState[]\n  ): Promise<void>;\n  unpublishServiceVdb(vdbName: string): Promise<void>;\n  updateViewEditorStates(viewEditorStates: ViewEditorState[]): Promise<void>;\n}\n\nexport interface IWithVirtualizationHelpersProps {\n  username: string;\n  children(props: IWithVirtualizationHelpersChildrenProps): any;\n}\n\nexport class WithVirtualizationHelpersWrapped extends React.Component<\n  IWithVirtualizationHelpersProps & IApiContext\n> {\n  constructor(props: IWithVirtualizationHelpersProps & IApiContext) {\n    super(props);\n    this.createVirtualization = this.createVirtualization.bind(this);\n    this.updateViewEditorStates = this.updateViewEditorStates.bind(this);\n    this.deleteView = this.deleteView.bind(this);\n    this.deleteViewEditorState = this.deleteViewEditorState.bind(this);\n    this.deleteVirtualization = this.deleteVirtualization.bind(this);\n    this.publishVirtualization = this.publishVirtualization.bind(this);\n    this.queryVirtualization = this.queryVirtualization.bind(this);\n    this.refreshVirtualizationViews = this.refreshVirtualizationViews.bind(\n      this\n    );\n    this.unpublishServiceVdb = this.unpublishServiceVdb.bind(this);\n  }\n\n  /**\n   * Creates a virtualization with the specified name and description\n   * @param virtName the name of the virtualization to create\n   * @param virtDesc the description (optional) of the virtualization to create\n   */\n  public async createVirtualization(\n    virtName: string,\n    virtDesc?: string\n  ): Promise<RestDataService> {\n    const newVirtualization = {\n      keng__dataPath: `${WORKSPACE_ROOT}${this.props.username}/${virtName}`,\n      keng__id: `${virtName}`,\n      tko__description: virtDesc ? `${virtDesc}` : '',\n    } as RestDataService;\n\n    const response = await callFetch({\n      body: newVirtualization,\n      headers: {},\n      method: 'POST',\n      url: `${this.props.dvApiUri}workspace/dataservices/${virtName}`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve(newVirtualization);\n  }\n\n  /**\n   * Deletes the specified virtualization view.\n   * @param virtualization the virtualization\n   * @param viewName the name of the view being deleted\n   */\n  public async deleteView(\n    virtualization: RestDataService,\n    viewName: string\n  ): Promise<void> {\n    const vdbName = virtualization.serviceVdbName;\n    const editorStateId = vdbName + '.' + viewName;\n    // Delete viewEditorState\n    await this.deleteViewEditorState(editorStateId);\n    // Delete virtualization view\n    const response = await callFetch({\n      headers: {},\n      method: 'DELETE',\n      url: `${\n        this.props.dvApiUri\n      }workspace/vdbs/${vdbName}/Models/views/Views/${viewName}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Deletes the virtualization with the specified name.\n   * @param virtualizationName the name of the virtualization being deleted\n   */\n  public async deleteVirtualization(virtualizationName: string): Promise<void> {\n    const response = await callFetch({\n      headers: {},\n      method: 'DELETE',\n      url: `${this.props.dvApiUri}workspace/dataservices/${virtualizationName}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Publish the virtualization with the specified name.\n   * @param virtualizationName the name of the virtualization being published\n   */\n  public async publishVirtualization(\n    virtualizationName: string\n  ): Promise<void> {\n    const pubVirtualization = {\n      name: `${virtualizationName}`,\n    };\n\n    const response = await callFetch({\n      body: pubVirtualization,\n      headers: {},\n      method: 'POST',\n      url: `${this.props.dvApiUri}metadata/publish`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Query the Service VDB with sql query and properties.\n   * @param virtualizationName the name of the virtualization associated with the service\n   * @param sqlQuery the sql query statement to execute against the virtualization\n   * @param rowlimit limit to number of rows to return\n   * @param rowOffset number of data rows to filter from the beginning of the result set\n   */\n  public async queryVirtualization(\n    virtualizationName: string,\n    sqlQuery: string,\n    rowlimit: number,\n    rowOffset: number\n  ): Promise<QueryResults> {\n    // The payload for the rest call\n    const queryBody = {\n      limit: rowlimit,\n      offset: rowOffset,\n      query: sqlQuery,\n      target: virtualizationName,\n    };\n\n    const response = await callFetch({\n      body: queryBody,\n      headers: {},\n      method: 'POST',\n      url: `${this.props.dvApiUri}metadata/query`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return (await response.json()) as QueryResults;\n  }\n\n  /**\n   * Unpublish the Service VDB with the specified name.\n   * @param vdbName the name of the vdb associated with the service\n   */\n  public async unpublishServiceVdb(vdbName: string): Promise<void> {\n    const response = await callFetch({\n      headers: {},\n      method: 'DELETE',\n      url: `${this.props.dvApiUri}metadata/publish/${vdbName}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Delete the specified ViewEditorState in the komodo user profile\n   * @param viewEditorState the view editor state\n   */\n  public async deleteViewEditorState(viewEditorStateId: string): Promise<void> {\n    const response = await callFetch({\n      headers: {},\n      method: 'DELETE',\n      url: `${\n        this.props.dvApiUri\n      }service/userProfile/viewEditorState/${viewEditorStateId}`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Saves ViewEditorStates in the komodo user profile\n   * @param viewEditorStates the array of view editor states\n   */\n  public async updateViewEditorStates(\n    viewEditorStates: ViewEditorState[]\n  ): Promise<void> {\n    const response = await callFetch({\n      body: viewEditorStates,\n      headers: {},\n      method: 'PUT',\n      url: `${this.props.dvApiUri}service/userProfile/viewEditorStates`,\n    });\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Saves ViewEditorStates in the komodo user profile, then updates the virtualizations\n   * @param viewEditorStates the array of view editor states\n   */\n  public async refreshVirtualizationViews(\n    virtualizationName: string,\n    viewEditorStates: ViewEditorState[]\n  ): Promise<void> {\n    // Updates the view editor states\n    await this.updateViewEditorStates(viewEditorStates);\n    const response = await callFetch({\n      headers: {},\n      method: 'POST',\n      url: `${\n        this.props.dvApiUri\n      }workspace/dataservices/refreshViews/${virtualizationName}`,\n    });\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return Promise.resolve();\n  }\n\n  public render() {\n    return this.props.children({\n      createVirtualization: this.createVirtualization,\n      deleteView: this.deleteView,\n      deleteViewEditorState: this.deleteViewEditorState,\n      deleteVirtualization: this.deleteVirtualization,\n      publishVirtualization: this.publishVirtualization,\n      queryVirtualization: this.queryVirtualization,\n      refreshVirtualizationViews: this.refreshVirtualizationViews,\n      unpublishServiceVdb: this.unpublishServiceVdb,\n      updateViewEditorStates: this.updateViewEditorStates,\n    });\n  }\n}\n\nexport const WithVirtualizationHelpers: React.FunctionComponent<\n  IWithVirtualizationHelpersProps\n> = props => (\n  <ApiContext.Consumer>\n    {apiContext => (\n      <WithVirtualizationHelpersWrapped {...props} {...apiContext} />\n    )}\n  </ApiContext.Consumer>\n);\n","import { RestDataService } from '@syndesis/models';\nimport * as React from 'react';\nimport { DVFetch } from './DVFetch';\nimport { IFetchState } from './Fetch';\n\nexport interface IWithVirtualizationProps {\n  virtualizationId: string;\n  initialValue?: RestDataService;\n  children(props: IFetchState<RestDataService>): any;\n}\n\n/**\n * A component that fetches the virtualization with the specified identifier.\n * @see [virtualizationId]{@link IWithVirtualizationProps#virtualizationId}\n */\nexport class WithVirtualization extends React.Component<\n  IWithVirtualizationProps\n> {\n  public render() {\n    return (\n      <DVFetch<RestDataService>\n        url={`workspace/dataservices/${this.props.virtualizationId}`}\n        defaultValue={{\n          connections: 0,\n          drivers: 0,\n          keng___links: [],\n          keng__baseUri: '',\n          keng__dataPath: '',\n          keng__hasChildren: false,\n          keng__id: '',\n          keng__kType: '',\n          publishedState: 'NOTFOUND',\n          serviceVdbName: '',\n          serviceVdbVersion: '',\n          serviceViewDefinitions: [],\n          serviceViewModel: '',\n          tko__description: '',\n        }}\n        initialValue={this.props.initialValue}\n      >\n        {({ response }) => this.props.children(response)}\n      </DVFetch>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport * as React from 'react';\nimport { DVFetch } from './DVFetch';\nimport { IFetchState } from './Fetch';\nimport { WithPolling } from './WithPolling';\n\nexport interface IWithVirtualizationsRenderProps\n  extends IFetchState<RestDataService[]> {\n  read(): Promise<void>;\n}\n\nexport interface IWithVirtualizationsProps {\n  children(props: IWithVirtualizationsRenderProps): any;\n}\n\nexport class WithVirtualizations extends React.Component<\n  IWithVirtualizationsProps\n> {\n  public render() {\n    return (\n      <DVFetch<RestDataService[]>\n        url={'workspace/dataservices'}\n        defaultValue={[]}\n      >\n        {({ read, response }) => {\n          return (\n            <WithPolling read={read} polling={5000}>\n              {() => this.props.children({ ...response, read })}\n            </WithPolling>\n          );\n        }}\n      </DVFetch>\n    );\n  }\n}\n","import { VirtualizationSourceStatus } from '@syndesis/models';\nimport * as React from 'react';\nimport { DVFetch } from './DVFetch';\nimport { IFetchState } from './Fetch';\n\nexport interface IWithVirtualizationConnectionStatusesProps {\n  children(props: IFetchState<VirtualizationSourceStatus[]>): any;\n}\n\nexport class WithVirtualizationConnectionStatuses extends React.Component<\n  IWithVirtualizationConnectionStatusesProps\n> {\n  public render() {\n    return (\n      <DVFetch<VirtualizationSourceStatus[]>\n        url={'metadata/syndesisSourceStatuses'}\n        defaultValue={[]}\n      >\n        {({ read, response }) => this.props.children(response)}\n      </DVFetch>\n    );\n  }\n}\n","import { SchemaNode } from '@syndesis/models';\nimport * as React from 'react';\nimport { DVFetch } from './DVFetch';\nimport { IFetchState } from './Fetch';\n\nexport interface IWithVirtualizationConnectionSchemaProps {\n  connectionId: string;\n  children(props: IFetchState<SchemaNode[]>): any;\n}\n\nexport class WithVirtualizationConnectionSchema extends React.Component<\n  IWithVirtualizationConnectionSchemaProps\n> {\n  public render() {\n    return (\n      <DVFetch<SchemaNode[]>\n        url={`metadata/${this.props.connectionId}/schema`}\n        defaultValue={[]}\n      >\n        {({ read, response }) => this.props.children(response)}\n      </DVFetch>\n    );\n  }\n}\n","import { Integration } from '@syndesis/models';\n\nexport const serializeIntegration = (i: Integration) =>\n  btoa(encodeURIComponent(JSON.stringify(i)));\n","import { Integration } from '@syndesis/models';\n\nexport const deserializeIntegration = (i: string) =>\n  JSON.parse(decodeURIComponent(atob(i))) as Integration;\n","/* tslint:disable:object-literal-sort-keys no-empty-interface */\nimport { Connector, Extension } from '@syndesis/models';\nimport { makeResolver, makeResolverNoParams } from '@syndesis/utils';\nimport routes from './routes';\n\nexport default {\n  apiConnectors: {\n    apiConnector: makeResolver<{ apiConnector: Connector }>(\n      routes.apiConnectors.apiConnector,\n      ({ apiConnector }) => ({\n        params: {\n          apiConnectorId: apiConnector.id,\n        },\n        state: {\n          apiConnector,\n        },\n      })\n    ),\n    create: {\n      upload: makeResolverNoParams(routes.apiConnectors.create.upload),\n      review: makeResolverNoParams(routes.apiConnectors.create.review),\n      security: makeResolverNoParams(routes.apiConnectors.create.security),\n      save: makeResolverNoParams(routes.apiConnectors.create.save),\n    },\n    list: makeResolverNoParams(routes.apiConnectors.list),\n  },\n  extensions: {\n    extension: {\n      details: makeResolver<{ extension: Extension }>(\n        routes.extensions.extension.details,\n        ({ extension }) => ({\n          params: {\n            extensionId: extension.id,\n          },\n          state: {\n            extension,\n          },\n        })\n      ),\n      update: makeResolver<{ extension: Extension }>(\n        routes.extensions.extension.update,\n        ({ extension }) => ({\n          params: {\n            extensionId: extension.id,\n          },\n          state: {\n            extension,\n          },\n        })\n      ),\n    },\n    import: makeResolverNoParams(routes.extensions.import),\n    list: makeResolverNoParams(routes.extensions.list),\n  },\n  root: makeResolverNoParams(routes.apiConnectors.list),\n};\n","import {\n  IInitMessagePayload,\n  IMappingsMessagePayload,\n} from '@syndesis/atlasmap-assembly/src/app/app.component';\nimport * as React from 'react';\nimport equal from 'react-fast-compare';\n\n/* tslint:disable */\nconst runtime = require('file-loader?name=atlasmap-runtime.js!@syndesis/atlasmap-assembly/dist/atlasmap/runtime.js');\nconst polyfills = require('file-loader?name=atlasmap-polyfills.js!@syndesis/atlasmap-assembly/dist/atlasmap/polyfills.js');\nconst styles = require('file-loader?name=atlasmap-styles.js!@syndesis/atlasmap-assembly/dist/atlasmap/styles.js');\nconst scripts = require('file-loader?name=atlasmap-scripts.js!@syndesis/atlasmap-assembly/dist/atlasmap/scripts.js');\nconst vendor = require('file-loader?name=atlasmap-vendor.js!@syndesis/atlasmap-assembly/dist/atlasmap/vendor.js');\nconst main = require('file-loader?name=atlasmap-main.js!@syndesis/atlasmap-assembly/dist/atlasmap/main.js');\n/* tslint:enable*/\n\nexport enum DocumentType {\n  JAVA = 'Java',\n  XML = 'XML',\n  XSD = 'XSD',\n  JSON = 'JSON',\n  CORE = 'Core',\n  CSV = 'CSV',\n  CONSTANT = 'Constants',\n  PROPERTY = 'Property',\n}\nexport enum InspectionType {\n  JAVA_CLASS = 'JAVA_CLASS',\n  SCHEMA = 'SCHEMA',\n  INSTANCE = 'INSTANCE',\n  UNKNOWN = 'UNKNOWN',\n}\n\nexport interface IDataMapperAdapterProps extends IInitMessagePayload {\n  onMappings(mappings: string): void;\n}\n\nexport class DataMapperAdapter extends React.Component<\n  IDataMapperAdapterProps\n> {\n  protected messageChannel: MessageChannel;\n  protected messagePort?: MessagePort;\n  protected iframe: HTMLIFrameElement | null = null;\n\n  constructor(props: IDataMapperAdapterProps) {\n    super(props);\n    this.messageChannel = new MessageChannel();\n    this.onIframeLoad = this.onIframeLoad.bind(this);\n    this.onMessages = this.onMessages.bind(this);\n  }\n\n  public componentDidMount() {\n    if (this.iframe) {\n      this.iframe.addEventListener('load', this.onIframeLoad);\n    }\n  }\n\n  public componentWillReceiveProps(nextProps: IDataMapperAdapterProps) {\n    const { onMappings: _, ...prevPayload } = this.props;\n    const { onMappings: __, ...nextPayload } = nextProps;\n    if (!equal(prevPayload, nextPayload)) {\n      this.updateDataMapperApp(nextPayload);\n    }\n  }\n\n  public shouldComponentUpdate() {\n    return false;\n  }\n\n  public componentWillUnmount() {\n    if (this.iframe) {\n      this.iframe.removeEventListener('load', this.onIframeLoad);\n    }\n  }\n\n  public onIframeLoad() {\n    this.messagePort = this.messageChannel.port1;\n    this.messagePort.onmessage = this.onMessages;\n    this.iframe!.contentWindow!.postMessage('init', '*', [\n      this.messageChannel.port2,\n    ]);\n  }\n\n  public onMessages(event: MessageEvent) {\n    switch (event.data.message) {\n      case 'ready': {\n        const { onMappings, ...payload } = this.props;\n        this.updateDataMapperApp(payload);\n        break;\n      }\n      case 'mappings': {\n        const payload: IMappingsMessagePayload = event.data.payload;\n        this.props.onMappings(payload.mappings);\n        break;\n      }\n    }\n  }\n\n  public updateDataMapperApp(props: IInitMessagePayload) {\n    if (this.messagePort) {\n      const message = {\n        message: 'update',\n        payload: {\n          documentId: props.documentId,\n          inputDataShape: props.inputDataShape,\n          inputDescription: props.inputDescription,\n          inputDocumentType: props.inputDocumentType,\n          inputInspectionType: props.inputInspectionType,\n          inputName: props.inputName,\n          mappings: props.mappings,\n          outputDataShape: props.outputDataShape,\n          outputDescription: props.outputDescription,\n          outputDocumentType: props.outputDocumentType,\n          outputInspectionType: props.outputInspectionType,\n          outputName: props.outputName,\n        },\n      };\n      this.messagePort.postMessage(message);\n    }\n  }\n\n  public render() {\n    const srcDoc = `<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Atlasmap</title>\n  <base href=\"/dm\">\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body style=\"background: transparent;\">\n  <app-root></app-root>\n  <script type=\"text/javascript\" src=\"${runtime}\"></script>\n  <script type=\"text/javascript\" src=\"${polyfills}\"></script>\n  <script type=\"text/javascript\" src=\"${styles}\"></script>\n  <script type=\"text/javascript\" src=\"${scripts}\"></script>\n  <script type=\"text/javascript\" src=\"${vendor}\"></script>\n  <script type=\"text/javascript\" src=\"${main}\"></script></body>\n</html>\n\n`;\n    // bypass some odd typing incompatibility with base React when using \"exotic\"\n    // html attributes\n    const extraProps = {\n      allowtransparency: '',\n    };\n    return (\n      <iframe\n        srcDoc={srcDoc}\n        style={{ width: '100%', height: '100%' }}\n        frameBorder={0}\n        {...extraProps}\n        ref={el => (this.iframe = el)}\n      />\n    );\n  }\n}\n","import appEn from '../../app/locales/app-translations.en.json';\nimport appIt from '../../app/locales/app-translations.it.json';\nimport connectionsEn from '../../modules/connections/locales/connections-translations.en.json';\nimport connectionsIt from '../../modules/connections/locales/connections-translations.it.json';\nimport customizationsEn from '../../modules/customizations/locales/customizations-translations.en.json';\nimport customizationsIt from '../../modules/customizations/locales/customizations-translations.it.json';\nimport dashboardEn from '../../modules/dashboard/locales/dashboard-translations.en.json';\nimport dashboardIt from '../../modules/dashboard/locales/dashboard-translations.it.json';\nimport dataEn from '../../modules/data/locales/data-translations.en.json';\nimport dataIt from '../../modules/data/locales/data-translations.it.json';\nimport integrationsEn from '../../modules/integrations/locales/integrations-translations.en.json';\nimport integrationsIt from '../../modules/integrations/locales/integrations-translations.it.json';\nimport en from './shared-translations.en.json';\nimport it from './shared-translations.it.json';\n\n// app\nen.en.app = appEn;\nit.it.app = appIt;\n\n// connections\nen.en.modules.connections = connectionsEn;\nit.it.modules.connections = connectionsIt;\n\n// customizations\nen.en.modules.customizations = customizationsEn;\nit.it.modules.customizations = customizationsIt;\n\n// dashboard\nen.en.modules.dashboard = dashboardEn;\nit.it.modules.dashboard = dashboardIt;\n\n// data\nen.en.modules.data = dataEn;\nit.it.modules.data = dataIt;\n\n// integrations\nen.en.modules.integrations = integrationsEn;\nit.it.modules.integrations = integrationsIt;\n\nexport { en, it };\n","import i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { en, it } from './locales';\n\nconst options = {\n  interpolation: {\n    escapeValue: false, // not needed for react!!\n  },\n\n  debug: false,\n\n  resources: {\n    en: {\n      app: en.en.app,\n      connections: en.en.modules.connections,\n      customizations: en.en.modules.customizations,\n      dashboard: en.en.modules.dashboard,\n      data: en.en.modules.data,\n      integrations: en.en.modules.integrations,\n      shared: en.en.shared,\n    },\n    it: {\n      app: it.it.app,\n      connections: it.it.modules.connections,\n      customizations: it.it.modules.customizations,\n      dashboard: it.it.modules.dashboard,\n      data: it.it.modules.data,\n      integrations: it.it.modules.integrations,\n      shared: it.it.shared,\n    },\n  },\n\n  defaultNS: 'shared',\n  fallbackLng: process.env.NODE_ENV === 'production' ? 'en' : 'it',\n  fallbackNS: ['shared'],\n  keySeparator: '.',\n  ns: ['shared', 'app', 'customizations', 'dashboard', 'integrations'],\n} as i18n.InitOptions;\n\ni18n.use(LanguageDetector).init(options);\nexport default i18n;\n","/* tslint:disable:object-literal-sort-keys no-empty-interface */\nimport { getEmptyIntegration, getStep } from '@syndesis/api';\nimport { ConnectionOverview, Integration } from '@syndesis/models';\nimport {\n  makeResolver,\n  makeResolverNoParams,\n  makeResolverNoParamsWithDefaults,\n} from '@syndesis/utils';\nimport {\n  IBaseRouteParams,\n  IBaseRouteState,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState,\n  ISaveIntegrationRouteParams,\n  ISaveIntegrationRouteState,\n  ISelectActionRouteParams,\n  ISelectActionRouteState,\n  ISelectConnectionRouteParams,\n  ISelectConnectionRouteState,\n} from './components/editor/interfaces';\nimport {\n  IActivityPageParams,\n  IActivityPageState,\n  IDetailsPageParams,\n  IDetailsPageState,\n  IMetricsPageParams,\n  IMetricsPageState,\n} from './pages/detail';\nimport routes from './routes';\n\ninterface IEditorIndex {\n  flow: string;\n  integration: Integration;\n}\n\ninterface IEditorSelectConnection extends IEditorIndex {\n  position: string;\n}\n\ninterface IEditorSelectAction extends IEditorSelectConnection {\n  connection: ConnectionOverview;\n}\n\ninterface IEditorConfigureAction extends IEditorSelectAction {\n  actionId: string;\n  step?: string;\n  updatedIntegration?: Integration;\n}\n\nexport const configureIndexMapper = ({ flow, integration }: IEditorIndex) => ({\n  params: {\n    flow,\n    ...(integration && integration.id ? { integrationId: integration.id } : {}),\n  } as IBaseRouteParams,\n  state: {\n    integration,\n  } as IBaseRouteState,\n});\n\nexport const configureSelectConnectionMapper = ({\n  position,\n  ...rest\n}: IEditorSelectConnection) => {\n  const { params, state } = configureIndexMapper(rest);\n  return {\n    params: {\n      ...params,\n      position,\n    } as ISelectConnectionRouteParams,\n    state,\n  };\n};\n\nexport const configureSelectActionMapper = ({\n  connection,\n  ...rest\n}: IEditorSelectAction) => {\n  const { params, state } = configureSelectConnectionMapper(rest);\n  return {\n    params: {\n      ...params,\n      connectionId: connection.id!,\n    } as ISelectActionRouteParams,\n    state: {\n      ...state,\n      connection,\n    } as ISelectActionRouteState,\n  };\n};\n\nexport const configureConfigureActionMapper = ({\n  actionId,\n  step,\n  integration,\n  updatedIntegration,\n  position,\n  ...rest\n}: IEditorConfigureAction) => {\n  const { params, state } = configureSelectActionMapper({\n    ...rest,\n    integration,\n    position,\n  });\n  const positionAsNumber = parseInt(position, 10);\n  const stepObject = getStep(integration, 0, positionAsNumber) || {};\n  return {\n    params: {\n      ...params,\n      actionId,\n      step: `${step || 0}`,\n    } as IConfigureActionRouteParams,\n    state: {\n      ...state,\n      updatedIntegration,\n      configuredProperties: stepObject.configuredProperties,\n    } as IConfigureActionRouteState,\n  };\n};\n\n// TODO: unit test every single one of these resolvers 😫\n\nexport const listResolver = makeResolverNoParams(routes.list);\n\nexport const manageCicdResolver = makeResolverNoParams(routes.manageCicd.root);\n\nexport const createRootResolver = makeResolverNoParams(routes.create.root);\n\nexport const createStartSelectStepResolver = makeResolverNoParamsWithDefaults<\n  ISelectConnectionRouteParams,\n  ISelectConnectionRouteState\n>(routes.create.start.selectStep, () => {\n  return {\n    params: {\n      flow: '0',\n      position: '0',\n    },\n    state: {\n      integration: getEmptyIntegration(),\n    },\n  };\n});\n\nexport const createStartSelectActionResolver = makeResolver<\n  IEditorSelectAction,\n  ISelectActionRouteParams,\n  ISelectActionRouteState\n>(routes.create.start.connection.selectAction, configureSelectActionMapper);\n\nexport const createStartConfigureActionResolver = makeResolver<\n  IEditorConfigureAction,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState\n>(\n  routes.create.start.connection.configureAction,\n  configureConfigureActionMapper\n);\n\nexport const createFinishSelectStepResolver = makeResolver<\n  IEditorSelectConnection,\n  ISelectConnectionRouteParams,\n  ISelectConnectionRouteState\n>(routes.create.finish.selectStep, configureSelectConnectionMapper);\n\nexport const createFinishSelectActionResolver = makeResolver<\n  IEditorSelectAction,\n  ISelectActionRouteParams,\n  ISelectActionRouteState\n>(routes.create.finish.connection.selectAction, configureSelectActionMapper);\n\nexport const createFinishConfigureActionResolver = makeResolver<\n  IEditorConfigureAction,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState\n>(\n  routes.create.finish.connection.configureAction,\n  configureConfigureActionMapper\n);\n\nexport const createConfigureIndexResolver = makeResolver<\n  IEditorIndex,\n  IBaseRouteParams,\n  IBaseRouteState\n>(routes.create.configure.index, configureIndexMapper);\n\nexport const createConfigureAddStepSelectStepResolver = makeResolver<\n  IEditorSelectConnection,\n  ISelectConnectionRouteParams,\n  ISelectConnectionRouteState\n>(routes.create.configure.addStep.selectStep, configureSelectConnectionMapper);\n\nexport const createConfigureAddStepSelectActionResolver = makeResolver<\n  IEditorSelectAction,\n  ISelectActionRouteParams,\n  ISelectActionRouteState\n>(\n  routes.create.configure.addStep.connection.selectAction,\n  configureSelectActionMapper\n);\n\nexport const createConfigureAddStepConfigureActionResolver = makeResolver<\n  IEditorConfigureAction,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState\n>(\n  routes.create.configure.addStep.connection.configureAction,\n  configureConfigureActionMapper\n);\n\nexport const createConfigureEditStepSelectActionResolver = makeResolver<\n  IEditorSelectAction,\n  ISelectActionRouteParams,\n  ISelectActionRouteState\n>(\n  routes.create.configure.editStep.connection.selectAction,\n  configureSelectActionMapper\n);\n\nexport const createConfigureEditStepConfigureActionResolver = makeResolver<\n  IEditorConfigureAction,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState\n>(\n  routes.create.configure.editStep.connection.configureAction,\n  configureConfigureActionMapper\n);\n\nexport const createConfigureEditStepSaveAndPublishResolver = makeResolver<\n  { integration: Integration },\n  null,\n  ISaveIntegrationRouteState\n>(routes.create.configure.saveAndPublish, ({ integration }) => ({\n  params: null,\n  state: {\n    integration,\n  },\n}));\n\nexport const integrationActivityResolver = makeResolver<\n  { integration: Integration },\n  IActivityPageParams,\n  IActivityPageState\n>(routes.integration.activity, ({ integration }) => ({\n  params: {\n    integrationId: integration.id!,\n  },\n  state: {\n    integration,\n  },\n}));\n\nexport const integrationDetailsResolver = makeResolver<\n  { integration: Integration },\n  IDetailsPageParams,\n  IDetailsPageState\n>(routes.integration.details, ({ integration }) => ({\n  params: {\n    integrationId: integration.id!,\n  },\n  state: {\n    integration,\n  },\n}));\n\nexport const integrationEditIndexResolver = makeResolver<\n  IEditorIndex,\n  IBaseRouteParams,\n  IBaseRouteState\n>(routes.integration.edit.index, configureIndexMapper);\n\nexport const integrationEditAddStepSelectStepResolver = makeResolver<\n  IEditorSelectConnection,\n  ISelectConnectionRouteParams,\n  ISelectConnectionRouteState\n>(routes.integration.edit.addStep.selectStep, configureSelectConnectionMapper);\n\nexport const integrationEditAddStepSelectActionResolver = makeResolver<\n  IEditorSelectAction,\n  ISelectActionRouteParams,\n  ISelectConnectionRouteState\n>(\n  routes.integration.edit.addStep.connection.selectAction,\n  configureSelectActionMapper\n);\n\nexport const integrationEditAddStepConfigureActionResolver = makeResolver<\n  IEditorConfigureAction,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState\n>(\n  routes.integration.edit.addStep.connection.configureAction,\n  configureConfigureActionMapper\n);\n\nexport const integrationEditEditStepSelectActionResolver = makeResolver<\n  IEditorSelectAction,\n  ISelectActionRouteParams,\n  ISelectActionRouteState\n>(\n  routes.integration.edit.editStep.connection.selectAction,\n  configureSelectActionMapper\n);\n\nexport const integrationEditEditStepConfigureActionResolver = makeResolver<\n  IEditorConfigureAction,\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState\n>(\n  routes.integration.edit.editStep.connection.configureAction,\n  configureConfigureActionMapper\n);\n\nexport const integrationEditSaveAndPublish = makeResolver<\n  IEditorIndex,\n  ISaveIntegrationRouteParams,\n  ISaveIntegrationRouteState\n>(routes.integration.edit.saveAndPublish, configureIndexMapper);\n\nexport const metricsResolver = makeResolver<\n  { integration: Integration },\n  IMetricsPageParams,\n  IMetricsPageState\n>(routes.integration.metrics, ({ integration }) => ({\n  params: {\n    integrationId: integration.id!,\n  },\n  state: {\n    integration,\n  },\n}));\n\nexport default {\n  list: listResolver,\n  manageCicd: {\n    root: manageCicdResolver,\n  },\n  create: {\n    root: createRootResolver,\n    start: {\n      selectStep: createStartSelectStepResolver,\n      connection: {\n        selectAction: createStartSelectActionResolver,\n        configureAction: createStartConfigureActionResolver,\n      },\n    },\n    finish: {\n      selectStep: createFinishSelectStepResolver,\n      connection: {\n        selectAction: createFinishSelectActionResolver,\n        configureAction: createFinishConfigureActionResolver,\n      },\n    },\n    configure: {\n      index: createConfigureIndexResolver,\n      addStep: {\n        selectStep: createConfigureAddStepSelectStepResolver,\n        connection: {\n          selectAction: createConfigureAddStepSelectActionResolver,\n          configureAction: createConfigureAddStepConfigureActionResolver,\n        },\n      },\n      editStep: {\n        index: 'todo',\n        connection: {\n          selectAction: createConfigureEditStepSelectActionResolver,\n          configureAction: createConfigureEditStepConfigureActionResolver,\n        },\n      },\n      saveAndPublish: createConfigureEditStepSaveAndPublishResolver,\n    },\n  },\n  integration: {\n    activity: integrationActivityResolver,\n    details: integrationDetailsResolver,\n    edit: {\n      index: integrationEditIndexResolver,\n      addStep: {\n        selectStep: integrationEditAddStepSelectStepResolver,\n        connection: {\n          selectAction: integrationEditAddStepSelectActionResolver,\n          configureAction: integrationEditAddStepConfigureActionResolver,\n        },\n      },\n      editStep: {\n        index: 'todo',\n        connection: {\n          selectAction: integrationEditEditStepSelectActionResolver,\n          configureAction: integrationEditEditStepConfigureActionResolver,\n        },\n      },\n      saveAndPublish: integrationEditSaveAndPublish,\n    },\n    metrics: metricsResolver,\n  },\n};\n","import { UnrecoverableError } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\n\nexport interface IApiErrorProps {\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\nexport const ApiError: React.SFC<IApiErrorProps> = props => (\n  <Translation ns={['shared']}>\n    {t => (\n      <UnrecoverableError\n        i18nTitle={t('error.title')}\n        i18nInfo={'error.info'}\n        i18nHelp={'error.help'}\n        i18nRefreshLabel={'error.refreshButton'}\n        i18nReportIssue={'error.reportIssueButton'}\n        error={props.error}\n        errorInfo={props.errorInfo}\n      />\n    )}\n  </Translation>\n);\n","import { Loader, UnrecoverableError } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { LoadingComponentProps } from 'react-loadable';\n\nexport class ModuleLoader extends React.Component<LoadingComponentProps> {\n  public render() {\n    if (this.props.error || this.props.timedOut) {\n      console.error(this.props.error); // tslint:disable-line\n      return (\n        <Translation ns={['shared']}>\n          {t => (\n            <UnrecoverableError\n              i18nTitle={t('error.title')}\n              i18nInfo={t('error.info')}\n              i18nHelp={t('error.help')}\n              i18nRefreshLabel={t('error.refreshButton')}\n              i18nReportIssue={t('shared:error.reportIssueButton')}\n              i18nShowErrorInfoLabel={t('error.showErrorInfoButton')}\n              error={this.props.error}\n            />\n          )}\n        </Translation>\n      );\n    } else if (this.props.pastDelay) {\n      return <Loader />;\n    }\n    return null;\n  }\n}\n","import { UnrecoverableError } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\n\nexport const PageNotFound: React.FC = () => (\n  <Translation ns={['shared']}>\n    {t => (\n      <UnrecoverableError\n        i18nTitle={t('404.title')}\n        i18nInfo={t('404.info')}\n        i18nHelp={t('404.help')}\n        i18nRefreshLabel={t('404.refreshButton')}\n        i18nReportIssue={t('404.reportIssueButton')}\n      />\n    )}\n  </Translation>\n);\n","import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { AppContext } from '../app';\n\nexport interface IPageTitleProps {\n  /**\n   * The page title. Don't append or prepend the application name, the right one\n   * will be added automatically.\n   */\n  title: string;\n}\n\n/**\n * A component to set the title in the document metadata. This title will be\n * visible in the browser's title bar, tab and history.\n * @see [title]{@link IPageTitleProps#title}\n */\nexport class PageTitle extends React.PureComponent<IPageTitleProps> {\n  public render() {\n    return (\n      <AppContext.Consumer>\n        {({ config }) => (\n          <Helmet>\n            <title>{`${this.props.title} - ${config.title ||\n              'Syndesis'}`}</title>\n          </Helmet>\n        )}\n      </AppContext.Consumer>\n    );\n  }\n}\n","import * as React from 'react';\nimport { AppContext } from '../app';\n\n/**\n * This component will automatically close the app left navigation bar when\n * mounted in the DOM, and will reopen it when unmounted.\n *\n * If you need this behaviour for a whole section, keep this component high in\n * the DOM tree, ideally before any component that will re-render on his\n * lifecycle - like data fetching components - to avoid firing quick unmount/mount\n * events that will lead to a bad UX.\n */\nexport const WithClosedNavigation: React.FunctionComponent = ({ children }) => {\n  const context = React.useContext(AppContext);\n  React.useEffect(() => {\n    context.hideNavigation();\n\n    return () => {\n      context.showNavigation();\n    };\n  }, []);\n  return <>{children}</>;\n};\n","import { UnrecoverableError } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\n\nexport interface IWithErrorBoundaryState {\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n  errorComponent?: React.ReactElement<{\n    error: Error;\n    errorInfo: React.ErrorInfo;\n  }>;\n}\n\nexport class WithErrorBoundary extends React.Component<\n  any,\n  IWithErrorBoundaryState\n> {\n  public state: IWithErrorBoundaryState = {};\n\n  public componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n    this.setState({\n      error,\n      errorInfo,\n    });\n  }\n\n  public componentWillReceiveProps(\n    nextProps: Readonly<any>,\n    nextContext: any\n  ): void {\n    this.setState({\n      error: undefined,\n      errorInfo: undefined,\n    });\n  }\n\n  public render() {\n    return this.state.error && this.state.errorInfo ? (\n      this.props.errorComponent ? (\n        React.createElement(this.props.errorComponent, {\n          error: this.state.error,\n          errorInfo: this.state.errorInfo,\n        })\n      ) : (\n        <Translation ns={['shared']}>\n          {t => (\n            <UnrecoverableError\n              i18nTitle={t('error.title')}\n              i18nInfo={t('error.info')}\n              i18nHelp={t('error.help')}\n              i18nRefreshLabel={t('error.refreshButton')}\n              i18nReportIssue={t('shared:error.reportIssueButton')}\n              i18nShowErrorInfoLabel={t('error.showErrorInfoButton')}\n              error={this.state.error}\n              errorInfo={this.state.errorInfo}\n            />\n          )}\n        </Translation>\n      )\n    ) : (\n      this.props.children\n    );\n  }\n}\n","export * from './ApiError';\nexport * from './ModuleLoader';\nexport * from './PageNotFound';\nexport * from './PageTitle';\nexport * from './WithClosedNavigation';\nexport * from './WithErrorBoundary';\n","/* tslint:disable:object-literal-sort-keys */\nimport { include } from 'named-urls';\n\nconst stepRoutes = {\n  // step 1\n  selectStep: '',\n  // if selected step is api provider\n  apiProvider: include('api-provider', {\n    specification: 'specification',\n    review: 'review',\n    edit: 'edit',\n    save: 'save',\n  }),\n  // if selected step kind is data mapper\n  dataMapper: 'mapper',\n  // if selected step kind is basic filter\n  basicFilter: 'filter',\n  // if selected step kind is template\n  template: 'template',\n  // if selected step kind is step\n  step: 'step',\n  // if selected step kind is endpoint\n  connection: include('connection/:connectionId', {\n    selectAction: 'action',\n    configureAction: 'action/:actionId/step/:step',\n    // if 'any' data shape\n    describeData: 'describe-data/:position/:direction(input|output)',\n  }),\n};\n\n/**\n * Both the integration creator and editor share the same routes when the creator\n * reaches the third step in the wizard. This object is to keep them DRY.\n */\nconst editorRoutes = include('flow/:flow', {\n  index: 'add-step',\n  addStep: include('position/:position/connection', stepRoutes),\n  editStep: include('position/:position/edit-connection', stepRoutes),\n  saveAndPublish: 'save',\n  root: '',\n});\n\nexport default include('/integrations', {\n  list: '',\n  manageCicd: include('manageCicd', { root: '' }),\n  import: include('import', { root: '' }),\n  create: include('create', {\n    start: include('start/flow/:flow/position/:position', stepRoutes),\n    finish: include('finish/flow/:flow/position/:position', stepRoutes),\n    configure: include('configure', editorRoutes),\n    root: '',\n  }),\n  integration: include(':integrationId', {\n    details: 'details',\n    activity: 'activity',\n    metrics: 'metrics',\n    edit: include('edit', editorRoutes),\n    root: '',\n  }),\n});\n","import { Step } from '@syndesis/models';\nimport {\n  ButtonLink,\n  IntegrationEditorStepsList,\n  IntegrationEditorStepsListItem,\n  IntegrationFlowAddStep,\n} from '@syndesis/ui';\nimport * as H from 'history';\nimport * as React from 'react';\n\nexport interface IIntegrationEditorStepAdderProps {\n  /**\n   * the list of steps to render.\n   */\n  steps: Step[];\n  /**\n   * a callback to get the `LocationDescriptor` that should be reached when\n   * clicking the Add Connection button\n   * @param idx - the zero-based index where a new connection should be added\n   */\n  addStepHref: (idx: number) => H.LocationDescriptor;\n  /**\n   * a callback to get the `LocationDescriptor` that should be reached when\n   * clicking the Edit Step button\n   * @param stepIdx - the zero-based index of the integration step that should\n   * be edited\n   * @param step - the integration step object that should be edited\n   */\n  // tslint:disable-next-line:react-unused-props-and-state\n  configureStepHref: (stepIdx: number, step: Step) => H.LocationDescriptor;\n}\n\n/**\n * A component to render the steps of an integration with the required action\n * buttons to add a new step, edit an existing one, etc.\n *\n * @see [steps]{@link IIntegrationEditorStepAdderProps#steps}\n * @see [addStepHref]{@link IIntegrationEditorStepAdderProps#addStepHref}\n * @see [addStepHref]{@link IIntegrationEditorStepAdderProps#addStepHref}\n * @see [configureStepHref]{@link IIntegrationEditorStepAdderProps#configureStepHref}\n *\n * @todo add the delete step button\n */\nexport class IntegrationEditorStepAdder extends React.Component<\n  IIntegrationEditorStepAdderProps\n> {\n  public render() {\n    return (\n      <IntegrationEditorStepsList>\n        {this.props.steps.map((s, idx) => {\n          return (\n            <React.Fragment key={idx}>\n              <IntegrationEditorStepsListItem\n                stepName={s.connection!.connector!.name}\n                stepDescription={s.action!.name}\n                icon={<img src={s.connection!.icon} width={24} height={24} />}\n                actions={\n                  <>\n                    <ButtonLink href={this.props.configureStepHref(idx, s)}>\n                      Configure\n                    </ButtonLink>\n                    <ButtonLink href={'#'} as={'danger'}>\n                      <i className=\"fa fa-trash\" />\n                    </ButtonLink>\n                  </>\n                }\n              />\n              {idx < this.props.steps.length - 1 && (\n                <IntegrationFlowAddStep\n                  active={false}\n                  showDetails={false}\n                  addStepHref={this.props.addStepHref(idx + 1)}\n                  i18nAddStep={'Add a step'}\n                />\n              )}\n            </React.Fragment>\n          );\n        })}\n      </IntegrationEditorStepsList>\n    );\n  }\n}\n","import { include } from 'named-urls';\n\nexport default include('/', {\n  root: '',\n});\n","/* tslint:disable:object-literal-sort-keys no-empty-interface */\nimport { reverse } from 'named-urls';\nimport routes from './routes';\n\n/**\n * Creates a function that takes a route and some `data` `T` that returns the\n * reversed URL.\n * @param route\n *\n * @todo perhaps move in the @syndesis/utils package?\n */\nfunction makeResolverNoParams(route: string) {\n  return () => reverse(route);\n}\n\n// TODO: unit test every single one of these resolvers 😫\nexport default {\n  root: makeResolverNoParams(routes.root),\n};\n","import connections from './connections/resolvers';\nimport customizations from './customizations/resolvers';\nimport dashboard from './dashboard/resolvers';\nimport data from './data/resolvers';\nimport integrations from './integrations/resolvers';\n\nexport default {\n  connections,\n  customizations,\n  dashboard,\n  data,\n  integrations,\n};\n","import { Icon, MessageDialog } from 'patternfly-react';\nimport * as React from 'react';\n\n/**\n * Icon type enum that maps to patternfly icon types\n */\nexport enum ConfirmationIconType {\n  DANGER = 'error-circle-o',\n  WARNING = 'warning-triangle-o',\n  INFO = 'info',\n  OK = 'ok',\n  NONE = 'NONE',\n}\n\n/**\n * Button style enum that maps to patternfly button classes\n */\nexport enum ConfirmationButtonStyle {\n  NORMAL = 'primary',\n  SUCCESS = 'success',\n  DANGER = 'danger',\n  WARNING = 'warning',\n  INFO = 'info',\n  LINK = 'link',\n}\n\n/**\n * A dialog that can be used to obtain user confirmation when deleting an object.\n */\nexport interface IConfirmationDialogProps {\n  /**\n   * The style of button to use for the primary action\n   */\n  buttonStyle: ConfirmationButtonStyle;\n  /**\n   * The localized cancel button text.\n   */\n  i18nCancelButtonText: string;\n\n  /**\n   * The localized confirmation button text.\n   */\n  i18nConfirmButtonText: string;\n\n  /**\n   * The localized confirmation message.\n   */\n  i18nConfirmationMessage: string;\n\n  /**\n   * An optional localized message providing more details.\n   */\n  i18nDetailsMessage?: string;\n\n  /**\n   * The localized dialog title.\n   */\n  i18nTitle: string;\n\n  /**\n   * The icon type to use, or unset for no icon\n   */\n  icon: ConfirmationIconType;\n\n  /**\n   * A callback for when the cancel button is clicked. Caller should hide dialog.\n   */\n  onCancel: () => void;\n\n  /**\n   * A callback for when the confirmation button is clicked. Caller should hide dialog.\n   */\n  onConfirm: () => void;\n\n  /**\n   * Indicates if the dialog should be visible.\n   */\n  showDialog: boolean;\n}\n\n/**\n * A modal dialog to display when an object is being deleted.\n */\nexport class ConfirmationDialog extends React.Component<\n  IConfirmationDialogProps\n> {\n  public render() {\n    return (\n      <MessageDialog\n        accessibleName=\"deleteConfirmationDialog\"\n        accessibleDescription=\"deleteConfirmationDialogContent\"\n        icon={\n          this.props.icon !== ConfirmationIconType.NONE && (\n            <Icon type=\"pf\" name={this.props.icon} />\n          )\n        }\n        onHide={this.props.onCancel}\n        primaryAction={this.props.onConfirm}\n        primaryActionButtonContent={this.props.i18nConfirmButtonText}\n        primaryActionButtonBsStyle={this.props.buttonStyle}\n        primaryContent={\n          <p className=\"lead\">{this.props.i18nConfirmationMessage}</p>\n        }\n        secondaryAction={this.props.onCancel}\n        secondaryActionButtonContent={this.props.i18nCancelButtonText}\n        secondaryContent={\n          this.props.i18nDetailsMessage ? (\n            <p>{this.props.i18nDetailsMessage}</p>\n          ) : (\n            undefined\n          )\n        }\n        show={this.props.showDialog}\n        title={this.props.i18nTitle}\n      />\n    );\n  }\n}\n","import { MessageDialog } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IDialogProps {\n  body: any;\n  footer: any;\n  onHide: () => void;\n  title: string;\n}\n\nexport class Dialog extends React.Component<IDialogProps> {\n  public render() {\n    return (\n      <MessageDialog\n        title={this.props.title}\n        primaryContent={this.props.body}\n        footer={this.props.footer}\n        show={true}\n        onHide={this.props.onHide}\n      />\n    );\n  }\n}\n","import classnames from 'classnames';\nimport * as React from 'react';\n\nexport interface IContainerProps {\n  className?: string;\n  [key: string]: any;\n}\n\nexport const Container: React.FunctionComponent<IContainerProps> = ({\n  children,\n  className,\n  ...props\n}) => (\n  <div className={classnames('container-fluid', className)} {...props}>\n    {children}\n  </div>\n);\n","import { Grid, Icon } from 'patternfly-react';\nimport * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport { Container } from '../Layout/Container';\nimport './DndFileChooser.css';\nimport { INotification, INotificationType } from './Notifications';\n\n/**\n * The properties of the `DndFileChooser`.\n */\nexport interface IDndFileChooserProps {\n  /**\n   * Indicates if multiple files can be added. Defaults to `false`.\n   */\n  allowMultiple?: boolean;\n\n  /**\n   * `true` if the dropzone should be disabled. Defaults to `false`.\n   */\n  disableDropzone: boolean;\n\n  /**\n   * A comma delimited string of file extensions. For example, '.jar,.txt'. Defaults to any file extension.\n   */\n  fileExtensions?: string;\n\n  /**\n   * The localized text that appears below the selected file information at the bottom of the drop area.\n   */\n  i18nHelpMessage?: string;\n\n  /**\n   * The localized text (may include HTML tags) that appears above the selected file information at the\n   * top of the drop area.\n   */\n  i18nInstructions: string;\n\n  /**\n   * The localized text that appears when no file has been selected.\n   */\n  i18nNoFileSelectedMessage: string;\n\n  /**\n   * The localized text for the label that appears before the selected file information.\n   */\n  i18nSelectedFileLabel: string;\n\n  /**\n   * A general, localized message for when a file upload failed. This message will be shown\n   * along with an error icon and appears next to the selected file message. If this property\n   * is set then `i18nUploadSuccessMessage` should not be set.\n   */\n  i18nUploadFailedMessage?: string;\n\n  /**\n   * A list of error messages for failed uploads\n   */\n  i18nUploadFailedMessages?: string[];\n\n  /**\n   * A general, localized message for when a file upload was successful. This message will be shown\n   * along with an OK icon and appear next to the selected file message. If this property\n   * is set then `i18nUploadFailedMessage` should not be set.\n   */\n  i18nUploadSuccessMessage?: string;\n\n  /**\n   * A list of error messages for successful uploads\n   */\n  i18nUploadSuccessMessages?: string[];\n\n  /**\n   * Obtains the localized text (may include HTML tags) that appears when the file upload was rejected. This\n   * will occur when a DnD of a file with the wrong extension is dropped. This message is presented\n   * as a timed toast notification.\n   */\n  onUploadRejected(fileName: string): string;\n\n  /**\n   * Callback for when one or more file uploads have been accepted. Caller should handler processing of the files.\n   */\n  onUploadAccepted(file: File[]): void;\n}\n\n/**\n * The state properties of the `DndFileChooser`.\n */\nexport interface IDndFileChooserState {\n  /**\n   * The files that were uploaded successfully. Defaults to an empty array.\n   */\n  files: File[];\n\n  /**\n   * The error notifications for rejected files. After a toast is displayed for a notification it is removed\n   * from the array.\n   */\n  notifications: INotification[];\n}\n\n/**\n * A component that can be used to upload files. Files can be uploaded by clicking in the drop zone or by\n * drag and dropping files into the drop zone.\n */\nexport class DndFileChooser extends React.Component<\n  IDndFileChooserProps,\n  IDndFileChooserState\n> {\n  // setup default prop values\n  public static defaultProps = {\n    allowMultiple: false,\n  };\n\n  public constructor(props: IDndFileChooserProps) {\n    super(props);\n\n    // set up initial state\n    this.state = {\n      files: [],\n      notifications: [],\n    };\n\n    this.handleAcceptedFiles = this.handleAcceptedFiles.bind(this);\n    this.handleRejectedFiles = this.handleRejectedFiles.bind(this);\n  }\n\n  /**\n   * Obtains an element that lists the names of the files that have been uploaded.\n   */\n  public getSelectedFileMessage(): JSX.Element {\n    // one file uploaded\n    if (this.state.files.length === 1) {\n      return <Container>{this.state.files[0].name}</Container>;\n    }\n\n    // multiple files uploaded\n    if (this.state.files.length > 1) {\n      return (\n        <ul>\n          {this.state.files.map((file, index) => (\n            <li key={index}>{file.name}</li>\n          ))}\n        </ul>\n      );\n    }\n\n    // no files uploaded\n    return <Container>{this.props.i18nNoFileSelectedMessage}</Container>;\n  }\n\n  /**\n   * Obtains an element that indicates the if the upload was successful.\n   */\n  public getUploadMessage(): JSX.Element {\n    if (this.props.i18nUploadSuccessMessage) {\n      return (\n        <span className=\"dnd-file-chooser__uploadMessage\">\n          <Icon type=\"pf\" name=\"ok\" />\n          &nbsp;{this.props.i18nUploadSuccessMessage}\n        </span>\n      );\n    }\n    if (this.props.i18nUploadFailedMessage) {\n      return (\n        <span className=\"dnd-file-chooser__uploadMessage\">\n          <Icon type=\"pf\" name=\"error-circle-o\" />\n          &nbsp;{this.props.i18nUploadFailedMessage}\n        </span>\n      );\n    }\n    if (\n      this.props.i18nUploadSuccessMessages &&\n      this.props.i18nUploadFailedMessages\n    ) {\n      return (\n        <ul>\n          {this.props.i18nUploadSuccessMessages!.map((message, idx) => (\n            <li\n              key={'success' + idx}\n              className=\"dnd-file-chooser__uploadMessage\"\n            >\n              <Icon type=\"pf\" name=\"ok\" />\n              &nbsp;{message}\n            </li>\n          ))}\n          {this.props.i18nUploadFailedMessages!.map((message, idx) => (\n            <li key={'fail' + idx} className=\"dnd-file-chooser__uploadMessage\">\n              <Icon type=\"pf\" name=\"error-circle-o\" />\n              &nbsp;{message}\n            </li>\n          ))}\n        </ul>\n      );\n    }\n    // no message\n    return <Container />;\n  }\n\n  /**\n   * Callback for when one or more files were uploaded successfully.\n   * @param acceptedFiles the files that have been uploaded\n   */\n  public handleAcceptedFiles(acceptedFiles: File[]) {\n    this.setState({ ...this.state, files: acceptedFiles });\n    this.props.onUploadAccepted(acceptedFiles); // notify callback\n  }\n\n  /**\n   * Callback for when one or more files were rejected.\n   * @param rejectedFiles the files that were rejected\n   */\n  public handleRejectedFiles(rejectedFiles: File[]) {\n    const notifications = rejectedFiles.map(file => ({\n      key: file.name,\n      message: this.props.onUploadRejected(file.name),\n      type: 'error' as INotificationType,\n    }));\n\n    // If single file dropped then all files will be cleared. If multiple allowed, and multiple dropped,\n    // and some are accepted and some are rejected, the accepted files will still be uploaded because the\n    // handleAcceptedFiles is called after this method.\n    this.setState({\n      ...this.state,\n      files: [],\n      notifications: [...this.state.notifications, ...notifications],\n    });\n  }\n\n  public render() {\n    return (\n      <Dropzone\n        accept={this.props.fileExtensions}\n        disabled={this.props.disableDropzone}\n        multiple={this.props.allowMultiple}\n        onDropAccepted={this.handleAcceptedFiles}\n        onDropRejected={this.handleRejectedFiles}\n      >\n        {({ getRootProps, getInputProps }) => (\n          <Container>\n            <Grid\n              disabled={this.props.disableDropzone}\n              fluid={true}\n              className=\"dnd-file-chooser\"\n              {...getRootProps({ refKey: 'dnd-file-chooser' })}\n            >\n              <Grid.Row>\n                <Grid.Col\n                  className=\"dnd-file-chooser__instructions\"\n                  dangerouslySetInnerHTML={{\n                    __html: this.props.i18nInstructions,\n                  }}\n                />\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col>\n                  <input {...getInputProps()} />\n                </Grid.Col>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col\n                  className=\"dnd-file-chooser__selectedFileLabel\"\n                  xs={3}\n                >\n                  {this.props.i18nSelectedFileLabel}\n                </Grid.Col>\n                <Grid.Col className=\"dnd-file-chooser__selectedFile\" xs={6}>\n                  {this.getSelectedFileMessage()}\n                </Grid.Col>\n                <Grid.Col xs={3}>{this.getUploadMessage()}</Grid.Col>\n              </Grid.Row>\n              {this.props.i18nHelpMessage ? (\n                <Grid.Row>\n                  <Grid.Col className=\"dnd-file-chooser__helpText\">\n                    {this.props.i18nHelpMessage}\n                  </Grid.Col>\n                </Grid.Row>\n              ) : null}\n            </Grid>\n          </Container>\n        )}\n      </Dropzone>\n    );\n  }\n}\n","import {\n  Nav,\n  NavList,\n  Page,\n  PageHeader,\n  PageSection,\n  PageSidebar,\n} from '@patternfly/react-core';\nimport * as React from 'react';\n\nexport interface ILayoutBase {\n  appTitle: string;\n  pictograph: any;\n  appNav: any;\n  verticalNav: any[];\n  logoHref: string;\n  showNavigation: boolean;\n  onNavigationCollapse(): void;\n  onNavigationExpand(): void;\n}\n\nexport interface ILayoutState {\n  isNavOpen: boolean;\n}\n\nexport class AppLayout extends React.Component<ILayoutBase, ILayoutState> {\n  public onNavToggle: () => void;\n  constructor(props: ILayoutBase) {\n    super(props);\n    this.state = {\n      isNavOpen: true,\n    };\n    this.onNavToggle = () => {\n      this.setState({\n        isNavOpen: !this.state.isNavOpen,\n      });\n    };\n  }\n\n  public componentDidMount() {\n    this.setState({\n      isNavOpen: this.props.showNavigation,\n    });\n  }\n\n  public render() {\n    const { isNavOpen } = this.state;\n\n    const Header = (\n      <PageHeader\n        logo={this.props.pictograph}\n        logoProps={{ href: '/' }}\n        toolbar={this.props.appNav}\n        showNavToggle={true}\n        isNavOpen={isNavOpen}\n        onNavToggle={this.onNavToggle}\n      />\n    );\n    const Sidebar = (\n      <PageSidebar\n        nav={\n          <Nav>\n            <NavList>{this.props.verticalNav}</NavList>\n          </Nav>\n        }\n        isNavOpen={isNavOpen}\n      />\n    );\n\n    return (\n      <Page header={Header} sidebar={Sidebar}>\n        <PageSection>{this.props.children}</PageSection>\n      </Page>\n    );\n  }\n}\n","import { Dropdown, DropdownToggle } from '@patternfly/react-core';\nimport * as React from 'react';\n\nexport interface IAppTopMenuProps {\n  username: string;\n  children: any;\n}\n\nexport interface IAppTopMenuState {\n  isOpen: boolean;\n}\n\n/**\n * A component to show the logged in user menu.\n */\nexport class AppTopMenu extends React.Component<\n  IAppTopMenuProps,\n  IAppTopMenuState\n> {\n  public state = {\n    isOpen: false,\n  };\n  public onToggle = (isOpen: boolean) => {\n    this.setState({\n      isOpen,\n    });\n  };\n  public onSelect = (event: React.SyntheticEvent<HTMLDivElement, Event>) => {\n    this.setState({\n      isOpen: !this.state.isOpen,\n    });\n  };\n  public render() {\n    const { children, username } = this.props;\n    return (\n      <Dropdown\n        isPlain={true}\n        onSelect={this.onSelect}\n        toggle={\n          <DropdownToggle onToggle={this.onToggle}>{username}</DropdownToggle>\n        }\n        isOpen={this.state.isOpen}\n        dropdownItems={React.Children.toArray(children)}\n      />\n    );\n  }\n}\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport classnames from 'classnames';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface IButtonLinkProps {\n  onClick?: (e: React.MouseEvent<any>) => void;\n  href?: H.LocationDescriptor;\n  className?: string;\n  disabled?: boolean;\n  as?:\n    | 'default'\n    | 'primary'\n    | 'success'\n    | 'info'\n    | 'warning'\n    | 'danger'\n    | 'link';\n  size?: 'lg' | 'sm' | 'xs';\n  [key: string]: any;\n}\n\nexport const ButtonLink: React.FunctionComponent<IButtonLinkProps> = ({\n  onClick,\n  href,\n  className,\n  disabled,\n  as = 'default',\n  size,\n  children,\n  ...props\n}) => {\n  className = classnames('btn', `btn-${as}`, className, {\n    'btn-lg': size === 'lg',\n    'btn-sm': size === 'sm',\n    'btn-xs': size === 'xs',\n  });\n  return href && !disabled ? (\n    <Link to={href} onClick={onClick} className={className} {...props}>\n      {children}\n    </Link>\n  ) : (\n    <button\n      onClick={onClick}\n      className={className}\n      disabled={disabled || (!onClick && !href)}\n    >\n      {children}\n    </button>\n  );\n};\n","import classnames from 'classnames';\nimport { Spinner } from 'patternfly-react';\nimport * as React from 'react';\n\nimport './Loader.css';\n\nexport interface ILoaderProps {\n  inline?: boolean;\n  inverse?: boolean;\n  loading?: boolean;\n  size?: 'lg' | 'md' | 'sm' | 'xs';\n}\n\nexport class Loader extends React.PureComponent<ILoaderProps> {\n  public static defaultProps = {\n    inline: false,\n    inverse: false,\n    loading: true,\n    size: 'lg',\n  };\n\n  public render() {\n    return (\n      <div\n        className={classnames('Loader', {\n          'is-block': !this.props.inline,\n          'is-inline': this.props.inline,\n        })}\n      >\n        <Spinner\n          loading={this.props.loading}\n          size={this.props.size}\n          inline={this.props.inline}\n          inverse={this.props.inverse}\n        />\n      </div>\n    );\n  }\n}\n","import * as H from 'history';\nimport * as React from 'react';\nimport { Route } from 'react-router';\nimport { Link } from 'react-router-dom';\n\ninterface INavLink {\n  activeClassName?: string;\n  activeStyle?: any;\n  className?: string;\n  exact?: boolean;\n  isActive?: (match: any, location: any) => boolean;\n  location?: any;\n  strict?: boolean;\n  style?: any;\n  to: H.LocationDescriptor;\n  label: any;\n  children?: any;\n}\n\nfunction joinClassnames(...classnames: Array<string | undefined>): string {\n  return classnames.filter(i => i).join(' ');\n}\n\nexport const PfNavLink = ({\n  activeClassName = 'active',\n  activeStyle,\n  className: classNameProp,\n  exact,\n  isActive: isActiveProp,\n  location,\n  strict,\n  style: styleProp,\n  to,\n  label,\n  children,\n  ...rest\n}: INavLink) => {\n  const path = typeof to === 'object' ? to.pathname : to;\n\n  // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n  const escapedPath = path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1');\n\n  const NavLinkChildren = ({\n    location: childLocation,\n    match,\n  }: {\n    location: any;\n    match: any;\n  }) => {\n    const isActive = !!(isActiveProp\n      ? isActiveProp(match, childLocation)\n      : match);\n\n    const className = isActive\n      ? joinClassnames(classNameProp, activeClassName)\n      : classNameProp;\n    const style = isActive ? { ...styleProp, ...activeStyle } : styleProp;\n\n    return (\n      <li className={className}>\n        <Link style={style} to={to} children={label} {...rest} />\n        {children}\n      </li>\n    );\n  };\n\n  return (\n    <Route\n      path={escapedPath}\n      exact={exact}\n      strict={strict}\n      location={location}\n      children={NavLinkChildren}\n    />\n  );\n};\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { Route } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nexport interface IPfVerticalNavItem {\n  className?: string;\n  exact?: boolean;\n  isActive?: (match: any, location: any) => boolean;\n  icon: string;\n  location?: any;\n  strict?: boolean;\n  to: string | any;\n  label: any;\n  children?: any;\n}\n\nfunction PfVerticalNavItem({\n  className,\n  exact,\n  isActive: isActiveProp,\n  icon,\n  location,\n  strict,\n  to,\n  label,\n  children,\n  ...rest\n}: IPfVerticalNavItem) {\n  const path = typeof to === 'object' ? to.pathname : to;\n\n  // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n  const escapedPath = path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1');\n\n  const NavLinkViewTemplate = ({\n    location: childLocation,\n    match,\n  }: {\n    location: any;\n    match: any;\n  }) => {\n    const isActive = !!(isActiveProp\n      ? isActiveProp(match, childLocation)\n      : match);\n\n    return (\n      <li className={'pf-c-nav__item'}>\n        <Link\n          to={to}\n          className={classNames('pf-c-nav__link', {\n            ['pf-m-current']: isActive,\n          })}\n          aria-current={isActive ? 'page' : undefined}\n          children={<>{label}</>}\n          {...rest}\n        />\n        {children}\n      </li>\n    );\n  };\n\n  return (\n    <Route\n      path={escapedPath}\n      exact={exact}\n      strict={strict}\n      location={location}\n      children={NavLinkViewTemplate}\n    />\n  );\n}\n\nPfVerticalNavItem.displayName = 'VerticalNav.Item';\n\nexport { PfVerticalNavItem };\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as H from 'history';\nimport * as React from 'react';\nimport { PfNavLink } from './PfNavLink';\n\nexport interface ITabBarItemProps {\n  label: string;\n  to: H.LocationDescriptor;\n  [key: string]: any;\n}\n\nexport const TabBarItem: React.FunctionComponent<ITabBarItemProps> = ({\n  label,\n  to,\n  ...props\n}) => <PfNavLink label={label} to={to} {...props} />;\n","import * as React from 'react';\n\ninterface IWizardStepsProps {\n  mainSteps: React.ReactNode;\n  altSteps: React.ReactNode;\n  /**\n   * Indicates if the user clicked on a step. Used to show\n   * sub-steps when browsing from a mobile device.\n   */\n  active: boolean;\n}\n\nexport class WizardSteps extends React.Component<IWizardStepsProps> {\n  public render() {\n    return (\n      <div className={'wizard-pf-steps'}>\n        <ul\n          className={`wizard-pf-steps-indicator wizard-pf-steps-alt-indicator ${\n            this.props.active ? 'active' : ''\n          }`}\n        >\n          {this.props.mainSteps}\n        </ul>\n        <ul\n          className={`wizard-pf-steps-alt ${this.props.active ? '' : 'hidden'}`}\n        >\n          {this.props.altSteps}\n        </ul>\n      </div>\n    );\n  }\n}\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport classnames from 'classnames';\nimport {\n  FormControl,\n  FormGroup,\n  HelpBlock,\n  Icon,\n  InlineEdit,\n  InputGroup,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { Omit } from 'react-router';\nimport { Loader } from '../Layout';\nimport './InlineTextEdit.css';\n\ninterface IReadWidget {\n  className?: string;\n  allowEditing: boolean;\n  value: string;\n  onEdit(): void;\n}\n\nconst ReadWidget: React.FunctionComponent<IReadWidget> = ({\n  className,\n  allowEditing,\n  value,\n  onEdit,\n}) => (\n  <div className={classnames('inline-text-readwidget', className)}>\n    {value}\n    {allowEditing ? (\n      <Icon\n        className=\"inline-text-editIcon\"\n        name=\"edit\"\n        onClick={onEdit}\n        type=\"pf\"\n      />\n    ) : null}\n  </div>\n);\n\ninterface IEditWidget extends React.InputHTMLAttributes<HTMLInputElement> {\n  className?: string;\n  value: string;\n  valid: boolean;\n  saving: boolean;\n  asTextarea: boolean;\n  errorMsg?: string;\n  onConfirm(): void;\n  onCancel(): void;\n}\n\nconst EditWidget: React.FunctionComponent<IEditWidget> = ({\n  valid,\n  value,\n  placeholder,\n  errorMsg,\n  saving,\n  asTextarea,\n  onChange,\n  onConfirm,\n  onCancel,\n}) => (\n  <div className={'inline-text-editwidget'}>\n    {asTextarea ? (\n      <>\n        <FormGroup\n          controlId=\"textarea\"\n          validationState={valid ? 'success' : 'error'}\n        >\n          <FormControl\n            componentClass=\"textarea\"\n            disabled={saving}\n            onChange={onChange}\n            placeholder={placeholder}\n            value={value}\n          />\n          {saving ? (\n            <span className=\"btn\">\n              <Loader inline={true} loading={saving} size={'sm'} />\n            </span>\n          ) : (\n            <InlineEdit.ConfirmButton\n              disabled={saving || !valid}\n              onClick={onConfirm}\n            />\n          )}\n          <InlineEdit.CancelButton disabled={saving} onClick={onCancel} />\n        </FormGroup>\n        {errorMsg && <HelpBlock>{errorMsg}</HelpBlock>}\n      </>\n    ) : (\n      <>\n        <FormGroup validationState={valid ? 'success' : 'error'}>\n          <InputGroup>\n            <FormControl\n              disabled={saving}\n              onChange={onChange}\n              placeholder={placeholder}\n              type=\"text\"\n              value={value}\n            />\n            <InputGroup.Button>\n              {saving ? (\n                <span className=\"btn\">\n                  <Loader inline={true} loading={saving} size={'sm'} />\n                </span>\n              ) : (\n                <InlineEdit.ConfirmButton\n                  disabled={saving || !valid}\n                  onClick={onConfirm}\n                />\n              )}\n            </InputGroup.Button>\n            <InputGroup.Button>\n              <InlineEdit.CancelButton disabled={saving} onClick={onCancel} />\n            </InputGroup.Button>\n          </InputGroup>\n          {errorMsg && <HelpBlock>{errorMsg}</HelpBlock>}\n        </FormGroup>\n      </>\n    )}\n  </div>\n);\n\nexport interface IInlineTextEditProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onChange'> {\n  className?: string;\n\n  /**\n   * The current value of the property being rendered.\n   */\n  value: string;\n\n  /**\n   * `true` if editing is allowed.\n   */\n  allowEditing: boolean;\n\n  /**\n   * A value to display if the current value is empty or undefined.\n   */\n  i18nPlaceholder?: string;\n\n  /**\n   * `true` if the value should be rendered as a text area.\n   */\n  isTextArea: boolean;\n\n  /**\n   * The callback invoked when the confirm button is clicked.\n   */\n  onChange: (newValue: string) => Promise<boolean>;\n\n  /**\n   * The callback invoked when the proposed value changes.\n   */\n  onValidate?: (newValue: string) => Promise<true | string>;\n}\n\nexport const InlineTextEdit: React.FunctionComponent<IInlineTextEditProps> = ({\n  className,\n  value,\n  allowEditing,\n  i18nPlaceholder,\n  isTextArea,\n  onChange,\n  onValidate,\n  ...attrs\n}) => {\n  const [currentValue, setCurrentValue] = React.useState(value);\n  const [editing, setEditing] = React.useState(false);\n  const [saving, setSaving] = React.useState(false);\n  const [{ valid, errorMsg }, setValidity] = React.useState({\n    errorMsg: '',\n    valid: true,\n  });\n\n  const validate = async (valueToValidate: string) => {\n    if (onValidate) {\n      const result = await onValidate(valueToValidate);\n      if (result === true) {\n        setValidity({\n          errorMsg: '',\n          valid: true,\n        });\n      } else {\n        setValidity({\n          errorMsg: result,\n          valid: false,\n        });\n      }\n    } else {\n      setValidity({\n        errorMsg: '',\n        valid: true,\n      });\n    }\n  };\n\n  const handleConfirm = async () => {\n    if (valid) {\n      setSaving(true);\n      const success = await onChange(currentValue);\n      if (success) {\n        setEditing(false);\n      }\n      setSaving(false);\n    }\n  };\n\n  const handleChange = (e: any) => {\n    setCurrentValue(e.target.value);\n    validate(e.target.value);\n  };\n\n  const onEdit = () => {\n    setEditing(true);\n    validate(currentValue);\n  };\n\n  const onCancel = () => {\n    setEditing(false);\n    setCurrentValue(value);\n  };\n\n  const renderValue = (v: string) => (\n    <ReadWidget\n      className={className}\n      value={v || i18nPlaceholder || 'Value...'}\n      allowEditing={allowEditing}\n      onEdit={onEdit}\n    />\n  );\n\n  const renderEdit = (v: string) => (\n    <EditWidget\n      {...attrs}\n      valid={valid}\n      saving={saving}\n      value={v}\n      errorMsg={errorMsg}\n      asTextarea={isTextArea}\n      onChange={handleChange}\n      onConfirm={handleConfirm}\n      onCancel={onCancel}\n    />\n  );\n\n  const isEditing = () => editing;\n\n  return (\n    <InlineEdit\n      className={className}\n      value={currentValue}\n      isEditing={isEditing}\n      renderValue={renderValue}\n      renderEdit={renderEdit}\n    />\n  );\n};\n","import { Filter, FormControl, Sort, Toolbar } from 'patternfly-react';\nimport * as React from 'react';\nimport './ListViewToolbar.css';\n\nexport interface IFilterValue {\n  id: string;\n  title: string;\n}\n\nexport interface IFilterType {\n  id: string;\n  filterType: 'select' | 'text' | 'number';\n  filterValues?: IFilterValue[];\n  placeholder: string;\n  title: string;\n}\n\nexport interface ISortType {\n  id: string;\n  isNumeric: boolean;\n  title: string;\n}\n\nexport interface IActiveFilter {\n  title: string;\n  value: string;\n}\n\nexport interface IListViewToolbarProps {\n  activeFilters: IActiveFilter[];\n  filterTypes: IFilterType[];\n  currentFilterType: IFilterType;\n  currentSortType: string;\n  currentValue: any;\n  isSortAscending: boolean;\n  resultsCount: number;\n  sortTypes: ISortType[];\n  i18nResultsCount: string;\n\n  onUpdateCurrentValue(event: Event): void;\n\n  onValueKeyPress(keyEvent: KeyboardEvent): void;\n\n  onFilterAdded(title: string, value: string): void;\n\n  onSelectFilterType(filterType: IFilterType): void;\n\n  onFilterValueSelected(filterValue: { id: string; title: string }): void;\n\n  onRemoveFilter(filter: IActiveFilter): void;\n\n  onClearFilters(event: React.MouseEvent<HTMLAnchorElement>): void;\n\n  onToggleCurrentSortDirection(): void;\n\n  onUpdateCurrentSortType(sortType: string): void;\n}\n\nexport class ListViewToolbar extends React.Component<IListViewToolbarProps> {\n  public render() {\n    return (\n      <Toolbar>\n        <Filter>\n          <Filter.TypeSelector\n            filterTypes={this.props.filterTypes}\n            currentFilterType={this.props.currentFilterType.title}\n            onFilterTypeSelected={this.props.onSelectFilterType}\n          />\n          {this.renderInput()}\n        </Filter>\n        <Sort>\n          <Sort.TypeSelector\n            sortTypes={this.props.sortTypes}\n            currentSortType={this.props.currentSortType}\n            onSortTypeSelected={this.props.onUpdateCurrentSortType}\n          />\n          <Sort.DirectionSelector\n            isNumeric={false}\n            isAscending={this.props.isSortAscending}\n            onClick={this.props.onToggleCurrentSortDirection}\n          />\n        </Sort>\n        <Toolbar.RightContent>{this.props.children}</Toolbar.RightContent>\n        <Toolbar.Results>\n          <h5>{this.props.i18nResultsCount}</h5>\n          {this.props.activeFilters && this.props.activeFilters.length > 0 && (\n            <>\n              <Filter.ActiveLabel>Active Filters:</Filter.ActiveLabel>\n              <Filter.List>\n                {this.props.activeFilters.map((item: IActiveFilter, index) => (\n                  <Filter.Item\n                    key={index}\n                    onRemove={this.props.onRemoveFilter}\n                    filterData={item}\n                  >\n                    {item.title}={item.value}\n                  </Filter.Item>\n                ))}\n              </Filter.List>\n              <a onClick={this.props.onClearFilters}>Clear All Filters</a>\n            </>\n          )}\n        </Toolbar.Results>\n      </Toolbar>\n    );\n  }\n\n  public renderInput = () => {\n    const { currentFilterType, currentValue } = this.props;\n    if (!currentFilterType) {\n      return null;\n    }\n    if (currentFilterType.filterType === 'select') {\n      return (\n        <Filter.ValueSelector\n          filterValues={currentFilterType.filterValues}\n          currentValue={currentValue}\n          onFilterValueSelected={this.props.onFilterValueSelected}\n        />\n      );\n    } else {\n      return (\n        <FormControl\n          type={currentFilterType.filterType}\n          value={currentValue}\n          placeholder={currentFilterType.placeholder}\n          onChange={this.props.onUpdateCurrentValue}\n          onKeyPress={this.props.onValueKeyPress}\n        />\n      );\n    }\n  };\n}\n","import { Col, Row, Switch } from 'patternfly-react';\nimport * as React from 'react';\nimport {\n  AutoSizer,\n  CellMeasurer,\n  CellMeasurerCache,\n  List,\n  ListRowRenderer,\n} from 'react-virtualized';\nimport './LogViewer.css';\n\nexport interface ILogViewerProps {\n  data: string[];\n  height?: number;\n  width?: null;\n}\n\nexport interface ILogViewerState {\n  count: number;\n  followScroll: boolean;\n  previousCount: number;\n}\n\nexport class LogViewer extends React.Component<\n  ILogViewerProps,\n  ILogViewerState\n> {\n  public static defaultProps = {\n    height: 300,\n  };\n\n  public static getDerivedStateFromProps(\n    { data }: ILogViewerProps,\n    state: ILogViewerState\n  ) {\n    return {\n      ...state,\n      count: data.length,\n      previousCount: state.followScroll ? state.count : state.previousCount,\n    };\n  }\n\n  public state = {\n    count: 0,\n    followScroll: true,\n    previousCount: 0,\n  };\n\n  public cellMeasurerCache: CellMeasurerCache;\n\n  public constructor(props: ILogViewerProps) {\n    super(props);\n    this.cellMeasurerCache = new CellMeasurerCache({\n      fixedWidth: true,\n      minHeight: 20,\n    });\n  }\n\n  public render() {\n    return (\n      <React.Fragment>\n        <Row className={'LogViewer'}>\n          <Col sm={12}>\n            <AutoSizer\n              disableHeight={!!this.props.height}\n              disableWidth={!!this.props.width}\n            >\n              {({ width, height }) => (\n                <List\n                  deferredMeasurementCache={this.cellMeasurerCache}\n                  height={this.props.height || height}\n                  rowCount={this.props.data.length}\n                  rowHeight={this.cellMeasurerCache.rowHeight}\n                  rowRenderer={this.renderRow}\n                  scrollToLine={this.state.count}\n                  scrollToIndex={\n                    this.state.followScroll ? this.state.count - 1 : -1\n                  }\n                  width={this.props.width || width}\n                />\n              )}\n            </AutoSizer>\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={12}>\n            <Switch\n              id={'toggle-follow'}\n              labelText={'Follow logs'}\n              onChange={this.toggleFollow}\n              value={this.state.followScroll}\n            />\n          </Col>\n        </Row>\n      </React.Fragment>\n    );\n  }\n\n  public renderRow: ListRowRenderer = ({ index, style, parent }) => (\n    <CellMeasurer\n      cache={this.cellMeasurerCache}\n      columnIndex={0}\n      key={index}\n      rowIndex={index}\n      parent={parent}\n    >\n      <div className={'LogViewerRow'} style={style}>\n        <span className=\"LogViewerRow_number\">{index + 1}</span>\n        <span className=\"LogViewerRow_content\">{this.props.data[index]}</span>\n      </div>\n    </CellMeasurer>\n  );\n\n  public toggleFollow = () => {\n    this.setState({\n      followScroll: !this.state.followScroll,\n    });\n  };\n}\n","import {\n  TimedToastNotification,\n  ToastNotificationList,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { Container } from '../Layout/Container';\n\nexport type INotificationType = 'success' | 'info' | 'warning' | 'error';\n\nexport interface INotification {\n  key: string;\n  message: string;\n  type: INotificationType;\n}\n\nexport interface INotificationsProps {\n  notifications: INotification[];\n  notificationTimerDelay: number;\n  removeNotificationAction(notification: INotification): void;\n}\n\nexport class Notifications extends React.Component<INotificationsProps> {\n  public render() {\n    return (\n      <ToastNotificationList className=\"app__notificationList\">\n        {this.props.notifications.map(notification => (\n          <TimedToastNotification\n            key={notification.key}\n            type={notification.type}\n            persistent={false}\n            onDismiss={this.props.removeNotificationAction.bind(\n              this,\n              notification\n            )}\n            timerdelay={this.props.notificationTimerDelay}\n          >\n            <Container\n              dangerouslySetInnerHTML={{\n                __html: notification.message,\n              }}\n            />\n          </TimedToastNotification>\n        ))}\n      </ToastNotificationList>\n    );\n  }\n}\n","import { Text, Title, TitleLevel } from '@patternfly/react-core';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { Container } from '../Layout';\n\nexport interface ISimplePageHeaderProps {\n  i18nTitle: string;\n  i18nDescription: string;\n  className?: string;\n}\n\nexport const SimplePageHeader: React.FunctionComponent<\n  ISimplePageHeaderProps\n> = ({\n  i18nTitle,\n  i18nDescription,\n  className,\n  ...rest\n}: ISimplePageHeaderProps) => {\n  return (\n    <Container className={classnames('', className)} {...rest}>\n      <Title size=\"3xl\" headingLevel={TitleLevel.h2}>\n        {i18nTitle}\n      </Title>\n      <Text>{i18nDescription}</Text>\n    </Container>\n  );\n};\n","import { Icon, ProgressBar } from 'patternfly-react';\nimport * as React from 'react';\n\nimport './ProgressWithLink.css';\n\nexport interface IProgressWithLinkProps {\n  value: string;\n  currentStep: number;\n  totalSteps: number;\n  logUrl?: string;\n  i18nLogUrlText: string;\n}\n\nexport class ProgressWithLink extends React.PureComponent<\n  IProgressWithLinkProps\n> {\n  public render() {\n    return (\n      <div className=\"progress-link\">\n        <div>\n          <i data-testid=\"progress-link-value\">\n            {this.props.value} ( {this.props.currentStep} /{' '}\n            {this.props.totalSteps} )\n          </i>\n          {this.props.logUrl && (\n            <span data-testid=\"progress-log-link\" className=\"pull-right\">\n              <a target=\"_blank\" href={this.props.logUrl}>\n                {this.props.i18nLogUrlText} <Icon name={'external-link'} />\n              </a>\n            </span>\n          )}\n        </div>\n        <ProgressBar\n          now={this.props.currentStep}\n          max={this.props.totalSteps}\n          style={{\n            height: 6,\n          }}\n        />\n      </div>\n    );\n  }\n}\n","import { DropdownItem } from '@patternfly/react-core';\nimport * as React from 'react';\n\nexport interface IPfDropdownItem {\n  children: any;\n}\nclass PfDropdownItem extends React.Component<IPfDropdownItem> {\n  public render() {\n    return <DropdownItem>{this.props.children}</DropdownItem>;\n  }\n}\n\nexport { PfDropdownItem };\n","import { Text, Title } from '@patternfly/react-core';\nimport * as H from 'history';\nimport { Card, DropdownKebab } from 'patternfly-react';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n} from '../Shared';\n\nimport './ConnectionCard.css';\n\nexport interface IConnectionCardMenuProps {\n  editHref: H.LocationDescriptor;\n  i18nCancelLabel: string;\n  i18nDeleteLabel: string;\n  i18nDeleteModalMessage: string;\n  i18nDeleteModalTitle: string;\n  i18nEditLabel: string;\n  i18nMenuTitle: string;\n  i18nViewLabel: string;\n  isDeleteEnabled: boolean;\n  onDelete(): void;\n}\n\nexport interface IConnectionProps {\n  description: string;\n  menuProps?: IConnectionCardMenuProps;\n  name: string;\n  href: H.LocationDescriptor;\n  icon: string;\n}\n\nexport interface IConnectionCardState {\n  showDeleteDialog: boolean;\n}\n\nexport class ConnectionCard extends React.PureComponent<\n  IConnectionProps,\n  IConnectionCardState\n> {\n  public constructor(props: IConnectionProps) {\n    super(props);\n\n    this.state = {\n      showDeleteDialog: false, // initial visibility of delete dialog\n    };\n\n    if (this.props.menuProps) {\n      this.doCancel = this.doCancel.bind(this);\n      this.doDelete = this.doDelete.bind(this);\n      this.showDeleteDialog = this.showDeleteDialog.bind(this);\n    }\n  }\n\n  public doCancel() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n  }\n\n  public doDelete() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n\n    if (this.props.menuProps) {\n      this.props.menuProps.onDelete();\n    }\n  }\n\n  public showDeleteDialog() {\n    this.setState({\n      showDeleteDialog: true,\n    });\n  }\n\n  public render() {\n    return (\n      <>\n        {this.props.menuProps && (\n          <ConfirmationDialog\n            buttonStyle={ConfirmationButtonStyle.DANGER}\n            i18nCancelButtonText={this.props.menuProps.i18nCancelLabel}\n            i18nConfirmButtonText={this.props.menuProps.i18nDeleteLabel}\n            i18nConfirmationMessage={\n              this.props.menuProps.i18nDeleteModalMessage\n            }\n            i18nTitle={this.props.menuProps.i18nDeleteModalTitle}\n            icon={ConfirmationIconType.DANGER}\n            showDialog={this.state.showDeleteDialog}\n            onCancel={this.doCancel}\n            onConfirm={this.doDelete}\n          />\n        )}\n        <Card matchHeight={true}>\n          {this.props.menuProps && (\n            <div className=\"pull-right\">\n              <DropdownKebab\n                id={`connection-${this.props.name}-menu`}\n                pullRight={true}\n                title={this.props.menuProps.i18nMenuTitle}\n              >\n                <li role={'presentation'} key={0}>\n                  <Link to={this.props.href} role={'menuitem'} tabIndex={1}>\n                    {this.props.menuProps.i18nViewLabel}\n                  </Link>\n                </li>\n                <li role={'presentation'} key={1}>\n                  <Link\n                    to={this.props.menuProps.editHref}\n                    role={'menuitem'}\n                    tabIndex={2}\n                  >\n                    {this.props.menuProps.i18nEditLabel}\n                  </Link>\n                </li>\n                <li\n                  className={\n                    !this.props.menuProps.isDeleteEnabled ? 'disabled' : ''\n                  }\n                  role={'presentation'}\n                  key={2}\n                >\n                  <a\n                    href={'javascript:void(0)'}\n                    onClick={this.showDeleteDialog}\n                    role={'menuitem'}\n                    tabIndex={3}\n                  >\n                    {this.props.menuProps.i18nDeleteLabel}\n                  </a>\n                </li>\n              </DropdownKebab>\n            </div>\n          )}\n          <Link to={this.props.href} className={'connection-card'}>\n            <Card.Body>\n              <div className={'connection-card__content'}>\n                <div className=\"connection-card__icon\">\n                  <img src={this.props.icon} alt={this.props.name} width={46} />\n                </div>\n                <Title\n                  size=\"lg\"\n                  className=\"connection-card__title h2\"\n                  data-testid=\"connection-card-title\"\n                >\n                  {this.props.name}\n                </Title>\n                <Text className=\"connection-card__description\">\n                  {this.props.description}\n                </Text>\n              </div>\n            </Card.Body>\n          </Link>\n        </Card>\n      </>\n    );\n  }\n}\n","import { Alert, Button, Row } from 'patternfly-react';\nimport * as React from 'react';\nimport { Container, Loader } from '../Layout';\nimport './ConnectionDetailsForm.css';\n\nexport interface IConnectionDetailsValidationResult {\n  message: string;\n  type: 'error' | 'success';\n}\n\nexport interface IConnectionDetailsFormProps {\n  /**\n   * The localized text for the cancel button.\n   */\n  i18nCancelLabel: string;\n\n  /**\n   * The localized text for the edit button.\n   */\n  i18nEditLabel: string;\n\n  /**\n   * The localized text for the save button.\n   */\n  i18nSaveLabel: string;\n\n  /**\n   * The localized text of the form title.\n   */\n  i18nTitle: string;\n\n  /**\n   * The localized text for the validate button.\n   */\n  i18nValidateLabel: string;\n\n  /**\n   * `true` if all form fields have valid values.\n   */\n  isValid: boolean;\n\n  /**\n   * `true` if the parent is doing some work and this form should disable user input.\n   */\n  isWorking: boolean;\n\n  /**\n   * Form level validationResults\n   */\n  validationResults: IConnectionDetailsValidationResult[];\n\n  /**\n   * The callback fired when submitting the form.\n   * @param e\n   */\n  handleSubmit: (e?: any) => void;\n\n  /**\n   * The callback for when the validate button is clicked.\n   */\n  onValidate: () => void;\n\n  /**\n   * `true` when the connection details are being edited.\n   */\n  isEditing: boolean;\n\n  /**\n   * The callback for editing has been canceled.\n   */\n  onCancelEditing: () => void;\n\n  /**\n   * The callback for start editing.\n   */\n  onStartEditing: () => void;\n}\n\nexport class ConnectionDetailsForm extends React.Component<\n  IConnectionDetailsFormProps\n> {\n  public static defaultProps = {\n    validationResults: [],\n  };\n\n  public render() {\n    return (\n      <Container>\n        <form\n          className=\"form-horizontal required-pf\"\n          role=\"form\"\n          onSubmit={this.props.handleSubmit}\n        >\n          <div className=\"row row-cards-pf\">\n            <div className=\"card-pf\">\n              {this.props.validationResults.map((e, idx) => (\n                <Alert key={idx} type={e.type}>\n                  {e.message}\n                </Alert>\n              ))}\n              <div className=\"card-pf-title\">{this.props.i18nTitle}</div>\n              <div className=\"card-pf-body connection-details-form__formFields\">\n                <Container>{this.props.children}</Container>\n                {this.props.isEditing ? (\n                  <Container>\n                    <Row>\n                      <Button\n                        bsStyle=\"default\"\n                        className=\"connection-details-form__editButton\"\n                        disabled={this.props.isWorking || !this.props.isValid}\n                        onClick={this.props.onValidate}\n                      >\n                        {this.props.isWorking ? (\n                          <Loader size={'sm'} inline={true} />\n                        ) : null}\n                        {this.props.i18nValidateLabel}\n                      </Button>\n                    </Row>\n                    <Row>\n                      <Button\n                        bsStyle=\"default\"\n                        className=\"connection-details-form__editButton\"\n                        disabled={this.props.isWorking}\n                        onClick={this.props.onCancelEditing}\n                      >\n                        {this.props.i18nCancelLabel}\n                      </Button>\n                      <Button\n                        bsStyle=\"primary\"\n                        className=\"connection-details-form__editButton\"\n                        disabled={this.props.isWorking || !this.props.isValid}\n                        onClick={this.props.handleSubmit}\n                      >\n                        {this.props.i18nSaveLabel}\n                      </Button>\n                    </Row>\n                  </Container>\n                ) : (\n                  <Button bsStyle=\"primary\" onClick={this.props.onStartEditing}>\n                    {this.props.i18nEditLabel}\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        </form>\n      </Container>\n    );\n  }\n}\n","import { Grid } from 'patternfly-react';\nimport * as React from 'react';\nimport { Container } from '../Layout';\nimport { InlineTextEdit } from '../Shared';\nimport './ConnectionDetailsHeader.css';\n\nexport interface IConnectionDetailsHeaderProps {\n  /**\n   * `true` if the name and description can be edited.\n   */\n  allowEditing: boolean;\n\n  /**\n   * The optional connection description.\n   */\n  connectionDescription?: string;\n\n  /**\n   * The optional connection icon.\n   */\n  connectionIcon?: string;\n\n  /**\n   * The name of the connection.\n   */\n  connectionName: string;\n\n  /**\n   * The localized text of the description label.\n   */\n  i18nDescriptionLabel: string;\n\n  /**\n   * The localized placeholder text of the connection description.\n   */\n  i18nDescriptionPlaceholder: string;\n\n  /**\n   * The localized placeholder text of the connection name.\n   */\n  i18nNamePlaceholder: string;\n\n  /**\n   * The localized text of the usage label.\n   */\n  i18nUsageLabel: string;\n\n  /**\n   * The localized message that provides the number of integrations that are using this connection.\n   */\n  i18nUsageMessage: string;\n\n  /**\n   * `true` when the name or description is being saved.\n   */\n  isWorking: boolean;\n\n  /**\n   * The callback for when the connection description should be saved.\n   * @param newDescription - the new description being saved\n   * @returns `true` if save was successful\n   */\n  onChangeDescription: (newDescription: string) => Promise<boolean>;\n\n  /**\n   * The callback for when the connection name should be saved.\n   * @param newName - the new name being saved\n   * @returns `true` if save was successful\n   */\n  onChangeName: (newName: string) => Promise<boolean>;\n}\n\n/**\n * Line 1: icon, name, edit icon (makes name editable when clicked)\n * Line 2: description label and value\n * Line 3: usage label and value\n */\nexport class ConnectionDetailsHeader extends React.Component<\n  IConnectionDetailsHeaderProps\n> {\n  public render() {\n    return (\n      <Grid fluid={true}>\n        <Grid.Row className={'connection-details-header__row'}>\n          {this.props.connectionIcon ? (\n            <Grid.Col xs={1}>\n              <Container className=\"blank-slate-pf-icon\">\n                <img\n                  className=\"connection-details-header__connectionIcon\"\n                  src={this.props.connectionIcon}\n                  alt={this.props.connectionName}\n                  width={46}\n                />\n              </Container>\n            </Grid.Col>\n          ) : null}\n          <Grid.Col xs={11}>\n            <InlineTextEdit\n              className=\"connection-details-header__connectionName\"\n              value={this.props.connectionName}\n              allowEditing={this.props.allowEditing && !this.props.isWorking}\n              placeholder={this.props.i18nNamePlaceholder}\n              isTextArea={false}\n              onChange={this.props.onChangeName}\n            />\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row className={'connection-details-header__row'}>\n          <Grid.Col xs={2} className=\"connection-details-header__propertyLabel\">\n            {this.props.i18nDescriptionLabel}\n          </Grid.Col>\n          <Grid.Col xs={10}>\n            <InlineTextEdit\n              value={this.props.connectionDescription || ''}\n              allowEditing={this.props.allowEditing && !this.props.isWorking}\n              i18nPlaceholder={this.props.i18nDescriptionPlaceholder}\n              isTextArea={true}\n              onChange={this.props.onChangeDescription}\n            />\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"connection-details-header__propertyLabel\">\n            {this.props.i18nUsageLabel}\n          </Grid.Col>\n          <Grid.Col\n            xs={10}\n            className=\"connection-details-header__propertyValue\"\n          >\n            {this.props.i18nUsageMessage}\n          </Grid.Col>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n","import { CardGrid } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class ConnectionsGrid extends React.Component {\n  public render() {\n    return (\n      <CardGrid fluid={true} matchHeight={true}>\n        <CardGrid.Row>{this.props.children}</CardGrid.Row>\n      </CardGrid>\n    );\n  }\n}\n","import { CardGrid } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class ConnectionsGridCell extends React.Component {\n  public render() {\n    return (\n      <CardGrid.Col xs={6} md={3}>\n        {this.props.children}\n      </CardGrid.Col>\n    );\n  }\n}\n","import * as H from 'history';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../Shared';\n\nexport interface IConnectionsListViewProps extends IListViewToolbarProps {\n  linkToConnectionCreate: H.LocationDescriptor;\n  i18nLinkCreateConnection: H.LocationDescriptor;\n}\n\nexport class ConnectionsListView extends React.Component<\n  IConnectionsListViewProps\n> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <ButtonLink href={this.props.linkToConnectionCreate} as={'primary'}>\n              {this.props.i18nLinkCreateConnection}\n            </ButtonLink>\n          </div>\n        </ListViewToolbar>\n        <Container>{this.props.children}</Container>\n      </>\n    );\n  }\n}\n","import { Alert } from 'patternfly-react';\nimport * as React from 'react';\nimport { Container } from '../Layout';\n\nexport interface IConnectorConfigurationFormValidationResult {\n  message: string;\n  type: 'error' | 'success';\n}\n\nexport interface IConnectorConfigurationFormProps {\n  /**\n   * The internationalized form title.\n   */\n  i18nFormTitle?: string;\n  /**\n   * Form level validationResults\n   */\n  validationResults?: IConnectorConfigurationFormValidationResult[];\n  /**\n   * The callback fired when submitting the form.\n   * @param e\n   */\n  handleSubmit: (e?: any) => void;\n}\n\n/**\n * A component to render a save form, to be used in the integration\n * editor. This does *not* build the form itself, form's field should be passed\n * as the `children` value.\n * @see [i18nTitle]{@link IConnectorConfigurationFormProps#i18nTitle}\n * @see [i18nSubtitle]{@link IConnectorConfigurationFormProps#i18nSubtitle}\n */\nexport class ConnectorConfigurationForm extends React.Component<\n  IConnectorConfigurationFormProps\n> {\n  public static defaultProps = {\n    validationResults: [],\n  };\n\n  public render() {\n    return (\n      <Container>\n        <form\n          className=\"form-horizontal required-pf\"\n          role=\"form\"\n          onSubmit={this.props.handleSubmit}\n        >\n          <div className=\"row row-cards-pf\">\n            <div className=\"card-pf\">\n              {this.props.i18nFormTitle && (\n                <div className=\"card-pf-title\">{this.props.i18nFormTitle}</div>\n              )}\n              <div className=\"card-pf-body\">\n                {this.props.validationResults!.map((e, idx) => (\n                  <Alert key={idx} type={e.type}>\n                    {e.message}\n                  </Alert>\n                ))}\n                <Container>{this.props.children}</Container>\n              </div>\n            </div>\n          </div>\n        </form>\n      </Container>\n    );\n  }\n}\n","export interface ICiCdListPageItem {\n  name: string;\n  i18nUsesText: string;\n}\n\nexport interface ITagIntegrationEntry {\n  name: string;\n  selected: boolean;\n}\n\nexport enum TagNameValidationError {\n  NoErrors = 'NoErrors',\n  NoName = 'NoName',\n  NameInUse = 'NameInUse',\n}\n","import { Text } from '@patternfly/react-core';\nimport { Card, CardBody } from 'patternfly-react';\nimport * as React from 'react';\nimport './ApiConnectorDetailCard.css';\n\nexport interface IApiConnectorDetailCardProps {\n  description?: string;\n  icon?: string;\n  name: string;\n}\n\nexport class ApiConnectorDetailCard extends React.Component<\n  IApiConnectorDetailCardProps\n> {\n  public render() {\n    return (\n      <Card className=\"api-connector-card\">\n        <CardBody>\n          <div className={'api-connector-card__content'}>\n            <div>\n              <img\n                className=\"api-connector-card__icon\"\n                src={this.props.icon}\n                alt={this.props.name}\n              />\n            </div>\n            <div\n              className=\"api-connector__title h2\"\n              data-testid=\"api-connector-card-title\"\n            >\n              {this.props.name}\n            </div>\n            <Text className=\"api-connector-card__description\">\n              {this.props.description}\n            </Text>\n          </div>\n        </CardBody>\n      </Card>\n    );\n  }\n}\n","import * as React from 'react';\n\nexport class ApiConnectorInfo extends React.Component {\n  public render() {\n    return <div>ApiConnectorInfo content goes here</div>;\n  }\n}\n","import * as React from 'react';\n\nexport class ApiConnectorReview extends React.Component {\n  public render() {\n    return <div>ApiConnectorReview content goes here</div>;\n  }\n}\n","import {\n  Card,\n  CardBody,\n  CardGrid,\n  CardHeading,\n  CardTitle,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ApiConnectorDetailCard } from './ApiConnectorDetailCard';\nimport { ApiConnectorInfo } from './ApiConnectorInfo';\nimport { ApiConnectorReview } from './ApiConnectorReview';\n\nexport interface IApiConnectorDetailProps {\n  description?: string;\n  icon?: string;\n  name: string;\n}\n\nexport class ApiConnectorDetail extends React.Component<\n  IApiConnectorDetailProps\n> {\n  public render() {\n    return (\n      <CardGrid fluid={true}>\n        <CardGrid.Row>\n          <CardGrid.Col xs={12} md={3}>\n            <ApiConnectorDetailCard\n              description={this.props.description}\n              icon={this.props.icon}\n              name={this.props.name}\n            />\n          </CardGrid.Col>\n          <CardGrid.Col xs={12} md={7}>\n            <Card>\n              <CardHeading>\n                <CardTitle>{this.props.name}</CardTitle>\n              </CardHeading>\n              <CardBody>\n                <ApiConnectorInfo />\n                <ApiConnectorReview />\n              </CardBody>\n            </Card>\n          </CardGrid.Col>\n        </CardGrid.Row>\n      </CardGrid>\n    );\n  }\n}\n","import {\n  Button,\n  ListViewInfoItem,\n  ListViewItem,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IApiConnectorListItemProps {\n  apiConnectorDescription?: string;\n  apiConnectorId: string;\n  apiConnectorName: string;\n  apiConnectorIcon?: string;\n  i18nDelete: string;\n  i18nDeleteTip?: string;\n  i18nDetails: string;\n  i18nDetailsTip?: string;\n  i18nUsedByMessage: string;\n  onDelete: (apiConnectorId: string) => void;\n  onDetails: (extensionId: string) => void;\n  usedBy: number;\n}\n\nexport class ApiConnectorListItem extends React.Component<\n  IApiConnectorListItemProps\n> {\n  public constructor(props: IApiConnectorListItemProps) {\n    super(props);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleDetails = this.handleDetails.bind(this);\n  }\n\n  public getDeleteTooltip() {\n    return (\n      <Tooltip id=\"deleteTip\">\n        {this.props.i18nDeleteTip\n          ? this.props.i18nDeleteTip\n          : this.props.i18nDelete}\n      </Tooltip>\n    );\n  }\n\n  public getDetailsTooltip() {\n    return (\n      <Tooltip id=\"detailsTip\">\n        {this.props.i18nDetailsTip\n          ? this.props.i18nDetailsTip\n          : this.props.i18nDetails}\n      </Tooltip>\n    );\n  }\n\n  public handleDelete() {\n    this.props.onDelete(this.props.apiConnectorId);\n  }\n\n  public handleDetails() {\n    this.props.onDetails(this.props.apiConnectorId);\n  }\n\n  public render() {\n    return (\n      <ListViewItem\n        actions={\n          <div className=\"form-group\">\n            <OverlayTrigger overlay={this.getDetailsTooltip()} placement=\"top\">\n              <Button bsStyle=\"default\" onClick={this.handleDetails}>\n                {this.props.i18nDetails}\n              </Button>\n            </OverlayTrigger>\n            <OverlayTrigger overlay={this.getDeleteTooltip()} placement=\"top\">\n              <Button\n                bsStyle=\"default\"\n                disabled={this.props.usedBy !== 0}\n                onClick={this.handleDelete}\n              >\n                {this.props.i18nDelete}\n              </Button>\n            </OverlayTrigger>\n          </div>\n        }\n        additionalInfo={[\n          <ListViewInfoItem key={1}>\n            {this.props.i18nUsedByMessage}\n          </ListViewInfoItem>,\n        ]}\n        description={\n          this.props.apiConnectorDescription\n            ? this.props.apiConnectorDescription\n            : ''\n        }\n        heading={this.props.apiConnectorName}\n        hideCloseIcon={true}\n        leftContent={\n          this.props.apiConnectorIcon ? (\n            <div className=\"blank-slate-pf-icon\">\n              <img\n                src={this.props.apiConnectorIcon}\n                alt={this.props.apiConnectorName}\n                width={46}\n              />\n            </div>\n          ) : null\n        }\n        stacked={true}\n      />\n    );\n  }\n}\n","import { Text, Title } from '@patternfly/react-core';\nimport {\n  EmptyState,\n  ListView,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../Shared';\n\nexport interface IApiConnectorListViewProps extends IListViewToolbarProps {\n  i18nDescription: string;\n  i18nEmptyStateInfo: string;\n  i18nEmptyStateTitle: string;\n  i18nLinkCreateApiConnector: string;\n  i18nLinkCreateApiConnectorTip?: string;\n  i18nName: string;\n  i18nTitle: string;\n  linkCreateApiConnector: string;\n}\n\nexport class ApiConnectorListView extends React.Component<\n  IApiConnectorListViewProps\n> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <OverlayTrigger\n              overlay={this.getCreateConnectorTooltip()}\n              placement=\"top\"\n            >\n              <ButtonLink\n                href={this.props.linkCreateApiConnector}\n                as={'primary'}\n              >\n                {this.props.i18nLinkCreateApiConnector}\n              </ButtonLink>\n            </OverlayTrigger>\n          </div>\n        </ListViewToolbar>\n        <Container>\n          {this.props.i18nTitle !== '' && (\n            <Title size=\"xl\">{this.props.i18nTitle}</Title>\n          )}\n          {this.props.i18nDescription !== '' && (\n            <Text\n              dangerouslySetInnerHTML={{ __html: this.props.i18nDescription }}\n            />\n          )}\n          {this.props.children ? (\n            <ListView>{this.props.children}</ListView>\n          ) : (\n            <EmptyState>\n              <EmptyState.Icon />\n              <EmptyState.Title>\n                {this.props.i18nEmptyStateTitle}\n              </EmptyState.Title>\n              <EmptyState.Info>{this.props.i18nEmptyStateInfo}</EmptyState.Info>\n              <EmptyState.Action>\n                <OverlayTrigger\n                  overlay={this.getCreateConnectorTooltip()}\n                  placement=\"top\"\n                >\n                  <ButtonLink\n                    href={this.props.linkCreateApiConnector}\n                    as={'primary'}\n                  >\n                    {this.props.i18nLinkCreateApiConnector}\n                  </ButtonLink>\n                </OverlayTrigger>\n              </EmptyState.Action>\n            </EmptyState>\n          )}\n        </Container>\n      </>\n    );\n  }\n\n  private getCreateConnectorTooltip() {\n    return (\n      <Tooltip id=\"createTip\">\n        {this.props.i18nLinkCreateApiConnectorTip\n          ? this.props.i18nLinkCreateApiConnectorTip\n          : this.props.i18nLinkCreateApiConnector}\n      </Tooltip>\n    );\n  }\n}\n","import { Title, TitleLevel } from '@patternfly/react-core';\nimport * as H from 'history';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeading,\n  CardTitle,\n  OverlayTrigger,\n  Row,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../Layout';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n} from '../Shared';\nimport './ExtensionDetail.css';\n\nexport interface IExtensionDetailProps {\n  /**\n   * The name of the extension.\n   */\n  extensionName: string;\n\n  /**\n   * The number of integrations that use this extension.\n   */\n  extensionUses: number;\n\n  /**\n   * The localized text of the cancel button used when deleting this extension.\n   */\n  i18nCancelText: string;\n\n  /**\n   * The localized text of the delete button.\n   */\n  i18nDelete: string;\n\n  /**\n   * The localized delete confirmation message.\n   */\n  i18nDeleteModalMessage: string;\n\n  /**\n   * The localized title of the delete dialog.\n   */\n  i18nDeleteModalTitle: string;\n\n  /**\n   * The localized tooltip of the delete button.\n   */\n  i18nDeleteTip?: string;\n\n  /**\n   * The localized message that displays the extension ID.\n   */\n  i18nIdMessage: string;\n\n  /**\n   * The localized text for the overview section title.\n   */\n  i18nOverviewSectionTitle: string;\n\n  /**\n   * The localized text of the supports section title.\n   */\n  i18nSupportsSectionTitle: string;\n\n  /**\n   * The localized text of the update button.\n   */\n  i18nUpdate: string;\n\n  /**\n   * The localized tooltip of the update button.\n   */\n  i18nUpdateTip?: string;\n\n  /**\n   * The localized text of the usage section title.\n   */\n  i18nUsageSectionTitle: string;\n\n  /**\n   * The JSX element that displayes the integrations used by this extension.\n   */\n  integrationsSection: JSX.Element;\n\n  /**\n   * An href to use when the extension is being updated.\n   */\n  linkUpdateExtension: H.LocationDescriptor;\n\n  /**\n   * The callback for when the delete button is clicked.\n   */\n  onDelete: () => void;\n\n  /**\n   * The JSX element that displays the overview section.\n   */\n  overviewSection: JSX.Element;\n\n  /**\n   * The JSX element that displays the supports section.\n   */\n  supportsSection: JSX.Element;\n}\n\nexport interface IExtensionDetailState {\n  showDeleteDialog: boolean;\n}\n\nexport class ExtensionDetail extends React.Component<\n  IExtensionDetailProps,\n  IExtensionDetailState\n> {\n  public constructor(props: IExtensionDetailProps) {\n    super(props);\n\n    this.state = {\n      showDeleteDialog: false, // initial visibility of delete dialog\n    };\n\n    this.doCancel = this.doCancel.bind(this);\n    this.doDelete = this.doDelete.bind(this);\n    this.showDeleteDialog = this.showDeleteDialog.bind(this);\n  }\n\n  public doCancel() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n  }\n\n  public doDelete() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n\n    // TODO: disable components while delete is processing\n    this.props.onDelete();\n  }\n\n  public getDeleteTooltip() {\n    return (\n      <Tooltip id=\"deleteTip\">\n        {this.props.i18nDeleteTip\n          ? this.props.i18nDeleteTip\n          : this.props.i18nDelete}\n      </Tooltip>\n    );\n  }\n\n  public getUpdateTooltip() {\n    return (\n      <Tooltip id=\"updateTip\">\n        {this.props.i18nUpdateTip\n          ? this.props.i18nUpdateTip\n          : this.props.i18nUpdate}\n      </Tooltip>\n    );\n  }\n\n  public showDeleteDialog() {\n    this.setState({\n      showDeleteDialog: true,\n    });\n  }\n\n  public render() {\n    return (\n      <>\n        <ConfirmationDialog\n          buttonStyle={ConfirmationButtonStyle.DANGER}\n          i18nCancelButtonText={this.props.i18nCancelText}\n          i18nConfirmButtonText={this.props.i18nDelete}\n          i18nConfirmationMessage={this.props.i18nDeleteModalMessage}\n          i18nTitle={this.props.i18nDeleteModalTitle}\n          icon={ConfirmationIconType.DANGER}\n          showDialog={this.state.showDeleteDialog}\n          onCancel={this.doCancel}\n          onConfirm={this.doDelete}\n        />\n        <Card matchHeight={true}>\n          <CardHeading>\n            <CardTitle>\n              <Row>\n                <Title\n                  size=\"xl\"\n                  className={'col-sm-8 extension-detail__extensionTitle'}\n                >\n                  {this.props.extensionName}\n                  <span className={'extension-detail__extensionId'}>\n                    {this.props.i18nIdMessage}\n                  </span>\n                </Title>\n                <div className=\"col-sm-4 text-right extension-detail__titleButtons\">\n                  <OverlayTrigger\n                    overlay={this.getUpdateTooltip()}\n                    placement=\"top\"\n                  >\n                    <ButtonLink\n                      href={this.props.linkUpdateExtension}\n                      as={'primary'}\n                    >\n                      {this.props.i18nUpdate}\n                    </ButtonLink>\n                  </OverlayTrigger>\n                  <OverlayTrigger\n                    overlay={this.getDeleteTooltip()}\n                    placement=\"top\"\n                  >\n                    <Button\n                      bsStyle=\"default\"\n                      disabled={this.props.extensionUses !== 0}\n                      onClick={this.showDeleteDialog}\n                    >\n                      {this.props.i18nDelete}\n                    </Button>\n                  </OverlayTrigger>\n                </div>\n              </Row>\n            </CardTitle>\n          </CardHeading>\n          <CardBody>\n            <Title\n              size=\"md\"\n              headingLevel={TitleLevel.h3}\n              className=\"extension-detail__sectionHeading\"\n            >\n              {this.props.i18nOverviewSectionTitle}\n            </Title>\n            {this.props.overviewSection}\n            <Title\n              size=\"md\"\n              headingLevel={TitleLevel.h3}\n              className=\"extension-detail__sectionHeading\"\n            >\n              {this.props.i18nSupportsSectionTitle}\n            </Title>\n            {this.props.supportsSection}\n            <Title\n              size=\"md\"\n              headingLevel={TitleLevel.h3}\n              className=\"extension-detail__sectionHeading\"\n            >\n              {this.props.i18nUsageSectionTitle}\n            </Title>\n            {this.props.integrationsSection}\n          </CardBody>\n        </Card>\n      </>\n    );\n  }\n}\n","import { Text } from '@patternfly/react-core';\nimport { Alert, Card } from 'patternfly-react';\nimport * as React from 'react';\nimport { DndFileChooser } from '../Shared/DndFileChooser';\n\nexport interface IExtensionImportCardProps {\n  /**\n   * `true` if the dropzone should be disabled.\n   */\n  dndDisabled: boolean;\n\n  /**\n   * A localized alert message when a jar file cannot be processed as an extension.\n   */\n  i18nAlertMessage?: string;\n\n  /**\n   * The localized text that appears below the selected file information at the bottom of the drop area. This\n   * message should identify the accepted file extension.\n   */\n  i18nDndHelpMessage: string;\n\n  /**\n   * The localized text (may include HTML tags) that appears above the selected file information at the\n   * top of the drop area. This message should describe how the DnD works.\n   */\n  i18nDndInstructions: string;\n\n  /**\n   * The localized text that appears when no file has been selected.\n   */\n  i18nDndNoFileSelectedMessage: string;\n\n  /**\n   * The localized text for the label that appears before the selected file information.\n   */\n  i18nDndSelectedFileLabel: string;\n\n  /**\n   * A general, localized message for when a file upload failed. This message will be shown\n   * along with an error icon and appears next to the selected file message. If this property\n   * is set then `i18nDndUploadSuccessMessage` should not be set.\n   */\n  i18nDndUploadFailedMessage?: string;\n\n  /**\n   * A general, localized message for when a file upload was successful. This message will be shown\n   * along with an OK icon and appear next to the selected file message. If this property\n   * is set then `i18nDndUploadFailedMessage` should not be set.\n   */\n  i18nDndUploadSuccessMessage?: string;\n\n  /**\n   * The localized instructions text that appears above the DnD component.\n   */\n  i18nImportInstructions: string;\n\n  /**\n   * The localized title text that appears above the DnD component.\n   */\n  i18nTitle: string;\n\n  /**\n   * Callback for when one or more file uploads have been accepted. Caller should handler processing of the files.\n   */\n  onDndUploadAccepted(files: File[]): void;\n\n  /**\n   * The localized text (may include HTML tags) that appears when the file upload fails.\n   */\n  onDndUploadRejected(fileName: string): string;\n}\n\nexport class ExtensionImportCard extends React.Component<\n  IExtensionImportCardProps\n> {\n  public render() {\n    return (\n      <Card>\n        <Card.Heading>\n          <Card.Title>{this.props.i18nTitle}</Card.Title>\n        </Card.Heading>\n        <Card.Body>\n          <Text>{this.props.i18nImportInstructions}</Text>\n          {this.props.i18nAlertMessage ? (\n            <Alert type={'error'}>\n              <span>{this.props.i18nAlertMessage}</span>\n            </Alert>\n          ) : null}\n          <DndFileChooser\n            disableDropzone={this.props.dndDisabled}\n            fileExtensions={'.jar'}\n            i18nHelpMessage={this.props.i18nDndHelpMessage}\n            i18nInstructions={this.props.i18nDndInstructions}\n            i18nNoFileSelectedMessage={this.props.i18nDndNoFileSelectedMessage}\n            i18nSelectedFileLabel={this.props.i18nDndSelectedFileLabel}\n            i18nUploadFailedMessage={this.props.i18nDndUploadFailedMessage}\n            i18nUploadSuccessMessage={this.props.i18nDndUploadSuccessMessage}\n            onUploadAccepted={this.props.onDndUploadAccepted}\n            onUploadRejected={this.props.onDndUploadRejected}\n          />\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n","import * as H from 'history';\nimport { Button, Grid } from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../Layout';\nimport './ExtensionImportReview.css';\n\nexport interface IImportAction {\n  description: string;\n  name: string;\n}\n\nexport interface IExtensionImportReviewProps {\n  /**\n   * The extension actions.\n   */\n  actions?: IImportAction[];\n\n  /**\n   * The href that will be navigated to when the cancel button is clicked.\n   */\n  cancelLink: H.LocationDescriptor;\n\n  /**\n   * The optional description of the extension.\n   */\n  extensionDescription?: string;\n\n  /**\n   * The ID of the extension.\n   */\n  extensionId: string;\n\n  /**\n   * The name of the extension.\n   */\n  extensionName: string;\n\n  /**\n   * The unique, not for user consumption, identifier.\n   */\n  extensionUid: string;\n\n  /**\n   * The localized label for the list of actions.\n   */\n  i18nActionsLabel: string;\n\n  /**\n   * The localized text for the cancel button.\n   */\n  i18nCancel: string;\n\n  /**\n   * The localized 'Description' label.\n   */\n  i18nDescriptionLabel: string;\n\n  /**\n   * The localized text identifying the extension type.\n   */\n  i18nExtensionTypeMessage: string;\n\n  /**\n   * The localized 'ID' label.\n   */\n  i18nIdLabel: string;\n\n  /**\n   * The localized text for the import button.\n   */\n  i18nImport: string;\n\n  /**\n   * The localized 'Name' label.\n   */\n  i18nNameLabel: string;\n\n  /**\n   * The localized title.\n   */\n  i18nTitle: string;\n\n  /**\n   * The localized 'Type' label.\n   */\n  i18nTypeLabel: string;\n\n  /**\n   * Obtains a localized message with the action name and description.\n   * @param name the action name\n   * @param description the action description\n   */\n  i18nActionText(name: string, description: string): string;\n\n  /**\n   * Callback for when the import button is clicked.\n   * @param extensionUid the UID of the extension being imported/installed\n   */\n  onImport(extensionUid: string): void;\n}\n\n/**\n * A component that displays the extension import review information.\n */\nexport class ExtensionImportReview extends React.Component<\n  IExtensionImportReviewProps\n> {\n  public constructor(props: IExtensionImportReviewProps) {\n    super(props);\n    this.handleImport = this.handleImport.bind(this);\n  }\n\n  public getActions(): JSX.Element {\n    if (!this.props.actions) {\n      return <Grid.Col />;\n    }\n\n    return (\n      <Container>\n        {this.props.actions\n          ? this.props.actions.map((action, index) =>\n              index === 0 ? (\n                <Grid.Col\n                  key={0}\n                  dangerouslySetInnerHTML={{\n                    __html: this.props.i18nActionText(\n                      action.name,\n                      action.description\n                    ),\n                  }}\n                />\n              ) : (\n                <Grid.Row key={index}>\n                  <Grid.Col key={0} xs={2} />\n                  <Grid.Col\n                    key={1}\n                    dangerouslySetInnerHTML={{\n                      __html: this.props.i18nActionText(\n                        action.name,\n                        action.description\n                      ),\n                    }}\n                  />\n                </Grid.Row>\n              )\n            )\n          : null}\n      </Container>\n    );\n  }\n\n  public handleImport() {\n    return this.props.onImport(this.props.extensionUid);\n  }\n\n  public render() {\n    return (\n      <Grid className=\"extension-import-review__container\">\n        <Grid.Row className=\"extension-import-review__title\">\n          {this.props.i18nTitle}\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-import-review__propertyLabel\">\n            {this.props.i18nIdLabel}\n          </Grid.Col>\n          <Grid.Col className=\"extension-import-review__propertyValue\">\n            {this.props.extensionId}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-import-review__propertyLabel\">\n            {this.props.i18nNameLabel}\n          </Grid.Col>\n          <Grid.Col className=\"extension-import-review__propertyValue\">\n            {this.props.extensionName}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-import-review__propertyLabel\">\n            {this.props.i18nDescriptionLabel}\n          </Grid.Col>\n          <Grid.Col className=\"extension-import-review__propertyValue\">\n            {this.props.extensionDescription\n              ? this.props.extensionDescription\n              : null}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-import-review__propertyLabel\">\n            {this.props.i18nTypeLabel}\n          </Grid.Col>\n          <Grid.Col className=\"extension-import-review__propertyValue\">\n            {this.props.i18nExtensionTypeMessage}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-import-review__propertyLabel\">\n            {this.props.i18nActionsLabel}\n          </Grid.Col>\n          {this.getActions()}\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xsOffset={2}>\n            <Grid.Row>\n              <Grid.Col>\n                <Container className=\"extension-import-review__buttonBar\">\n                  <Button bsStyle=\"primary\" onClick={this.handleImport}>\n                    {this.props.i18nImport}\n                  </Button>\n                  <ButtonLink\n                    className=\"extension-import-review__cancelButton\"\n                    href={this.props.cancelLink}\n                    as={'default'}\n                  >\n                    {this.props.i18nCancel}\n                  </ButtonLink>\n                </Container>\n              </Grid.Col>\n            </Grid.Row>\n          </Grid.Col>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n","import { Text } from '@patternfly/react-core';\nimport { Row, Table } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IExtensionIntegration {\n  id: string; // used to create link to integration details page\n  name: string;\n  description: string;\n}\n\nexport interface IExtensionIntegrationsTableProps {\n  i18nDescription: string;\n  i18nName: string;\n  i18nUsageMessage: string;\n  onSelectIntegration: (integrationId: string) => void;\n  data: IExtensionIntegration[];\n}\n\nexport class ExtensionIntegrationsTable extends React.Component<\n  IExtensionIntegrationsTableProps\n> {\n  public getColumns() {\n    const headerFormat = (value: string) => (\n      <Table.Heading>{value}</Table.Heading>\n    );\n\n    const clickableValueFormat = (\n      value: string,\n      { rowData }: { rowData: any }\n    ) => {\n      // rowData is an Integration type so 'name' property is what makes the integration unique\n      const onClick = () => this.onIntegrationSelected(rowData.id);\n      return (\n        <Table.Cell>\n          <a href=\"javascript:void(0)\" onClick={onClick}>\n            {value}\n          </a>\n        </Table.Cell>\n      );\n    };\n\n    // Creates 2 columns:\n    // 1. first column is integration name\n    // 2. second column is optional integration description.\n    return [\n      {\n        cell: {\n          formatters: [clickableValueFormat],\n        },\n        header: {\n          formatters: [headerFormat],\n          label: this.props.i18nName,\n        },\n        property: 'name', // must match the name of the IntegrationOverview.name property\n      },\n      {\n        cell: {\n          formatters: [(value: string) => <Table.Cell>{value}</Table.Cell>],\n        },\n        header: {\n          formatters: [headerFormat],\n          label: this.props.i18nDescription,\n        },\n        property: 'description', // must match the name of the IntegrationOverview.description property\n      },\n    ];\n  }\n\n  public onIntegrationSelected(integrationId: string) {\n    this.props.onSelectIntegration(integrationId);\n  }\n\n  public render() {\n    return (\n      <div className=\"extension-group\">\n        <Row>\n          <div className=\"col-xs-offset-1 col-xs-11\">\n            <Text>{this.props.i18nUsageMessage}</Text>\n            {this.props.data.length !== 0 ? (\n              <Table.PfProvider\n                striped={true}\n                bordered={true}\n                hover={true}\n                columns={this.getColumns()}\n              >\n                <Table.Header />\n                <Table.Body rows={this.props.data} rowKey=\"name\" />\n              </Table.PfProvider>\n            ) : null}\n          </div>\n        </Row>\n      </div>\n    );\n  }\n}\n","import * as H from 'history';\nimport {\n  Button,\n  ListViewInfoItem,\n  ListViewItem,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../Layout';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n} from '../Shared';\n\nexport interface IExtensionListItemProps {\n  detailsPageLink: H.LocationDescriptor;\n  extensionDescription?: string;\n  extensionIcon?: string;\n  extensionId: string;\n  extensionName: string;\n  i18nCancelText: string;\n  i18nDelete: string;\n  i18nDeleteModalMessage: string;\n  i18nDeleteModalTitle: string;\n  i18nDeleteTip?: string;\n  i18nDetails: string;\n  i18nDetailsTip?: string;\n  i18nExtensionType: string;\n  i18nUpdate: string;\n  i18nUpdateTip?: string;\n  i18nUsedByMessage: string;\n\n  /**\n   * An href to use when the extension is being updated.\n   */\n  linkUpdateExtension: H.LocationDescriptor;\n\n  onDelete: (extensionId: string) => void;\n  usedBy: number;\n}\n\nexport interface IExtensionListItemState {\n  showDeleteDialog: boolean;\n}\n\nexport class ExtensionListItem extends React.Component<\n  IExtensionListItemProps,\n  IExtensionListItemState\n> {\n  public constructor(props: IExtensionListItemProps) {\n    super(props);\n\n    this.state = {\n      showDeleteDialog: false, // initial visibility of delete dialog\n    };\n\n    this.doCancel = this.doCancel.bind(this);\n    this.doDelete = this.doDelete.bind(this);\n    this.showDeleteDialog = this.showDeleteDialog.bind(this);\n  }\n\n  public doCancel() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n  }\n\n  public doDelete() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n\n    // TODO: disable components while delete is processing\n    this.props.onDelete(this.props.extensionId);\n  }\n\n  public getDeleteTooltip() {\n    return (\n      <Tooltip id=\"deleteTip\">\n        {this.props.i18nDeleteTip\n          ? this.props.i18nDeleteTip\n          : this.props.i18nDelete}\n      </Tooltip>\n    );\n  }\n\n  public getDetailsTooltip() {\n    return (\n      <Tooltip id=\"detailsTip\">\n        {this.props.i18nDetailsTip\n          ? this.props.i18nDetailsTip\n          : this.props.i18nDetails}\n      </Tooltip>\n    );\n  }\n\n  public getUpdateTooltip() {\n    return (\n      <Tooltip id=\"updateTip\">\n        {this.props.i18nUpdateTip\n          ? this.props.i18nUpdateTip\n          : this.props.i18nUpdate}\n      </Tooltip>\n    );\n  }\n\n  public showDeleteDialog() {\n    this.setState({\n      showDeleteDialog: true,\n    });\n  }\n\n  public render() {\n    return (\n      <>\n        <ConfirmationDialog\n          // extensionId={this.props.extensionId}\n          buttonStyle={ConfirmationButtonStyle.DANGER}\n          i18nCancelButtonText={this.props.i18nCancelText}\n          i18nConfirmButtonText={this.props.i18nDelete}\n          i18nConfirmationMessage={this.props.i18nDeleteModalMessage}\n          i18nTitle={this.props.i18nDeleteModalTitle}\n          icon={ConfirmationIconType.DANGER}\n          showDialog={this.state.showDeleteDialog}\n          onCancel={this.doCancel}\n          onConfirm={this.doDelete}\n        />\n        <ListViewItem\n          actions={\n            <div className=\"form-group\">\n              <OverlayTrigger\n                overlay={this.getDetailsTooltip()}\n                placement=\"top\"\n              >\n                <ButtonLink href={this.props.detailsPageLink} as={'default'}>\n                  {this.props.i18nDetails}\n                </ButtonLink>\n              </OverlayTrigger>\n              <OverlayTrigger overlay={this.getUpdateTooltip()} placement=\"top\">\n                <ButtonLink\n                  href={this.props.linkUpdateExtension}\n                  as={'default'}\n                >\n                  {this.props.i18nUpdate}\n                </ButtonLink>\n              </OverlayTrigger>\n              <OverlayTrigger overlay={this.getDeleteTooltip()} placement=\"top\">\n                <Button\n                  bsStyle=\"default\"\n                  disabled={this.props.usedBy !== 0}\n                  onClick={this.showDeleteDialog}\n                >\n                  {this.props.i18nDelete}\n                </Button>\n              </OverlayTrigger>\n            </div>\n          }\n          additionalInfo={[\n            <ListViewInfoItem key={1}>\n              {this.props.i18nExtensionType}\n            </ListViewInfoItem>,\n            <ListViewInfoItem key={2}>\n              {this.props.i18nUsedByMessage}\n            </ListViewInfoItem>,\n          ]}\n          description={\n            this.props.extensionDescription\n              ? this.props.extensionDescription\n              : ''\n          }\n          heading={this.props.extensionName}\n          hideCloseIcon={true}\n          leftContent={\n            this.props.extensionIcon ? (\n              <div className=\"blank-slate-pf-icon\">\n                <img\n                  src={this.props.extensionIcon}\n                  alt={this.props.extensionName}\n                  width={46}\n                />\n              </div>\n            ) : null\n          }\n          stacked={true}\n        />\n      </>\n    );\n  }\n}\n","import { Text, Title } from '@patternfly/react-core';\nimport * as H from 'history';\nimport {\n  EmptyState,\n  ListView,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../Shared';\n\nexport interface IExtensionListViewProps extends IListViewToolbarProps {\n  i18nDescription: string;\n  i18nEmptyStateInfo: string;\n  i18nEmptyStateTitle: string;\n  i18nLinkImportExtension: H.LocationDescriptor;\n  i18nLinkImportExtensionTip?: H.LocationDescriptor;\n  i18nName: string;\n  i18nNameFilterPlaceholder: string;\n  i18nTitle: string;\n  linkImportExtension: H.LocationDescriptor;\n}\n\nexport class ExtensionListView extends React.Component<\n  IExtensionListViewProps\n> {\n  public getImportTooltip() {\n    return (\n      <Tooltip id=\"importTip\">\n        {this.props.i18nLinkImportExtensionTip\n          ? this.props.i18nLinkImportExtensionTip\n          : this.props.i18nLinkImportExtension}\n      </Tooltip>\n    );\n  }\n\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <OverlayTrigger overlay={this.getImportTooltip()} placement=\"top\">\n              <ButtonLink href={this.props.linkImportExtension} as={'primary'}>\n                {this.props.i18nLinkImportExtension}\n              </ButtonLink>\n            </OverlayTrigger>\n          </div>\n        </ListViewToolbar>\n        <Container>\n          {this.props.i18nTitle !== '' && (\n            <Title size=\"lg\">{this.props.i18nTitle}</Title>\n          )}\n          {this.props.i18nDescription !== '' && (\n            <Text\n              dangerouslySetInnerHTML={{ __html: this.props.i18nDescription }}\n            />\n          )}\n          {this.props.children ? (\n            <ListView>{this.props.children}</ListView>\n          ) : (\n            <EmptyState>\n              <EmptyState.Icon />\n              <EmptyState.Title>\n                {this.props.i18nEmptyStateTitle}\n              </EmptyState.Title>\n              <EmptyState.Info>{this.props.i18nEmptyStateInfo}</EmptyState.Info>\n              <EmptyState.Action>\n                <OverlayTrigger\n                  overlay={this.getImportTooltip()}\n                  placement=\"top\"\n                >\n                  <ButtonLink\n                    href={this.props.linkImportExtension}\n                    as={'primary'}\n                  >\n                    {this.props.i18nLinkImportExtension}\n                  </ButtonLink>\n                </OverlayTrigger>\n              </EmptyState.Action>\n            </EmptyState>\n          )}\n        </Container>\n      </>\n    );\n  }\n}\n","import { Grid } from 'patternfly-react';\nimport * as React from 'react';\nimport './ExtensionOverview.css';\n\nexport interface IExtensionOverviewProps {\n  /**\n   * The optional description of the extension.\n   */\n  extensionDescription?: string;\n\n  /**\n   * The name of the extension.\n   */\n  extensionName: string;\n\n  /**\n   * The localized 'Description' label.\n   */\n  i18nDescription: string;\n\n  /**\n   * The localized 'Last Update' label.\n   */\n  i18nLastUpdate: string;\n\n  /**\n   * The localized last update date.\n   */\n  i18nLastUpdateDate?: string;\n\n  /**\n   * The localized 'Name' label.\n   */\n  i18nName: string;\n\n  /**\n   * The localized 'Type' label.\n   */\n  i18nType: string;\n\n  /**\n   * The localized type message.\n   */\n  i18nTypeMessage: string;\n}\n\n/**\n * A component that displays the overview section of the extension details page.\n */\nexport class ExtensionOverview extends React.Component<\n  IExtensionOverviewProps\n> {\n  public render() {\n    return (\n      <Grid>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-overview__propertyLabel\">\n            {this.props.i18nName}\n          </Grid.Col>\n          <Grid.Col className=\"extension-overview__propertyValue\">\n            {this.props.extensionName}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-overview__propertyLabel\">\n            {this.props.i18nDescription}\n          </Grid.Col>\n          <Grid.Col className=\"extension-overview__propertyValue\">\n            {this.props.extensionDescription\n              ? this.props.extensionDescription\n              : null}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-overview__propertyLabel\">\n            {this.props.i18nType}\n          </Grid.Col>\n          <Grid.Col className=\"extension-overview__propertyValue\">\n            {this.props.i18nTypeMessage}\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={2} className=\"extension-overview__propertyLabel\">\n            {this.props.i18nLastUpdate}\n          </Grid.Col>\n          <Grid.Col className=\"extension-overview__propertyValue\">\n            {this.props.i18nLastUpdateDate\n              ? this.props.i18nLastUpdateDate\n              : null}\n          </Grid.Col>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n","import { Row } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IAction {\n  description: string;\n  name: string;\n}\n\nexport interface IExtensionSupportsProps {\n  extensionActions: IAction[];\n}\n\n/**\n * A component that displays the support section of the extension details page.\n */\nexport class ExtensionSupports extends React.Component<\n  IExtensionSupportsProps\n> {\n  public render() {\n    return (\n      <div className=\"extension-group\">\n        {this.props.extensionActions.length !== 0 ? (\n          <Row>\n            <div className=\"col-xs-offset-1 col-xs-11\">\n              {this.props.extensionActions.map(\n                (action: IAction, index: number) => (\n                  <div key={index}>\n                    <strong>{action.name}</strong> - {action.description}\n                  </div>\n                )\n              )}\n            </div>\n          </Row>\n        ) : null}\n      </div>\n    );\n  }\n}\n","import {\n  AggregateStatusCount,\n  AggregateStatusNotification,\n  AggregateStatusNotifications,\n  Card,\n  Icon,\n} from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IAggregatedMetricProps {\n  title: string;\n  ok: number;\n  error: number;\n}\n\nexport class AggregatedMetricCard extends React.PureComponent<\n  IAggregatedMetricProps\n> {\n  public render() {\n    return (\n      <Card accented={true} aggregated={true} matchHeight={true}>\n        <Card.Title>\n          <AggregateStatusCount>\n            <span data-testid=\"aggregate-title\">{this.props.title}</span>\n          </AggregateStatusCount>\n        </Card.Title>\n        <Card.Body>\n          <AggregateStatusNotifications>\n            <AggregateStatusNotification>\n              <Icon type=\"pf\" name=\"ok\" />\n              <span data-testid=\"aggregate-ok-count\">{this.props.ok}</span>{' '}\n            </AggregateStatusNotification>\n            <AggregateStatusNotification>\n              <Icon type=\"pf\" name=\"error-circle-o\" />\n              <span data-testid=\"aggregate-error-count\">\n                {this.props.error}\n              </span>\n            </AggregateStatusNotification>\n          </AggregateStatusNotifications>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n","import { Card } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IConnectionsMetricProps {\n  i18nTitle: string;\n}\n\nexport class ConnectionsMetric extends React.PureComponent<\n  IConnectionsMetricProps\n> {\n  public render() {\n    return (\n      <Card accented={true} aggregated={true} matchHeight={true}>\n        <Card.Title>{this.props.i18nTitle}</Card.Title>\n      </Card>\n    );\n  }\n}\n","import { Title } from '@patternfly/react-core';\nimport * as H from 'history';\nimport { CardGrid, Grid } from 'patternfly-react';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ButtonLink, Container } from '../Layout';\nimport './Dashboard.css';\n\nexport interface IIntegrationsPageProps {\n  linkToIntegrations: H.LocationDescriptor;\n  linkToIntegrationCreation: H.LocationDescriptor;\n  linkToConnections: H.LocationDescriptor;\n  linkToConnectionCreation: H.LocationDescriptor;\n  integrationsOverview: JSX.Element;\n  connectionsOverview: JSX.Element;\n  messagesOverview: JSX.Element;\n  uptimeOverview: JSX.Element;\n  topIntegrations: JSX.Element;\n  integrationBoard: JSX.Element;\n  integrationUpdates: JSX.Element;\n  connections: JSX.Element;\n  i18nConnections: string;\n  i18nLinkCreateConnection: string;\n  i18nLinkCreateIntegration: string;\n  i18nLinkToConnections: string;\n  i18nLinkToIntegrations: string;\n  i18nTitle: string;\n}\n\nexport class Dashboard extends React.PureComponent<IIntegrationsPageProps> {\n  public render() {\n    return (\n      <Container>\n        <Grid fluid={true}>\n          <Grid.Row>\n            <Grid.Col sm={12}>\n              <div className={'Dashboard-header'}>\n                <Title size=\"lg\" className={'Dashboard-header__title'}>\n                  {this.props.i18nTitle}\n                </Title>\n                <div className=\"Dashboard-header__actions\">\n                  <ButtonLink href={this.props.linkToIntegrations}>\n                    {this.props.i18nLinkToIntegrations}\n                  </ButtonLink>\n                  <ButtonLink\n                    href={this.props.linkToIntegrationCreation}\n                    as={'primary'}\n                  >\n                    {this.props.i18nLinkCreateIntegration}\n                  </ButtonLink>\n                </div>\n              </div>\n            </Grid.Col>\n          </Grid.Row>\n        </Grid>\n        <CardGrid fluid={true} matchHeight={true}>\n          <CardGrid.Row>\n            <CardGrid.Col sm={6} md={3}>\n              {this.props.integrationsOverview}\n            </CardGrid.Col>\n            <CardGrid.Col sm={6} md={3}>\n              {this.props.connectionsOverview}\n            </CardGrid.Col>\n            <CardGrid.Col sm={6} md={3}>\n              {this.props.messagesOverview}\n            </CardGrid.Col>\n            <CardGrid.Col sm={6} md={3}>\n              {this.props.uptimeOverview}\n            </CardGrid.Col>\n          </CardGrid.Row>\n        </CardGrid>\n        <Grid fluid={true}>\n          <Grid.Row>\n            <Grid.Col sm={12}>{this.props.topIntegrations}</Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col sm={12} md={6}>\n              {this.props.integrationBoard}\n            </Grid.Col>\n            <Grid.Col sm={12} md={6}>\n              {this.props.integrationUpdates}\n            </Grid.Col>\n          </Grid.Row>\n        </Grid>\n        <Grid fluid={true} style={{ marginTop: '20px' }}>\n          <Grid.Row>\n            <Grid.Col sm={12}>\n              <div className={'Dashboard-header'}>\n                <Title size=\"lg\" className={'Dashboard-header__title'}>\n                  {this.props.i18nConnections}\n                </Title>\n                <div className=\"Dashboard-header__actions\">\n                  <Link to={this.props.linkToConnections}>\n                    {this.props.i18nLinkToConnections}\n                  </Link>\n                  <ButtonLink\n                    href={this.props.linkToConnectionCreation}\n                    as={'primary'}\n                  >\n                    {this.props.i18nLinkCreateConnection}\n                  </ButtonLink>\n                </div>\n              </div>\n            </Grid.Col>\n          </Grid.Row>\n        </Grid>\n        <CardGrid fluid={true} matchHeight={true}>\n          <CardGrid.Row>{this.props.connections}</CardGrid.Row>\n        </CardGrid>\n      </Container>\n    );\n  }\n}\n","import { Card, DonutChart, patternfly } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationBoardProps {\n  pendingIntegrations: number;\n  runningIntegrations: number;\n  stoppedIntegrations: number;\n  i18nIntegrationStatePending: string;\n  i18nIntegrationStateRunning: string;\n  i18nIntegrationStateStopped: string;\n  i18nIntegrations: string;\n  i18nTitle: string;\n  i18nTotal: string;\n}\n\nexport class IntegrationBoard extends React.PureComponent<\n  IIntegrationBoardProps\n> {\n  public render() {\n    const data = {\n      colors: {\n        Pending: patternfly.pfPaletteColors.black200,\n        Published: patternfly.pfPaletteColors.blue400,\n        Stopped: patternfly.pfPaletteColors.black300,\n      },\n      columns: [\n        [\n          this.props.i18nIntegrationStateRunning,\n          this.props.runningIntegrations,\n        ],\n        [\n          this.props.i18nIntegrationStateStopped,\n          this.props.stoppedIntegrations,\n        ],\n        [\n          this.props.i18nIntegrationStatePending,\n          this.props.pendingIntegrations,\n        ],\n      ],\n      type: 'donut',\n    };\n\n    return (\n      <Card>\n        <Card.Heading>\n          <Card.Title>{this.props.i18nTitle}</Card.Title>\n        </Card.Heading>\n        <Card.Body>\n          <DonutChart\n            id=\"integration-board\"\n            size={{ height: 120 }}\n            data={data}\n            tooltip={{\n              contents: patternfly.pfDonutTooltipContents,\n              show: true,\n            }}\n            title={{\n              secondary: this.props.i18nIntegrations,\n              type: this.props.i18nTotal,\n            }}\n            legend={{ show: true, position: 'right' }}\n          />\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n","import { Card } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IRecentUpdatesProps {\n  i18nTitle: string;\n}\n\nexport class RecentUpdatesCard extends React.Component<IRecentUpdatesProps> {\n  public render() {\n    return (\n      <Card accented={false}>\n        <Card.Heading>\n          <Card.Title>{this.props.i18nTitle}</Card.Title>\n        </Card.Heading>\n        <Card.Body>{this.props.children}</Card.Body>\n      </Card>\n    );\n  }\n}\n","import { Button } from 'patternfly-react';\nimport * as React from 'react';\nimport { Dialog } from '../../Shared';\nimport { TagNameValidationError } from './CiCdUIModels';\n\nexport interface ICiCdEditDialogProps {\n  i18nTitle: string;\n  i18nDescription: string;\n  tagName: string;\n  i18nInputLabel: string;\n  i18nSaveButtonText: string;\n  i18nCancelButtonText: string;\n  i18nNoNameError: string;\n  i18nNameInUseError: string;\n  validationError: TagNameValidationError;\n  onHide: () => void;\n  onValidate: (name: string) => void;\n  onSave: (newName: string) => void;\n}\n\nexport interface ICiCdEditDialogState {\n  tagName: string;\n}\n\nexport class CiCdEditDialog extends React.Component<\n  ICiCdEditDialogProps,\n  ICiCdEditDialogState\n> {\n  constructor(props: ICiCdEditDialogProps) {\n    super(props);\n    this.state = {\n      tagName: this.props.tagName,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  public handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const name = event.target.value.trim();\n    this.setState({ tagName: name }, () => this.props.onValidate(name));\n  }\n  public handleClick() {\n    this.props.onSave(this.state.tagName);\n  }\n  public render() {\n    return (\n      <Dialog\n        body={\n          <form className=\"form-horizontal\">\n            <p>{this.props.i18nDescription}</p>\n            <div\n              className={\n                this.props.validationError === TagNameValidationError.NoErrors\n                  ? 'form-group'\n                  : 'form-group has-error'\n              }\n            >\n              <label className=\"col-sm-3 control-label\" htmlFor=\"tagNameInput\">\n                {this.props.i18nInputLabel}\n              </label>\n              <div className=\"col-sm-9\">\n                <input\n                  id=\"tagNameInput\"\n                  className=\"form-control\"\n                  type=\"text\"\n                  defaultValue={this.props.tagName}\n                  onChange={this.handleChange}\n                />\n                {this.props.validationError ===\n                  TagNameValidationError.NoErrors && (\n                  <span className=\"help-block\">\n                    &nbsp;{/* todo: pad out the area */}\n                  </span>\n                )}\n                {this.props.validationError ===\n                  TagNameValidationError.NoName && (\n                  <span className=\"help-block\">\n                    {this.props.i18nNoNameError}\n                  </span>\n                )}\n                {this.props.validationError ===\n                  TagNameValidationError.NameInUse && (\n                  <span className=\"help-block\">\n                    {this.props.i18nNameInUseError}\n                  </span>\n                )}\n              </div>\n            </div>\n          </form>\n        }\n        footer={\n          <>\n            <Button onClick={this.props.onHide}>\n              {this.props.i18nCancelButtonText}\n            </Button>\n            <Button\n              bsStyle={'primary'}\n              onClick={this.handleClick}\n              disabled={\n                this.state.tagName === '' ||\n                this.props.validationError !== TagNameValidationError.NoErrors\n              }\n            >\n              {this.props.i18nSaveButtonText}\n            </Button>\n          </>\n        }\n        onHide={this.props.onHide}\n        title={this.props.i18nTitle}\n      />\n    );\n  }\n}\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface ICiCdListProps {\n  children: any;\n}\n\nexport class CiCdList extends React.Component<ICiCdListProps> {\n  public render() {\n    return <ListView>{this.props.children}</ListView>;\n  }\n}\n","import { Button, EmptyState } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface ICiCdListEmptyState {\n  onAddNew: () => void;\n  i18nTitle: string;\n  i18nInfo: string;\n  i18nAddNewButtonText: string;\n}\n\nexport class CiCdListEmptyState extends React.Component<ICiCdListEmptyState> {\n  public render() {\n    return (\n      <EmptyState>\n        <EmptyState.Icon />\n        <EmptyState.Title>{this.props.i18nTitle}</EmptyState.Title>\n        <EmptyState.Info>{this.props.i18nInfo}</EmptyState.Info>\n        <EmptyState.Action>\n          <Button\n            bsStyle=\"primary\"\n            bsSize=\"large\"\n            onClick={this.props.onAddNew}\n          >\n            {this.props.i18nAddNewButtonText}\n          </Button>\n        </EmptyState.Action>\n      </EmptyState>\n    );\n  }\n}\n","import { Button } from 'patternfly-react';\nimport { ListViewItem } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface ICiCdListItemProps {\n  onEditClicked: (name: string) => void;\n  onRemoveClicked: (name: string) => void;\n  i18nEditButtonText: string;\n  i18nRemoveButtonText: string;\n  /**\n   * Text string for the number of integrations using this tag\n   */\n  i18nUsesText: string;\n  /**\n   * Environment name\n   */\n  name: string;\n}\n\nexport class CiCdListItem extends React.Component<ICiCdListItemProps> {\n  constructor(props: ICiCdListItemProps) {\n    super(props);\n    this.handleEditClicked = this.handleEditClicked.bind(this);\n    this.handleRemoveClicked = this.handleRemoveClicked.bind(this);\n  }\n  public handleEditClicked() {\n    this.props.onEditClicked(this.props.name);\n  }\n  public handleRemoveClicked() {\n    this.props.onRemoveClicked(this.props.name);\n  }\n  public render() {\n    return (\n      <ListViewItem\n        heading={this.props.name}\n        description={this.props.i18nUsesText}\n        additionalInfo={[]}\n        actions={\n          <div>\n            <Button onClick={this.handleEditClicked}>\n              {this.props.i18nEditButtonText}\n            </Button>\n            <Button onClick={this.handleRemoveClicked}>\n              {this.props.i18nRemoveButtonText}\n            </Button>\n          </div>\n        }\n      />\n    );\n  }\n}\n","import { Button } from 'patternfly-react';\nimport * as React from 'react';\nimport { Container } from '../../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../../Shared';\n\nexport interface ICiCdListViewProps extends IListViewToolbarProps {\n  i18nAddNewButtonText: string;\n  onAddNew: () => void;\n}\n\nexport class CiCdListView extends React.Component<ICiCdListViewProps> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            {this.props.resultsCount !== 0 && (\n              <Button className=\"btn btn-primary\" onClick={this.props.onAddNew}>\n                {this.props.i18nAddNewButtonText}\n              </Button>\n            )}\n          </div>\n        </ListViewToolbar>\n        <Container>{this.props.children}</Container>\n      </>\n    );\n  }\n}\n","import * as React from 'react';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n  IListViewToolbarProps,\n  SimplePageHeader,\n} from '../../Shared';\nimport { CiCdEditDialog } from './CiCdEditDialog';\nimport { CiCdListView } from './CiCdListView';\nimport { TagNameValidationError } from './CiCdUIModels';\n\nexport interface ICiCdManagePageUIChildrenProps {\n  openAddDialog: () => void;\n  openEditDialog: (name: string) => void;\n  openRemoveDialog: (name: string) => void;\n}\n\nexport interface ICiCdManagePageUIProps extends IListViewToolbarProps {\n  i18nAddTagDialogTitle: string;\n  i18nAddTagDialogDescription: string;\n  i18nEditTagDialogTitle: string;\n  i18nEditTagDialogDescription: string;\n  i18nAddNewButtonText: string;\n  i18nTagInputLabel: string;\n  i18nSaveButtonText: string;\n  i18nCancelButtonText: string;\n  i18nConfirmCancelButtonText: string;\n  i18nConfirmRemoveButtonText: string;\n  i18nRemoveConfirmationMessage: (name: string) => string;\n  i18nRemoveConfirmationTitle: string;\n  i18nRemoveConfirmationDetailMessage: string;\n  i18nPageTitle: string;\n  i18nPageDescription: string;\n  i18nNoNameError: string;\n  i18nNameInUseError: string;\n  nameValidationError: TagNameValidationError;\n  onValidateItem: (name: string) => void;\n  onEditItem: (oldName: string, newName: string) => void;\n  onAddItem: (name: string) => void;\n  onRemoveItem: (name: string) => void;\n  children: (props: ICiCdManagePageUIChildrenProps) => any;\n}\n\nexport interface ICiCdManagePageUIState {\n  showAddDialog: boolean;\n  showEditDialog: boolean;\n  showRemoveDialog: boolean;\n  currentItemName?: string;\n}\n\nexport class CiCdManagePageUI extends React.Component<\n  ICiCdManagePageUIProps,\n  ICiCdManagePageUIState\n> {\n  public constructor(props: ICiCdManagePageUIProps) {\n    super(props);\n    this.state = {\n      showAddDialog: false,\n      showEditDialog: false,\n      showRemoveDialog: false,\n    };\n    this.openAddDialog = this.openAddDialog.bind(this);\n    this.closeAddDialog = this.closeAddDialog.bind(this);\n    this.openEditDialog = this.openEditDialog.bind(this);\n    this.closeEditDialog = this.closeEditDialog.bind(this);\n    this.openRemoveDialog = this.openRemoveDialog.bind(this);\n    this.closeRemoveDialog = this.closeRemoveDialog.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.handleRemoveConfirm = this.handleRemoveConfirm.bind(this);\n  }\n  public handleSave(name: string) {\n    if (this.state.showEditDialog) {\n      this.closeEditDialog();\n      this.props.onEditItem(this.state.currentItemName!, name);\n    }\n    if (this.state.showAddDialog) {\n      this.closeAddDialog();\n      this.props.onAddItem(name);\n    }\n    if (this.state.showRemoveDialog) {\n      this.closeRemoveDialog();\n      this.props.onRemoveItem(name);\n    }\n  }\n  public handleRemoveConfirm() {\n    this.handleSave(this.state.currentItemName!);\n  }\n  public openRemoveDialog(name: string) {\n    this.setState({ currentItemName: name, showRemoveDialog: true });\n  }\n  public closeRemoveDialog() {\n    this.setState({ showRemoveDialog: false });\n  }\n  public openAddDialog() {\n    this.setState({ showAddDialog: true });\n  }\n  public closeAddDialog() {\n    this.setState({ showAddDialog: false });\n  }\n  public openEditDialog(name: string) {\n    this.setState({ currentItemName: name, showEditDialog: true });\n  }\n  public closeEditDialog() {\n    this.setState({ showEditDialog: false });\n  }\n  public render() {\n    return (\n      <>\n        <SimplePageHeader\n          className=\"pf-u-my-md\"\n          i18nTitle={this.props.i18nPageTitle}\n          i18nDescription={this.props.i18nPageDescription}\n        />\n        {this.state.showAddDialog && (\n          <CiCdEditDialog\n            i18nTitle={this.props.i18nAddTagDialogTitle}\n            i18nDescription={this.props.i18nAddTagDialogDescription}\n            tagName={''}\n            i18nInputLabel={this.props.i18nTagInputLabel}\n            i18nSaveButtonText={this.props.i18nSaveButtonText}\n            i18nCancelButtonText={this.props.i18nCancelButtonText}\n            i18nNoNameError={this.props.i18nNoNameError}\n            i18nNameInUseError={this.props.i18nNameInUseError}\n            validationError={this.props.nameValidationError}\n            onHide={this.closeAddDialog}\n            onSave={this.handleSave}\n            onValidate={this.props.onValidateItem}\n          />\n        )}\n        {this.state.showEditDialog && (\n          <CiCdEditDialog\n            i18nTitle={this.props.i18nEditTagDialogTitle}\n            i18nDescription={this.props.i18nEditTagDialogDescription}\n            tagName={this.state.currentItemName!}\n            i18nInputLabel={this.props.i18nTagInputLabel}\n            i18nSaveButtonText={this.props.i18nSaveButtonText}\n            i18nCancelButtonText={this.props.i18nCancelButtonText}\n            i18nNoNameError={this.props.i18nNoNameError}\n            i18nNameInUseError={this.props.i18nNameInUseError}\n            validationError={this.props.nameValidationError}\n            onHide={this.closeEditDialog}\n            onSave={this.handleSave}\n            onValidate={this.props.onValidateItem}\n          />\n        )}\n        {this.state.showRemoveDialog && (\n          <ConfirmationDialog\n            buttonStyle={ConfirmationButtonStyle.NORMAL}\n            icon={ConfirmationIconType.DANGER}\n            i18nCancelButtonText={this.props.i18nConfirmCancelButtonText}\n            i18nConfirmButtonText={this.props.i18nConfirmRemoveButtonText}\n            i18nConfirmationMessage={this.props.i18nRemoveConfirmationMessage(\n              this.state.currentItemName!\n            )}\n            i18nTitle={this.props.i18nRemoveConfirmationTitle}\n            i18nDetailsMessage={this.props.i18nRemoveConfirmationDetailMessage}\n            showDialog={this.state.showRemoveDialog}\n            onCancel={this.closeRemoveDialog}\n            onConfirm={this.handleRemoveConfirm}\n          />\n        )}\n        <CiCdListView\n          activeFilters={this.props.activeFilters}\n          currentFilterType={this.props.currentFilterType}\n          currentSortType={this.props.currentSortType}\n          currentValue={this.props.currentValue}\n          filterTypes={this.props.filterTypes}\n          isSortAscending={this.props.isSortAscending}\n          resultsCount={this.props.resultsCount}\n          sortTypes={this.props.sortTypes}\n          onUpdateCurrentValue={this.props.onUpdateCurrentValue}\n          onValueKeyPress={this.props.onValueKeyPress}\n          onFilterAdded={this.props.onFilterAdded}\n          onSelectFilterType={this.props.onSelectFilterType}\n          onFilterValueSelected={this.props.onFilterValueSelected}\n          onRemoveFilter={this.props.onRemoveFilter}\n          onClearFilters={this.props.onClearFilters}\n          onToggleCurrentSortDirection={this.props.onToggleCurrentSortDirection}\n          onUpdateCurrentSortType={this.props.onUpdateCurrentSortType}\n          i18nResultsCount={this.props.i18nResultsCount}\n          i18nAddNewButtonText={this.props.i18nAddNewButtonText}\n          onAddNew={this.openAddDialog}\n        >\n          {this.props.children({\n            openAddDialog: this.openAddDialog,\n            openEditDialog: this.openEditDialog,\n            openRemoveDialog: this.openRemoveDialog,\n          })}\n        </CiCdListView>\n      </>\n    );\n  }\n}\n","import * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nfunction getRandom(min: number, max: number) {\n  return Math.random() * (max - min) + min;\n}\n\nconst ItemSkeleton = () => (\n  <ContentLoader\n    height={68}\n    width={500}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={{\n      height: 68,\n      width: '100%',\n    }}\n  >\n    <rect\n      x=\"15\"\n      y=\"20\"\n      rx=\"5\"\n      ry=\"5\"\n      width={400 * getRandom(0.6, 1)}\n      height=\"18\"\n    />\n  </ContentLoader>\n);\n\nexport class CiCdListSkeleton extends React.PureComponent {\n  public render() {\n    return (\n      <>\n        <div\n          className={'list-group-item'}\n          data-testid=\"environments-list-skeleton\"\n        >\n          <div>\n            <ItemSkeleton />\n          </div>\n        </div>\n        <div\n          className={'list-group-item'}\n          data-testid=\"environments-list-skeleton\"\n        >\n          <div>\n            <ItemSkeleton />\n          </div>\n        </div>\n        <div\n          className={'list-group-item'}\n          data-testid=\"environments-list-skeleton\"\n        >\n          <div>\n            <ItemSkeleton />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import { Button } from 'patternfly-react';\nimport * as React from 'react';\nimport { Dialog } from '../../Shared';\nimport { ITagIntegrationEntry } from './CiCdUIModels';\n\nexport interface ITagIntegrationDialogChildrenProps {\n  handleChange: (\n    items: ITagIntegrationEntry[],\n    initialItems: ITagIntegrationEntry[]\n  ) => void;\n}\n\nexport interface ITagIntegrationDialogProps {\n  i18nTitle: string;\n  i18nCancelButtonText: string;\n  i18nSaveButtonText: string;\n  onHide: () => void;\n  onSave: (items: ITagIntegrationEntry[]) => void;\n  children: (props: ITagIntegrationDialogChildrenProps) => any;\n}\nexport interface ITagIntegrationDialogState {\n  disableSave: boolean;\n}\n\nexport class TagIntegrationDialog extends React.Component<\n  ITagIntegrationDialogProps,\n  ITagIntegrationDialogState\n> {\n  private itemsDraft: ITagIntegrationEntry[] | undefined;\n  constructor(props: ITagIntegrationDialogProps) {\n    super(props);\n    this.state = {\n      disableSave: true,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  public handleChange(\n    items: ITagIntegrationEntry[],\n    initialItems: ITagIntegrationEntry[]\n  ) {\n    const disableSave = initialItems\n      .map(\n        (item, index) =>\n          item.name === items[index].name &&\n          item.selected === items[index].selected\n      )\n      .reduce((acc, current) => acc && current, true);\n    this.itemsDraft = items;\n    this.setState({ disableSave });\n  }\n  public handleClick() {\n    this.props.onSave(this.itemsDraft!);\n  }\n  public render() {\n    return (\n      <Dialog\n        body={this.props.children({\n          handleChange: this.handleChange,\n        })}\n        footer={\n          <>\n            <Button onClick={this.props.onHide}>\n              {this.props.i18nCancelButtonText}\n            </Button>\n            <Button\n              bsStyle={'primary'}\n              onClick={this.handleClick}\n              disabled={this.state.disableSave}\n            >\n              {this.props.i18nSaveButtonText}\n            </Button>\n          </>\n        }\n        title={this.props.i18nTitle}\n        onHide={this.props.onHide}\n      />\n    );\n  }\n}\n","import { ListViewItem } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface ITagIntegrationListItemProps {\n  selected: boolean;\n  name: string;\n  onChange: (name: string, selected: boolean) => void;\n}\n\nexport class TagIntegrationListItem extends React.Component<\n  ITagIntegrationListItemProps\n> {\n  constructor(props: ITagIntegrationListItemProps) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  public handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.props.onChange(this.props.name, event.target.checked);\n  }\n  public render() {\n    return (\n      <ListViewItem\n        checkboxInput={\n          <input\n            type=\"checkbox\"\n            defaultChecked={this.props.selected}\n            onChange={this.handleChange}\n          />\n        }\n        heading={this.props.name}\n        description={''}\n        additionalInfo={[]}\n      />\n    );\n  }\n}\n","import * as H from 'history';\nimport { EmptyState } from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../../Layout';\n\nexport interface ITagIntegrationDialogEmptyStateProps {\n  href: H.LocationDescriptor;\n  i18nTitle: string;\n  i18nInfo: string;\n  i18nGoToManageCiCdButtonText: string;\n}\n\nexport class TagIntegrationDialogEmptyState extends React.Component<\n  ITagIntegrationDialogEmptyStateProps\n> {\n  public render() {\n    return (\n      <EmptyState\n        style={\n          {\n            background: 'inherit',\n            border: 'none',\n          } /* todo component specific override */\n        }\n      >\n        <EmptyState.Icon />\n        <EmptyState.Title>{this.props.i18nTitle}</EmptyState.Title>\n        <EmptyState.Info>{this.props.i18nInfo}</EmptyState.Info>\n        <EmptyState.Action>\n          <ButtonLink as=\"primary\" size=\"lg\" href={this.props.href}>\n            {this.props.i18nGoToManageCiCdButtonText}\n          </ButtonLink>\n        </EmptyState.Action>\n      </EmptyState>\n    );\n  }\n}\n","import * as H from 'history';\nimport * as React from 'react';\nimport { CiCdList } from './CiCdList';\nimport { ITagIntegrationEntry } from './CiCdUIModels';\nimport { TagIntegrationDialogEmptyState } from './TagIntegrationDialogEmptyState';\nimport { TagIntegrationListItem } from './TagIntegrationListItem';\n\nexport interface ITagIntegrationDialogBodyProps {\n  manageCiCdHref: H.LocationDescriptor;\n  initialItems: ITagIntegrationEntry[];\n  onChange: (\n    items: ITagIntegrationEntry[],\n    initialItems: ITagIntegrationEntry[]\n  ) => void;\n  i18nEmptyStateTitle: string;\n  i18nEmptyStateInfo: string;\n  i18nEmptyStateButtonText: string;\n}\n\nexport interface ITagIntegrationDialogBodyState {\n  items: ITagIntegrationEntry[];\n}\n\nexport class TagIntegrationDialogBody extends React.Component<\n  ITagIntegrationDialogBodyProps,\n  ITagIntegrationDialogBodyState\n> {\n  constructor(props: ITagIntegrationDialogBodyProps) {\n    super(props);\n    this.state = {\n      items: this.props.initialItems,\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  public handleChange(name: string, selected: boolean) {\n    const items = this.props.initialItems.map(item =>\n      item.name === name ? { name, selected } : item\n    );\n    this.props.onChange(items, this.props.initialItems);\n  }\n  public render() {\n    return (\n      <>\n        {this.state.items.length > 0 && (\n          <>\n            <CiCdList>\n              {this.state.items.map((item, index) => (\n                <TagIntegrationListItem\n                  key={index}\n                  name={item.name}\n                  selected={item.selected}\n                  onChange={this.handleChange}\n                />\n              ))}\n            </CiCdList>\n          </>\n        )}\n        {this.state.items.length === 0 && (\n          <TagIntegrationDialogEmptyState\n            href={this.props.manageCiCdHref}\n            i18nTitle={this.props.i18nEmptyStateTitle}\n            i18nInfo={this.props.i18nEmptyStateInfo}\n            i18nGoToManageCiCdButtonText={this.props.i18nEmptyStateButtonText}\n          />\n        )}\n      </>\n    );\n  }\n}\n","import * as React from 'react';\nimport { DndFileChooser, SimplePageHeader } from '../../Shared';\n\nexport interface IImportPageUIProps {\n  i18nPageTitle: string;\n  i18nPageDescription: string;\n  i18nNoFileSelectedMessage: string;\n  i18nSelectedFileLabel: string;\n  i18nInstructions: string;\n  i18nUploadFailedMessages?: string[];\n  i18nUploadSuccessMessages?: string[];\n  i18nHelpMessage: string;\n  onUploadRejected(fileName: string): string;\n  onUploadAccepted(file: File[]): void;\n}\n\nexport class ImportPageUI extends React.Component<IImportPageUIProps> {\n  public render() {\n    return (\n      <>\n        <SimplePageHeader\n          i18nTitle={this.props.i18nPageTitle}\n          i18nDescription={this.props.i18nPageDescription}\n        />\n        <DndFileChooser\n          allowMultiple={true}\n          fileExtensions={'.zip'}\n          onUploadRejected={this.props.onUploadRejected}\n          disableDropzone={false}\n          onUploadAccepted={this.props.onUploadAccepted}\n          i18nNoFileSelectedMessage={this.props.i18nNoFileSelectedMessage}\n          i18nSelectedFileLabel={this.props.i18nSelectedFileLabel}\n          i18nInstructions={this.props.i18nInstructions}\n          i18nUploadFailedMessages={this.props.i18nUploadFailedMessages}\n          i18nUploadSuccessMessages={this.props.i18nUploadSuccessMessages}\n          i18nHelpMessage={this.props.i18nHelpMessage}\n        />\n      </>\n    );\n  }\n}\n","import { Text } from '@patternfly/react-core';\nimport { Icon } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationDetailDescriptionProps {\n  description?: string;\n}\n\nexport class IntegrationDetailDescription extends React.PureComponent<\n  IIntegrationDetailDescriptionProps\n> {\n  public render() {\n    return (\n      <div>\n        {this.props.description ? (\n          <Text>\n            {this.props.description}&nbsp;\n            <Icon name={'pencil'} />\n          </Text>\n        ) : null}\n      </div>\n    );\n  }\n}\n","import { Title } from '@patternfly/react-core';\nimport { Icon } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationDetailEditableNameProps {\n  name?: string;\n}\n\nexport class IntegrationDetailEditableName extends React.PureComponent<\n  IIntegrationDetailEditableNameProps\n> {\n  public render() {\n    return (\n      <>\n        {this.props.name ? (\n          <>\n            <Title size=\"lg\">{this.props.name}&nbsp;</Title>\n            <Icon name={'pencil'} />\n          </>\n        ) : null}\n      </>\n    );\n  }\n}\n","import { Button, Grid, ListView, ListViewItem } from 'patternfly-react';\nimport * as React from 'react';\n\nimport './IntegrationDetailHistoryListView.css';\n\nexport interface IIntegrationDetailHistoryListViewProps {\n  integrationIsDraft: boolean;\n  i18nTextBtnEdit?: string;\n  i18nTextBtnPublish?: string;\n  i18nTextDraft?: string;\n  i18nTextHistory?: string;\n}\n\nexport class IntegrationDetailHistoryListView extends React.Component<\n  IIntegrationDetailHistoryListViewProps\n> {\n  public render() {\n    return (\n      <Grid\n        fluid={true}\n        key={1}\n        className=\"integration-detail-history-list-view\"\n      >\n        {this.props.integrationIsDraft ? (\n          <Grid.Row className=\"show-grid\">\n            <Grid.Col\n              xs={2}\n              md={2}\n              className=\"integration-detail-history-list-view__description\"\n            >\n              {this.props.i18nTextDraft}:\n            </Grid.Col>\n            <Grid.Col xs={10} md={10}>\n              <ListViewItem\n                key={1}\n                heading={this.props.i18nTextDraft}\n                actions={\n                  <>\n                    <Button>{this.props.i18nTextBtnPublish}</Button>\n                    <Button>{this.props.i18nTextBtnEdit}</Button>\n                  </>\n                }\n                stacked={false}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        ) : null}\n\n        {this.props.children ? (\n          <Grid.Row className=\"show-grid\">\n            <Grid.Col\n              xs={2}\n              md={2}\n              className=\"integration-detail-history-list-view__description\"\n            >\n              {<span>{this.props.i18nTextHistory}:</span>}\n            </Grid.Col>\n            <Grid.Col xs={10} md={10}>\n              {this.props.children ? (\n                <ListView>{this.props.children}</ListView>\n              ) : null}\n            </Grid.Col>\n          </Grid.Row>\n        ) : null}\n      </Grid>\n    );\n  }\n}\n","import {\n  DropdownKebab,\n  ListView,\n  ListViewInfoItem,\n  ListViewItem,\n  MenuItem,\n} from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationDetailHistoryListViewItemProps {\n  integrationUpdatedAt: string;\n  integrationVersion: number;\n  i18nTextHistoryMenuReplaceDraft?: string;\n  i18nTextHistoryMenuUnpublish?: string;\n  i18nTextLastPublished?: string;\n  i18nTextVersion?: string;\n}\n\nexport class IntegrationDetailHistoryListViewItem extends React.Component<\n  IIntegrationDetailHistoryListViewItemProps\n> {\n  public render() {\n    return (\n      <>\n        <ListViewItem\n          key={1}\n          heading={\n            <span>\n              {<span>{this.props.i18nTextVersion}:</span>}{' '}\n              {this.props.integrationVersion}\n            </span>\n          }\n          actions={\n            <DropdownKebab id=\"historyactions\" pullRight={true}>\n              <MenuItem>{this.props.i18nTextHistoryMenuReplaceDraft}</MenuItem>\n              <MenuItem>{this.props.i18nTextHistoryMenuUnpublish}</MenuItem>\n            </DropdownKebab>\n          }\n          additionalInfo={[\n            <ListViewInfoItem key={1}>\n              {this.props.i18nTextLastPublished}\n              {this.props.integrationUpdatedAt}\n            </ListViewInfoItem>,\n          ]}\n          leftContent={\n            <ListView.Icon\n              type=\"pf\"\n              name=\"ok\"\n              size=\"sm\"\n              className=\"list-view-pf-icon-success\"\n            />\n          }\n          stacked={false}\n        />\n      </>\n    );\n  }\n}\n","import * as React from 'react';\n\nimport { IntegrationDetailEditableName } from './IntegrationDetailEditableName';\n\nimport './IntegrationDetailInfo.css';\n\nexport interface IIntegrationDetailInfoProps {\n  name?: string;\n  version?: number;\n}\n\nexport class IntegrationDetailInfo extends React.PureComponent<\n  IIntegrationDetailInfoProps\n> {\n  public render() {\n    return (\n      <div className=\"integration-detail-info\">\n        <IntegrationDetailEditableName name={this.props.name} />\n        {this.props.version ? (\n          <>\n            <span className=\"pficon pficon-ok\" />\n            &nbsp;Published version {this.props.version}\n          </>\n        ) : (\n          'Stopped'\n        )}\n      </div>\n    );\n  }\n}\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationEditorActionsListItemProps {\n  integrationName: string;\n  integrationDescription: string;\n  actions: any;\n}\n\nexport class IntegrationEditorActionsListItem extends React.Component<\n  IIntegrationEditorActionsListItemProps\n> {\n  public render() {\n    return (\n      <ListView.Item\n        actions={this.props.actions}\n        heading={this.props.integrationName}\n        description={this.props.integrationDescription}\n        stacked={true}\n      />\n    );\n  }\n}\n","import { Text, Title } from '@patternfly/react-core';\nimport { ListView } from 'patternfly-react';\nimport * as React from 'react';\nimport { Container } from '../Layout';\n\nexport interface IIntegrationEditorChooseActionProps {\n  /**\n   * The internationalized title.\n   */\n  i18nTitle: string;\n  /**\n   * The internationalized subtitle.\n   */\n  i18nSubtitle: string;\n}\n\n/**\n * A component to render a list of actions, to be used in the integration\n * editor.\n * @see [i18nTitle]{@link IIntegrationEditorChooseActionProps#i18nTitle}\n * @see [i18nSubtitle]{@link IIntegrationEditorChooseActionProps#i18nSubtitle}\n */\nexport class IntegrationEditorChooseAction extends React.Component<\n  IIntegrationEditorChooseActionProps\n> {\n  public render() {\n    return (\n      <>\n        <Container className=\"pf-u-my-md\">\n          <Title size=\"xl\">{this.props.i18nTitle} - Choose Action</Title>\n          <Text>{this.props.i18nSubtitle}</Text>\n        </Container>\n        <Container>\n          <ListView>{this.props.children}</ListView>\n        </Container>\n      </>\n    );\n  }\n}\n","import { Text, Title } from '@patternfly/react-core';\nimport { ListView } from 'patternfly-react';\nimport * as React from 'react';\nimport { Container } from '../Layout';\n\nexport interface IIntegrationEditorChooseConnection {\n  /**\n   * The main title of the content, shown before the connections.\n   */\n  i18nTitle: string;\n  /**\n   * The description of the content, shown before the connections.\n   */\n  i18nSubtitle: string;\n}\n\n/**\n * A component to render a list of connections, to be used in the integration\n * editor.\n *\n * @see [i18nTitle]{@link IIntegrationEditorChooseConnection#i18nTitle}\n * @see [i18nSubtitle]{@link IIntegrationEditorChooseConnection#i18nSubtitle}\n */\nexport class IntegrationEditorChooseConnection extends React.Component<\n  IIntegrationEditorChooseConnection\n> {\n  public render() {\n    return (\n      <>\n        <Container className=\"pf-u-my-md\">\n          <Title size=\"xl\">{this.props.i18nTitle}</Title>\n          <Text>{this.props.i18nSubtitle}</Text>\n        </Container>\n        <Container>\n          <ListView>{this.props.children}</ListView>\n        </Container>\n      </>\n    );\n  }\n}\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationEditorConnectionsListItemProps {\n  integrationName: string;\n  integrationDescription: string;\n  icon: any;\n  actions: any;\n}\n\nexport class IntegrationEditorConnectionsListItem extends React.Component<\n  IIntegrationEditorConnectionsListItemProps\n> {\n  public render() {\n    return (\n      <ListView.Item\n        actions={this.props.actions}\n        heading={this.props.integrationName}\n        description={this.props.integrationDescription}\n        leftContent={this.props.icon}\n        stacked={true}\n      />\n    );\n  }\n}\n","import { Text, Title } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Container } from '../Layout';\n\nexport interface IIntegrationEditorFormProps {\n  /**\n   * The internationalized title.\n   */\n  i18nTitle: string;\n  /**\n   * The internationalized subtitle.\n   */\n  i18nSubtitle: string;\n  /**\n   * The internationalized form title.\n   */\n  i18nFormTitle?: string;\n  /**\n   * The callback fired when submitting the form.\n   * @param e\n   */\n  handleSubmit: (e?: any) => void;\n}\n\n/**\n * A component to render a save form, to be used in the integration\n * editor. This does *not* build the form itself, form's field should be passed\n * as the `children` value.\n * @see [i18nTitle]{@link IIntegrationEditorFormProps#i18nTitle}\n * @see [i18nSubtitle]{@link IIntegrationEditorFormProps#i18nSubtitle}\n */\nexport class IntegrationEditorForm extends React.Component<\n  IIntegrationEditorFormProps\n> {\n  public render() {\n    return (\n      <>\n        <Container className=\"pf-u-my-md\">\n          <Title size=\"lg\">{this.props.i18nTitle} - Choose Action</Title>\n          <Text>{this.props.i18nSubtitle}</Text>\n        </Container>\n        <Container>\n          <form\n            className=\"form-horizontal required-pf\"\n            role=\"form\"\n            onSubmit={this.props.handleSubmit}\n          >\n            <div className=\"row row-cards-pf\">\n              <div className=\"card-pf\">\n                {this.props.i18nFormTitle && (\n                  <div className=\"card-pf-title\">\n                    {this.props.i18nFormTitle}\n                  </div>\n                )}\n                <div className=\"card-pf-body\">\n                  <Container>{this.props.children}</Container>\n                </div>\n              </div>\n            </div>\n          </form>\n        </Container>\n      </>\n    );\n  }\n}\n","import { Text, Title } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Container } from '../Layout';\n\nexport interface IIntegrationEditorNothingToConfigureProps {\n  /**\n   * The internationalized title.\n   */\n  i18nTitle: string;\n  /**\n   * The internationalized subtitle.\n   */\n  i18nSubtitle: string;\n  /**\n   * The internationalized alert to display.\n   */\n  i18nAlert: string;\n}\n\n/**\n * A component to render an alert for unconfigurable actions.\n * @see [i18nTitle]{@link IIntegrationEditorNothingToConfigureProps#i18nTitle}\n * @see [i18nSubtitle]{@link IIntegrationEditorNothingToConfigureProps#i18nSubtitle}\n * @see [i18nAlert]{@link IIntegrationEditorNothingToConfigureProps#i18nAlert}\n */\nexport class IntegrationEditorNothingToConfigure extends React.Component<\n  IIntegrationEditorNothingToConfigureProps\n> {\n  public render() {\n    return (\n      <Container>\n        <Title size=\"lg\">{this.props.i18nTitle} - Choose Action</Title>\n        <Text>{this.props.i18nSubtitle}</Text>\n        <Container>\n          <div className=\"row row-cards-pf\">\n            <div className=\"card-pf\">\n              <div className=\"card-pf-body\">\n                <Container>\n                  <Text className=\"alert alert-info\">\n                    <span className=\"pficon pficon-info\" />\n                    {this.props.i18nAlert}\n                  </Text>\n                </Container>\n              </div>\n            </div>\n          </div>\n        </Container>\n      </Container>\n    );\n  }\n}\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class IntegrationEditorStepsList extends React.Component<{}> {\n  public render() {\n    return (\n      <ListView style={{ background: 'transparent' }}>\n        {this.props.children}\n      </ListView>\n    );\n  }\n}\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IIntegrationEditorStepsListItemProps {\n  stepName: string;\n  stepDescription: string;\n  actions: any;\n  icon: any;\n}\n\nexport class IntegrationEditorStepsListItem extends React.Component<\n  IIntegrationEditorStepsListItemProps\n> {\n  public render() {\n    return (\n      <ListView.Item\n        actions={this.props.actions}\n        heading={this.props.stepName}\n        description={this.props.stepDescription}\n        leftContent={this.props.icon}\n        stacked={true}\n        hideCloseIcon={true}\n      />\n    );\n  }\n}\n","import * as H from 'history';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport './IntegrationFlowAddStep.css';\n\nexport interface IIntegrationFlowAddStepProps {\n  showDetails: boolean;\n  addStepHref?: H.LocationDescriptor;\n  i18nAddStep?: string;\n}\n\nexport interface IIntegrationFlowAddStepState {\n  showTooltip: boolean;\n}\n\nexport class IntegrationFlowAddStep extends React.Component<\n  IIntegrationFlowAddStepProps,\n  IIntegrationFlowAddStepState\n> {\n  public static defaultProps = {\n    active: false,\n  };\n\n  public state = {\n    showTooltip: false,\n  };\n\n  public containerRef = React.createRef<HTMLDivElement>();\n\n  constructor(props: IIntegrationFlowAddStepProps) {\n    super(props);\n    this.showTooltip = this.showTooltip.bind(this);\n    this.hideTooltip = this.hideTooltip.bind(this);\n    this.toggleTooltip = this.toggleTooltip.bind(this);\n  }\n\n  public showTooltip() {\n    this.setState({\n      showTooltip: true,\n    });\n  }\n\n  public hideTooltip() {\n    this.setState({\n      showTooltip: false,\n    });\n  }\n\n  public toggleTooltip() {\n    this.setState({\n      showTooltip: !this.state.showTooltip,\n    });\n  }\n\n  public render() {\n    return (\n      <div\n        className={'integration-flow-add-step'}\n        onMouseEnter={this.showTooltip}\n        onMouseLeave={this.hideTooltip}\n        onTouchStart={this.toggleTooltip}\n      >\n        {this.props.addStepHref && (\n          <div\n            className={'integration-flow-add-step__iconWrapper'}\n            ref={this.containerRef}\n          >\n            <Link to={this.props.addStepHref}>\n              <div className={'integration-flow-add-step__icon'}>\n                <i\n                  className=\"fa fa-plus-square\"\n                  title={this.props.i18nAddStep}\n                />\n              </div>\n            </Link>\n          </div>\n        )}\n        {this.props.showDetails && this.props.children}\n      </div>\n    );\n  }\n}\n","import classnames from 'classnames';\nimport { OverlayTrigger, Tooltip } from 'patternfly-react';\nimport * as React from 'react';\nimport './IntegrationFlowStep.css';\n\nexport interface IIntegrationFlowStepProps {\n  /**\n   * The icon to show. Can be anything but must fit a circle of 55px of diameter.\n   */\n  icon: any;\n  /**\n   * Set to true to render the extended details for the step. Usually set to match\n   * the expanded state of the parent container.\n   */\n  showDetails: boolean;\n  /**\n   * The text to show on the tooltip that opens when hovering with the mouse on\n   * the icon.\n   */\n  i18nTooltip: string;\n  /**\n   * Set to true to set this step as active. This will highlight the icon circle.\n   */\n  active?: boolean;\n}\n\nexport class IntegrationFlowStep extends React.Component<\n  IIntegrationFlowStepProps\n> {\n  public static defaultProps = {\n    active: false,\n  };\n\n  public render() {\n    const tooltip = (\n      <Tooltip id={'integration-flow-step'}>{this.props.i18nTooltip}</Tooltip>\n    );\n    const icon = (\n      <div className={'integration-flow-step__icon'}>{this.props.icon}</div>\n    );\n    return (\n      <div\n        className={classnames('integration-flow-step', {\n          'is-active': this.props.active,\n          'is-expanded': this.props.showDetails,\n        })}\n      >\n        {this.props.showDetails ? (\n          <>\n            <div className={'integration-flow-step__iconWrapper'}>{icon}</div>\n            {this.props.children}\n          </>\n        ) : (\n          <div className={'integration-flow-step__iconWrapper'}>\n            <OverlayTrigger\n              overlay={tooltip}\n              placement=\"right\"\n              trigger={['hover', 'focus']}\n              rootClose={false}\n            >\n              {icon}\n            </OverlayTrigger>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import classnames from 'classnames';\nimport * as React from 'react';\nimport './IntegrationFlowStepDetails.css';\n\nconst Title: React.FunctionComponent = ({ children }) => (\n  <div className={'integration-flow-step-details__title'}>{children}</div>\n);\n\nconst GenericDescription: React.FunctionComponent = ({ children }) => (\n  <div className={'integration-flow-step-details__body'}>{children}</div>\n);\n\ninterface IStepOverviewProps {\n  nameI18nLabel: string;\n  name: string;\n  actionI18nLabel: string;\n  action: string;\n  dataTypeI18nLabel: string;\n  dataType: string;\n}\n\nconst StepOverview: React.FunctionComponent<IStepOverviewProps> = ({\n  nameI18nLabel,\n  name,\n  actionI18nLabel,\n  action,\n  dataTypeI18nLabel,\n  dataType,\n}) => (\n  <div className={'integration-flow-step-details__body'}>\n    <dl className={'integration-flow-step-details__overview'}>\n      <dt>{nameI18nLabel}</dt>\n      <dd>{name}</dd>\n    </dl>\n    <dl className={'integration-flow-step-details__overview'}>\n      <dt>{actionI18nLabel}</dt>\n      <dd>{action}</dd>\n    </dl>\n    <dl className={'integration-flow-step-details__overview'}>\n      <dt>{dataTypeI18nLabel}</dt>\n      <dd>{dataType}</dd>\n    </dl>\n  </div>\n);\n\nexport interface IntegrationFlowStepDetailsChildrenProps {\n  Title: React.FunctionComponent;\n  GenericDescription: React.FunctionComponent;\n  StepOverview: React.FunctionComponent<IStepOverviewProps>;\n}\n\nexport interface IntegrationFlowStepDetailsProps {\n  active?: boolean;\n  children(props: IntegrationFlowStepDetailsChildrenProps): any;\n}\n\n/**\n * A render prop component that provides the right components than can be used\n * inside a step element of the integration editor sidebar.\n */\nexport class IntegrationFlowStepDetails extends React.Component<\n  IntegrationFlowStepDetailsProps\n> {\n  public static defaultProps = {\n    active: false,\n  };\n\n  public render() {\n    return (\n      <div\n        className={classnames('integration-flow-step-details', {\n          'is-active': this.props.active,\n        })}\n      >\n        {this.props.children({\n          GenericDescription,\n          StepOverview,\n          Title,\n        })}\n      </div>\n    );\n  }\n}\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport {\n  IIntegrationFlowStepProps,\n  IntegrationFlowStep,\n} from './IntegrationFlowStep';\nimport { IntegrationFlowStepDetails } from './IntegrationFlowStepDetails';\n\nexport interface IIntegrationFlowStepGenericProps\n  extends IIntegrationFlowStepProps {\n  /**\n   * The title of the extended information table.\n   */\n  i18nTitle: string;\n  /**\n   * The content of the extended information table.\n   */\n  description: string;\n}\n\n/**\n * A component to show an unconfigured (or being configured) step in the\n * sidebar of the integration editor.\n *\n * @see [icon]{@link IIntegrationFlowStepProps#icon}\n * @see [active]{@link IIntegrationFlowStepProps#active}\n * @see [i18nTitle]{@link IIntegrationFlowStepGenericProps#i18nTitle}\n * @see [i18nTooltip]{@link IIntegrationFlowStepProps#i18nTooltip}\n * @see [showDetails]{@link IIntegrationFlowStepProps#showDetails}\n * @see [description]{@link IIntegrationFlowStepGenericProps#description}\n * @see [href]{@link IIntegrationFlowStepProps#href}\n */\nexport const IntegrationFlowStepGeneric: React.FunctionComponent<\n  IIntegrationFlowStepGenericProps\n> = ({\n  icon,\n  active = false,\n  i18nTitle,\n  i18nTooltip,\n  showDetails,\n  description,\n}) => (\n  <IntegrationFlowStep\n    icon={icon}\n    active={active}\n    i18nTooltip={i18nTooltip}\n    showDetails={showDetails}\n  >\n    <IntegrationFlowStepDetails active={active}>\n      {({ Title, GenericDescription }) => (\n        <>\n          <Title>{i18nTitle}</Title>\n          <GenericDescription>{description}</GenericDescription>\n        </>\n      )}\n    </IntegrationFlowStepDetails>\n  </IntegrationFlowStep>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport './IntegrationIcon.css';\n\nexport interface IIntegrationIconProps {\n  startConnectionIcon: string;\n  finishConnectionIcon: string;\n}\nexport const IntegrationIcon: React.FunctionComponent<\n  IIntegrationIconProps\n> = ({ startConnectionIcon, finishConnectionIcon }) => (\n  <div className={'integration-icon'}>\n    <img src={startConnectionIcon} className={'integration-icon__icon'} />\n    <i className=\"fa fa-angle-right integration-icon__divider\" />\n    <img src={finishConnectionIcon} className={'integration-icon__icon'} />\n  </div>\n);\n","import { Label } from 'patternfly-react';\nimport * as React from 'react';\nimport {\n  ERROR,\n  IntegrationState,\n  PENDING,\n  PUBLISHED,\n  UNPUBLISHED,\n} from './models';\n\nexport interface IIntegrationStatusProps {\n  currentState?: IntegrationState;\n  i18nPublished: string;\n  i18nUnpublished: string;\n  i18nError: string;\n}\n\nexport class IntegrationStatus extends React.Component<\n  IIntegrationStatusProps\n> {\n  public render() {\n    const labelType =\n      this.props.currentState === ERROR\n        ? 'danger'\n        : this.props.currentState === PUBLISHED ||\n          this.props.currentState === PENDING\n        ? 'primary'\n        : 'default';\n    let label = PENDING; // it's a parachute\n    switch (this.props.currentState) {\n      case PUBLISHED:\n        label = this.props.i18nPublished;\n        break;\n      case UNPUBLISHED:\n        label = this.props.i18nUnpublished;\n        break;\n      case ERROR:\n        label = this.props.i18nError;\n        break;\n    }\n    return <Label type={labelType}>{label}</Label>;\n  }\n}\n","// Integration states\nexport const PUBLISHED = 'Published';\nexport const UNPUBLISHED = 'Unpublished';\nexport const PENDING = 'Pending';\nexport const ERROR = 'Error';\n\nexport type IntegrationState =\n  | 'Published'\n  | 'Unpublished'\n  | 'Pending'\n  | 'Error';\n\n// Detailed state log link types\nexport const LOGS = 'LOGS';\nexport const EVENTS = 'EVENTS';\n\nexport type LinkType = 'LOGS' | 'EVENTS';\n","import { Spinner } from 'patternfly-react';\nimport * as React from 'react';\nimport { ProgressWithLink } from '../Shared/ProgressWithLink';\nimport { IntegrationState, PUBLISHED, UNPUBLISHED } from './models';\n\nimport './IntegrationStatusDetail.css';\n\nexport interface IIntegrationStatusDetailProps {\n  targetState: IntegrationState;\n  value?: string;\n  currentStep?: number;\n  totalSteps?: number;\n  logUrl?: string;\n  i18nProgressPending: string;\n  i18nProgressStarting: string;\n  i18nProgressStopping: string;\n  i18nLogUrlText: string;\n}\n\nexport class IntegrationStatusDetail extends React.Component<\n  IIntegrationStatusDetailProps\n> {\n  public render() {\n    let fallbackText = this.props.i18nProgressPending;\n    switch (this.props.targetState) {\n      case PUBLISHED:\n        fallbackText = this.props.i18nProgressStarting;\n        break;\n      case UNPUBLISHED:\n        fallbackText = this.props.i18nProgressStopping;\n        break;\n    }\n    return (\n      <div\n        data-testid=\"integration-status-detail\"\n        className={'integration-status-detail'}\n      >\n        {this.props.value && this.props.currentStep && this.props.totalSteps ? (\n          <ProgressWithLink\n            currentStep={this.props.currentStep}\n            totalSteps={this.props.totalSteps}\n            value={this.props.value}\n            logUrl={this.props.logUrl}\n            i18nLogUrlText={this.props.i18nLogUrlText}\n          />\n        ) : (\n          <>\n            <Spinner loading={true} inline={true} />\n            {fallbackText}\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","import { Text } from '@patternfly/react-core';\nimport { Grid, Icon, ListViewIcon } from 'patternfly-react';\nimport * as React from 'react';\n\nimport './IntegrationStepsHorizontalView.css';\n\nexport interface IIntegrationSteps {\n  name: string;\n  pattern: string;\n}\n\nexport interface IIntegrationStepsHorizontalViewProps {\n  steps: IIntegrationSteps[];\n}\n\nexport class IntegrationStepsHorizontalView extends React.Component<\n  IIntegrationStepsHorizontalViewProps\n> {\n  public render() {\n    return (\n      <div className=\"integration-steps-horizontal-view\">\n        <Grid fluid={true} xs={4}>\n          <Grid.Row className=\"show-grid\">\n            <Grid.Col sm={6} md={4}>\n              {this.props.steps && this.props.steps[0] ? (\n                <>\n                  <ListViewIcon name={'cube'} className=\"step-icon\" />\n                  <span>\n                    <Text>{this.props.steps[0].name}</Text>\n                  </span>\n                </>\n              ) : null}\n            </Grid.Col>\n            {this.props.steps &&\n              this.props.steps.slice(1).map((opt: any, index: any) => (\n                <div key={index}>\n                  <Grid.Col sm={6} md={4}>\n                    <Icon name={'angle-right'} className=\"step-arrow\" />\n                  </Grid.Col>\n                  <Grid.Col xsHidden={true} md={4}>\n                    <span>\n                      <Icon name={'cube'} className=\"step-icon\" />\n                      <Text key={index}>{opt.name}</Text>\n                    </span>\n                  </Grid.Col>\n                </div>\n              ))}\n          </Grid.Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n","import classnames from 'classnames';\nimport * as React from 'react';\nimport { ButtonLink } from '../Layout';\nimport './IntegrationVerticalFlow.css';\n\nexport interface IIntegrationVerticalFlowProps {\n  /**\n   * A render prop that receives the expanded state of the container.\n   * @see [props.expanded]{@link IIntegrationVerticalFlowState#expanded}\n   */\n  children(props: IIntegrationVerticalFlowState): any;\n}\n\nexport interface IIntegrationVerticalFlowState {\n  /**\n   * The container expanded state.\n   */\n  expanded: boolean;\n}\n\n/**\n * A component to render an expandable container meant to be used to show an\n * integration's steps.\n * @see [children]{@link IIntegrationVerticalFlowProps#children}\n */\nexport class IntegrationVerticalFlow extends React.Component<\n  IIntegrationVerticalFlowProps,\n  IIntegrationVerticalFlowState\n> {\n  public static defaultProps = {\n    disabled: false,\n  };\n\n  public state = {\n    expanded: localStorage.getItem('iec-vertical-flow-expanded') === 'y',\n  };\n\n  constructor(props: IIntegrationVerticalFlowProps) {\n    super(props);\n    this.toggleExpanded = this.toggleExpanded.bind(this);\n  }\n\n  public toggleExpanded(): void {\n    const expanded = !this.state.expanded;\n    localStorage.setItem('iec-vertical-flow-expanded', expanded ? 'y' : 'n');\n    this.setState({\n      expanded,\n    });\n  }\n\n  public render() {\n    return (\n      <div\n        className={classnames('integration-vertical-flow', {\n          'is-expanded': this.state.expanded,\n        })}\n      >\n        <div className=\"integration-vertical-flow__body\">\n          {this.props.children(this.state)}\n        </div>\n        <div className=\"integration-vertical-flow__expand\">\n          <ButtonLink onClick={this.toggleExpanded} />\n        </div>\n      </div>\n    );\n  }\n}\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class IntegrationsList extends React.Component<{}> {\n  public render() {\n    return <ListView>{this.props.children}</ListView>;\n  }\n}\n","import { Icon, ListView } from 'patternfly-react';\nimport * as React from 'react';\nimport { IntegrationIcon } from './IntegrationIcon';\nimport { IntegrationStatus } from './IntegrationStatus';\nimport { IntegrationStatusDetail } from './IntegrationStatusDetail';\nimport { IntegrationState } from './models';\n\nexport interface IIntegrationsListItemProps {\n  integrationName: string;\n  currentState: IntegrationState;\n  targetState: IntegrationState;\n  isConfigurationRequired: boolean;\n  monitoringValue?: string;\n  monitoringCurrentStep?: number;\n  monitoringTotalSteps?: number;\n  monitoringLogUrl?: string;\n  startConnectionIcon: string;\n  finishConnectionIcon: string;\n  actions: any;\n  i18nConfigurationRequired: string;\n  i18nError: string;\n  i18nPublished: string;\n  i18nProgressPending: string;\n  i18nProgressStarting: string;\n  i18nProgressStopping: string;\n  i18nUnpublished: string;\n  i18nLogUrlText: string;\n}\n\nexport class IntegrationsListItem extends React.Component<\n  IIntegrationsListItemProps\n> {\n  public render() {\n    return (\n      <ListView.Item\n        actions={this.props.actions}\n        heading={this.props.integrationName}\n        description={\n          this.props.isConfigurationRequired ? (\n            <>\n              <Icon type={'pf'} name={'warning-triangle-o'} />\n              {this.props.i18nConfigurationRequired}\n            </>\n          ) : (\n            ''\n          )\n        }\n        additionalInfo={[\n          <ListView.InfoItem key={1}>\n            {this.props.currentState === 'Pending' ? (\n              <IntegrationStatusDetail\n                targetState={this.props.targetState}\n                value={this.props.monitoringValue}\n                currentStep={this.props.monitoringCurrentStep}\n                totalSteps={this.props.monitoringTotalSteps}\n                logUrl={this.props.monitoringLogUrl}\n                i18nProgressPending={this.props.i18nProgressPending}\n                i18nProgressStarting={this.props.i18nProgressStarting}\n                i18nProgressStopping={this.props.i18nProgressStopping}\n                i18nLogUrlText={this.props.i18nLogUrlText}\n              />\n            ) : (\n              <IntegrationStatus\n                currentState={this.props.currentState}\n                i18nPublished={this.props.i18nPublished}\n                i18nUnpublished={this.props.i18nUnpublished}\n                i18nError={this.props.i18nError}\n              />\n            )}\n          </ListView.InfoItem>,\n        ]}\n        leftContent={\n          <IntegrationIcon\n            startConnectionIcon={this.props.startConnectionIcon}\n            finishConnectionIcon={this.props.finishConnectionIcon}\n          />\n        }\n        stacked={true}\n      />\n    );\n  }\n}\n","import * as H from 'history';\nimport { DropdownKebab } from 'patternfly-react';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ButtonLink } from '../Layout';\n\nexport interface IIntegrationAction {\n  href?: H.LocationDescriptor;\n  onClick?: (e: React.MouseEvent<any>) => any;\n  label: string | JSX.Element;\n}\n\nexport interface IIntegrationsListItemActionsProps {\n  integrationId: string;\n  actions: IIntegrationAction[];\n  detailsHref?: H.LocationDescriptor;\n}\n\nexport class IntegrationsListItemActions extends React.Component<\n  IIntegrationsListItemActionsProps\n> {\n  public render() {\n    return (\n      <>\n        <ButtonLink href={this.props.detailsHref} as={'primary'}>\n          View\n        </ButtonLink>\n        <DropdownKebab\n          id={`integration-${this.props.integrationId}-action-menu`}\n          pullRight={true}\n        >\n          {this.props.actions.map((a, idx) => (\n            <li role={'presentation'} key={idx}>\n              {a.href ? (\n                <Link\n                  to={a.href}\n                  onClick={a.onClick}\n                  role={'menuitem'}\n                  tabIndex={idx + 1}\n                >\n                  {a.label}\n                </Link>\n              ) : (\n                <a\n                  href={'javascript:void(0)'}\n                  onClick={a.onClick}\n                  role={'menuitem'}\n                  tabIndex={idx + 1}\n                >\n                  {a.label}\n                </a>\n              )}\n            </li>\n          ))}\n        </DropdownKebab>\n      </>\n    );\n  }\n}\n","import * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nfunction getRandom(min: number, max: number) {\n  return Math.random() * (max - min) + min;\n}\n\nconst ItemSkeleton = () => (\n  <ContentLoader\n    height={80}\n    width={500}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={{\n      height: 80,\n      width: '100%',\n    }}\n  >\n    <circle cx=\"35\" cy=\"40\" r=\"35\" />\n    <circle cx=\"115\" cy=\"40\" r=\"35\" />\n    <rect\n      x=\"185\"\n      y=\"20\"\n      rx=\"5\"\n      ry=\"5\"\n      width={400 * getRandom(0.6, 1)}\n      height=\"18\"\n    />\n    <rect\n      x=\"185\"\n      y=\"55\"\n      rx=\"5\"\n      ry=\"5\"\n      width={200 * getRandom(0.6, 1)}\n      height=\"15\"\n    />\n  </ContentLoader>\n);\n\nexport class IntegrationsListSkeleton extends React.PureComponent {\n  public render() {\n    return (\n      <>\n        <div\n          className={'list-group-item'}\n          data-testid=\"integration-list-skeleton\"\n        >\n          <div>\n            <ItemSkeleton />\n          </div>\n        </div>\n        <div\n          className={'list-group-item'}\n          data-testid=\"integration-list-skeleton\"\n        >\n          <div>\n            <ItemSkeleton />\n          </div>\n        </div>\n        <div\n          className={'list-group-item'}\n          data-testid=\"integration-list-skeleton\"\n        >\n          <div>\n            <ItemSkeleton />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import { Text } from '@patternfly/react-core';\nimport { Card, Label } from 'patternfly-react';\nimport * as React from 'react';\n\nimport './DvConnectionCard.css';\n\nexport enum ConnectionStatus {\n  ACTIVE = 'ACTIVE',\n  INACTIVE = 'INACTIVE',\n}\n\nexport interface IDvConnectionCardProps {\n  name: string;\n  description: string;\n  dvStatus: string;\n  icon: string;\n  selected: boolean;\n  onSelectionChanged: (connName: string, isSelected: boolean) => void;\n}\nexport interface IDvConnectionCardState {\n  isSelected: boolean;\n}\n\nexport class DvConnectionCard extends React.PureComponent<\n  IDvConnectionCardProps,\n  IDvConnectionCardState\n> {\n  public constructor(props: IDvConnectionCardProps) {\n    super(props);\n    this.state = {\n      isSelected: props.selected, // initial item selection\n    };\n    this.toggleSelected = this.toggleSelected.bind(this);\n  }\n\n  public toggleSelected = (connName: string) => (event: any) => {\n    // User can only select active connections\n    if (this.props.dvStatus === ConnectionStatus.ACTIVE) {\n      this.setState({\n        isSelected: !this.state.isSelected,\n      });\n      this.props.onSelectionChanged(connName, !this.state.isSelected);\n    }\n  };\n\n  public render() {\n    return (\n      <div\n        className={'dv-connection-card'}\n        onClick={this.toggleSelected(this.props.name)}\n      >\n        <Card matchHeight={true} accented={this.state.isSelected}>\n          <Card.Body>\n            <div className=\"dv-connection-card__status\">\n              <Label\n                type={\n                  this.props.dvStatus === ConnectionStatus.ACTIVE\n                    ? 'success'\n                    : 'danger'\n                }\n              >\n                {this.props.dvStatus}\n              </Label>\n            </div>\n            <div className={'dv-connection-card__content'}>\n              <div className=\"dv-connection-card__icon\">\n                <img src={this.props.icon} alt={this.props.name} width={46} />\n              </div>\n              <div\n                className=\"dv-connection-card__title h2\"\n                data-testid=\"dv-connection-card-title\"\n              >\n                {this.props.name}\n              </div>\n              <Text className=\"dv-connection-card__description\">\n                {this.props.description}\n              </Text>\n            </div>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n}\n","import * as H from 'history';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../Shared';\n\nexport interface IIntegrationsListViewProps extends IListViewToolbarProps {\n  linkToManageCiCd: H.LocationDescriptor;\n  linkToIntegrationImport: H.LocationDescriptor;\n  linkToIntegrationCreation: H.LocationDescriptor;\n  i18nManageCiCd: string;\n  i18nImport: string;\n  i18nLinkCreateConnection: string;\n}\n\nexport class IntegrationsListView extends React.Component<\n  IIntegrationsListViewProps\n> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <ButtonLink href={this.props.linkToManageCiCd}>\n              {this.props.i18nManageCiCd}\n            </ButtonLink>\n            <ButtonLink href={this.props.linkToIntegrationImport}>\n              {this.props.i18nImport}\n            </ButtonLink>\n            <ButtonLink\n              href={this.props.linkToIntegrationCreation}\n              as={'primary'}\n            >\n              {this.props.i18nLinkCreateConnection}\n            </ButtonLink>\n          </div>\n        </ListViewToolbar>\n        <Container>{this.props.children}</Container>\n      </>\n    );\n  }\n}\n","import { Card, MenuItem } from 'patternfly-react';\nimport * as React from 'react';\n\nimport './TopIntegrations.css';\n\nexport interface ITopIntegrationsProps {\n  i18nLast30Days: string;\n  i18nLast60Days: string;\n  i18nLast90Days: string;\n  i18nTitle: string;\n}\n\nexport class TopIntegrationsCard extends React.Component<\n  ITopIntegrationsProps\n> {\n  public render() {\n    return (\n      <Card accented={false} className={'TopIntegrationsCard'}>\n        <Card.Heading>\n          <Card.DropdownButton\n            id=\"cardDropdownButton1\"\n            title={this.props.i18nLast30Days}\n          >\n            <MenuItem eventKey=\"1\" active={true}>\n              {this.props.i18nLast30Days}\n            </MenuItem>\n            <MenuItem eventKey=\"2\">{this.props.i18nLast60Days}</MenuItem>\n            <MenuItem eventKey=\"3\">{this.props.i18nLast90Days}</MenuItem>\n          </Card.DropdownButton>\n          <Card.Title>{this.props.i18nTitle}</Card.Title>\n        </Card.Heading>\n        <Card.Body>{this.props.children}</Card.Body>\n      </Card>\n    );\n  }\n}\n","import { Card } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IUptimeMetricProps {\n  start: number;\n  i18nTitle: string;\n}\n\nexport class UptimeMetric extends React.PureComponent<IUptimeMetricProps> {\n  public render() {\n    const startAsDate = new Date(this.props.start);\n    const startAsHuman = startAsDate.toLocaleString();\n    return (\n      <Card accented={true} aggregated={true} matchHeight={true}>\n        <Card.Title className={'text-left'}>\n          <small className={'pull-right'}>since {startAsHuman}</small>\n          <div>{this.props.i18nTitle}</div>\n        </Card.Title>\n        <Card.Body>TODO</Card.Body>\n      </Card>\n    );\n  }\n}\n","import {\n  Button,\n  DropdownKebab,\n  ListViewIcon,\n  ListViewItem,\n  MenuItem,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n} from '../../../Shared';\n\nexport interface IViewListItemProps {\n  viewDescription: string;\n  viewIcon?: string;\n  viewName: string;\n  i18nCancelText: string;\n  i18nDelete: string;\n  i18nDeleteTip?: string;\n  i18nDeleteModalMessage: string;\n  i18nDeleteModalTitle: string;\n  i18nEdit: string;\n  i18nEditTip?: string;\n  onDelete: (viewName: string) => void;\n  onEdit: (viewName: string) => void;\n}\n\nexport interface IViewListItemState {\n  showDeleteDialog: boolean;\n}\n\nexport class ViewListItem extends React.Component<\n  IViewListItemProps,\n  IViewListItemState\n> {\n  public constructor(props: IViewListItemProps) {\n    super(props);\n    this.state = {\n      showDeleteDialog: false, // initial visibility of delete dialog\n    };\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.showDeleteDialog = this.showDeleteDialog.bind(this);\n  }\n\n  public render() {\n    return (\n      <>\n        <ConfirmationDialog\n          buttonStyle={ConfirmationButtonStyle.DANGER}\n          i18nCancelButtonText={this.props.i18nCancelText}\n          i18nConfirmButtonText={this.props.i18nDelete}\n          i18nConfirmationMessage={this.props.i18nDeleteModalMessage}\n          i18nTitle={this.props.i18nDeleteModalTitle}\n          icon={ConfirmationIconType.DANGER}\n          showDialog={this.state.showDeleteDialog}\n          onCancel={this.handleCancel}\n          onConfirm={this.handleDelete}\n        />\n        <ListViewItem\n          actions={\n            <div className=\"form-group\">\n              <OverlayTrigger overlay={this.getEditTooltip()} placement=\"top\">\n                <Button bsStyle=\"default\" onClick={this.handleEdit}>\n                  {this.props.i18nEdit}\n                </Button>\n              </OverlayTrigger>\n              <DropdownKebab\n                id={`view-${this.props.viewName}-action-menu`}\n                pullRight={true}\n              >\n                <OverlayTrigger\n                  overlay={this.getDeleteTooltip()}\n                  placement=\"left\"\n                >\n                  <MenuItem onClick={this.showDeleteDialog}>\n                    {this.props.i18nDelete}\n                  </MenuItem>\n                </OverlayTrigger>\n              </DropdownKebab>\n            </div>\n          }\n          heading={this.props.viewName}\n          description={\n            this.props.viewDescription ? this.props.viewDescription : ''\n          }\n          hideCloseIcon={true}\n          leftContent={\n            this.props.viewIcon ? (\n              <div className=\"blank-slate-pf-icon\">\n                <img\n                  src={this.props.viewIcon}\n                  alt={this.props.viewName}\n                  width={46}\n                />\n              </div>\n            ) : (\n              <ListViewIcon name={'cube'} />\n            )\n          }\n          stacked={false}\n        />\n      </>\n    );\n  }\n\n  private getDeleteTooltip() {\n    return (\n      <Tooltip id=\"deleteTip\">\n        {this.props.i18nDeleteTip\n          ? this.props.i18nDeleteTip\n          : this.props.i18nDelete}\n      </Tooltip>\n    );\n  }\n\n  private getEditTooltip() {\n    return (\n      <Tooltip id=\"editTip\">\n        {this.props.i18nEditTip ? this.props.i18nEditTip : this.props.i18nEdit}\n      </Tooltip>\n    );\n  }\n\n  private handleCancel() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n  }\n\n  private handleEdit = () => {\n    if (this.props.viewName) {\n      this.props.onEdit(this.props.viewName);\n    }\n  };\n\n  private showDeleteDialog() {\n    this.setState({\n      showDeleteDialog: true,\n    });\n  }\n\n  private handleDelete() {\n    this.setState({\n      showDeleteDialog: false, // hide dialog\n    });\n\n    // TODO: disable components while delete is processing\n    if (this.props.viewName) {\n      this.props.onDelete(this.props.viewName);\n    }\n  }\n}\n","import * as H from 'history';\nimport {\n  EmptyState,\n  ListView,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../../../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../../../Shared';\nimport './ViewList.css';\n\nexport interface IViewsListProps extends IListViewToolbarProps {\n  hasListData: boolean;\n  i18nEmptyStateInfo: string;\n  i18nEmptyStateTitle: string;\n  i18nImportViews: string;\n  i18nImportViewsTip: string;\n  linkCreateViewHRef: H.LocationDescriptor;\n  linkImportViewsHRef: H.LocationDescriptor;\n  i18nCreateViewTip?: string;\n  i18nCreateView: string;\n  i18nDescription: string;\n  i18nName: string;\n  i18nNameFilterPlaceholder: string;\n  onImportView: (name: string) => void;\n}\n\nexport class ViewList extends React.Component<IViewsListProps> {\n  public constructor(props: IViewsListProps) {\n    super(props);\n  }\n\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <OverlayTrigger\n              overlay={this.getImportViewsTooltip()}\n              placement=\"top\"\n            >\n              <ButtonLink href={this.props.linkImportViewsHRef} as={'default'}>\n                {this.props.i18nImportViews}\n              </ButtonLink>\n            </OverlayTrigger>\n            <OverlayTrigger\n              overlay={this.getCreateViewTooltip()}\n              placement=\"top\"\n            >\n              <ButtonLink href={this.props.linkCreateViewHRef} as={'primary'}>\n                {this.props.i18nCreateView}\n              </ButtonLink>\n            </OverlayTrigger>\n          </div>\n        </ListViewToolbar>\n        {this.props.hasListData ? (\n          <ListView>{this.props.children}</ListView>\n        ) : (\n          <EmptyState>\n            <EmptyState.Icon />\n            <EmptyState.Title>\n              {this.props.i18nEmptyStateTitle}\n            </EmptyState.Title>\n            <EmptyState.Info>{this.props.i18nEmptyStateInfo}</EmptyState.Info>\n            <EmptyState.Action>\n              <OverlayTrigger\n                overlay={this.getImportViewsTooltip()}\n                placement=\"top\"\n              >\n                <ButtonLink\n                  href={this.props.linkImportViewsHRef}\n                  as={'default'}\n                  className={'view-list-empty-state-import'}\n                >\n                  {this.props.i18nImportViews}\n                </ButtonLink>\n              </OverlayTrigger>\n              <OverlayTrigger\n                overlay={this.getCreateViewTooltip()}\n                placement=\"top\"\n              >\n                <ButtonLink href={this.props.linkCreateViewHRef} as={'primary'}>\n                  {this.props.i18nCreateView}\n                </ButtonLink>\n              </OverlayTrigger>\n            </EmptyState.Action>\n          </EmptyState>\n        )}\n      </>\n    );\n  }\n\n  private getCreateViewTooltip() {\n    return (\n      <Tooltip id=\"createTip\">\n        {this.props.i18nCreateViewTip\n          ? this.props.i18nCreateViewTip\n          : this.props.i18nCreateView}\n      </Tooltip>\n    );\n  }\n\n  private getImportViewsTooltip() {\n    return (\n      <Tooltip id=\"importViewsTip\">\n        {this.props.i18nImportViewsTip\n          ? this.props.i18nImportViewsTip\n          : this.props.i18nImportViews}\n      </Tooltip>\n    );\n  }\n}\n","import { CardGrid } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class DvConnectionsGrid extends React.Component {\n  public render() {\n    return (\n      <CardGrid fluid={true} matchHeight={true}>\n        <CardGrid.Row>{this.props.children}</CardGrid.Row>\n      </CardGrid>\n    );\n  }\n}\n","import { CardGrid } from 'patternfly-react';\nimport * as React from 'react';\n\nexport class DvConnectionsGridCell extends React.Component {\n  public render() {\n    return (\n      <CardGrid.Col xs={6} md={3}>\n        {this.props.children}\n      </CardGrid.Col>\n    );\n  }\n}\n","import * as H from 'history';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../../Layout';\nimport { IListViewToolbarProps, ListViewToolbar } from '../../Shared';\n\nexport interface IDvConnectionsListViewProps extends IListViewToolbarProps {\n  linkToConnectionCreate: H.LocationDescriptor;\n  i18nLinkCreateConnection: string;\n}\n\nexport class DvConnectionsListView extends React.Component<\n  IDvConnectionsListViewProps\n> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <ButtonLink href={this.props.linkToConnectionCreate} as={'primary'}>\n              {this.props.i18nLinkCreateConnection}\n            </ButtonLink>\n          </div>\n        </ListViewToolbar>\n        <Container>{this.props.children}</Container>\n      </>\n    );\n  }\n}\n","import { Label, ListViewInfoItem, ListViewItem } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IViewInfoListItemProps {\n  name: string;\n  description?: string;\n  connectionName: string;\n  nodePath: string[];\n  selected: boolean;\n  i18nUpdate: string;\n  isUpdateView: boolean;\n  onSelectionChanged: (name: string, selected: boolean) => void;\n}\n\nexport interface IViewInfoListItemState {\n  itemSelected: boolean;\n}\n\nexport class ViewInfoListItem extends React.Component<\n  IViewInfoListItemProps,\n  IViewInfoListItemState\n> {\n  public constructor(props: IViewInfoListItemProps) {\n    super(props);\n    this.state = {\n      itemSelected: props.selected, // initial item selection\n    };\n    this.handleCheckboxToggle = this.handleCheckboxToggle.bind(this);\n  }\n\n  public temp() {\n    const tDescription = this.props.description;\n    const tConnectionName = this.props.connectionName;\n    return tDescription + tConnectionName;\n  }\n\n  public getNodePathStr() {\n    let path = '';\n    for (const segment of this.props.nodePath) {\n      path += '/' + segment;\n    }\n    return path;\n  }\n\n  public handleCheckboxToggle = (viewName: string) => (event: any) => {\n    this.setState({\n      itemSelected: !this.state.itemSelected,\n    });\n    this.props.onSelectionChanged(viewName, !this.state.itemSelected);\n  };\n\n  public render() {\n    return (\n      <ListViewItem\n        heading={this.props.name}\n        description={this.getNodePathStr()}\n        checkboxInput={\n          <input\n            type=\"checkbox\"\n            value=\"\"\n            defaultChecked={this.props.selected}\n            onChange={this.handleCheckboxToggle(this.props.name)}\n          />\n        }\n        additionalInfo={[\n          <ListViewInfoItem key={1}>\n            {this.props.isUpdateView === true ? (\n              <Label type=\"warning\">{this.props.i18nUpdate}</Label>\n            ) : (\n              ''\n            )}\n          </ListViewInfoItem>,\n        ]}\n        hideCloseIcon={true}\n        stacked={false}\n      />\n    );\n  }\n}\n","import { EmptyState, ListView } from 'patternfly-react';\nimport * as React from 'react';\nimport { IListViewToolbarProps, ListViewToolbar } from '../../../Shared';\n\nexport interface IViewInfoListProps extends IListViewToolbarProps {\n  i18nEmptyStateInfo: string;\n  i18nEmptyStateTitle: string;\n  i18nName: string;\n  i18nNameFilterPlaceholder: string;\n}\n\nexport class ViewInfoList extends React.Component<IViewInfoListProps> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div />\n        </ListViewToolbar>\n        {this.props.children ? (\n          <ListView>{this.props.children}</ListView>\n        ) : (\n          <EmptyState>\n            <EmptyState.Icon />\n            <EmptyState.Title>\n              {this.props.i18nEmptyStateTitle}\n            </EmptyState.Title>\n            <EmptyState.Info>{this.props.i18nEmptyStateInfo}</EmptyState.Info>\n          </EmptyState>\n        )}\n      </>\n    );\n  }\n}\n","import * as H from 'history';\nimport {\n  //  Button,\n  DropdownKebab,\n  ListView,\n  ListViewIcon,\n  ListViewItem,\n  MenuItem,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport {\n  VirtualizationPublishStatus,\n  VirtualizationPublishStatusDetail,\n} from '../';\nimport { ButtonLink } from '../../Layout';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n} from '../../Shared';\nimport {\n  BUILDING,\n  CONFIGURING,\n  DEPLOYING,\n  RUNNING,\n  SUBMITTED,\n  VirtualizationPublishState,\n} from './models';\n\nexport interface IVirtualizationListItemProps {\n  currentPublishedState: VirtualizationPublishState;\n  detailsPageLink: H.LocationDescriptor;\n  i18nCancelText: string;\n  i18nDelete: string;\n  i18nDeleteModalMessage: string;\n  i18nDeleteModalTitle: string;\n  i18nDraft: string;\n  i18nError: string;\n  i18nEdit: string;\n  i18nEditTip?: string;\n  i18nExport: string;\n  i18nPublish: string;\n  i18nPublished: string;\n  i18nPublishLogUrlText: string;\n  i18nPublishInProgress: string;\n  i18nUnpublish: string;\n  i18nUnpublishModalMessage: string;\n  i18nUnpublishModalTitle: string;\n  icon?: string;\n  onDelete: (virtualizationName: string) => void;\n  onExport: (virtualizationName: string) => void;\n  onPublish: (virtualizationName: string) => void;\n  onUnpublish: (virtualizationName: string) => void;\n  publishingCurrentStep?: number;\n  publishingLogUrl?: string;\n  publishingTotalSteps?: number;\n  publishingStepText?: string;\n  serviceVdbName: string;\n  virtualizationName: string;\n  virtualizationDescription: string;\n}\n\nexport interface IVirtualizationListItemState {\n  showConfirmationDialog: boolean;\n}\n\nexport class VirtualizationListItem extends React.Component<\n  IVirtualizationListItemProps,\n  IVirtualizationListItemState\n> {\n  public constructor(props: IVirtualizationListItemProps) {\n    super(props);\n    this.state = {\n      showConfirmationDialog: false, // initial visibility of confirmation dialog\n    };\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleExport = this.handleExport.bind(this);\n    this.handleUnpublish = this.handleUnpublish.bind(this);\n    this.handlePublish = this.handlePublish.bind(this);\n    this.showConfirmationDialog = this.showConfirmationDialog.bind(this);\n  }\n\n  public getEditTooltip() {\n    return (\n      <Tooltip id=\"detailsTip\">\n        {this.props.i18nEditTip ? this.props.i18nEditTip : this.props.i18nEdit}\n      </Tooltip>\n    );\n  }\n\n  public handleCancel() {\n    this.setState({\n      showConfirmationDialog: false, // hide dialog\n    });\n  }\n\n  public handleDelete() {\n    this.setState({\n      showConfirmationDialog: false, // hide dialog\n    });\n\n    // TODO: disable components while delete is processing\n    if (this.props.virtualizationName) {\n      this.props.onDelete(this.props.virtualizationName);\n    }\n  }\n\n  public handleExport() {\n    if (this.props.virtualizationName) {\n      this.props.onExport(this.props.virtualizationName);\n    }\n  }\n\n  public handlePublish() {\n    if (this.props.virtualizationName) {\n      this.props.onPublish(this.props.virtualizationName);\n    }\n  }\n\n  public handleUnpublish() {\n    this.setState({\n      showConfirmationDialog: false, // hide dialog\n    });\n\n    if (this.props.serviceVdbName) {\n      this.props.onUnpublish(this.props.serviceVdbName);\n    }\n  }\n\n  public showConfirmationDialog() {\n    this.setState({\n      showConfirmationDialog: true,\n    });\n  }\n\n  public handleAcceptConfirmation() {\n    const isPublished =\n      this.props.currentPublishedState === RUNNING ? true : false;\n    if (isPublished) {\n      this.handleUnpublish();\n    } else {\n      this.handleDelete();\n    }\n  }\n\n  public render() {\n    // Determine published state\n    const isPublished =\n      this.props.currentPublishedState === RUNNING ? true : false;\n    const publishInProgress =\n      this.props.currentPublishedState === BUILDING ||\n      this.props.currentPublishedState === CONFIGURING ||\n      this.props.currentPublishedState === DEPLOYING ||\n      this.props.currentPublishedState === SUBMITTED\n        ? true\n        : false;\n\n    return (\n      <>\n        <ConfirmationDialog\n          buttonStyle={\n            isPublished\n              ? ConfirmationButtonStyle.WARNING\n              : ConfirmationButtonStyle.DANGER\n          }\n          i18nCancelButtonText={this.props.i18nCancelText}\n          i18nConfirmButtonText={\n            isPublished ? this.props.i18nUnpublish : this.props.i18nDelete\n          }\n          i18nConfirmationMessage={\n            isPublished\n              ? this.props.i18nUnpublishModalMessage\n              : this.props.i18nDeleteModalMessage\n          }\n          i18nTitle={\n            isPublished\n              ? this.props.i18nUnpublishModalTitle\n              : this.props.i18nDeleteModalTitle\n          }\n          icon={\n            isPublished\n              ? ConfirmationIconType.WARNING\n              : ConfirmationIconType.DANGER\n          }\n          showDialog={this.state.showConfirmationDialog}\n          onCancel={this.handleCancel}\n          onConfirm={this.handleDelete}\n        />\n        <ListViewItem\n          actions={\n            <div className=\"form-group\">\n              {publishInProgress ? (\n                <VirtualizationPublishStatusDetail\n                  logUrl={this.props.publishingLogUrl}\n                  stepText={this.props.publishingStepText}\n                  currentStep={this.props.publishingCurrentStep}\n                  totalSteps={this.props.publishingTotalSteps}\n                  i18nPublishInProgress={this.props.i18nPublishInProgress}\n                  i18nLogUrlText={this.props.i18nPublishLogUrlText}\n                />\n              ) : (\n                <VirtualizationPublishStatus\n                  currentState={this.props.currentPublishedState}\n                  i18nPublished={this.props.i18nPublished}\n                  i18nUnpublished={this.props.i18nDraft}\n                  i18nError={this.props.i18nError}\n                />\n              )}\n              <OverlayTrigger overlay={this.getEditTooltip()} placement=\"top\">\n                <ButtonLink href={this.props.detailsPageLink} as={'primary'}>\n                  {this.props.i18nEdit}\n                </ButtonLink>\n              </OverlayTrigger>\n              <DropdownKebab\n                id={`virtualization-${\n                  this.props.virtualizationName\n                }-action-menu`}\n                pullRight={true}\n              >\n                <MenuItem onClick={this.showConfirmationDialog}>\n                  {this.props.i18nDelete}\n                </MenuItem>\n                <MenuItem onClick={this.handleExport}>\n                  {this.props.i18nExport}\n                </MenuItem>\n                <MenuItem\n                  onClick={\n                    isPublished || publishInProgress\n                      ? this.handleUnpublish\n                      : this.handlePublish\n                  }\n                >\n                  {isPublished || publishInProgress\n                    ? this.props.i18nUnpublish\n                    : this.props.i18nPublish}\n                </MenuItem>\n              </DropdownKebab>\n            </div>\n          }\n          heading={this.props.virtualizationName}\n          description={\n            this.props.virtualizationDescription\n              ? this.props.virtualizationDescription\n              : ''\n          }\n          hideCloseIcon={true}\n          leftContent={\n            this.props.icon ? (\n              <div className=\"blank-slate-pf-icon\">\n                <img\n                  src={this.props.icon}\n                  alt={this.props.virtualizationName}\n                  width={46}\n                />\n              </div>\n            ) : (\n              <ListViewIcon name={'database'} />\n            )\n          }\n          stacked={true}\n        >\n          {this.props.children ? (\n            <ListView>{this.props.children}</ListView>\n          ) : null}\n        </ListViewItem>\n      </>\n    );\n  }\n}\n","export const NOTFOUND = 'NOTFOUND';\nexport const SUBMITTED = 'SUBMITTED';\nexport const CONFIGURING = 'CONFIGURING';\nexport const BUILDING = 'BUILDING';\nexport const DEPLOYING = 'DEPLOYING';\nexport const RUNNING = 'RUNNING';\nexport const FAILED = 'FAILED';\nexport const CANCELLED = 'CANCELLED';\n\nexport type VirtualizationPublishState =\n  | 'NOTFOUND'\n  | 'SUBMITTED'\n  | 'CONFIGURING'\n  | 'BUILDING'\n  | 'DEPLOYING'\n  | 'RUNNING'\n  | 'FAILED'\n  | 'CANCELLED';\n\n// Detailed state log link types\nexport const LOGS = 'LOGS';\nexport const EVENTS = 'EVENTS';\n\nexport type LinkType = 'LOGS' | 'EVENTS';\n","import * as H from 'history';\nimport {\n  Button,\n  EmptyState,\n  ListView,\n  OverlayTrigger,\n  Tooltip,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../../Layout';\nimport {\n  IListViewToolbarProps,\n  ListViewToolbar,\n  SimplePageHeader,\n} from '../../Shared';\n\nexport interface IVirtualizationListProps extends IListViewToolbarProps {\n  hasListData: boolean;\n  i18nCreateDataVirtualization: string;\n  i18nCreateDataVirtualizationTip?: string;\n  i18nDescription: string;\n  i18nEmptyStateInfo: string;\n  i18nEmptyStateTitle: string;\n  i18nImport: string;\n  i18nImportTip: string;\n  i18nLinkCreateVirtualization: string;\n  i18nLinkCreateVirtualizationTip?: string;\n  i18nName: string;\n  i18nNameFilterPlaceholder: string;\n  i18nTitle: string;\n  linkCreateHRef: H.LocationDescriptor;\n  onImport: (name: string) => void;\n}\n\nexport class VirtualizationList extends React.Component<\n  IVirtualizationListProps\n> {\n  public constructor(props: IVirtualizationListProps) {\n    super(props);\n    this.handleImport = this.handleImport.bind(this);\n  }\n\n  public getCreateVirtualizationTooltip() {\n    return (\n      <Tooltip id=\"createTip\">\n        {this.props.i18nLinkCreateVirtualizationTip\n          ? this.props.i18nLinkCreateVirtualizationTip\n          : this.props.i18nLinkCreateVirtualization}\n      </Tooltip>\n    );\n  }\n\n  public getImportVirtualizationTooltip() {\n    return (\n      <Tooltip id=\"importTip\">\n        {this.props.i18nImportTip\n          ? this.props.i18nImportTip\n          : this.props.i18nImport}\n      </Tooltip>\n    );\n  }\n\n  public handleImport() {\n    this.props.onImport('');\n  }\n\n  public render() {\n    return (\n      <>\n        <SimplePageHeader\n          className=\"container-fluid pf-u-my-md\"\n          i18nTitle={this.props.i18nTitle}\n          i18nDescription={this.props.i18nDescription}\n        />\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <OverlayTrigger\n              overlay={this.getImportVirtualizationTooltip()}\n              placement=\"top\"\n            >\n              <Button\n                bsStyle=\"default\"\n                to={this.props.i18nImport}\n                onClick={this.handleImport}\n              >\n                {this.props.i18nImport}\n              </Button>\n            </OverlayTrigger>\n            <OverlayTrigger\n              overlay={this.getCreateVirtualizationTooltip()}\n              placement=\"top\"\n            >\n              <ButtonLink href={this.props.linkCreateHRef} as={'primary'}>\n                {this.props.i18nLinkCreateVirtualization}\n              </ButtonLink>\n            </OverlayTrigger>\n          </div>\n        </ListViewToolbar>\n        {this.props.hasListData ? (\n          <ListView>{this.props.children}</ListView>\n        ) : (\n          <EmptyState>\n            <EmptyState.Icon />\n            <EmptyState.Title>\n              {this.props.i18nEmptyStateTitle}\n            </EmptyState.Title>\n            <EmptyState.Info>{this.props.i18nEmptyStateInfo}</EmptyState.Info>\n            <EmptyState.Action>\n              <OverlayTrigger\n                overlay={this.getCreateVirtualizationTooltip()}\n                placement=\"top\"\n              >\n                <ButtonLink href={this.props.linkCreateHRef} as={'primary'}>\n                  {this.props.i18nLinkCreateVirtualization}\n                </ButtonLink>\n              </OverlayTrigger>\n            </EmptyState.Action>\n          </EmptyState>\n        )}\n      </>\n    );\n  }\n}\n","import { Label } from 'patternfly-react';\nimport * as React from 'react';\nimport {\n  BUILDING,\n  CANCELLED,\n  CONFIGURING,\n  DEPLOYING,\n  FAILED,\n  NOTFOUND,\n  RUNNING,\n  SUBMITTED,\n  VirtualizationPublishState,\n} from './models';\nimport './VirtualizationPublishStatus.css';\n\nexport interface IVirtualizationPublishStatusProps {\n  currentState?: VirtualizationPublishState;\n  i18nPublished: string;\n  i18nUnpublished: string;\n  i18nError: string;\n}\n\nexport class VirtualizationPublishStatus extends React.Component<\n  IVirtualizationPublishStatusProps\n> {\n  public render() {\n    const labelType =\n      this.props.currentState === FAILED\n        ? 'danger'\n        : this.props.currentState === RUNNING\n        ? 'primary'\n        : 'default';\n    let label = NOTFOUND; // default to not found\n    switch (this.props.currentState) {\n      case RUNNING:\n        label = this.props.i18nPublished;\n        break;\n      case CANCELLED:\n      case NOTFOUND:\n        label = this.props.i18nUnpublished;\n        break;\n      case FAILED:\n        label = this.props.i18nError;\n        break;\n      case SUBMITTED:\n      case CONFIGURING:\n      case BUILDING:\n        label = DEPLOYING;\n        break;\n    }\n    return (\n      <Label className={'virtualization-publish-status-label'} type={labelType}>\n        {label}\n      </Label>\n    );\n  }\n}\n","import { Spinner } from 'patternfly-react';\nimport * as React from 'react';\nimport { ProgressWithLink } from '../../Shared';\n\nimport './VirtualizationPublishStatusDetail.css';\n\nexport interface IVirtualizationPublishStatusDetailProps {\n  currentStep?: number;\n  totalSteps?: number;\n  stepText?: string;\n  logUrl?: string;\n  i18nPublishInProgress: string;\n  i18nLogUrlText: string;\n}\n\nexport class VirtualizationPublishStatusDetail extends React.Component<\n  IVirtualizationPublishStatusDetailProps\n> {\n  public render() {\n    return (\n      <div\n        data-testid=\"virtualization-publish-status-detail\"\n        className={'virtualization-publish-status-detail'}\n      >\n        {this.props.stepText &&\n        this.props.currentStep &&\n        this.props.totalSteps ? (\n          <ProgressWithLink\n            currentStep={this.props.currentStep}\n            totalSteps={this.props.totalSteps}\n            value={this.props.stepText}\n            logUrl={this.props.logUrl}\n            i18nLogUrlText={this.props.i18nLogUrlText}\n          />\n        ) : (\n          <>\n            <Spinner loading={true} inline={true} />\n            {this.props.i18nPublishInProgress}\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport classnames from 'classnames';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { ButtonLink, Loader } from '../Layout';\n\n/**\n * @param header - a PatternFly Wizard Steps component.\n * @param sidebar - the sidebar container takes the size of its content. If no\n * sidebar is defined, a layout with just the header, the footer and the body\n * will be shown.\n * @param content - the main content of the wizard. In case of overflow, only\n * the body will scroll.\n * @param onCancel - if passed, the Cancel button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onBack - if passed, the Back button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onNext - if passed, the Next button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param cancelHref - if passed, the Cancel button will be render as a `Link`\n * using this as its `to` parameter.\n * @param backHref - if passed, the Back button will be render as a `Link`\n * using this as its `to` parameter.\n * @param nextHref - if passed, the Next button will be render as a `Link`\n * using this as its `to` parameter.\n * @param isNextLoading - if set to true, a `Loading` component will be shown\n * inside the Next button before its label. The button will also be disabled.\n * @param isNextDisabled - if set to true, the Next button will be disabled.\n * @param isLastStep - if set to true, it changes the Next button label to\n * 'Done'.\n * @param extraButtons - buttons to add between the cancel and the back/next\n */\nexport interface IConnectionCreatorProps {\n  header: React.ReactNode;\n  content: React.ReactNode;\n  onCancel?: (e: React.MouseEvent<any>) => void;\n  onBack?: (e: React.MouseEvent<any>) => void;\n  onNext?: (e: React.MouseEvent<any>) => void;\n  cancelHref?: H.LocationDescriptor;\n  backHref?: H.LocationDescriptor;\n  nextHref?: H.LocationDescriptor;\n  isNextDisabled?: boolean;\n  isNextLoading?: boolean;\n  isLastStep?: boolean;\n  extraButtons?: React.ReactNode;\n}\n\n/**\n * Provides the layout for the integration editor. It uses the PatternFly Wizard\n * component under the hood.\n * The footer is pre-defined and follows the PF Wizard pattern, with\n * Cancel/Previous/Next buttons.\n *\n * @todo in the CSS we use hardcoded values for the heights of various\n * elements of the page to be able to size the element to take all the available\n * height and show the right scrollbars.\n * We should really find a smarter way to handle this.\n */\nexport const ConnectionCreatorLayout: React.FunctionComponent<\n  IConnectionCreatorProps\n> = ({\n  header,\n  content,\n  onCancel,\n  onBack,\n  onNext,\n  cancelHref,\n  backHref,\n  nextHref,\n  isNextLoading,\n  isNextDisabled,\n  isLastStep = false,\n  extraButtons,\n}: IConnectionCreatorProps) => {\n  return (\n    <div\n      className={classnames(\n        'wizard-pf-body integration-editor-layout syn-scrollable',\n        {\n          'has-footer': true,\n        }\n      )}\n    >\n      {header}\n      <div className=\"wizard-pf-row integration-editor-layout__body syn-scrollable--body\">\n        <div\n          className={\n            'wizard-pf-main cards-pf integration-editor-layout__contentWrapper'\n          }\n        >\n          <div className=\"integration-editor-layout__content\">{content}</div>\n        </div>\n      </div>\n      <div className=\"wizard-pf-footer integration-editor-layout__footer\">\n        <ButtonLink\n          onClick={onBack}\n          href={backHref}\n          className={'wizard-pf-back'}\n        >\n          <i className=\"fa fa-angle-left\" /> Back\n        </ButtonLink>\n        {extraButtons && (\n          <div className={'wizard-pf-extrabuttons'}>{extraButtons}</div>\n        )}\n        <ButtonLink\n          onClick={onNext}\n          href={nextHref}\n          as={'primary'}\n          className={'wizard-pf-next'}\n          disabled={isNextLoading || isNextDisabled}\n        >\n          {isNextLoading ? <Loader size={'xs'} inline={true} /> : null}\n          {isLastStep ? (\n            'Done'\n          ) : (\n            <>\n              Next <i className=\"fa fa-angle-right\" />\n            </>\n          )}\n        </ButtonLink>\n        <ButtonLink\n          onClick={onCancel}\n          href={cancelHref}\n          className={'wizard-pf-cancel'}\n        >\n          Cancel\n        </ButtonLink>\n      </div>\n    </div>\n  );\n};\n","import { Card, EmptyState } from 'patternfly-react';\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport const ConnectionSkeleton = (props: any) => (\n  <Card matchHeight={true}>\n    <Card.Body>\n      <EmptyState>\n        <ContentLoader\n          height={300}\n          width={200}\n          speed={2}\n          primaryColor=\"#f3f3f3\"\n          secondaryColor=\"#ecebeb\"\n          {...props}\n        >\n          <circle cx=\"100\" cy=\"50\" r=\"40\" />\n          <rect x=\"5\" y=\"125\" rx=\"5\" ry=\"5\" width=\"190\" height=\"30\" />\n          <rect x=\"25\" y=\"180\" rx=\"5\" ry=\"5\" width=\"150\" height=\"15\" />\n          <rect x=\"40\" y=\"205\" rx=\"5\" ry=\"5\" width=\"120\" height=\"15\" />\n        </ContentLoader>\n      </EmptyState>\n    </Card.Body>\n  </Card>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport interface IApiConnectorListSkeletonProps {\n  width: number;\n  style?: any;\n}\n\nexport const ApiConnectorListSkeleton: React.FunctionComponent<\n  IApiConnectorListSkeletonProps\n> = ({ width, style }) => (\n  <ContentLoader\n    height={356}\n    width={width}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={style}\n  >\n    <circle cx=\"30\" cy=\"40\" r=\"16\" />\n    <circle cx=\"70\" cy=\"40\" r=\"16\" />\n    <rect x=\"105\" y=\"35\" rx=\"5\" ry=\"5\" width=\"200\" height=\"15\" />\n    <rect x={width - 100} y=\"35\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"110\" r=\"16\" />\n    <circle cx=\"70\" cy=\"110\" r=\"16\" />\n    <rect x=\"105\" y=\"105\" rx=\"5\" ry=\"5\" width=\"180\" height=\"15\" />\n    <rect x={width - 100} y=\"105\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"180\" r=\"16\" />\n    <circle cx=\"70\" cy=\"180\" r=\"16\" />\n    <rect x=\"105\" y=\"175\" rx=\"5\" ry=\"5\" width=\"195\" height=\"15\" />\n    <rect x={width - 100} y=\"175\" rx=\"5\" ry=\"5\" width=\"85\" height=\"15\" />\n  </ContentLoader>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport interface ICustomizationsExtensionListSkeletonProps {\n  width: number;\n  style?: any;\n}\n\nexport const ExtensionListSkeleton: React.FunctionComponent<\n  ICustomizationsExtensionListSkeletonProps\n> = ({ width, style }) => (\n  <ContentLoader\n    height={356}\n    width={width}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={style}\n  >\n    <circle cx=\"30\" cy=\"40\" r=\"16\" />\n    <circle cx=\"70\" cy=\"40\" r=\"16\" />\n    <rect x=\"105\" y=\"35\" rx=\"5\" ry=\"5\" width=\"200\" height=\"15\" />\n    <rect x={width - 100} y=\"35\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"110\" r=\"16\" />\n    <circle cx=\"70\" cy=\"110\" r=\"16\" />\n    <rect x=\"105\" y=\"105\" rx=\"5\" ry=\"5\" width=\"180\" height=\"15\" />\n    <rect x={width - 100} y=\"105\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"180\" r=\"16\" />\n    <circle cx=\"70\" cy=\"180\" r=\"16\" />\n    <rect x=\"105\" y=\"175\" rx=\"5\" ry=\"5\" width=\"195\" height=\"15\" />\n    <rect x={width - 100} y=\"175\" rx=\"5\" ry=\"5\" width=\"85\" height=\"15\" />\n  </ContentLoader>\n);\n","import { Grid } from 'patternfly-react';\nimport * as React from 'react';\nimport { IntegrationStatus } from '../Integration';\nimport { IntegrationState } from '../Integration/models';\n\nexport interface IRecentUpdatesItem {\n  integrationName: string;\n  integrationCurrentState: IntegrationState;\n  integrationDate: number;\n  i18nError: string;\n  i18nPublished: string;\n  i18nUnpublished: string;\n}\n\nexport const RecentUpdatesItem: React.FunctionComponent<IRecentUpdatesItem> = ({\n  integrationName,\n  integrationCurrentState,\n  integrationDate,\n  i18nError,\n  i18nPublished,\n  i18nUnpublished,\n}) => (\n  <Grid.Row>\n    <Grid.Col sm={5}>{integrationName}</Grid.Col>\n    <Grid.Col sm={3}>\n      <IntegrationStatus\n        currentState={integrationCurrentState}\n        i18nError={i18nError}\n        i18nPublished={i18nPublished}\n        i18nUnpublished={i18nUnpublished}\n      />\n    </Grid.Col>\n    <Grid.Col sm={4}>{new Date(integrationDate).toLocaleString()}</Grid.Col>\n  </Grid.Row>\n);\n","import * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport const RecentUpdatesSkeleton = (props: any) => (\n  <ContentLoader\n    height={150}\n    width={350}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    {...props}\n  >\n    <rect x=\"20\" y=\"5\" rx=\"5\" ry=\"5\" width=\"100\" height=\"10\" />\n    <rect x=\"150\" y=\"5\" rx=\"5\" ry=\"5\" width=\"30\" height=\"10\" />\n    <rect x=\"250\" y=\"5\" rx=\"5\" ry=\"5\" width=\"40\" height=\"10\" />\n\n    <rect x=\"20\" y=\"35\" rx=\"5\" ry=\"5\" width=\"80\" height=\"10\" />\n    <rect x=\"150\" y=\"35\" rx=\"5\" ry=\"5\" width=\"30\" height=\"10\" />\n    <rect x=\"250\" y=\"35\" rx=\"5\" ry=\"5\" width=\"40\" height=\"10\" />\n\n    <rect x=\"20\" y=\"65\" rx=\"5\" ry=\"5\" width=\"95\" height=\"10\" />\n    <rect x=\"150\" y=\"65\" rx=\"5\" ry=\"5\" width=\"30\" height=\"10\" />\n    <rect x=\"250\" y=\"65\" rx=\"5\" ry=\"5\" width=\"40\" height=\"10\" />\n\n    <rect x=\"20\" y=\"95\" rx=\"5\" ry=\"5\" width=\"125\" height=\"10\" />\n    <rect x=\"150\" y=\"95\" rx=\"5\" ry=\"5\" width=\"30\" height=\"10\" />\n    <rect x=\"250\" y=\"95\" rx=\"5\" ry=\"5\" width=\"40\" height=\"10\" />\n\n    <rect x=\"20\" y=\"125\" rx=\"5\" ry=\"5\" width=\"65\" height=\"10\" />\n    <rect x=\"150\" y=\"125\" rx=\"5\" ry=\"5\" width=\"30\" height=\"10\" />\n    <rect x=\"250\" y=\"125\" rx=\"5\" ry=\"5\" width=\"40\" height=\"10\" />\n  </ContentLoader>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport interface IViewListSkeletonProps {\n  width: number;\n  style?: any;\n}\n\nexport const ViewListSkeleton: React.FunctionComponent<\n  IViewListSkeletonProps\n> = ({ width, style }) => (\n  <ContentLoader\n    height={356}\n    width={width}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={style}\n  >\n    <circle cx=\"30\" cy=\"40\" r=\"16\" />\n    <circle cx=\"70\" cy=\"40\" r=\"16\" />\n    <rect x=\"105\" y=\"35\" rx=\"5\" ry=\"5\" width=\"200\" height=\"15\" />\n    <rect x={width - 100} y=\"35\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"110\" r=\"16\" />\n    <circle cx=\"70\" cy=\"110\" r=\"16\" />\n    <rect x=\"105\" y=\"105\" rx=\"5\" ry=\"5\" width=\"180\" height=\"15\" />\n    <rect x={width - 100} y=\"105\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"180\" r=\"16\" />\n    <circle cx=\"70\" cy=\"180\" r=\"16\" />\n    <rect x=\"105\" y=\"175\" rx=\"5\" ry=\"5\" width=\"195\" height=\"15\" />\n    <rect x={width - 100} y=\"175\" rx=\"5\" ry=\"5\" width=\"85\" height=\"15\" />\n  </ContentLoader>\n);\n","import { Card, EmptyState } from 'patternfly-react';\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport const DvConnectionSkeleton = (props: any) => (\n  <Card matchHeight={true}>\n    <Card.Body>\n      <EmptyState>\n        <ContentLoader\n          height={300}\n          width={200}\n          speed={2}\n          primaryColor=\"#f3f3f3\"\n          secondaryColor=\"#ecebeb\"\n          {...props}\n        >\n          <circle cx=\"100\" cy=\"50\" r=\"40\" />\n          <rect x=\"5\" y=\"125\" rx=\"5\" ry=\"5\" width=\"190\" height=\"30\" />\n          <rect x=\"25\" y=\"180\" rx=\"5\" ry=\"5\" width=\"150\" height=\"15\" />\n          <rect x=\"40\" y=\"205\" rx=\"5\" ry=\"5\" width=\"120\" height=\"15\" />\n        </ContentLoader>\n      </EmptyState>\n    </Card.Body>\n  </Card>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport interface IViewInfoListSkeletonProps {\n  width: number;\n  style?: any;\n}\n\nexport const ViewInfoListSkeleton: React.FunctionComponent<\n  IViewInfoListSkeletonProps\n> = ({ width, style }) => (\n  <ContentLoader\n    height={356}\n    width={width}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={style}\n  >\n    <circle cx=\"30\" cy=\"40\" r=\"16\" />\n    <circle cx=\"70\" cy=\"40\" r=\"16\" />\n    <rect x=\"105\" y=\"35\" rx=\"5\" ry=\"5\" width=\"200\" height=\"15\" />\n    <rect x={width - 100} y=\"35\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"110\" r=\"16\" />\n    <circle cx=\"70\" cy=\"110\" r=\"16\" />\n    <rect x=\"105\" y=\"105\" rx=\"5\" ry=\"5\" width=\"180\" height=\"15\" />\n    <rect x={width - 100} y=\"105\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"180\" r=\"16\" />\n    <circle cx=\"70\" cy=\"180\" r=\"16\" />\n    <rect x=\"105\" y=\"175\" rx=\"5\" ry=\"5\" width=\"195\" height=\"15\" />\n    <rect x={width - 100} y=\"175\" rx=\"5\" ry=\"5\" width=\"85\" height=\"15\" />\n  </ContentLoader>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport classnames from 'classnames';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { ButtonLink, Loader } from '../../../Layout';\nimport './ViewsCreateLayout.css';\n\n/**\n * @param header - a PatternFly Wizard Steps component.\n * @param content - the main content of the wizard. In case of overflow, only\n * the body will scroll.\n * @param onCancel - if passed, the Cancel button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onBack - if passed, the Back button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onNext - if passed, the Next button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onCreateViews - Create views when complete.\n * @param cancelHref - if passed, the Cancel button will be render as a `Link`\n * using this as its `to` parameter.\n * @param backHref - if passed, the Back button will be render as a `Link`\n * using this as its `to` parameter.\n * @param nextHref - if passed, the Next button will be render as a `Link`\n * using this as its `to` parameter.\n * @param isNextLoading - if set to true, a `Loading` component will be shown\n * inside the Next button before its label. The button will also be disabled.\n * @param isNextDisabled - if set to true, the Next button will be disabled.\n * @param isLastStep - if set to true, it changes the Next button label to\n * 'Done'.\n */\nexport interface IViewsCreateLayoutProps {\n  header: JSX.Element;\n  content: JSX.Element;\n  onCancel?: (e: React.MouseEvent<any>) => void;\n  onBack?: (e: React.MouseEvent<any>) => void;\n  onNext?: (e: React.MouseEvent<any>) => void;\n  onCreateViews?: () => Promise<any>;\n  cancelHref?: H.LocationDescriptor;\n  backHref?: H.LocationDescriptor;\n  nextHref?: H.LocationDescriptor;\n  isNextDisabled?: boolean;\n  isNextLoading?: boolean;\n  isLastStep?: boolean;\n}\n\n/**\n * Provides the layout for the views create wizard. It uses the PatternFly Wizard\n * component under the hood.\n * The footer is pre-defined and follows the PF Wizard pattern, with\n * Cancel/Previous/Next buttons.\n *\n * @todo in the CSS we use hardcoded values for the heights of various\n * elements of the page to be able to size the element to take all the available\n * height and show the right scrollbars.\n * We should really find a smarter way to handle this.\n */\nexport const ViewsCreateLayout: React.FunctionComponent<\n  IViewsCreateLayoutProps\n> = ({\n  header,\n  content,\n  onCancel,\n  onBack,\n  onNext,\n  onCreateViews,\n  cancelHref,\n  backHref,\n  nextHref,\n  isNextLoading,\n  isNextDisabled,\n  isLastStep = false,\n}: IViewsCreateLayoutProps) => {\n  return (\n    <div\n      className={classnames('wizard-pf-body views-create-layout', {\n        'has-footer': true,\n      })}\n    >\n      {header}\n      <div className=\"wizard-pf-row views-create-layout__body\">\n        <div\n          className={\n            'wizard-pf-main cards-pf views-create-layout__contentWrapper'\n          }\n        >\n          <div className=\"views-create-layout__content\">{content}</div>\n        </div>\n      </div>\n      <div className=\"wizard-pf-footer views-create-layout__footer\">\n        <ButtonLink\n          onClick={onBack}\n          href={backHref}\n          className={'wizard-pf-back'}\n        >\n          <i className=\"fa fa-angle-left\" /> Back\n        </ButtonLink>\n        <ButtonLink\n          onClick={isLastStep ? onCreateViews : onNext}\n          href={nextHref}\n          as={'primary'}\n          className={'wizard-pf-next'}\n          disabled={isNextLoading || isNextDisabled}\n        >\n          {isNextLoading ? <Loader size={'xs'} inline={true} /> : null}\n          {isLastStep ? (\n            'Done'\n          ) : (\n            <>\n              Next <i className=\"fa fa-angle-right\" />\n            </>\n          )}\n        </ButtonLink>\n        <ButtonLink\n          onClick={onCancel}\n          href={cancelHref}\n          className={'wizard-pf-cancel'}\n        >\n          Cancel\n        </ButtonLink>\n      </div>\n    </div>\n  );\n};\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nexport interface IVirtualizationListSkeletonProps {\n  width: number;\n  style?: any;\n}\n\nexport const VirtualizationListSkeleton: React.FunctionComponent<\n  IVirtualizationListSkeletonProps\n> = ({ width, style }) => (\n  <ContentLoader\n    height={356}\n    width={width}\n    speed={2}\n    primaryColor=\"#f3f3f3\"\n    secondaryColor=\"#ecebeb\"\n    style={style}\n  >\n    <circle cx=\"30\" cy=\"40\" r=\"16\" />\n    <circle cx=\"70\" cy=\"40\" r=\"16\" />\n    <rect x=\"105\" y=\"35\" rx=\"5\" ry=\"5\" width=\"200\" height=\"15\" />\n    <rect x={width - 100} y=\"35\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"110\" r=\"16\" />\n    <circle cx=\"70\" cy=\"110\" r=\"16\" />\n    <rect x=\"105\" y=\"105\" rx=\"5\" ry=\"5\" width=\"180\" height=\"15\" />\n    <rect x={width - 100} y=\"105\" rx=\"5\" ry=\"5\" width=\"80\" height=\"15\" />\n\n    <circle cx=\"30\" cy=\"180\" r=\"16\" />\n    <circle cx=\"70\" cy=\"180\" r=\"16\" />\n    <rect x=\"105\" y=\"175\" rx=\"5\" ry=\"5\" width=\"195\" height=\"15\" />\n    <rect x={width - 100} y=\"175\" rx=\"5\" ry=\"5\" width=\"85\" height=\"15\" />\n  </ContentLoader>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\n\nexport interface IIntegrationActionSelectorCardProps {\n  content: JSX.Element;\n  title: string;\n}\n\nexport const IntegrationActionSelectorCard: React.FunctionComponent<\n  IIntegrationActionSelectorCardProps\n> = ({ content, title }) => (\n  <div className=\"card-pf\">\n    <div className=\"card-pf-title\">{title}</div>\n    <div className=\"card-pf-body\">{content}</div>\n  </div>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport classnames from 'classnames';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { ButtonLink, Loader } from '../Layout';\nimport './IntegrationEditorLayout.css';\n\n/**\n * @param header - a PatternFly Wizard Steps component.\n * @param sidebar - the sidebar container takes the size of its content. If no\n * sidebar is defined, a layout with just the header, the footer and the body\n * will be shown.\n * @param content - the main content of the wizard. In case of overflow, only\n * the body will scroll.\n * @param onCancel - if passed, the Cancel button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onBack - if passed, the Back button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param onNext - if passed, the Next button will be render as a `button`\n * and this callback will be used as its `onClick` handler.\n * @param cancelHref - if passed, the Cancel button will be render as a `Link`\n * using this as its `to` parameter.\n * @param backHref - if passed, the Back button will be render as a `Link`\n * using this as its `to` parameter.\n * @param nextHref - if passed, the Next button will be render as a `Link`\n * using this as its `to` parameter.\n * @param isNextLoading - if set to true, a `Loading` component will be shown\n * inside the Next button before its label. The button will also be disabled.\n * @param isNextDisabled - if set to true, the Next button will be disabled.\n * @param isLastStep - if set to true, it changes the Next button label to\n * 'Done'.\n */\nexport interface IIntegrationEditorLayoutProps {\n  header: React.ReactNode;\n  sidebar?: React.ReactNode;\n  content: React.ReactNode;\n  onCancel?: (e: React.MouseEvent<any>) => void;\n  onBack?: (e: React.MouseEvent<any>) => void;\n  onNext?: (e: React.MouseEvent<any>) => void;\n  cancelHref?: H.LocationDescriptor;\n  backHref?: H.LocationDescriptor;\n  nextHref?: H.LocationDescriptor;\n  isNextDisabled?: boolean;\n  isNextLoading?: boolean;\n  isLastStep?: boolean;\n}\n\n/**\n * Provides the layout for the integration editor. It uses the PatternFly Wizard\n * component under the hood.\n * The footer is pre-defined and follows the PF Wizard pattern, with\n * Cancel/Previous/Next buttons.\n *\n * @todo in the CSS we use hardcoded values for the heights of various\n * elements of the page to be able to size the element to take all the available\n * height and show the right scrollbars.\n * We should really find a smarter way to handle this.\n */\nexport const IntegrationEditorLayout: React.FunctionComponent<\n  IIntegrationEditorLayoutProps\n> = ({\n  header,\n  sidebar,\n  content,\n  onCancel,\n  onBack,\n  onNext,\n  cancelHref,\n  backHref,\n  nextHref,\n  isNextLoading,\n  isNextDisabled,\n  isLastStep = false,\n}: IIntegrationEditorLayoutProps) => {\n  return (\n    <div\n      className={classnames(\n        'wizard-pf-body integration-editor-layout syn-scrollable',\n        {\n          'has-footer': true,\n        }\n      )}\n    >\n      {header}\n      <div className=\"wizard-pf-row integration-editor-layout__body syn-scrollable--body\">\n        <div className=\"wizard-pf-sidebar\">{sidebar}</div>\n        <div\n          className={\n            'wizard-pf-main cards-pf integration-editor-layout__contentWrapper'\n          }\n        >\n          <div className=\"integration-editor-layout__content\">{content}</div>\n        </div>\n      </div>\n      <div className=\"wizard-pf-footer integration-editor-layout__footer\">\n        <ButtonLink\n          onClick={onBack}\n          href={backHref}\n          className={'wizard-pf-back'}\n        >\n          <i className=\"fa fa-angle-left\" /> Back\n        </ButtonLink>\n        <ButtonLink\n          onClick={onNext}\n          href={nextHref}\n          as={'primary'}\n          className={'wizard-pf-next'}\n          disabled={isNextLoading || isNextDisabled}\n        >\n          {isNextLoading ? <Loader size={'xs'} inline={true} /> : null}\n          {isLastStep ? (\n            'Done'\n          ) : (\n            <>\n              Next <i className=\"fa fa-angle-right\" />\n            </>\n          )}\n        </ButtonLink>\n        <ButtonLink\n          onClick={onCancel}\n          href={cancelHref}\n          className={'wizard-pf-cancel'}\n        >\n          Cancel\n        </ButtonLink>\n      </div>\n    </div>\n  );\n};\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\nimport {\n  IIntegrationFlowStepProps,\n  IntegrationFlowStep,\n} from './IntegrationFlowStep';\nimport { IntegrationFlowStepDetails } from './IntegrationFlowStepDetails';\n\nexport interface IIntegrationFlowStepWithOverviewProps\n  extends IIntegrationFlowStepProps {\n  /**\n   * The title of the extended information table.\n   */\n  i18nTitle: string;\n  /**\n   * The name of the connection used for the step.\n   */\n  name: string;\n  /**\n   * The name of the action used for the step.\n   */\n  action: string;\n  /**\n   * The data-type set up for the step.\n   */\n  dataType: string;\n}\n\n/**\n * A component to show an already configured step in the sidebar of the\n * integration editor.\n *\n * @see [i18nTitle]{@link IIntegrationFlowStepWithOverviewProps#i18nTitle}\n * @see [i18nTooltip]{@link IIntegrationFlowStepProps#i18nTooltip}\n * @see [icon]{@link IIntegrationFlowStepProps#icon}\n * @see [active]{@link IIntegrationFlowStepProps#active}\n * @see [showDetails]{@link IIntegrationFlowStepProps#showDetails}\n * @see [name]{@link IIntegrationFlowStepWithOverviewProps#name}\n * @see [action]{@link IIntegrationFlowStepWithOverviewProps#action}\n * @see [dataType]{@link IIntegrationFlowStepWithOverviewProps#dataType}\n * @constructor\n */\nexport const IntegrationFlowStepWithOverview: React.FunctionComponent<\n  IIntegrationFlowStepWithOverviewProps\n> = ({\n  i18nTitle,\n  i18nTooltip,\n  icon,\n  active = false,\n  showDetails,\n  name,\n  action,\n  dataType,\n}) => (\n  <IntegrationFlowStep\n    icon={icon}\n    active={active}\n    i18nTooltip={i18nTooltip}\n    showDetails={showDetails}\n  >\n    <IntegrationFlowStepDetails active={active}>\n      {({ Title, StepOverview }) => (\n        <>\n          <Title>{i18nTitle}</Title>\n          <StepOverview\n            nameI18nLabel={'Name:'}\n            name={name}\n            actionI18nLabel={'Action:'}\n            action={action}\n            dataTypeI18nLabel={'Data Type:'}\n            dataType={dataType}\n          />\n        </>\n      )}\n    </IntegrationFlowStepDetails>\n  </IntegrationFlowStep>\n);\n","import { ListView } from 'patternfly-react';\nimport * as React from 'react';\nimport { ButtonLink } from '../Layout';\n\nexport interface IIntegrationsListItemUnreadableProps {\n  integrationName: string;\n  i18nDescription: string;\n  rawObject: string;\n}\n\nexport const IntegrationsListItemUnreadable: React.FC<\n  IIntegrationsListItemUnreadableProps\n> = ({ integrationName, i18nDescription, rawObject }) => {\n  const onClick = () => window.alert(rawObject);\n  return (\n    <ListView.Item\n      heading={integrationName}\n      actions={<ButtonLink onClick={onClick}>Integration JSON</ButtonLink>}\n      description={i18nDescription}\n      stacked={true}\n    />\n  );\n};\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport { Breadcrumb as PfBreadcrumb } from 'patternfly-react';\nimport * as React from 'react';\n\n/**\n * A component to show breadcrumbs. All its children will be wrapped in a tag\n * that will automatically handle the active/inactive state by setting the\n * appropriate class to the wrapper.\n *\n * It's suggested to use only anchors or spans as children node.\n */\nexport const Breadcrumb: React.FunctionComponent = ({ children }) => (\n  <PfBreadcrumb\n    style={{\n      background: '#fff',\n      margin: 0,\n      paddingLeft: '15px',\n    }}\n  >\n    {React.Children.map(children, (c, idx) => (\n      <li\n        className={React.Children.count(children) - 1 === idx ? 'active' : ''}\n        key={idx}\n      >\n        {c}\n      </li>\n    ))}\n  </PfBreadcrumb>\n);\n","import { Nav } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface ITabBarProps {\n  [key: string]: any;\n}\n\nexport const TabBar: React.FunctionComponent<ITabBarProps> = ({\n  children,\n  ...props\n}) => (\n  <Nav bsClass=\"nav nav-tabs nav-tabs-pf\" {...props}>\n    {children}\n  </Nav>\n);\n","// tslint:disable react-unused-props-and-state\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\nimport * as React from 'react';\n\ninterface IWizardStepProps {\n  isActive: boolean;\n  isDisabled: boolean;\n  isAlt?: boolean;\n  onClick?: () => any;\n  step: number;\n  title: string;\n  subSteps?: string[];\n  activeSubstep?: number;\n}\n\nexport const WizardStep: React.FunctionComponent<IWizardStepProps> = ({\n  isActive,\n  isDisabled,\n  isAlt = false,\n  onClick,\n  step,\n  title,\n  subSteps = [],\n  activeSubstep = 0,\n}) => (\n  <li\n    className={`${isAlt ? 'wizard-pf-step-alt' : 'wizard-pf-step'} ${\n      isActive ? 'active' : ''\n    } ${isDisabled ? 'disabled' : ''}`}\n    onClick={onClick}\n  >\n    <a>\n      <span className={`wizard-pf-step${isAlt ? '-alt' : ''}-number`}>\n        {step}\n      </span>\n      <span className={`wizard-pf-step${isAlt ? '-alt' : ''}-title`}>\n        {title}\n      </span>\n      {!isAlt &&\n        subSteps.map((s, idx) => (\n          <span\n            className={`wizard-pf-step-title-substep ${\n              idx === activeSubstep ? 'active' : ''\n            }`}\n            key={idx}\n          >\n            {s}\n          </span>\n        ))}\n    </a>\n    {isAlt && isActive && (\n      <ul>\n        {subSteps.map((s, idx) => (\n          <li\n            className={`wizard-pf-step-alt-substep ${\n              idx === activeSubstep ? 'active' : 'disabled'\n            }`}\n            key={idx}\n          >\n            <a>{s}</a>\n          </li>\n        ))}\n      </ul>\n    )}\n  </li>\n);\n","import { Table } from 'patternfly-react';\nimport * as React from 'react';\n\n/**\n * This component wraps a generic table component and exposes a simple and\n * consistent methodology to customize basic presentation properties and provide\n * an interface of setting the row/column data within the table.\n */\n\nexport type IGenericTableFormatter = (value: any) => React.ReactNode;\n\nexport interface IGenericTableColumn {\n  cell: {\n    formatters: IGenericTableFormatter[];\n  };\n  header: {\n    formatters: IGenericTableFormatter[];\n    label: string;\n  };\n  property: string;\n}\n\nexport interface IGenericTableStyle {\n  striped?: boolean;\n  bordered?: boolean;\n  hover?: boolean;\n}\n\nexport interface IGenericTableData {\n  columns: IGenericTableColumn[];\n  rows: Array<{ [property: string]: any }>;\n  rowKey: string;\n}\n\nexport const DefaultHeaderFormat = (value: any) => (\n  <Table.Heading>{value}</Table.Heading>\n);\nexport const DefaultCellFormat = (value: any) => (\n  <Table.Cell>{value}</Table.Cell>\n);\n\nexport const GenericTable: React.FC<IGenericTableStyle & IGenericTableData> = ({\n  striped = true,\n  bordered = true,\n  hover = true,\n  columns,\n  rows,\n  rowKey,\n}) => (\n  <Table.PfProvider\n    striped={striped}\n    bordered={bordered}\n    hover={hover}\n    columns={columns}\n  >\n    <Table.Header />\n    <Table.Body rows={rows} rowKey={rowKey} />\n  </Table.PfProvider>\n);\n","import { Text } from '@patternfly/react-core';\nimport { EmptyState } from 'patternfly-react';\nimport { useState } from 'react';\nimport * as React from 'react';\nimport { ButtonLink, Container } from '../Layout';\n\nexport interface IUnrecoverableErrorProps {\n  i18nTitle: string;\n  i18nInfo: string;\n  i18nHelp: string;\n  i18nRefreshLabel: string;\n  i18nReportIssue: string;\n  i18nShowErrorInfoLabel?: string;\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\nexport const UnrecoverableError: React.FC<IUnrecoverableErrorProps> = ({\n  i18nTitle,\n  i18nInfo,\n  i18nHelp,\n  i18nRefreshLabel,\n  i18nReportIssue,\n  i18nShowErrorInfoLabel,\n  error,\n  errorInfo,\n}) => {\n  const [showErrorInfo, setShowErrorInfo] = useState(false);\n  const toggleErrorInfo = () => setShowErrorInfo(!showErrorInfo);\n  return (\n    <Container>\n      <EmptyState>\n        <EmptyState.Icon name={'error-circle-o'} />\n        <EmptyState.Title>{i18nTitle}</EmptyState.Title>\n        <EmptyState.Info>{i18nInfo}</EmptyState.Info>\n        <EmptyState.Help>{i18nHelp}</EmptyState.Help>\n        <EmptyState.Action>\n          <ButtonLink href={'.'} as={'primary'} size={'lg'}>\n            {i18nRefreshLabel}\n          </ButtonLink>\n        </EmptyState.Action>\n        <EmptyState.Action secondary={true}>\n          {error && (\n            <ButtonLink onClick={toggleErrorInfo}>\n              {i18nShowErrorInfoLabel}\n            </ButtonLink>\n          )}\n          <a\n            className={'btn btn-default'}\n            href={\n              'https://github.com/syndesisio/syndesis/issues/new?template=simple.md&labels=cat/bug&title=Error%20report'\n            }\n          >\n            {i18nReportIssue}\n          </a>\n        </EmptyState.Action>\n        {showErrorInfo && error && (\n          <EmptyState.Help style={{ textAlign: 'left' }}>\n            <Text>\n              {error.name}: {error.message}\n            </Text>\n            {errorInfo && <pre>{errorInfo.componentStack}</pre>}\n          </EmptyState.Help>\n        )}\n      </EmptyState>\n    </Container>\n  );\n};\n","import { WithEnvironments, WithIntegrationTags } from '@syndesis/api';\nimport {\n  CiCdList,\n  CiCdListSkeleton,\n  ITagIntegrationEntry,\n  TagIntegrationDialog,\n  TagIntegrationDialogBody,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { ApiError } from '../../../shared';\n\nexport interface ITagIntegrationDialogWrapperProps {\n  manageCiCdHref: H.LocationDescriptor;\n  targetIntegrationId: string;\n  onSave: () => void;\n  onHide: () => void;\n  tagIntegration: (\n    integrationId: string,\n    environments: string[]\n  ) => Promise<Response>;\n}\n\nexport class TagIntegrationDialogWrapper extends React.Component<\n  ITagIntegrationDialogWrapperProps\n> {\n  public constructor(props: ITagIntegrationDialogWrapperProps) {\n    super(props);\n    this.handleSave = this.handleSave.bind(this);\n  }\n  public handleSave(items: ITagIntegrationEntry[]) {\n    this.props.onSave();\n    const newEnvironments = items\n      .filter(item => item.selected)\n      .map(item => item.name);\n    this.props.tagIntegration(this.props.targetIntegrationId, newEnvironments);\n  }\n  public render() {\n    return (\n      <Translation ns={['integrations', 'shared']}>\n        {t => (\n          <TagIntegrationDialog\n            i18nTitle={t('integrations:MarkIntegrationForCiCd')}\n            i18nCancelButtonText={t('shared:Cancel')}\n            i18nSaveButtonText={t('shared:Save')}\n            onHide={this.props.onHide}\n            onSave={this.handleSave}\n          >\n            {({ handleChange }) => (\n              <WithIntegrationTags\n                integrationId={this.props.targetIntegrationId}\n              >\n                {({ data: tags, hasData: hasTags, error: tagError }) => (\n                  <WithEnvironments disableUpdates={true}>\n                    {({\n                      data: environments,\n                      hasData: hasEnvironments,\n                      error: environmentsError,\n                    }) => {\n                      return (\n                        <>\n                          <p>\n                            {t('integrations:TagThisIntegrationForRelease')}\n                          </p>\n                          <WithLoader\n                            error={tagError || environmentsError}\n                            loading={!hasTags && !hasEnvironments}\n                            loaderChildren={\n                              <CiCdList>\n                                <CiCdListSkeleton />\n                              </CiCdList>\n                            }\n                            errorChildren={<ApiError />}\n                          >\n                            {() => {\n                              const mappedItems = environments.map(item => ({\n                                name: item,\n                                selected: typeof tags[item] !== 'undefined',\n                              }));\n                              return (\n                                <TagIntegrationDialogBody\n                                  key={JSON.stringify(tags)}\n                                  initialItems={mappedItems}\n                                  onChange={handleChange}\n                                  manageCiCdHref={this.props.manageCiCdHref}\n                                  i18nEmptyStateTitle={t(\n                                    'integrations:NoEnvironmentsAvailable'\n                                  )}\n                                  i18nEmptyStateInfo={t(\n                                    'integrations:NoEnvironmentsAvailableInfo'\n                                  )}\n                                  i18nEmptyStateButtonText={t(\n                                    'integrations:GoToManageCiCd'\n                                  )}\n                                />\n                              );\n                            }}\n                          </WithLoader>\n                        </>\n                      );\n                    }}\n                  </WithEnvironments>\n                )}\n              </WithIntegrationTags>\n            )}\n          </TagIntegrationDialog>\n        )}\n      </Translation>\n    );\n  }\n}\n","import {\n  canActivate,\n  canDeactivate,\n  canEdit,\n  getFinishIcon,\n  getStartIcon,\n  WithIntegrationHelpers,\n} from '@syndesis/api';\nimport { IntegrationWithMonitoring } from '@syndesis/models';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  ConfirmationIconType,\n  IIntegrationAction,\n  IntegrationsList,\n  IntegrationsListItem,\n  IntegrationsListItemActions,\n  IntegrationsListItemUnreadable,\n  IntegrationsListSkeleton,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { AppContext } from '../../../app';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport resolvers from '../resolvers';\nimport { TagIntegrationDialogWrapper } from './TagIntegrationDialogWrapper';\n\nexport interface IIntegrationsProps {\n  error: boolean;\n  loading: boolean;\n  integrations: IntegrationWithMonitoring[];\n}\n\nexport interface IIntegrationsState {\n  showActionPromptDialog: boolean;\n  showCiCdPromptDialog: boolean;\n  targetIntegrationId?: string;\n  promptDialogButtonText?: string;\n  promptDialogIcon?: ConfirmationIconType;\n  promptDialogText?: string;\n  promptDialogTitle?: string;\n  handleAction?: () => void;\n}\n\ninterface IPromptActionOptions {\n  promptDialogButtonText: string;\n  promptDialogIcon: ConfirmationIconType;\n  promptDialogText: string;\n  promptDialogTitle: string;\n  handleAction: () => void;\n}\n\nexport class Integrations extends React.Component<\n  IIntegrationsProps,\n  IIntegrationsState\n> {\n  public constructor(props: IIntegrationsProps) {\n    super(props);\n    this.state = {\n      showActionPromptDialog: false,\n      showCiCdPromptDialog: false,\n    };\n    this.handleAction = this.handleAction.bind(this);\n    this.handleActionCancel = this.handleActionCancel.bind(this);\n    this.promptForAction = this.promptForAction.bind(this);\n    this.closeCiCdDialog = this.closeCiCdDialog.bind(this);\n  }\n  public closeCiCdDialog() {\n    this.setState({\n      showCiCdPromptDialog: false,\n    });\n  }\n  public handleActionCancel() {\n    this.setState({\n      showActionPromptDialog: false,\n    });\n  }\n  public handleAction() {\n    const action = this.state.handleAction;\n    this.setState({\n      showActionPromptDialog: false,\n    });\n    if (typeof action === 'function') {\n      action.apply(this);\n    } else {\n      throw Error('Undefined action set for confirmation dialog');\n    }\n  }\n  public promptForAction(options: IPromptActionOptions) {\n    this.setState({\n      handleAction: options.handleAction,\n      promptDialogButtonText: options.promptDialogButtonText,\n      promptDialogIcon: options.promptDialogIcon,\n      promptDialogText: options.promptDialogText,\n      promptDialogTitle: options.promptDialogTitle,\n      showActionPromptDialog: true,\n    });\n  }\n  public promptForCiCd(targetIntegrationId: string) {\n    this.setState({\n      showCiCdPromptDialog: true,\n      targetIntegrationId,\n    });\n  }\n  public render() {\n    return (\n      <Translation ns={['integrations', 'shared']}>\n        {t => (\n          <AppContext.Consumer>\n            {({ config, getPodLogUrl, pushNotification }) => (\n              <WithIntegrationHelpers>\n                {({\n                  deleteIntegration,\n                  deployIntegration,\n                  exportIntegration,\n                  undeployIntegration,\n                  tagIntegration,\n                }) => (\n                  <>\n                    {this.state.showCiCdPromptDialog && (\n                      <TagIntegrationDialogWrapper\n                        manageCiCdHref={resolvers.manageCicd.root()}\n                        tagIntegration={tagIntegration}\n                        targetIntegrationId={this.state.targetIntegrationId!}\n                        onSave={this.closeCiCdDialog}\n                        onHide={this.closeCiCdDialog}\n                      />\n                    )}\n                    {this.state.showActionPromptDialog && (\n                      <ConfirmationDialog\n                        buttonStyle={ConfirmationButtonStyle.NORMAL}\n                        i18nCancelButtonText={t('shared:Cancel')}\n                        i18nConfirmButtonText={\n                          this.state.promptDialogButtonText!\n                        }\n                        i18nConfirmationMessage={this.state.promptDialogText!}\n                        i18nTitle={this.state.promptDialogTitle!}\n                        icon={this.state.promptDialogIcon!}\n                        showDialog={this.state.showActionPromptDialog}\n                        onCancel={this.handleActionCancel}\n                        onConfirm={this.handleAction}\n                      />\n                    )}\n                    <IntegrationsList>\n                      <WithLoader\n                        error={this.props.error}\n                        loading={this.props.loading}\n                        loaderChildren={<IntegrationsListSkeleton />}\n                        errorChildren={<ApiError />}\n                      >\n                        {() =>\n                          this.props.integrations.map(\n                            (mi: IntegrationWithMonitoring) => {\n                              try {\n                                const editAction: IIntegrationAction = {\n                                  href: resolvers.integration.edit.index({\n                                    flow: '0',\n                                    integration: mi.integration,\n                                  }),\n                                  label: 'Edit',\n                                };\n                                const startAction: IIntegrationAction = {\n                                  label: 'Start',\n                                  onClick: () =>\n                                    this.promptForAction({\n                                      handleAction: async () => {\n                                        pushNotification(\n                                          i18n.t(\n                                            'integrations:PublishingIntegrationMessage'\n                                          ),\n                                          'info'\n                                        );\n                                        try {\n                                          await deployIntegration(\n                                            mi.integration.id!,\n                                            mi.integration.version!,\n                                            false\n                                          );\n                                        } catch (err) {\n                                          pushNotification(\n                                            i18n.t(\n                                              'integrations.PublishingIntegrationFailedMessage',\n                                              { error: err }\n                                            ),\n                                            'warning'\n                                          );\n                                        }\n                                      },\n                                      promptDialogButtonStyle:\n                                        ConfirmationButtonStyle.NORMAL,\n                                      promptDialogButtonText: t('shared:Start'),\n                                      promptDialogIcon:\n                                        ConfirmationIconType.NONE,\n                                      promptDialogText: t(\n                                        'integrations:publishIntegrationModal',\n                                        { name: mi.integration.name }\n                                      ),\n                                      promptDialogTitle: t(\n                                        'integrations:publishIntegrationModalTitle'\n                                      ),\n                                    } as IPromptActionOptions),\n                                };\n                                const stopAction: IIntegrationAction = {\n                                  label: 'Stop',\n                                  onClick: () =>\n                                    this.promptForAction({\n                                      handleAction: async () => {\n                                        pushNotification(\n                                          i18n.t(\n                                            'integrations:UnpublishingIntegrationMessage'\n                                          ),\n                                          'info'\n                                        );\n                                        try {\n                                          undeployIntegration(\n                                            mi.integration.id!,\n                                            mi.integration.version!\n                                          );\n                                        } catch (err) {\n                                          pushNotification(\n                                            i18n.t(\n                                              'integrations.UnpublishingIntegrationFailedMessage',\n                                              { error: err }\n                                            ),\n                                            'warning'\n                                          );\n                                        }\n                                      },\n                                      promptDialogButtonStyle:\n                                        ConfirmationButtonStyle.NORMAL,\n                                      promptDialogButtonText: t('shared:Stop'),\n                                      promptDialogIcon:\n                                        ConfirmationIconType.NONE,\n                                      promptDialogText: t(\n                                        'integrations:unpublishIntegrationModal',\n                                        { name: mi.integration.name }\n                                      ),\n                                      promptDialogTitle: t(\n                                        'integrations:unpublishIntegrationModalTitle'\n                                      ),\n                                    } as IPromptActionOptions),\n                                };\n                                const deleteAction: IIntegrationAction = {\n                                  label: 'Delete',\n                                  onClick: () =>\n                                    this.promptForAction({\n                                      handleAction: async () => {\n                                        pushNotification(\n                                          i18n.t(\n                                            'integrations:DeletingIntegrationMessage'\n                                          ),\n                                          'info'\n                                        );\n                                        try {\n                                          await deleteIntegration(\n                                            mi.integration.id!\n                                          );\n                                        } catch (err) {\n                                          pushNotification(\n                                            i18n.t(\n                                              'integrations.DeletingIntegrationFailedMessage',\n                                              { error: err }\n                                            ),\n                                            'warning'\n                                          );\n                                        }\n                                      },\n                                      promptDialogButtonStyle:\n                                        ConfirmationButtonStyle.DANGER,\n                                      promptDialogButtonText: t(\n                                        'shared:Delete'\n                                      ),\n                                      promptDialogIcon:\n                                        ConfirmationIconType.DANGER,\n                                      promptDialogText: t(\n                                        'integrations:deleteIntegrationModal',\n                                        { name: mi.integration.name }\n                                      ),\n                                      promptDialogTitle: t(\n                                        'integrations:deleteIntegrationModalTitle'\n                                      ),\n                                    } as IPromptActionOptions),\n                                };\n                                const exportAction: IIntegrationAction = {\n                                  label: 'Export',\n                                  onClick: () =>\n                                    exportIntegration(\n                                      mi.integration.id!,\n                                      `${mi.integration.name}-export.zip`\n                                    ),\n                                };\n                                const ciCdAction: IIntegrationAction = {\n                                  label: 'Manage CI/CD',\n                                  onClick: () => {\n                                    this.promptForCiCd(mi.integration.id!);\n                                  },\n                                };\n                                const actions: IIntegrationAction[] = [];\n                                if (canEdit(mi.integration)) {\n                                  actions.push(editAction);\n                                }\n                                if (canActivate(mi.integration)) {\n                                  actions.push(startAction);\n                                }\n                                if (canDeactivate(mi.integration)) {\n                                  actions.push(stopAction);\n                                }\n                                actions.push(deleteAction);\n                                actions.push(exportAction);\n                                actions.push(ciCdAction);\n                                return (\n                                  <IntegrationsListItem\n                                    key={mi.integration.id}\n                                    integrationName={mi.integration.name}\n                                    currentState={mi.integration!.currentState!}\n                                    targetState={mi.integration!.targetState!}\n                                    isConfigurationRequired={\n                                      !!(\n                                        mi.integration!.board!.warnings ||\n                                        mi.integration!.board!.errors ||\n                                        mi.integration!.board!.notices\n                                      )\n                                    }\n                                    monitoringValue={\n                                      mi.monitoring &&\n                                      t(\n                                        'integrations:' +\n                                          mi.monitoring.detailedState.value\n                                      )\n                                    }\n                                    monitoringCurrentStep={\n                                      mi.monitoring &&\n                                      mi.monitoring.detailedState.currentStep\n                                    }\n                                    monitoringTotalSteps={\n                                      mi.monitoring &&\n                                      mi.monitoring.detailedState.totalSteps\n                                    }\n                                    monitoringLogUrl={getPodLogUrl(\n                                      config,\n                                      mi.monitoring\n                                    )}\n                                    startConnectionIcon={getStartIcon(\n                                      config.apiEndpoint,\n                                      mi.integration\n                                    )}\n                                    finishConnectionIcon={getFinishIcon(\n                                      config.apiEndpoint,\n                                      mi.integration\n                                    )}\n                                    actions={\n                                      <IntegrationsListItemActions\n                                        integrationId={mi.integration!.id!}\n                                        actions={actions}\n                                        detailsHref={resolvers.integration.details(\n                                          { integration: mi.integration }\n                                        )}\n                                      />\n                                    }\n                                    i18nConfigurationRequired={t(\n                                      'integrations:ConfigurationRequired'\n                                    )}\n                                    i18nError={t('shared:Error')}\n                                    i18nPublished={t('shared:Published')}\n                                    i18nUnpublished={t('shared:Unpublished')}\n                                    i18nProgressPending={t('shared:Pending')}\n                                    i18nProgressStarting={t(\n                                      'integrations:progressStarting'\n                                    )}\n                                    i18nProgressStopping={t(\n                                      'integrations:progressStopping'\n                                    )}\n                                    i18nLogUrlText={t('shared:viewLogs')}\n                                  />\n                                );\n                              } catch (e) {\n                                return (\n                                  <IntegrationsListItemUnreadable\n                                    key={mi.integration.id}\n                                    integrationName={\n                                      (mi &&\n                                        mi.integration &&\n                                        mi.integration.name) ||\n                                      'An integration'\n                                    }\n                                    i18nDescription={\n                                      \"Sorry, we can't display more information about this integration right now.\"\n                                    }\n                                    rawObject={JSON.stringify(\n                                      mi.integration,\n                                      null,\n                                      2\n                                    )}\n                                  />\n                                );\n                              }\n                            }\n                          )\n                        }\n                      </WithLoader>\n                    </IntegrationsList>\n                  </>\n                )}\n              </WithIntegrationHelpers>\n            )}\n          </AppContext.Consumer>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { WizardStep, WizardSteps } from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IIntegrationCreatorBreadcrumbsProps {\n  /**\n   * The one-based active step number.\n   */\n  step: number;\n  /**\n   * Optional. The one-based active sub-step number.\n   */\n  subStep?: number;\n}\n\nexport interface IIntegrationCreatorBreadcrumbsState {\n  /**\n   * Indicates if the user clicked on a step. Used to show\n   * sub-steps when browsing from a mobile device.\n   */\n  active: boolean;\n}\n\n/**\n * A component to display the PatternFly Wizard Steps specific to the integration\n * creator flow.\n * @see [step]{@link IIntegrationCreatorBreadcrumbsProps#step}\n * @see [subStep]{@link IIntegrationCreatorBreadcrumbsProps#subStep}\n */\nexport class IntegrationCreatorBreadcrumbs extends React.Component<\n  IIntegrationCreatorBreadcrumbsProps,\n  IIntegrationCreatorBreadcrumbsState\n> {\n  public state = {\n    active: false,\n  };\n\n  constructor(props: IIntegrationCreatorBreadcrumbsProps) {\n    super(props);\n    this.toggleActive = this.toggleActive.bind(this);\n  }\n\n  public toggleActive() {\n    this.setState({\n      active: !this.state.active,\n    });\n  }\n\n  public render() {\n    return (\n      <WizardSteps\n        active={this.state.active}\n        mainSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              onClick={this.toggleActive}\n              step={1}\n              title={'Start connection'}\n              subSteps={[\n                'Choose connection',\n                'Choose action',\n                'Configure action',\n              ]}\n              activeSubstep={this.props.subStep}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              onClick={this.toggleActive}\n              step={2}\n              title={'Finish connection'}\n              subSteps={[\n                'Choose connection',\n                'Choose action',\n                'Configure action',\n              ]}\n              activeSubstep={this.props.subStep}\n            />\n            <WizardStep\n              isActive={this.props.step === 3}\n              isDisabled={this.props.step < 3}\n              onClick={this.toggleActive}\n              step={3}\n              title={'Add to integration'}\n            />\n            <WizardStep\n              isActive={this.props.step === 4}\n              isDisabled={this.props.step < 4}\n              onClick={this.toggleActive}\n              step={4}\n              title={'Create an integration'}\n            />\n          </>\n        }\n        altSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={1}\n              title={'Start connection'}\n              subSteps={[\n                '1A. Choose connection',\n                '1B. Choose action',\n                '1C. Configure action',\n              ]}\n              activeSubstep={this.props.subStep}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={2}\n              title={'Finish connection'}\n              subSteps={[\n                '2A. Choose connection',\n                '2B. Choose action',\n                '2C. Configure action',\n              ]}\n              activeSubstep={this.props.subStep}\n            />\n            <WizardStep\n              isActive={this.props.step === 3}\n              isDisabled={this.props.step < 3}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={3}\n              title={'Add to integration'}\n            />\n            <WizardStep\n              isActive={this.props.step === 4}\n              isDisabled={this.props.step < 4}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={4}\n              title={'Create an integration'}\n            />\n          </>\n        }\n      />\n    );\n  }\n}\n","import { WizardStep, WizardSteps } from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IIntegrationEditorBreadcrumbsProps {\n  /**\n   * The one-based active step number.\n   */\n  step: number;\n}\n\nexport interface IIntegrationEditorBreadcrumbsState {\n  /**\n   * Indicates if the user clicked on a step. Used to show\n   * sub-steps when browsing from a mobile device.\n   */\n  active: boolean;\n}\n\n/**\n * A component to display the PatternFly Wizard Steps specific to the integration\n * editor flow.\n * @see [step]{@link IIntegrationEditorBreadcrumbsProps#step}\n */\nexport class IntegrationEditorBreadcrumbs extends React.Component<\n  IIntegrationEditorBreadcrumbsProps,\n  IIntegrationEditorBreadcrumbsState\n> {\n  public state = {\n    active: false,\n  };\n\n  constructor(props: IIntegrationEditorBreadcrumbsProps) {\n    super(props);\n    this.toggleActive = this.toggleActive.bind(this);\n  }\n\n  public toggleActive() {\n    this.setState({\n      active: !this.state.active,\n    });\n  }\n\n  public render() {\n    return (\n      <WizardSteps\n        active={this.state.active}\n        mainSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              onClick={this.toggleActive}\n              step={1}\n              title={'Add to integration'}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              onClick={this.toggleActive}\n              step={2}\n              title={'Save the integration'}\n            />\n          </>\n        }\n        altSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={1}\n              title={'Add to integration'}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={4}\n              title={'Save the integration'}\n            />\n          </>\n        }\n      />\n    );\n  }\n}\n","import { getConnectionIcon } from '@syndesis/api';\nimport { Step } from '@syndesis/models';\nimport {\n  IntegrationFlowStepGeneric,\n  IntegrationFlowStepWithOverview,\n  IntegrationVerticalFlow,\n} from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IIntegrationEditorSidebarProps {\n  /**\n   * the list of steps to render.\n   */\n  steps: Step[];\n  /**\n   * the zero-based index of a configured step that should be highlighted as\n   * active.\n   * This should not be set in conjunction with [addAtIndex]{@link IIntegrationEditorSidebarProps#addAtIndex}\n   */\n  activeIndex?: number;\n  /**\n   * the zero-based index where a new step is being added.\n   * This should not be set in conjunction with [activeIndex]{@link IIntegrationEditorSidebarProps#activeIndex}\n   */\n  addAtIndex?: number;\n  /**\n   * the icon to show in the circle of the step that is being added.\n   */\n  addIcon?: any;\n  /**\n   * The title of the information table shown for the step that is being added,\n   * in the extended view.\n   */\n  addI18nTitle?: string;\n  /**\n   * The text to show on the tooltip that opens when hovering with the mouse on\n   * the icon.\n   */\n  addI18nTooltip?: string;\n  /**\n   * The description of the information table shown for the step that is being\n   * added, in the extended view.\n   */\n  addI18nDescription?: string;\n}\n\n/**\n * This component shows the steps of an integration in a vertical fashion. It's\n * meant to be used as the sidebar of the `IntegrationEditorLayout` component.\n * Steps are rendered as circles, showing the step's connection icon.\n *\n * It offers two visualization, a compact one where just the icons are shown,\n * and an expanded one where additional information about the step are shown in\n * a table next to the step's circle.\n *\n * It can also show a step that is being added to the integration by providing\n * its position and some information about the configuration step.\n *\n * @see [steps]{@link IIntegrationEditorSidebarProps#steps}\n * @see [activeIndex]{@link IIntegrationEditorSidebarProps#activeIndex}\n * @see [addAtIndex]{@link IIntegrationEditorSidebarProps#addAtIndex}\n * @see [addIcon]{@link IIntegrationEditorSidebarProps#addIcon}\n * @see [addI18nTitle]{@link IIntegrationEditorSidebarProps#addI18nTitle}\n * @see [addI18nTooltip]{@link IIntegrationEditorSidebarProps#addI18nTooltip}\n * @see [addI18nDescription]{@link IIntegrationEditorSidebarProps#addI18nDescription}\n */\nexport class IntegrationEditorSidebar extends React.Component<\n  IIntegrationEditorSidebarProps\n> {\n  public render() {\n    return (\n      <IntegrationVerticalFlow>\n        {({ expanded }) =>\n          this.props.steps.map((s, idx) => {\n            const isActive = idx === this.props.activeIndex;\n            const hasAddStep = this.props.addAtIndex === idx + 1;\n            const isAfterActiveAddStep = this.props.addAtIndex! - 1 < idx;\n            const position = isAfterActiveAddStep ? idx + 2 : idx + 1;\n\n            const activeAddStep = (\n              <IntegrationFlowStepGeneric\n                icon={this.props.addIcon || <i className={'fa fa-plus'} />}\n                i18nTitle={this.props.addI18nTitle!}\n                i18nTooltip={this.props.addI18nTooltip!}\n                active={true}\n                showDetails={expanded}\n                description={this.props.addI18nDescription!}\n              />\n            );\n            return (\n              <React.Fragment key={idx}>\n                {s.stepKind === 'endpoint' && (\n                  <IntegrationFlowStepWithOverview\n                    icon={\n                      <img\n                        src={getConnectionIcon(\n                          process.env.PUBLIC_URL,\n                          s.connection!\n                        )}\n                        width={24}\n                        height={24}\n                      />\n                    }\n                    i18nTitle={`${position}. ${s.action!.name}`}\n                    i18nTooltip={`${position}. ${s.action!.name}`}\n                    active={isActive}\n                    showDetails={expanded}\n                    name={s.connection!.connector!.name}\n                    action={s.action!.name}\n                    dataType={'TODO'}\n                  />\n                )}\n                {hasAddStep ? activeAddStep : null}\n              </React.Fragment>\n            );\n          })\n        }\n      </IntegrationVerticalFlow>\n    );\n  }\n}\n","export * from './Integrations';\nexport * from './IntegrationCreatorBreadcrumbs';\nexport * from './IntegrationEditorBreadcrumbs';\nexport * from './IntegrationEditorSidebar';\nexport * from './IntegrationEditorStepAdder';\n","import { include } from 'named-urls';\n\nexport default include('/customizations', {\n  apiConnectors: include('api-connector', {\n    apiConnector: ':apiConnectorId',\n    create: include('create/swagger-connector', {\n      review: 'review',\n      save: 'save',\n      security: 'security',\n      upload: 'upload',\n    }),\n    list: '',\n  }),\n  extensions: include('extensions', {\n    extension: include(':extensionId', {\n      details: '',\n      update: 'update',\n    }),\n    import: 'import',\n    list: '',\n  }),\n  root: '',\n});\n","module.exports = __webpack_public_path__ + \"static/media/syndesis_logo_full_darkbkg.9c467d96.svg\";","import { include } from 'named-urls';\n\nexport default include('/data', {\n  root: '',\n  virtualizations: include('virtualizations', {\n    create: 'create',\n    import: 'import',\n    list: '',\n    virtualization: include(':virtualizationId', {\n      metrics: 'metrics',\n      relationship: 'relationship',\n      root: '',\n      sqlClient: 'sqlClient',\n      views: include('views', {\n        importSource: include('importSource', {\n          root: '',\n          selectConnection: 'selectConnection',\n          selectViews: 'selectViews',\n        }),\n        root: '',\n      }),\n    }),\n  }),\n});\n","/* tslint:disable:object-literal-sort-keys no-empty-interface */\nimport { Connection, Connector } from '@syndesis/models';\nimport { makeResolver, makeResolverNoParams } from '@syndesis/utils';\nimport routes from './routes';\n\nexport default {\n  connections: makeResolverNoParams(routes.connections),\n  connection: {\n    details: makeResolver<{ connection: Connection }>(\n      routes.connection.details,\n      ({ connection }) => ({\n        params: {\n          connectionId: connection.id,\n        },\n        state: {\n          connection,\n        },\n      })\n    ),\n    edit: makeResolver<{ connection: Connection }>(\n      routes.connection.edit,\n      ({ connection }) => ({\n        params: {\n          connectionId: connection.id,\n        },\n        state: {\n          connection,\n        },\n      })\n    ),\n  },\n  create: {\n    selectConnector: makeResolverNoParams(routes.create.selectConnector),\n    configureConnector: makeResolver<{\n      connector: Connector;\n    }>(routes.create.configureConnector, ({ connector }) => ({\n      params: {\n        connectorId: connector.id,\n      },\n      state: {\n        connector,\n      },\n    })),\n    review: makeResolver<{\n      connector: Connector;\n      configuredProperties: { [key: string]: string };\n    }>(routes.create.review, ({ connector, configuredProperties }) => ({\n      state: {\n        connector,\n        configuredProperties,\n      },\n    })),\n  },\n};\n","import { IntegrationMonitoring } from '@syndesis/models';\nimport { INotificationType } from '@syndesis/ui';\nimport * as React from 'react';\nimport { IConfigFile } from './WithConfig';\n\nexport interface IAppContext {\n  config: IConfigFile;\n  getPodLogUrl: (\n    config: IConfigFile,\n    monitoring: IntegrationMonitoring | undefined\n  ) => string | undefined;\n  logout(): void;\n  hideNavigation(): void;\n  showNavigation(): void;\n  pushNotification(msg: string, type: INotificationType): void;\n}\n\nexport const AppContextDefaultValue = {} as IAppContext;\n\nexport const AppContext = React.createContext<IAppContext>(\n  AppContextDefaultValue\n);\n","import * as React from 'react';\n\nexport interface IConfigFile {\n  apiBase: string;\n  apiEndpoint: string;\n  title: string;\n  consoleUrl: string;\n  project: string;\n  datamapper: {\n    baseMappingServiceUrl: string;\n    baseJavaInspectionServiceUrl: string;\n    baseXMLInspectionServiceUrl: string;\n    baseJSONInspectionServiceUrl: string;\n    disableMappingPreviewMode: boolean;\n  };\n  datavirt: {\n    dvUrl: string;\n  };\n  features: {\n    logging: boolean;\n  };\n  branding: {\n    logoWhiteBg: string;\n    logoDarkBg: string;\n    appName: string;\n    favicon32: string;\n    favicon16: string;\n    touchIcon: string;\n    productBuild: boolean;\n  };\n}\n\nexport interface IWithConfigProps {\n  children(props: IWithConfigState): any;\n}\n\nexport interface IWithConfigState {\n  loading: boolean;\n  error: boolean;\n  config?: IConfigFile;\n}\n\nexport class WithConfig extends React.Component<\n  IWithConfigProps,\n  IWithConfigState\n> {\n  public state = {\n    error: false,\n    loading: true,\n  };\n\n  public async componentDidMount() {\n    try {\n      const configResponse = await fetch(\n        `${process.env.PUBLIC_URL}/config.json`\n      );\n      const config = await configResponse.json();\n      this.setState({\n        config,\n        loading: false,\n      });\n    } catch (e) {\n      this.setState({\n        error: true,\n        loading: false,\n      });\n    }\n  }\n\n  public render() {\n    return this.props.children(this.state);\n  }\n}\n","import {\n  ApiContext,\n  ServerEventsContext,\n  WithServerEvents,\n} from '@syndesis/api';\nimport { IntegrationMonitoring } from '@syndesis/models';\nimport {\n  AppLayout,\n  AppTopMenu,\n  INotification,\n  INotificationType,\n  Loader,\n  Notifications,\n  PfDropdownItem,\n  PfVerticalNavItem,\n  UnrecoverableError,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouter } from '@syndesis/utils';\nimport i18next from 'i18next';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link, Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport { PageNotFound, WithErrorBoundary } from '../shared';\nimport './App.css';\nimport { AppContext } from './AppContext';\nimport { IConfigFile, WithConfig } from './WithConfig';\n\nimport logo from './syndesis_logo_full_darkbkg.svg';\n\nexport interface IAppRoute {\n  component:\n    | React.ComponentType<RouteComponentProps<any>>\n    | React.ComponentType<any>;\n  exact?: boolean;\n  icon: string;\n  label: string;\n  to: string;\n}\n\nexport interface IAppBaseProps {\n  routes: IAppRoute[];\n}\n\nexport interface IAppBaseState {\n  showNavigation: boolean;\n  notifications: INotification[];\n}\n\nexport class App extends React.Component<IAppBaseProps, IAppBaseState> {\n  public state = {\n    notifications: [],\n    showNavigation: true,\n  };\n\n  constructor(props: IAppBaseProps) {\n    super(props);\n    this.logout = this.logout.bind(this);\n    this.getPodLogUrl = this.getPodLogUrl.bind(this);\n    this.hideNavigation = this.hideNavigation.bind(this);\n    this.showNavigation = this.showNavigation.bind(this);\n    this.pushNotification = this.pushNotification.bind(this);\n    this.removeNotificationAction = this.removeNotificationAction.bind(this);\n  }\n\n  public removeNotificationAction(notifToRemove: INotification) {\n    const notifications = this.state.notifications.filter(\n      (n: INotification) => n.key !== notifToRemove.key\n    );\n\n    this.setState({\n      notifications,\n    });\n  }\n\n  public pushNotification(msg: string, type: INotificationType) {\n    this.setState({\n      notifications: [\n        ...this.state.notifications,\n        {\n          key: Date.now().toString(),\n          message: msg,\n          type,\n        },\n      ],\n    });\n  }\n\n  public logout() {\n    // do nothing\n  }\n\n  public getPodLogUrl(\n    config: IConfigFile,\n    monitoring: IntegrationMonitoring | undefined\n  ): string | undefined {\n    if (\n      !config ||\n      !monitoring ||\n      !monitoring.linkType ||\n      !monitoring.namespace ||\n      !monitoring.podName\n    ) {\n      return undefined;\n    }\n    const baseUrl = `${config.consoleUrl}/project/${\n      monitoring.namespace\n    }/browse/pods/${monitoring.podName}?tab=`;\n    switch (monitoring.linkType) {\n      case 'LOGS':\n        return baseUrl + 'logs';\n      case 'EVENTS':\n        return baseUrl + 'events';\n      default:\n        return undefined;\n    }\n  }\n\n  public hideNavigation(): void {\n    this.setState({\n      showNavigation: false,\n    });\n  }\n\n  public showNavigation(): void {\n    this.setState({\n      showNavigation: true,\n    });\n  }\n\n  public renderAppNav(t: i18next.TFunction) {\n    return (\n      <AppTopMenu username={'developer'}>\n        <PfDropdownItem>\n          <Link\n            to={'/logout'}\n            className=\"pf-c-dropdown__menu-item\"\n            children={t('Logout')}\n          />\n        </PfDropdownItem>\n      </AppTopMenu>\n    );\n  }\n\n  public renderVerticalNav() {\n    return this.props.routes.map(({ exact, icon, label, to }, index) => (\n      <PfVerticalNavItem\n        exact={exact}\n        icon={icon}\n        label={label}\n        to={to}\n        key={index}\n        data-testid={`navbar-link-${to}`}\n      />\n    ));\n  }\n\n  public render() {\n    return (\n      <Translation ns={['app', 'shared']}>\n        {t => (\n          <WithConfig>\n            {({ config, loading, error }) => (\n              <WithLoader\n                loading={loading}\n                error={error}\n                loaderChildren={<Loader />}\n                errorChildren={\n                  <UnrecoverableError\n                    i18nTitle={t('shared:error.title')}\n                    i18nInfo={t('shared:error.info')}\n                    i18nHelp={t('shared:error.help')}\n                    i18nRefreshLabel={t('shared:error.refreshButton')}\n                    i18nReportIssue={t('shared:error.reportIssueButton')}\n                    i18nShowErrorInfoLabel={t(\n                      'shared:error.showErrorInfoButton'\n                    )}\n                  />\n                }\n                minWait={1000}\n              >\n                {() => (\n                  <AppContext.Provider\n                    value={{\n                      config: config!,\n                      getPodLogUrl: this.getPodLogUrl,\n                      hideNavigation: this.hideNavigation,\n                      logout: this.logout,\n                      pushNotification: this.pushNotification,\n                      showNavigation: this.showNavigation,\n                    }}\n                  >\n                    <ApiContext.Provider\n                      value={{\n                        apiUri: `${config!.apiBase}${config!.apiEndpoint}`,\n                        dvApiUri: `${config!.apiBase}${config!.datavirt.dvUrl}`,\n                        headers: { 'SYNDESIS-XSRF-TOKEN': 'awesome' },\n                      }}\n                    >\n                      <ApiContext.Consumer>\n                        {({ apiUri, headers }) => (\n                          <WithServerEvents apiUri={apiUri} headers={headers}>\n                            {functions => (\n                              <ServerEventsContext.Provider value={functions}>\n                                <AppLayout\n                                  appTitle={'Syndesis'}\n                                  appNav={this.renderAppNav(t)}\n                                  verticalNav={this.renderVerticalNav()}\n                                  pictograph={\n                                    <img\n                                      src={logo}\n                                      alt=\"Syndesis\"\n                                      style={{ minWidth: '164px' }}\n                                    />\n                                  }\n                                  logoHref={'/'}\n                                  showNavigation={this.state.showNavigation}\n                                  onNavigationCollapse={this.hideNavigation}\n                                  onNavigationExpand={this.showNavigation}\n                                >\n                                  <Notifications\n                                    notifications={this.state.notifications}\n                                    notificationTimerDelay={8000}\n                                    removeNotificationAction={\n                                      this.removeNotificationAction\n                                    }\n                                  />\n                                  <WithRouter>\n                                    {({ match }) => (\n                                      <WithErrorBoundary key={match.url}>\n                                        <Switch>\n                                          {this.props.routes.map(\n                                            (\n                                              { to, exact, component },\n                                              index\n                                            ) => (\n                                              <Route\n                                                path={to}\n                                                exact={exact}\n                                                component={component}\n                                                key={index}\n                                              />\n                                            )\n                                          )}\n                                          <Route component={PageNotFound} />\n                                        </Switch>\n                                      </WithErrorBoundary>\n                                    )}\n                                  </WithRouter>\n                                </AppLayout>\n                              </ServerEventsContext.Provider>\n                            )}\n                          </WithServerEvents>\n                        )}\n                      </ApiContext.Consumer>\n                    </ApiContext.Provider>\n                  </AppContext.Provider>\n                )}\n              </WithLoader>\n            )}\n          </WithConfig>\n        )}\n      </Translation>\n    );\n  }\n}\n","export * from './App';\nexport * from './AppContext';\n","/* tslint:disable:object-literal-sort-keys */\nimport { include } from 'named-urls';\n\nexport default include('/connections', {\n  connections: '',\n  connection: include(':connectionId', {\n    edit: 'edit',\n    details: '',\n  }),\n  create: include('create', {\n    selectConnector: 'connection-basics',\n    configureConnector: 'configure-fields/:connectorId',\n    review: 'review',\n    root: '',\n  }),\n});\n","import { IFormControl } from '../models';\n\nexport function getValidationState({ form, field }: IFormControl) {\n  return form.touched[field.name] && form.errors[field.name]\n    ? 'error'\n    : form.touched[field.name]\n    ? 'success'\n    : null;\n}\n","import {\n  ControlLabel,\n  FormControl,\n  FormGroup,\n  HelpBlock,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\nexport const FormInputComponent: React.FunctionComponent<\n  IFormControl\n> = props => (\n  <FormGroup\n    controlId={props.field.name}\n    validationState={getValidationState(props)}\n  >\n    <ControlLabel>{props.property.displayName}</ControlLabel>\n    <FormControl\n      {...props.property.fieldAttributes}\n      {...props.field}\n      data-testid={props.field.name}\n      disabled={props.form.isSubmitting || props.property.disabled}\n      placeholder={props.property.placeholder}\n      type={props.type || 'text'}\n      onChange={props.field.onChange}\n    />\n    <HelpBlock>\n      {props.property.description}\n      {props.form.errors[props.field.name]}\n    </HelpBlock>\n  </FormGroup>\n);\n","import {\n  ControlLabel,\n  FormControl,\n  FormGroup,\n  HelpBlock,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\nexport const FormSelectComponent: React.FunctionComponent<\n  IFormControl\n> = props => (\n  <FormGroup\n    controlId={props.field.name}\n    validationState={getValidationState(props)}\n  >\n    <ControlLabel>{props.property.displayName}</ControlLabel>\n    <FormControl\n      {...props.property.fieldAttributes}\n      {...props.field}\n      data-testid={props.field.name}\n      disabled={props.form.isSubmitting || props.property.disabled}\n      componentClass=\"select\"\n    >\n      {props.property.enum &&\n        props.property.enum.map((opt: any) => (\n          <option key={opt.value} value={opt.value}>\n            {opt.label}\n          </option>\n        ))}\n    </FormControl>\n    <HelpBlock>\n      {props.property.description}\n      {props.form.errors[props.field.name]}\n    </HelpBlock>\n  </FormGroup>\n);\n","import {\n  ControlLabel,\n  FormControl,\n  FormGroup,\n  HelpBlock,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\nexport const FormTextAreaComponent: React.FunctionComponent<\n  IFormControl\n> = props => (\n  <FormGroup\n    controlId={props.field.name}\n    validationState={getValidationState(props)}\n  >\n    <ControlLabel>{props.property.displayName}</ControlLabel>\n    <FormControl\n      {...props.property.fieldAttributes}\n      {...props.field}\n      data-testid={props.field.name}\n      disabled={props.form.isSubmitting || props.property.disabled}\n      componentClass=\"textarea\"\n    />\n    <HelpBlock>\n      {props.property.description}\n      {props.form.errors[props.field.name]}\n    </HelpBlock>\n  </FormGroup>\n);\n","import { Checkbox, FormGroup, HelpBlock } from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\nexport const FormCheckboxComponent: React.FunctionComponent<\n  IFormControl\n> = props => (\n  <FormGroup\n    controlId={props.field.name}\n    validationState={getValidationState(props)}\n  >\n    <Checkbox\n      {...props.property.fieldAttributes}\n      {...props.field}\n      id={props.field.name}\n      checked={props.field.value}\n      data-testid={props.field.name}\n      disabled={props.form.isSubmitting || props.property.disabled}\n    >\n      {props.property.displayName}\n    </Checkbox>\n    <HelpBlock>\n      {props.property.description}\n      {props.form.errors[props.field.name]}\n    </HelpBlock>\n  </FormGroup>\n);\n","import * as React from 'react';\nimport { IFormControl } from '../models';\n\nexport const FormHiddenComponent: React.FunctionComponent<\n  IFormControl\n> = props => (\n  <div>\n    <input\n      {...props.property.fieldAttributes}\n      {...props.field}\n      type={props.type}\n      id={props.name}\n      data-testid={props.name}\n    />\n    {props.form.touched[props.field.name] &&\n      props.form.errors[props.field.name] && (\n        <div className=\"error\">{props.form.errors[props.field.name]}</div>\n      )}\n  </div>\n);\n","import {\n  ControlLabel,\n  DropdownButton,\n  Form,\n  FormGroup,\n  HelpBlock,\n  MenuItem,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\ninterface IDuration {\n  label: string;\n  value: number;\n}\n\nconst durations = [\n  {\n    label: 'Milliseconds',\n    value: 1,\n  },\n  {\n    label: 'Seconds',\n    value: 1000,\n  },\n  {\n    label: 'Minutes',\n    value: 60000,\n  },\n  {\n    label: 'Hours',\n    value: 3600000,\n  },\n  {\n    label: 'Days',\n    value: 86400000,\n  },\n] as IDuration[];\n\nfunction calculateDuration(duration: IDuration, initialValue: number) {\n  return initialValue / duration.value;\n}\n\nfunction calculateValue(duration: IDuration, value: number) {\n  return value * duration.value;\n}\n\nexport interface IFormDurationComponentState {\n  duration: IDuration;\n}\n\nexport class FormDurationComponent extends React.Component<\n  IFormControl,\n  IFormDurationComponentState\n> {\n  private inputField: HTMLInputElement = undefined as any;\n  constructor(props: IFormControl) {\n    super(props);\n    const index =\n      durations.findIndex(d => !(this.props.field.value / d.value >= 1)) - 1;\n    const duration = durations[index] || durations[0];\n    this.state = {\n      duration,\n    };\n    this.handleOnSelect = this.handleOnSelect.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.receiveInputRef = this.receiveInputRef.bind(this);\n  }\n  public receiveInputRef(ref: HTMLInputElement) {\n    this.inputField = ref;\n  }\n  public handleOnSelect(eventKey: number, event: React.ChangeEvent) {\n    const newDuration =\n      durations.find(duration => duration.value === eventKey) || durations[0];\n    this.setState({\n      duration: newDuration,\n    });\n    this.props.form.setFieldValue(\n      this.props.field.name,\n      calculateValue(newDuration, this.inputField.valueAsNumber),\n      true\n    );\n  }\n  public handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.props.form.setFieldValue(\n      this.props.field.name,\n      calculateValue(this.state.duration, event.target.valueAsNumber),\n      true\n    );\n  }\n  public handleBlur(event: React.ChangeEvent<HTMLInputElement>) {\n    this.props.form.setFieldValue(\n      this.props.field.name,\n      calculateValue(this.state.duration, event.target.valueAsNumber),\n      true\n    );\n  }\n  public render() {\n    return (\n      <FormGroup\n        controlId={this.props.field.name}\n        validationState={getValidationState(this.props)}\n      >\n        <ControlLabel>{this.props.property.displayName}</ControlLabel>\n        <Form.InputGroup>\n          <Form.FormControl\n            {...this.props.property.fieldAttributes}\n            data-testid={this.props.field.name}\n            type={'number'}\n            defaultValue={calculateDuration(\n              this.state.duration,\n              this.props.field.value\n            )}\n            disabled={\n              this.props.form.isSubmitting || this.props.property.disabled\n            }\n            onChange={this.handleChange}\n            onBlur={this.handleBlur}\n            inputRef={this.receiveInputRef}\n            min={0}\n          />\n          <DropdownButton\n            id={this.props.field.name + '-duration'}\n            componentClass={Form.InputGroup.Button}\n            title={this.state.duration.label}\n            onSelect={this.handleOnSelect}\n            disabled={\n              this.props.form.isSubmitting || this.props.property.disabled\n            }\n          >\n            {durations.map((duration, index) => (\n              <MenuItem key={index} eventKey={duration.value}>\n                {duration.label}\n              </MenuItem>\n            ))}\n          </DropdownButton>\n        </Form.InputGroup>\n        <HelpBlock>\n          {this.props.property.description}\n          {this.props.form.errors[this.props.field.name]}\n        </HelpBlock>\n      </FormGroup>\n    );\n  }\n}\n","import { Field } from 'formik';\nimport * as React from 'react';\nimport { IFormDefinition, IFormDefinitionProperty } from './models';\nimport {\n  FormCheckboxComponent,\n  FormDurationComponent,\n  FormHiddenComponent,\n  FormInputComponent,\n  FormSelectComponent,\n  FormTextAreaComponent,\n} from './widgets';\n\nexport interface INamedConfigurationProperty extends IFormDefinitionProperty {\n  name: string;\n}\n\nexport interface IRenderFieldProps {\n  property: INamedConfigurationProperty;\n  value: any;\n  [name: string]: any;\n}\n\nexport interface IFormBuilderProps<T> {\n  definition: IFormDefinition;\n  initialValue: T;\n  i18nRequiredProperty: string;\n  onSave: (value: T | any, actions: any) => void;\n  children(props: IFormBuilderChildrenProps<T>): any;\n}\n\nexport interface IFormBuilderChildrenProps<T> {\n  fields: INamedConfigurationProperty[];\n  getField: (props: IRenderFieldProps) => any;\n  initialValue: T;\n  onSave: (value: T, actions: any) => void;\n}\n\nexport class FormBuilder<T> extends React.Component<IFormBuilderProps<T>> {\n  /**\n   * Converts a property configuration to some kind of input field\n   * @param props\n   */\n  public getField = (props: IRenderFieldProps): any => {\n    // Massage the value in the definition to an input type\n    const type = this.massageType(props.property);\n    const componentTypemaps = {\n      checkbox: FormCheckboxComponent,\n      duration: FormDurationComponent,\n      hidden: FormHiddenComponent,\n      select: FormSelectComponent,\n      textarea: FormTextAreaComponent,\n    };\n    const validate = (value: any) => {\n      if (props.property.required && !value) {\n        return this.props.i18nRequiredProperty;\n      }\n      return undefined;\n    };\n    return (\n      <Field\n        key={props.property.name}\n        name={props.property.name}\n        type={type}\n        validate={validate}\n        {...props}\n        component={componentTypemaps[type] || FormInputComponent}\n      />\n    );\n  };\n\n  public render() {\n    const fields = this.enrichAndOrderProperties(this.props.definition);\n    const massagedValue = this.sanitizeValues(\n      this.props.definition,\n      this.props.initialValue\n    );\n    return this.props.children({\n      fields,\n      getField: this.getField,\n      initialValue: massagedValue,\n      onSave: this.props.onSave,\n    });\n  }\n\n  /**\n   * Ensure that the input values match the property definitions\n   */\n  private sanitizeValues(definition: IFormDefinition, initialValue: any): T {\n    return Object.keys(definition).reduce((result, key): any => {\n      const prop = definition[key];\n      let value = this.massageValue(prop, initialValue[key]);\n      if (value == null) {\n        value = this.massageValue(prop, prop.defaultValue);\n      }\n      return { ...result, [key]: value };\n    }, {}) as T;\n  }\n\n  /**\n   * Add the 'name' field from the property ID and sort them by the 'order' property\n   */\n  private enrichAndOrderProperties(definition: IFormDefinition) {\n    return Object.keys(definition)\n      .map(key => ({\n        ...definition[key],\n        name: key,\n        required: this.massageRequired(definition[key]),\n        type: this.massageType(definition[key]),\n      }))\n      .sort((a, b) => {\n        const aOrder = (a.order || 0) as number;\n        const bOrder = (b.order || 0) as number;\n        return aOrder - bOrder;\n      });\n  }\n\n  /**\n   * Converts various values passed into the property type to known input types\n   *\n   * @param property\n   */\n  private massageType(property: IFormDefinitionProperty) {\n    let type = property.type || 'text';\n    switch (type) {\n      case 'int':\n      case 'integer':\n      case 'long':\n        type = 'number';\n        break;\n      case 'string':\n        type = 'text';\n        break;\n      case 'boolean':\n        type = 'checkbox';\n    }\n    if (property.enum && property.enum.length) {\n      type = 'select';\n    }\n    if (property.secret) {\n      type = 'password';\n    }\n    return type;\n  }\n\n  /**\n   * Ensure that the 'required' property is false for checkboxes and hidden fields\n   *\n   * This is a candidate for removal in the future, as it's a workaround\n   *\n   * @param property\n   */\n  private massageRequired(property: IFormDefinitionProperty): any {\n    switch (property.type) {\n      case 'boolean':\n      case 'checkbox':\n      case 'hidden':\n        return false;\n      default:\n        return property.required;\n    }\n  }\n\n  /**\n   * Converts the given value from a string to the type defined in the property definition\n   *\n   * This is a candidate for removal as it's a workaround\n   *\n   * @param property\n   * @param value\n   */\n  private massageValue(property: IFormDefinitionProperty, value?: string) {\n    if (value === undefined || value === null) {\n      return value;\n    }\n    switch (property.type) {\n      case 'number':\n        return parseInt(value, 10);\n      case 'boolean':\n      case 'checkbox':\n        return String(value).toLocaleLowerCase() === 'true';\n      default:\n        return value;\n    }\n  }\n}\n","import { Formik, FormikErrors } from 'formik';\nimport * as React from 'react';\nimport { FormBuilder } from './FormBuilder';\nimport { IFormDefinition, IFormErrors } from './models';\n\nexport interface IAutoFormProps<T> {\n  /**\n   * A map of configuration properties as returned by the Syndesis API\n   */\n  definition: IFormDefinition;\n  /**\n   * The initial value that should be set on the form\n   */\n  initialValue: T;\n  /**\n   * String to be displayed when a required field isn't set\n   */\n  i18nRequiredProperty: string;\n  /**\n   * Callback function that will be called when the form is submitted\n   */\n  onSave: (value: T, actions: any) => void;\n  /**\n   * Validation function called whenever a change or blur event occurs on the form\n   */\n  validate?: (value: T | any) => IFormErrors | Promise<any> | undefined;\n  /**\n   * Child component that will receive the form fields and submit handler\n   */\n  children: (state: IAutoFormChildrenProps) => any;\n}\n\nexport interface IAutoFormChildrenProps {\n  /**\n   * Fragment containing all of the form fields\n   */\n  fields: JSX.Element;\n  /**\n   * Function to trigger a form submit which will then trigger onSave\n   */\n  handleSubmit: (e?: any) => void;\n  dirty: boolean;\n  isSubmitting: boolean;\n  isValid: boolean;\n  isValidating: boolean;\n  resetForm: (nextValues?: any) => void;\n  submitForm: () => void;\n  validateForm: () => Promise<FormikErrors<any>>;\n  values: any;\n  errors: any;\n}\n\nexport class AutoForm<T> extends React.Component<IAutoFormProps<T>> {\n  public render() {\n    return (\n      <FormBuilder\n        definition={this.props.definition}\n        initialValue={this.props.initialValue}\n        onSave={this.props.onSave}\n        i18nRequiredProperty={this.props.i18nRequiredProperty}\n      >\n        {({ initialValue, fields, onSave, getField }) => (\n          <Formik<T>\n            initialValues={initialValue}\n            onSubmit={onSave}\n            validate={this.props.validate}\n          >\n            {({\n              handleSubmit,\n              values,\n              touched,\n              dirty,\n              errors,\n              isValid,\n              isValidating,\n              isSubmitting,\n              resetForm,\n              validateForm,\n              submitForm,\n            }) =>\n              this.props.children({\n                dirty,\n                errors,\n                fields: (\n                  <React.Fragment>\n                    {fields.map(property =>\n                      getField({\n                        errors,\n                        property,\n                        touched,\n                        value: (values || {})[property.name],\n                      })\n                    )}\n                  </React.Fragment>\n                ),\n                handleSubmit,\n                isSubmitting,\n                isValid,\n                isValidating,\n                resetForm,\n                submitForm,\n                validateForm,\n                values,\n              })\n            }\n          </Formik>\n        )}\n      </FormBuilder>\n    );\n  }\n}\n","const ALPHABET =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\nconst RANDOMNESS: number[] = [];\nlet lastTimestamp = 0;\n\n/**\n * Generates lexically sortable unique keys based on:\n *\n * https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html\n *\n * You can also consider the generated kys to be like UUIDS except:\n * (1) strictly increment from the generating node's point of view\n * (2) loosely increment based on relative machine time when viewed across nodes.\n */\nexport function key() {\n  // first time setup.. initialize the randomness...\n  if (RANDOMNESS.length === 0) {\n    for (let i = 0; i < 12; i++) {\n      RANDOMNESS[i] = Math.floor(Math.random() * 64);\n    }\n  }\n\n  // we build the resulting key backwards. The most significant bits at the front of the key.\n  let result = '';\n  const timestamp = new Date().getTime();\n\n  // Lets encode the random part of the key. (72 bits of randomness)\n  // 72/6 = 12 base64 characters.\n\n  // increment randomness when we being called too keys too quickly.\n  if (timestamp === lastTimestamp) {\n    for (let i = 0; i < 12; i++) {\n      RANDOMNESS[i]++;\n      if (RANDOMNESS[i] === 64) {\n        RANDOMNESS[i] = 0; // we need to carry to the next random byte.\n      } else {\n        break; // done incrementing.\n      }\n    }\n  }\n\n  for (let i = 0; i < 12; i++) {\n    result = ALPHABET.charAt(RANDOMNESS[i]) + result;\n  }\n\n  // Base64 encodes 6 bits of data per character. We want to encode\n  // 6 bytes of the timestamp (48 bits), 48/6 = 8 base64 chars for the ts part\n  // the key.\n  let remainingTimestamp = timestamp;\n  for (let i = 0; i < 8; i++) {\n    result = ALPHABET.charAt(remainingTimestamp % 64) + result;\n    remainingTimestamp = Math.floor(remainingTimestamp / 64);\n  }\n\n  lastTimestamp = timestamp;\n  return result;\n}\n","import { IActiveFilter, IFilterType, ISortType } from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IWithListViewToolbarHelpers\n  extends IWithListViewToolbarHelpersState {\n  onClearFilters(event: React.MouseEvent<HTMLAnchorElement>): void;\n  onFilterAdded(title: string, value: string): void;\n  onFilterValueSelected(filterValue: { id: string; title: string }): void;\n  onRemoveFilter(filter: IActiveFilter): void;\n  onSelectFilterType(filterType: IFilterType): void;\n  onToggleCurrentSortDirection(): void;\n  onUpdateCurrentSortType(sortType: string): void;\n  onUpdateCurrentValue(event: Event): void;\n  onValueKeyPress(keyEvent: KeyboardEvent): void;\n}\n\nexport interface IWithListViewToolbarHelpersProps {\n  defaultFilterType: IFilterType;\n  defaultSortType: ISortType;\n  children(props: IWithListViewToolbarHelpers): any;\n}\n\nexport interface IWithListViewToolbarHelpersState {\n  activeFilters: IActiveFilter[];\n  currentFilterType: IFilterType;\n  currentSortType: string;\n  currentValue: any;\n  filterCategory: any;\n  isSortAscending: boolean;\n}\n\nexport class WithListViewToolbarHelpers extends React.Component<\n  IWithListViewToolbarHelpersProps,\n  IWithListViewToolbarHelpersState\n> {\n  constructor(props: IWithListViewToolbarHelpersProps) {\n    super(props);\n    this.state = {\n      activeFilters: [] as IActiveFilter[],\n      currentFilterType: this.props.defaultFilterType,\n      currentSortType: this.props.defaultSortType.title,\n      currentValue: '',\n      filterCategory: null,\n      isSortAscending: true,\n    };\n  }\n\n  public onUpdateCurrentValue = (event: Event) => {\n    this.setState({ currentValue: (event.target as HTMLInputElement).value });\n  };\n\n  public onValueKeyPress = (keyEvent: KeyboardEvent) => {\n    const { currentValue, currentFilterType } = this.state;\n\n    if (keyEvent.key === 'Enter' && currentValue && currentValue.length > 0) {\n      this.setState({ currentValue: '' });\n      this.onFilterAdded(currentFilterType.title, currentValue);\n      keyEvent.stopPropagation();\n      keyEvent.preventDefault();\n    }\n  };\n\n  public onFilterAdded = (title: string, value: string) => {\n    const { activeFilters } = this.state;\n    this.setState({\n      activeFilters: [\n        ...activeFilters,\n        {\n          title,\n          value,\n        } as IActiveFilter,\n      ],\n    });\n  };\n\n  public onSelectFilterType = (filterType: IFilterType) => {\n    const { currentFilterType } = this.state;\n    if (currentFilterType !== filterType) {\n      this.setState({ currentValue: '', currentFilterType: filterType });\n    }\n  };\n\n  public onFilterValueSelected = (filterValue: {\n    id: string;\n    title: string;\n  }) => {\n    const { currentFilterType } = this.state;\n\n    this.setState({ currentValue: filterValue.title });\n    if (filterValue) {\n      this.onFilterAdded(currentFilterType.title, filterValue.title);\n    }\n  };\n\n  public onRemoveFilter = (filter: IActiveFilter) => {\n    const { activeFilters } = this.state;\n\n    const index = activeFilters.indexOf(filter);\n    if (index > -1) {\n      const updated = [\n        ...activeFilters.slice(0, index),\n        ...activeFilters.slice(index + 1),\n      ];\n      this.setState({ activeFilters: updated });\n    }\n  };\n\n  public onClearFilters = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    event.preventDefault();\n    this.setState({ activeFilters: [] });\n  };\n\n  public onToggleCurrentSortDirection = () => {\n    const { isSortAscending } = this.state;\n\n    this.setState({ isSortAscending: !isSortAscending });\n  };\n\n  public onUpdateCurrentSortType = (sortType: string) => {\n    const { currentSortType } = this.state;\n\n    if (currentSortType !== sortType) {\n      this.setState({\n        currentSortType: sortType,\n        isSortAscending: true,\n      });\n    }\n  };\n\n  public render() {\n    return this.props.children({\n      onClearFilters: this.onClearFilters,\n      onFilterAdded: this.onFilterAdded,\n      onFilterValueSelected: this.onFilterValueSelected,\n      onRemoveFilter: this.onRemoveFilter,\n      onSelectFilterType: this.onSelectFilterType,\n      onToggleCurrentSortDirection: this.onToggleCurrentSortDirection,\n      onUpdateCurrentSortType: this.onUpdateCurrentSortType,\n      onUpdateCurrentValue: this.onUpdateCurrentValue,\n      onValueKeyPress: this.onValueKeyPress,\n      ...this.state,\n    });\n  }\n}\n","import * as React from 'react';\n\nexport interface IWithLoaderProps {\n  /**\n   * If true, the [errorChildren]{@link IWithLoaderProps#errorChildren} will be\n   * rendered.\n   */\n  error: boolean;\n  /**\n   * If true, the [loaderChildren]{@link IWithLoaderProps#loaderChildren}\n   * will be rendered.\n   */\n  loading: boolean;\n  /**\n   * The minimum amount of time to wait before invoking the [children]{@link IWithLoaderProps#children}\n   * render prop. If high enough, it will avoid a flash of loading component.\n   * Defaults to 500ms.\n   */\n  minWait?: number;\n  /**\n   * The content to render when data is loading.\n   */\n  loaderChildren: JSX.Element;\n  /**\n   * The content to render when error occurred while loading data.\n   */\n  errorChildren: JSX.Element;\n\n  /**\n   * A render prop that will be invoked if both [loading]{@link IWithLoaderProps#loading}\n   * and [error]{@link IWithLoaderProps#error} are `false`.\n   */\n  children(): any;\n}\n\nexport interface IWithLoaderState {\n  loaded: boolean;\n}\n\n/**\n * A component to handle asynchronous data-loading. It will show the provided\n * loader component for a minimum amount of time - to avoid flash of loading\n * component - before invoking the children render prop.\n * It will also handle the error state rendering the provided error component\n * in case of errors loading the data.\n *\n * @see [error]{@link IWithLoaderProps#error}\n * @see [loading]{@link IWithLoaderProps#loading}\n * @see [minWait]{@link IWithLoaderProps#minWait}\n * @see [loaderChildren]{@link IWithLoaderProps#loaderChildren}\n * @see [errorChildren]{@link IWithLoaderProps#errorChildren}\n * @see [children]{@link IWithLoaderProps#children}\n */\nexport class WithLoader extends React.Component<\n  IWithLoaderProps,\n  IWithLoaderState\n> {\n  public static defaultProps = {\n    minWait: 500,\n  };\n\n  protected waitTimeout?: number;\n\n  constructor(props: IWithLoaderProps) {\n    super(props);\n    this.state = {\n      loaded: !this.props.loading,\n    };\n  }\n\n  public componentWillReceiveProps(nextProps: IWithLoaderProps) {\n    this.setState({\n      loaded: !nextProps.loading,\n    });\n  }\n\n  public componentDidUpdate(prevProps: IWithLoaderProps) {\n    if (!this.props.loading && !this.waitTimeout) {\n      this.setTimeout();\n    }\n  }\n\n  public render() {\n    if (this.props.error) {\n      return this.props.errorChildren;\n    }\n    if (!this.state.loaded) {\n      return this.props.loaderChildren;\n    }\n    return this.props.children();\n  }\n\n  protected setTimeout() {\n    this.clearTimeout();\n    this.waitTimeout = window.setTimeout(() => {\n      this.setState({\n        loaded: true,\n      });\n    }, this.props.minWait!);\n  }\n\n  protected clearTimeout() {\n    if (this.waitTimeout) {\n      clearTimeout(this.waitTimeout);\n      this.waitTimeout = undefined;\n    }\n  }\n}\n","import * as React from 'react';\nimport { Route, RouteChildrenProps } from 'react-router';\n\nexport interface IWithRouteDataProps<P, S> {\n  /**\n   * A render propr that will receive the route params and state.\n   * @param params - the route params, with type `P`.\n   * @param state - the route state, with type `S`.\n   * @param route - the raw route object, as provided by the `Route` component.\n   */\n  children(params: P, state: S, route: RouteChildrenProps): any;\n}\n\n/**\n * A render-prop component that returns a route params - with type `P` - and\n * state - with type `S`.\n * *Warning:* this component doesn't provide any assurance on the returned shape\n * of neither the params nor the state objects.\n * @see [children]{@link IWithRouteDataProps#children}\n */\nexport class WithRouteData<P, S> extends React.Component<\n  IWithRouteDataProps<P, S>\n> {\n  public render() {\n    return (\n      <Route>\n        {route => {\n          if (!route.match) {\n            throw new Error(\"Route doesn't have a match\");\n          }\n          const params: P = route.match.params || ({} as P);\n          const state: S = route.location.state || ({} as S);\n          return this.props.children(params, state, route);\n        }}\n      </Route>\n    );\n  }\n}\n","import * as React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router';\n\nexport interface IWithRouterProps extends RouteComponentProps {\n  children(router: RouteComponentProps): any;\n}\n\nexport class WithRouterBase extends React.Component<IWithRouterProps> {\n  public render() {\n    const { children, ...props } = this.props;\n    return children(props);\n  }\n}\n\nexport const WithRouter = withRouter<IWithRouterProps>(WithRouterBase);\n","import { reverse } from 'named-urls';\n\nexport interface IRoute<P, S> {\n  params?: P;\n  state?: S;\n  route?: string;\n}\n\nexport interface IResolvedRoute<P, S> extends IRoute<P, S> {\n  pathname: string;\n}\n\n/**\n * Creates a function that takes a route and some `data` `T` that returns the\n * reversed URL.\n * Use `mapper` to write the business logic required to convert the `data` object\n * to the basic params that can be passed in an url (strings and numbers), and to\n * set the state object that will be pushed in the history together with the url.\n * @param defaultRoute\n * @param mapper\n */\nexport function makeResolver<T, P = any, S = any>(\n  defaultRoute: string,\n  mapper: (data: T) => IRoute<P, S>\n) {\n  return (data: T): IResolvedRoute<P, S> => {\n    const { params, route, state } = mapper(data);\n    return {\n      params,\n      pathname: reverse(route || defaultRoute, params || {}),\n      route: route || defaultRoute,\n      state,\n    };\n  };\n}\n\n/**\n * Creates a function that takes a route and some `data` `T` that returns the\n * reversed URL.\n * Use `mapper` to write the business logic required to convert the `data` object\n * to the basic params that can be passed in an url (strings and numbers), and to\n * set the state object that will be pushed in the history together with the url.\n * @param defaultRoute\n * @param mapper\n */\nexport function makeResolverNoParamsWithDefaults<P = any, S = any>(\n  defaultRoute: string,\n  mapper: () => IRoute<P, S>\n) {\n  return (): IResolvedRoute<P, S> => {\n    const { params, route, state } = mapper();\n    return {\n      params,\n      pathname: reverse(route || defaultRoute, params || {}),\n      route: route || defaultRoute,\n      state,\n    };\n  };\n}\n\n/**\n * Creates a function that takes a route and some `data` `T` that returns the\n * reversed URL.\n * @param route\n */\nexport function makeResolverNoParams(route: string) {\n  return (): IResolvedRoute<null, null> => ({\n    pathname: reverse(route),\n    route,\n  });\n}\n","import { OptionalInt } from '@syndesis/models';\n\n/**\n *\n * @param value the value being used\n * @returns the `OptionalInt` object created from the specified value\n */\nexport function createOptionalInt(value: number): OptionalInt {\n  return { present: true, asInt: value };\n}\n\n/**\n * @param optional the `OptionalInt` whose value is being requested\n * @param defaultValue the value to return if no value exists\n * @returns the int value (defaults to zero)\n */\nexport function optionalIntValue(\n  optional: OptionalInt | undefined,\n  defaultValue: number = 0\n): number {\n  if (optional && optional.present) {\n    const value = optional.asInt;\n    return value ? value : defaultValue;\n  }\n\n  return defaultValue;\n}\n\n/**\n * @param optional the value whose value is being checked\n * @returns true if the optional exists and there is a value\n */\nexport function optionalIntHasValue(\n  optional: OptionalInt | undefined\n): boolean {\n  return optional && optional.present ? optional.present : false;\n}\n","import { WizardStep, WizardSteps } from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IConnectionCreatorBreadcrumbsProps {\n  /**\n   * The one-based active step number.\n   */\n  step: number;\n}\n\nexport interface IConnectionCreatorBreadcrumbsState {\n  /**\n   * Indicates if the user clicked on a step. Used to show\n   * sub-steps when browsing from a mobile device.\n   */\n  active: boolean;\n}\n\n/**\n * A component to display the PatternFly Wizard Steps specific to the integration\n * creator flow.\n * @see [step]{@link IConnectionCreatorBreadcrumbsProps#step}\n * @see [subStep]{@link IConnectionCreatorBreadcrumbsProps#subStep}\n */\nexport class ConnectionCreatorBreadcrumbs extends React.Component<\n  IConnectionCreatorBreadcrumbsProps,\n  IConnectionCreatorBreadcrumbsState\n> {\n  public state = {\n    active: false,\n  };\n\n  constructor(props: IConnectionCreatorBreadcrumbsProps) {\n    super(props);\n    this.toggleActive = this.toggleActive.bind(this);\n  }\n\n  public toggleActive() {\n    this.setState({\n      active: !this.state.active,\n    });\n  }\n\n  public render() {\n    return (\n      <WizardSteps\n        active={this.state.active}\n        mainSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              onClick={this.toggleActive}\n              step={1}\n              title={'Select connector'}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              onClick={this.toggleActive}\n              step={2}\n              title={'Configure connection'}\n            />\n            <WizardStep\n              isActive={this.props.step === 3}\n              isDisabled={this.props.step < 3}\n              onClick={this.toggleActive}\n              step={3}\n              title={'Name connection'}\n            />\n          </>\n        }\n        altSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={1}\n              title={'Select connector'}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={2}\n              title={'Configure connection'}\n            />\n            <WizardStep\n              isActive={this.props.step === 3}\n              isDisabled={this.props.step < 3}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={3}\n              title={'Name connection'}\n            />\n          </>\n        }\n      />\n    );\n  }\n}\n","import { getConnectionIcon, WithConnectionHelpers } from '@syndesis/api';\nimport { Connection } from '@syndesis/models';\nimport {\n  ConnectionCard,\n  ConnectionsGrid,\n  ConnectionsGridCell,\n  ConnectionSkeleton,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { AppContext } from '../../../app';\nimport { ApiError } from '../../../shared';\n\nexport interface IConnectionsProps {\n  error: boolean;\n  includeConnectionMenu: boolean;\n  loading: boolean;\n  connections: Connection[];\n  getConnectionHref(connection: Connection): H.LocationDescriptor;\n  getConnectionEditHref(connection: Connection): H.LocationDescriptor;\n}\n\nexport class Connections extends React.Component<IConnectionsProps> {\n  public render() {\n    return (\n      <AppContext.Consumer>\n        {({ pushNotification }) => {\n          return (\n            <Translation ns={['connections', 'shared']}>\n              {t => (\n                <WithConnectionHelpers>\n                  {({ deleteConnection }) => {\n                    const doDelete = async (\n                      connectionId: string,\n                      connectionName: string\n                    ) => {\n                      try {\n                        await deleteConnection(connectionId);\n                        pushNotification(\n                          t('connectionDeletedSuccess', { connectionName }),\n                          'success'\n                        );\n                      } catch (error) {\n                        const details = error.message ? error.message : '';\n                        pushNotification(\n                          t('connectionDeletedFailed', {\n                            connectionName,\n                            details,\n                          }),\n                          'error'\n                        );\n                      }\n                    };\n                    return (\n                      <ConnectionsGrid>\n                        <WithLoader\n                          error={this.props.error}\n                          loading={this.props.loading}\n                          loaderChildren={\n                            <>\n                              {new Array(5).fill(0).map((_, index) => (\n                                <ConnectionsGridCell key={index}>\n                                  <ConnectionSkeleton />\n                                </ConnectionsGridCell>\n                              ))}\n                            </>\n                          }\n                          errorChildren={<ApiError />}\n                        >\n                          {() =>\n                            this.props.connections.map((c, index) => {\n                              const handleDelete = (): void => {\n                                doDelete(c.id!, c.name); // must have an ID if deleting\n                              };\n\n                              return (\n                                <ConnectionsGridCell key={index}>\n                                  <ConnectionCard\n                                    name={c.name}\n                                    description={c.description || ''}\n                                    icon={getConnectionIcon(\n                                      process.env.PUBLIC_URL,\n                                      c,\n                                    )}\n                                    href={this.props.getConnectionHref(c)}\n                                    menuProps={\n                                      this.props.includeConnectionMenu\n                                        ? {\n                                            editHref: this.props.getConnectionEditHref(\n                                              c\n                                            ),\n                                            i18nCancelLabel: t('shared:Cancel'),\n                                            i18nDeleteLabel: t('shared:Delete'),\n                                            i18nDeleteModalMessage: t(\n                                              'deleteModalMessage',\n                                              { connectionName: c.name }\n                                            ),\n                                            i18nDeleteModalTitle: t(\n                                              'deleteModalTitle'\n                                            ),\n                                            i18nEditLabel: t('shared:Edit'),\n                                            i18nMenuTitle: t(\n                                              'connectionCardMenuTitle'\n                                            ),\n                                            i18nViewLabel: t('shared:View'),\n                                            isDeleteEnabled:\n                                              (c.uses as number) === 0,\n                                            onDelete: handleDelete,\n                                          }\n                                        : undefined\n                                    }\n                                  />\n                                </ConnectionsGridCell>\n                              );\n                            })\n                          }\n                        </WithLoader>\n                      </ConnectionsGrid>\n                    );\n                  }}\n                </WithConnectionHelpers>\n              )}\n            </Translation>\n          );\n        }}\n      </AppContext.Consumer>\n    );\n  }\n}\n","import { Connection } from '@syndesis/models';\nimport {\n  ConnectionsListView,\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport resolvers from '../resolvers';\nimport { Connections, IConnectionsProps } from './Connections';\n\nfunction getFilteredAndSortedConnections(\n  connections: Connection[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSortedConnections = connections;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSortedConnections = filteredAndSortedConnections.filter(\n      (c: Connection) => c.name.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSortedConnections = filteredAndSortedConnections.sort(\n    (miA, miB) => {\n      const left = isSortAscending ? miA : miB;\n      const right = isSortAscending ? miB : miA;\n      return left.name.localeCompare(right.name);\n    }\n  );\n\n  return filteredAndSortedConnections;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport interface IConnectionsWithToolbarProps extends IConnectionsProps {\n  children?: any;\n}\n\nexport class ConnectionsWithToolbar extends React.Component<\n  IConnectionsWithToolbarProps\n> {\n  public static defaultProps = {\n    includeHidden: false,\n  };\n\n  public render() {\n    return (\n      <Translation ns={['shared']}>\n        {t => (\n          <WithListViewToolbarHelpers\n            defaultFilterType={filterByName}\n            defaultSortType={sortByName}\n          >\n            {helpers => {\n              const filteredAndSortedConnections = getFilteredAndSortedConnections(\n                this.props.connections,\n                helpers.activeFilters,\n                helpers.currentSortType,\n                helpers.isSortAscending\n              );\n\n              return (\n                <ConnectionsListView\n                  linkToConnectionCreate={resolvers.create.selectConnector()}\n                  filterTypes={filterTypes}\n                  sortTypes={sortTypes}\n                  resultsCount={filteredAndSortedConnections.length}\n                  {...helpers}\n                  i18nLinkCreateConnection={t('shared:linkCreateConnection')}\n                  i18nResultsCount={t('shared:resultsCount', {\n                    count: filteredAndSortedConnections.length,\n                  })}\n                >\n                  {this.props.children}\n                  <Connections\n                    error={this.props.error}\n                    includeConnectionMenu={true}\n                    loading={this.props.loading}\n                    connections={filteredAndSortedConnections}\n                    getConnectionHref={this.props.getConnectionHref}\n                    getConnectionEditHref={this.props.getConnectionEditHref}\n                  />\n                </ConnectionsListView>\n              );\n            }}\n          </WithListViewToolbarHelpers>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { WithConnectionHelpers } from '@syndesis/api';\nimport { AutoForm, IFormDefinition } from '@syndesis/auto-form';\nimport { Connector } from '@syndesis/models';\nimport { IConnectorConfigurationFormValidationResult } from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IWithConnectorFormChildrenProps {\n  /**\n   * the form (embedded in the right UI elements)\n   */\n  fields: JSX.Element;\n  /**\n   * true if the form has been modified.\n   */\n  dirty: boolean;\n  /**\n   * true if the form contains valid values. Can be used to enable/disable the\n   * submit button.\n   */\n  isValid: boolean;\n  /**\n   * true if the form is being validated. Can be used to enable/disable the\n   * validate button.\n   */\n  isValidating: boolean;\n  /**\n   * true if the form is being submitted. Can be used to enable/disable the\n   * submit button.\n   */\n  isSubmitting: boolean;\n  /**\n   * the current values of the form fields\n   */\n  values: { [key: string]: string };\n\n  validationResults: IConnectorConfigurationFormValidationResult[];\n\n  resetForm: (nextValues?: any) => void;\n\n  handleSubmit: (e?: any) => void;\n  /**\n   * the callback to trigger to validate the form against the backend.\n   */\n  validateForm(): any;\n  /**\n   * the callback to trigger to submit the form.\n   */\n  submitForm(): any;\n}\n\nexport interface IWithConnectorFormProps {\n  /**\n   * the connection object that contains the action with the provided\n   * [actionId]{@link IWithConnectorFormProps#actionId}. Used to retrieve\n   * the form definition.\n   */\n  connector: Connector;\n  /**\n   * the values to assign to the form once rendered. These can come either from\n   * an existing integration or from the [onSave]{@link IWithConnectorFormProps#onSave}\n   * callback.\n   */\n  initialValue?: { [key: string]: string };\n\n  /**\n   * true to have the fields rendered as read-only.\n   */\n  disabled?: boolean;\n\n  /**\n   * the render prop that will receive the ready-to-be-rendered form and some\n   * helpers.\n   *\n   * @see [form]{@link IWithConnectorFormChildrenProps#form}\n   * @see [isValid]{@link IWithConnectorFormChildrenProps#isValid}\n   * @see [isSubmitting]{@link IWithConnectorFormChildrenProps#isSubmitting}\n   * @see [onSubmit]{@link IWithConnectorFormChildrenProps#submitForm}\n   */\n  children(props: IWithConnectorFormChildrenProps): any;\n\n  /**\n   * the callback that is fired after the form submit with valid values.\n   *\n   * @see [action]{@link IOnUpdatedIntegrationProps#action}\n   */\n  onSave(props: { [key: string]: string }, action: any): any;\n}\n\n/**\n * A component to generate a configuration form for a given action and values.\n *\n * @see [action]{@link IWithConnectorFormProps#action}\n * @see [moreConfigurationSteps]{@link IWithConnectorFormProps#moreConfigurationSteps}\n * @see [values]{@link IWithConnectorFormProps#values}\n */\nexport class WithConnectorForm extends React.Component<\n  IWithConnectorFormProps\n> {\n  public static defaultProps = {\n    initialValue: {},\n  };\n\n  public render() {\n    const definition = Object.keys(this.props.connector.properties!).reduce(\n      (def, key) => {\n        const d = this.props.connector.properties![key];\n        def[key] = {\n          ...d,\n          disabled: this.props.disabled,\n        };\n        return def;\n      },\n      {}\n    );\n    return (\n      <WithConnectionHelpers>\n        {({ validateConfiguration }) => {\n          let shouldValidateAgainstBackend = false;\n          let validationResults: IConnectorConfigurationFormValidationResult[] = [];\n          const validateFormAgainstBackend = async (values: {\n            [key: string]: string;\n          }) => {\n            validationResults = [];\n            if (shouldValidateAgainstBackend) {\n              const errors: { [key: string]: string } = {};\n              const status = await validateConfiguration(\n                this.props.connector.id!,\n                values\n              );\n              (\n                (\n                  status.find(obj => obj.scope === 'PARAMETERS') || {\n                    errors: [],\n                  }\n                ).errors || []\n              ).forEach(obj => {\n                obj.parameters.forEach(p => (errors[p] = obj.description));\n              });\n              validationResults = (\n                (\n                  status.find(obj => obj.scope === 'CONNECTIVITY') || {\n                    errors: [],\n                  }\n                ).errors || []\n              ).map(\n                obj =>\n                  ({\n                    message: obj.description,\n                    type: 'error',\n                  } as IConnectorConfigurationFormValidationResult)\n              );\n              if (Object.keys(errors).length) {\n                throw errors;\n              }\n              if (validationResults.length === 0) {\n                validationResults = [\n                  {\n                    message: `${\n                      this.props.connector.name\n                    } has been successfully validated`,\n                    type: 'success',\n                  } as IConnectorConfigurationFormValidationResult,\n                ];\n              }\n            }\n          };\n\n          return (\n            <AutoForm<{ [key: string]: string }>\n              i18nRequiredProperty={'* Required field'}\n              definition={definition as IFormDefinition}\n              initialValue={this.props.initialValue!}\n              validate={validateFormAgainstBackend}\n              onSave={this.props.onSave}\n            >\n              {({\n                fields,\n                handleSubmit,\n                isSubmitting,\n                dirty,\n                isValid,\n                isValidating,\n                resetForm,\n                submitForm,\n                validateForm,\n                values,\n              }) => {\n                const enableValidationAgainstBackend = async () => {\n                  shouldValidateAgainstBackend = true;\n                  await validateForm();\n                  shouldValidateAgainstBackend = false;\n                };\n\n                return this.props.children({\n                  dirty,\n                  fields,\n                  handleSubmit,\n                  isSubmitting,\n                  isValid,\n                  isValidating,\n                  resetForm,\n                  submitForm,\n                  validateForm: enableValidationAgainstBackend,\n                  validationResults,\n                  values,\n                });\n              }}\n            </AutoForm>\n          );\n        }}\n      </WithConnectionHelpers>\n    );\n  }\n}\n","export * from './ConnectionCreatorBreadcrumbs';\nexport * from './Connections';\nexport * from './ConnectionsWithToolbar';\nexport * from './WithConnectorForm';\n","module.exports = __webpack_public_path__ + \"atlasmap-runtime.js\";","module.exports = __webpack_public_path__ + \"atlasmap-polyfills.js\";","module.exports = __webpack_public_path__ + \"atlasmap-styles.js\";","module.exports = __webpack_public_path__ + \"atlasmap-scripts.js\";","module.exports = __webpack_public_path__ + \"atlasmap-vendor.js\";","module.exports = __webpack_public_path__ + \"atlasmap-main.js\";","import {\n  getConnectionIcon,\n  IValidationResult,\n  WithConnection,\n  WithConnectionHelpers,\n} from '@syndesis/api';\nimport { Connection } from '@syndesis/models';\nimport {\n  Breadcrumb,\n  ConnectionDetailsForm,\n  ConnectionDetailsHeader,\n  Loader,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { AppContext } from '../../../app';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport resolvers from '../../resolvers';\nimport { WithConnectorForm } from '../components';\n\nexport interface IConnectionDetailsRouteParams {\n  connectionId: string;\n}\n\nexport interface IConnectionDetailsRouteState {\n  connection?: Connection;\n}\n\nexport interface IConnectionDetailsPageProps {\n  edit: boolean;\n}\n\nexport interface IConnectionDetailsPageState {\n  isWorking: boolean;\n}\n\nexport class ConnectionDetailsPage extends React.Component<\n  IConnectionDetailsPageProps,\n  IConnectionDetailsPageState\n> {\n  public state = {\n    isWorking: false,\n  };\n\n  public getUsedByMessage(connection: Connection): string {\n    // TODO: Schema is currently wrong as it has 'uses' as an OptionalInt. Remove cast when schema is fixed.\n    const numUsedBy = connection.uses as number;\n\n    if (numUsedBy === 1) {\n      return i18n.t('connections:usedByOne');\n    }\n\n    return i18n.t('connections:usedByMulti', { count: numUsedBy });\n  }\n\n  public render() {\n    return (\n      <AppContext.Consumer>\n        {({ pushNotification }) => {\n          return (\n            <WithRouteData<\n              IConnectionDetailsRouteParams,\n              IConnectionDetailsRouteState\n            >>\n              {({ connectionId }, { connection }, { history, location }) => (\n                <Translation ns={['connections', 'shared']}>\n                  {t => (\n                    <WithConnectionHelpers>\n                      {({ updateConnection, saveConnection, validateName }) => {\n                        return (\n                          <WithConnection\n                            id={connectionId}\n                            initialValue={connection}\n                            key={location.key}\n                          >\n                            {({ data, hasData, error }) => {\n                              const save = async ({\n                                name,\n                                description,\n                                configuredProperties,\n                              }: {\n                                name?: string;\n                                description?: string;\n                                configuredProperties?: {\n                                  [key: string]: string;\n                                };\n                              }): Promise<boolean> => {\n                                const updatedConnection = updateConnection(\n                                  data,\n                                  name,\n                                  description,\n                                  configuredProperties\n                                );\n                                try {\n                                  await saveConnection(updatedConnection);\n                                  history.push(\n                                    resolvers.connections.connection.details({\n                                      connection: updatedConnection,\n                                    })\n                                  );\n                                  return true;\n                                } catch (error) {\n                                  pushNotification(\n                                    t('errorSavingConnection'),\n                                    'error'\n                                  );\n                                  return false;\n                                }\n                              };\n\n                              const saveDescription = async (\n                                description: string\n                              ): Promise<boolean> => {\n                                this.setState({ isWorking: true });\n                                const saved = await save({ description });\n                                this.setState({ isWorking: false });\n                                return saved;\n                              };\n\n                              const saveName = async (\n                                name: string\n                              ): Promise<boolean> => {\n                                let saved = false;\n                                this.setState({ isWorking: true });\n                                const validation = await doValidateName(name);\n                                if (validation === true) {\n                                  saved = await save({ name });\n                                } else {\n                                  pushNotification(validation, 'error');\n                                }\n                                this.setState({ isWorking: false });\n                                return saved;\n                              };\n\n                              const saveConnector = async (\n                                configuredProperties: { [key: string]: string },\n                                actions: any\n                              ): Promise<void> => {\n                                this.setState({ isWorking: true });\n                                await save({ configuredProperties });\n                                actions.setSubmitting(false);\n                                this.setState({ isWorking: false });\n                              };\n\n                              /**\n                               * Backend validation only occurs when save has been called.\n                               * @param proposedName the name to validate\n                               */\n                              const doValidateName = async (\n                                proposedName: string\n                              ): Promise<true | string> => {\n                                // make sure name has a value\n                                if (proposedName === '') {\n                                  return t(\n                                    'shared:requiredFieldMessage'\n                                  ) as string;\n                                }\n\n                                const response: IValidationResult = await validateName(\n                                  connection!,\n                                  proposedName\n                                );\n\n                                if (!response.isError) {\n                                  return true;\n                                }\n\n                                if (response.error === 'UniqueProperty') {\n                                  const msg = t('duplicateNameError');\n                                  return msg\n                                    ? msg\n                                    : 'connections:duplicateNameError';\n                                }\n\n                                return response.message\n                                  ? response.message\n                                  : t('errorValidatingName')\n                                  ? t('errorValidatingName')!\n                                  : 'connections:errorValidatingName'; // return missing i18n key\n                              };\n\n                              const cancelEditing = () => {\n                                history.push(\n                                  resolvers.connections.connection.details({\n                                    connection: data,\n                                  })\n                                );\n                              };\n\n                              const startEditing = () => {\n                                history.push(\n                                  resolvers.connections.connection.edit({\n                                    connection: data,\n                                  })\n                                );\n                              };\n\n                              return (\n                                <WithLoader\n                                  error={error}\n                                  loading={!hasData}\n                                  loaderChildren={<Loader />}\n                                  errorChildren={<ApiError />}\n                                >\n                                  {() => {\n                                    return (\n                                      <WithConnectorForm\n                                        connector={data.connector!}\n                                        initialValue={data.configuredProperties}\n                                        disabled={!this.props.edit}\n                                        onSave={saveConnector}\n                                      >\n                                        {({\n                                          fields,\n                                          handleSubmit,\n                                          validationResults,\n                                          dirty,\n                                          isSubmitting,\n                                          isValid,\n                                          isValidating,\n                                          validateForm,\n                                        }) => (\n                                          <>\n                                            <Breadcrumb>\n                                              <Link\n                                                to={resolvers.dashboard.root()}\n                                              >\n                                                {t('shared:Home')}\n                                              </Link>\n                                              <Link\n                                                to={resolvers.connections.connections()}\n                                              >\n                                                {t('shared:Connections')}\n                                              </Link>\n                                              <span>\n                                                {t('connectionDetailPageTitle')}\n                                              </span>\n                                            </Breadcrumb>\n                                            <ConnectionDetailsHeader\n                                              allowEditing={true}\n                                              connectionDescription={\n                                                data.description\n                                              }\n                                              connectionIcon={getConnectionIcon(\n                                                process.env.PUBLIC_URL,\n                                                data\n                                              )}\n                                              connectionName={data.name}\n                                              i18nDescriptionLabel={t(\n                                                'shared:Description'\n                                              )}\n                                              i18nDescriptionPlaceholder={t(\n                                                'descriptionPlaceholder'\n                                              )}\n                                              i18nNamePlaceholder={t(\n                                                'namePlaceholder'\n                                              )}\n                                              i18nUsageLabel={t('shared:Usage')}\n                                              i18nUsageMessage={this.getUsedByMessage(\n                                                data\n                                              )}\n                                              isWorking={this.state.isWorking}\n                                              onChangeDescription={\n                                                saveDescription\n                                              }\n                                              onChangeName={saveName}\n                                            />\n                                            <ConnectionDetailsForm\n                                              i18nCancelLabel={t(\n                                                'shared:Cancel'\n                                              )}\n                                              i18nEditLabel={t('shared:Edit')}\n                                              i18nSaveLabel={t('shared:Save')}\n                                              i18nTitle={t(\n                                                'detailsSectionTitle',\n                                                {\n                                                  connectionName: data.name,\n                                                }\n                                              )}\n                                              i18nValidateLabel={t(\n                                                'shared:Validate'\n                                              )}\n                                              handleSubmit={handleSubmit}\n                                              isValid={!dirty || isValid}\n                                              isWorking={\n                                                isSubmitting || isValidating\n                                              }\n                                              validationResults={\n                                                validationResults\n                                              }\n                                              isEditing={this.props.edit}\n                                              onCancelEditing={cancelEditing}\n                                              onStartEditing={startEditing}\n                                              onValidate={validateForm}\n                                            >\n                                              {fields}\n                                            </ConnectionDetailsForm>\n                                          </>\n                                        )}\n                                      </WithConnectorForm>\n                                    );\n                                  }}\n                                </WithLoader>\n                              );\n                            }}\n                          </WithConnection>\n                        );\n                      }}\n                    </WithConnectionHelpers>\n                  )}\n                </Translation>\n              )}\n            </WithRouteData>\n          );\n        }}\n      </AppContext.Consumer>\n    );\n  }\n}\n","import { WithConnections } from '@syndesis/api';\nimport * as React from 'react';\nimport { PageTitle } from '../../../shared';\nimport { ConnectionsWithToolbar } from '../components';\nimport resolvers from '../resolvers';\n\nexport class ConnectionsPage extends React.Component {\n  public render() {\n    return (\n      <WithConnections>\n        {({ data, hasData, error }) => (\n          <>\n            <PageTitle title={'Connections'} />\n            <ConnectionsWithToolbar\n              error={error}\n              includeConnectionMenu={true}\n              loading={!hasData}\n              connections={data.connectionsForDisplay}\n              getConnectionHref={connection =>\n                resolvers.connection.details({ connection })\n              }\n              getConnectionEditHref={connection =>\n                resolvers.connection.edit({ connection })\n              }\n            />\n          </>\n        )}\n      </WithConnections>\n    );\n  }\n}\n","import { WithConnector } from '@syndesis/api';\nimport { Connector } from '@syndesis/models';\nimport {\n  ButtonLink,\n  ConnectionCreatorLayout,\n  ConnectorConfigurationForm,\n  Loader,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { ApiError, PageTitle } from '../../../../shared';\nimport {\n  ConnectionCreatorBreadcrumbs,\n  WithConnectorForm,\n} from '../../components';\nimport resolvers from '../../resolvers';\n\nexport interface IConfigurationPageRouteParams {\n  connectorId: string;\n}\n\nexport interface IConfigurationPageRouteState {\n  connector?: Connector;\n}\n\nexport default class ConfigurationPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<\n        IConfigurationPageRouteParams,\n        IConfigurationPageRouteState\n      >>\n        {({ connectorId }, { connector }, { history }) => (\n          <WithConnector id={connectorId} initialValue={connector}>\n            {({ data, hasData, error }) => (\n              <WithLoader\n                error={error}\n                loading={!hasData}\n                loaderChildren={<Loader />}\n                errorChildren={<ApiError />}\n              >\n                {() => {\n                  const onSave = (configuredProperties: {\n                    [key: string]: string;\n                  }) => {\n                    history.push(\n                      resolvers.create.review({\n                        configuredProperties,\n                        connector: data,\n                      })\n                    );\n                  };\n                  return (\n                    <WithConnectorForm connector={data} onSave={onSave}>\n                      {({\n                        fields,\n                        handleSubmit,\n                        validationResults,\n                        submitForm,\n                        isSubmitting,\n                        isValid,\n                        isValidating,\n                        validateForm,\n                      }) => {\n                        return (\n                          <>\n                            <PageTitle title={'Configure connection'} />\n                            <ConnectionCreatorLayout\n                              header={<ConnectionCreatorBreadcrumbs step={2} />}\n                              content={\n                                <ConnectorConfigurationForm\n                                  i18nFormTitle={data.name}\n                                  handleSubmit={handleSubmit}\n                                  validationResults={validationResults}\n                                >\n                                  {fields}\n                                </ConnectorConfigurationForm>\n                              }\n                              backHref={resolvers.create.selectConnector()}\n                              cancelHref={resolvers.connections()}\n                              onNext={submitForm}\n                              isNextDisabled={isSubmitting}\n                              extraButtons={\n                                <ButtonLink\n                                  onClick={validateForm}\n                                  disabled={!isValid || isValidating}\n                                >\n                                  Validate\n                                  {isValidating && (\n                                    <>\n                                      &nbsp;\n                                      <Loader size={'sm'} inline={true} />\n                                    </>\n                                  )}\n                                </ButtonLink>\n                              }\n                            />\n                          </>\n                        );\n                      }}\n                    </WithConnectorForm>\n                  );\n                }}\n              </WithLoader>\n            )}\n          </WithConnector>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { getConnectionIcon, WithConnectors } from '@syndesis/api';\nimport { IConnectionWithIconFile } from '@syndesis/models';\nimport {\n  ConnectionCard,\n  ConnectionCreatorLayout,\n  ConnectionsGrid,\n  ConnectionsGridCell,\n  ConnectionSkeleton,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { ApiError, PageTitle } from '../../../../shared';\nimport { ConnectionCreatorBreadcrumbs } from '../../components';\nimport resolvers from '../../resolvers';\n\nexport default class ConnectorsPage extends React.Component {\n  public render() {\n    return (\n      <WithConnectors>\n        {({ data, hasData, error }) => (\n          <>\n            <PageTitle title={'Select connector'} />\n            <ConnectionCreatorLayout\n              header={<ConnectionCreatorBreadcrumbs step={1} />}\n              content={\n                <ConnectionsGrid>\n                  <WithLoader\n                    error={error}\n                    loading={!hasData}\n                    loaderChildren={\n                      <>\n                        {new Array(5).fill(0).map((_, index) => (\n                          <ConnectionsGridCell key={index}>\n                            <ConnectionSkeleton />\n                          </ConnectionsGridCell>\n                        ))}\n                      </>\n                    }\n                    errorChildren={<ApiError />}\n                  >\n                    {() =>\n                      data.connectorsForDisplay\n                        .sort((a, b) => a.name.localeCompare(b.name))\n                        .map((connector, index) => (\n                          <ConnectionsGridCell key={index}>\n                            <ConnectionCard\n                              name={connector.name}\n                              description={connector.description || ''}\n                              icon={getConnectionIcon(\n                                process.env.PUBLIC_URL,\n                                connector as IConnectionWithIconFile\n                              )}\n                              href={resolvers.create.configureConnector({\n                                connector,\n                              })}\n                            />\n                          </ConnectionsGridCell>\n                        ))\n                    }\n                  </WithLoader>\n                </ConnectionsGrid>\n              }\n              cancelHref={resolvers.connections()}\n            />\n          </>\n        )}\n      </WithConnectors>\n    );\n  }\n}\n","import ConfigurationPage from './ConfigurationPage';\nimport ConnectorsPage from './ConnectorsPage';\nimport ReviewPage from './ReviewPage';\n\nexport const create = {\n  ConfigurationPage,\n  ConnectorsPage,\n  ReviewPage,\n};\n","import { WithConnectionHelpers } from '@syndesis/api';\nimport { AutoForm, IFormDefinition } from '@syndesis/auto-form';\nimport { Connector } from '@syndesis/models';\nimport {\n  ConnectionCreatorLayout,\n  ConnectorConfigurationForm,\n} from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { AppContext } from '../../../../app';\nimport { PageTitle } from '../../../../shared';\nimport { ConnectionCreatorBreadcrumbs } from '../../components';\nimport resolvers from '../../resolvers';\n\nexport interface ISaveForm {\n  name: string;\n  description?: string;\n}\n\nexport interface IReviewPageRouteState {\n  connector: Connector;\n  configuredProperties: { [key: string]: string };\n}\n\nexport default class ReviewPage extends React.Component {\n  public render() {\n    return (\n      <AppContext.Consumer>\n        {({ pushNotification }) => (\n          <WithRouteData<null, IReviewPageRouteState>>\n            {(_, { connector, configuredProperties }, { history }) => (\n              <WithConnectionHelpers>\n                {({ createConnection, saveConnection }) => {\n                  const onSave = async (\n                    { name, description }: ISaveForm,\n                    actions: any\n                  ) => {\n                    try {\n                      const connection = createConnection(\n                        connector,\n                        name,\n                        description || '',\n                        configuredProperties\n                      );\n                      await saveConnection(connection);\n                      actions.setSubmitting(false);\n                      pushNotification(\n                        `<strong>Connection created</strong> Connection <strong>${name}</strong> successfully created`,\n                        'success'\n                      );\n                      history.push(resolvers.connections());\n                    } catch (e) {\n                      // TODO notification or inline message?\n                    }\n                  };\n                  const definition: IFormDefinition = {\n                    name: {\n                      defaultValue: '',\n                      displayName: 'Name',\n                      required: true,\n                      type: 'string',\n                    },\n                    /* tslint:disable-next-line:object-literal-sort-keys */\n                    description: {\n                      defaultValue: '',\n                      displayName: 'Description',\n                      type: 'textarea',\n                    },\n                  };\n                  return (\n                    <AutoForm<ISaveForm>\n                      i18nRequiredProperty={'* Required field'}\n                      definition={definition}\n                      initialValue={{\n                        description: '',\n                        name: '',\n                      }}\n                      onSave={onSave}\n                    >\n                      {({\n                        fields,\n                        handleSubmit,\n                        isSubmitting,\n                        isValid,\n                        submitForm,\n                      }) => (\n                        <ConnectionCreatorLayout\n                          header={<ConnectionCreatorBreadcrumbs step={3} />}\n                          content={\n                            <>\n                              <PageTitle title={'Name connection'} />\n                              <ConnectorConfigurationForm\n                                i18nFormTitle={'Name connection'}\n                                handleSubmit={handleSubmit}\n                              >\n                                {fields}\n                              </ConnectorConfigurationForm>\n                            </>\n                          }\n                          cancelHref={resolvers.connections()}\n                          backHref={resolvers.create.configureConnector({\n                            connector,\n                          })}\n                          onNext={submitForm}\n                          isNextDisabled={!isValid}\n                          isNextLoading={isSubmitting}\n                          isLastStep={true}\n                        />\n                      )}\n                    </AutoForm>\n                  );\n                }}\n              </WithConnectionHelpers>\n            )}\n          </WithRouteData>\n        )}\n      </AppContext.Consumer>\n    );\n  }\n}\n","import { Breadcrumb } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { WithClosedNavigation } from '../../shared';\nimport { create } from './pages';\nimport resolvers from './resolvers';\nimport routes from './routes';\n\nexport default class ConnectionsCreatorApp extends React.Component {\n  public render() {\n    return (\n      <WithClosedNavigation>\n        <Breadcrumb>\n          <Link to={resolvers.connections()}>Connections</Link>\n          <span>Create connection</span>\n        </Breadcrumb>\n        <Switch>\n          <Route\n            path={routes.create.selectConnector}\n            exact={true}\n            component={create.ConnectorsPage}\n          />\n          <Route\n            path={routes.create.configureConnector}\n            exact={true}\n            component={create.ConfigurationPage}\n          />\n          <Route\n            path={routes.create.review}\n            exact={true}\n            component={create.ReviewPage}\n          />\n        </Switch>\n      </WithClosedNavigation>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport ConnectionsCreatorApp from './ConnectionsCreatorApp';\nimport { ConnectionDetailsPage, ConnectionsPage } from './pages';\nimport routes from './routes';\n\nexport class ConnectionsModule extends React.Component {\n  public render() {\n    return (\n      <Switch>\n        <Route path={routes.create.root} component={ConnectionsCreatorApp} />\n        <Route\n          path={routes.connections}\n          exact={true}\n          component={ConnectionsPage}\n        />\n        <Route\n          path={routes.connection.edit}\n          exact={true}\n          children={<ConnectionDetailsPage edit={true} />}\n        />\n        <Route\n          path={routes.connection.details}\n          exact={true}\n          children={<ConnectionDetailsPage edit={false} />}\n        />\n      </Switch>\n    );\n  }\n}\n","import { Container, TabBar, TabBarItem } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport routes from '../routes';\n\n/**\n * A component that displays a nav bar with 2 items:\n *\n * 1. a link to the page that displays a list of API Connectors, and\n * 2. a link to the page that displays a list of extensions.\n *\n * @see [ApiConnectorsPage]{@link ../pages/ApiConnectorsPage}\n * @see [ExtensionsPage]{@link ../pages/ExtensionsPage}\n */\nexport default class CustomizationsNavBar extends React.Component {\n  public render() {\n    return (\n      <Translation ns={['customizations', 'shared']}>\n        {t => (\n          <Container\n            style={{\n              background: '#fff',\n            }}\n          >\n            <TabBar>\n              <TabBarItem\n                label={t('apiConnector.apiConnectorsPageTitle')}\n                to={routes.apiConnectors.list}\n              />\n              <TabBarItem\n                label={t('extension.extensionsPageTitle')}\n                to={routes.extensions.list}\n              />\n            </TabBar>\n          </Container>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { WithApiConnectors } from '@syndesis/api';\nimport { Connector } from '@syndesis/models';\nimport {\n  ApiConnectorListItem,\n  ApiConnectorListSkeleton,\n  ApiConnectorListView,\n  Container,\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n} from '@syndesis/ui';\nimport {\n  optionalIntValue,\n  WithListViewToolbarHelpers,\n  WithLoader,\n} from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport routes from '../routes';\nimport CustomizationsNavBar from '../shared/CustomizationsNavBar';\n\nfunction getFilteredAndSortedApiConnectors(\n  apiConnectors: Connector[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSorted = apiConnectors;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter((api: Connector) =>\n      api.name.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort((thisApi, thatApi) => {\n    if (isSortAscending) {\n      return thisApi.name.localeCompare(thatApi.name);\n    }\n\n    // sort descending\n    return thatApi.name.localeCompare(thisApi.name);\n  });\n\n  return filteredAndSorted;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport default class ApiConnectorsPage extends React.Component {\n  public filterUndefinedId(api: Connector): boolean {\n    return api.id !== undefined;\n  }\n\n  public getUsedByMessage(api: Connector): string {\n    const numUsedBy = optionalIntValue(api.uses);\n\n    if (numUsedBy === 1) {\n      return i18n.t('customizations:usedByOne');\n    }\n\n    return i18n.t('customizations:usedByMulti', { count: numUsedBy });\n  }\n\n  public handleDelete(apiConnectorId: string) {\n    // TODO: implement handleDelete\n    alert('Delete API client connector ' + apiConnectorId);\n  }\n\n  public handleDetails(apiConnectorId: string) {\n    // TODO: implement handleDetails\n    alert('Show details of API client connector ' + apiConnectorId);\n  }\n\n  public render() {\n    return (\n      <WithApiConnectors>\n        {({ data, hasData, error }) => (\n          <WithListViewToolbarHelpers\n            defaultFilterType={filterByName}\n            defaultSortType={sortByName}\n          >\n            {helpers => {\n              const filteredAndSorted = getFilteredAndSortedApiConnectors(\n                data.items,\n                helpers.activeFilters,\n                helpers.currentSortType,\n                helpers.isSortAscending\n              );\n\n              return (\n                <Translation ns={['customizations', 'shared']}>\n                  {t => (\n                    <>\n                      <CustomizationsNavBar />\n                      <Container className=\"pf-u-my-md\">\n                        <h1 className=\"pf-c-title pf-m-xl\">\n                          {t('apiConnector.apiConnectorsPageTitle')}\n                        </h1>\n                        <p\n                          dangerouslySetInnerHTML={{\n                            __html: t(\n                              'apiConnector.apiConnectorsPageDescription'\n                            ),\n                          }}\n                        />\n                      </Container>\n                      <ApiConnectorListView\n                        filterTypes={filterTypes}\n                        sortTypes={sortTypes}\n                        {...this.state}\n                        linkCreateApiConnector={\n                          routes.apiConnectors.create.upload\n                        }\n                        resultsCount={filteredAndSorted.length}\n                        {...helpers}\n                        i18nTitle={''}\n                        i18nDescription={''}\n                        i18nEmptyStateInfo={t('apiConnector.emptyStateInfo')}\n                        i18nEmptyStateTitle={t(\n                          'apiConnector.CreateApiConnector'\n                        )}\n                        i18nLinkCreateApiConnector={t(\n                          'apiConnector.CreateApiConnector'\n                        )}\n                        i18nLinkCreateApiConnectorTip={t(\n                          'apiConnector.createApiConnectorTip'\n                        )}\n                        i18nName={t('shared:Name')}\n                        i18nResultsCount={t('shared:resultsCount', {\n                          count: filteredAndSorted.length,\n                        })}\n                      >\n                        <WithLoader\n                          error={error}\n                          loading={!hasData}\n                          loaderChildren={\n                            <ApiConnectorListSkeleton\n                              width={800}\n                              style={{\n                                backgroundColor: '#FFF',\n                                marginTop: 30,\n                              }}\n                            />\n                          }\n                          errorChildren={<ApiError />}\n                        >\n                          {() =>\n                            filteredAndSorted\n                              .filter((api: Connector) =>\n                                this.filterUndefinedId(api)\n                              )\n                              .map((api: Connector, index: number) => (\n                                <ApiConnectorListItem\n                                  key={index}\n                                  apiConnectorId={api.id as string}\n                                  apiConnectorDescription={api.description}\n                                  apiConnectorIcon={api.icon}\n                                  apiConnectorName={api.name}\n                                  i18nDelete={t('shared:Delete')}\n                                  i18nDetails={t('shared:Details')}\n                                  i18nDetailsTip={t(\n                                    'apiConnector.detailsApiConnectorTip'\n                                  )}\n                                  i18nUsedByMessage={this.getUsedByMessage(api)}\n                                  onDelete={this.handleDelete}\n                                  onDetails={this.handleDetails}\n                                  usedBy={optionalIntValue(api.uses)}\n                                />\n                              ))\n                          }\n                        </WithLoader>\n                      </ApiConnectorListView>\n                    </>\n                  )}\n                </Translation>\n              );\n            }}\n          </WithListViewToolbarHelpers>\n        )}\n      </WithApiConnectors>\n    );\n  }\n}\n","import { WithExtensionIntegrations } from '@syndesis/api';\nimport {\n  ExtensionIntegrationsTable,\n  IExtensionIntegration,\n  Loader,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\n\nexport interface IExtensionIntegrationsProps {\n  extensionId: string;\n  uses: number;\n  onSelectIntegration: (integrationId: string) => void;\n}\n\n/**\n * A component that lists the integrations that uses a specific extension.\n */\nexport default class ExtensionIntegrations extends React.Component<\n  IExtensionIntegrationsProps\n> {\n  public getUsageMessage(uses: number): string {\n    if (uses === 1) {\n      return i18n.t('customizations:usedByOne');\n    }\n\n    return i18n.t('customizations:usedByMulti', {\n      count: uses,\n    });\n  }\n\n  public render() {\n    return (\n      <WithExtensionIntegrations extensionId={this.props.extensionId}>\n        {({ data, hasData, error }) => (\n          <WithLoader\n            error={error}\n            loading={!hasData}\n            loaderChildren={<Loader />}\n            errorChildren={<ApiError />}\n          >\n            {() => (\n              <Translation ns={['customizations', 'shared']}>\n                {t => (\n                  <ExtensionIntegrationsTable\n                    i18nDescription={t('shared:Description')}\n                    i18nName={t('shared:Name')}\n                    i18nUsageMessage={this.getUsageMessage(this.props.uses)}\n                    onSelectIntegration={this.props.onSelectIntegration}\n                    data={data as IExtensionIntegration[]}\n                  />\n                )}\n              </Translation>\n            )}\n          </WithLoader>\n        )}\n      </WithExtensionIntegrations>\n    );\n  }\n}\n","import { WithExtension, WithExtensionHelpers } from '@syndesis/api';\nimport { Action, Extension, Integration } from '@syndesis/models';\nimport {\n  Breadcrumb,\n  ExtensionDetail,\n  ExtensionOverview,\n  ExtensionSupports,\n  IAction,\n  Loader,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport resolvers from '../../resolvers';\nimport ExtensionIntegrations from '../shared/ExtensionIntegrations';\n\n/**\n * @param extensionId - the ID of the extension whose details are being shown by this page.\n */\nexport interface IExtensionDetailRouteParams {\n  extensionId: string;\n}\n\n/**\n * @param extension - the extension whose details are being shown by this page. If\n * exists, it must equal to the [extensionId]{@link IExtensionDetailRouteParams#extensionId}.\n * This is used to immediately show the details to the user, without\n * any loader; the backend will be called nonetheless to ensure that we are\n * working with the latest data available. This will be used when navigating from the\n * [ExtensionPage]{@link ExtensionsPage}.\n */\nexport interface IExtensionDetailRouteState {\n  extension?: Extension;\n}\n\nexport default class ExtensionDetailsPage extends React.Component {\n  public getTypeMessage(type: string): string {\n    if ('Steps' === type) {\n      return i18n.t('customizations:extension.StepExtension');\n    }\n\n    if ('Connectors' === type) {\n      return i18n.t('customizations:extension.ConnectorExtension');\n    }\n\n    if ('Libraries' === type) {\n      return i18n.t('customizations:extension.LibraryExtension');\n    }\n\n    return i18n.t('customizations:extension.unknownExtensionType');\n  }\n\n  public render() {\n    return (\n      <WithRouteData<IExtensionDetailRouteParams, IExtensionDetailRouteState>>\n        {({ extensionId }, { extension }, { history }) => {\n          const handleSelectIntegration = (selectedIntegrationId: string) => {\n            // redirect to the integration detail page\n            history.push(\n              resolvers.integrations.integration.details({\n                integration: {\n                  id: selectedIntegrationId,\n                } as Integration,\n              })\n            );\n          };\n          return (\n            <WithExtensionHelpers>\n              {({ deleteExtension }) => {\n                const handleDelete = async () => {\n                  await deleteExtension(extensionId);\n                  // TODO: post toast notification\n                  // display extensions list page\n                  history.push(resolvers.customizations.extensions.list());\n                };\n                return (\n                  <WithExtension\n                    extensionId={extensionId}\n                    initialValue={extension}\n                  >\n                    {({ data, hasData, error }) => (\n                      <WithLoader\n                        error={error}\n                        loading={!hasData}\n                        loaderChildren={<Loader />}\n                        errorChildren={<ApiError />}\n                      >\n                        {() => (\n                          <Translation ns={['customizations', 'shared']}>\n                            {t => (\n                              <>\n                                <Breadcrumb>\n                                  <Link to={resolvers.dashboard.root()}>\n                                    {t('shared:Home')}\n                                  </Link>\n                                  <Link to={resolvers.customizations.root()}>\n                                    {t('shared:Customizations')}\n                                  </Link>\n                                  <Link\n                                    to={resolvers.customizations.extensions.list()}\n                                  >\n                                    {t('shared:Extensions')}\n                                  </Link>\n                                  <span>\n                                    {t('extension.extensionDetailPageTitle')}\n                                  </span>\n                                </Breadcrumb>\n                                <ExtensionDetail\n                                  extensionName={data.name}\n                                  // TODO: Schema is currently wrong as it has 'uses` as an OptionalInt. Remove cast when schema is fixed.\n                                  extensionUses={data.uses as number}\n                                  i18nCancelText={t('shared:Cancel')}\n                                  i18nDelete={t('shared:Delete')}\n                                  i18nDeleteModalMessage={t(\n                                    'extension.deleteModalMessage',\n                                    { name: data.name }\n                                  )}\n                                  i18nDeleteModalTitle={t(\n                                    'extension.deleteModalTitle'\n                                  )}\n                                  i18nDeleteTip={t(\n                                    'extension.deleteExtensionTip'\n                                  )}\n                                  i18nIdMessage={t('extension.idMessage', {\n                                    id: data.extensionId!,\n                                  })}\n                                  i18nOverviewSectionTitle={t(\n                                    'extension.overviewSectionTitle'\n                                  )}\n                                  i18nSupportsSectionTitle={\n                                    data.extensionType === 'Steps'\n                                      ? t(\n                                          'extension.supportedStepsSectionTitle'\n                                        )\n                                      : data.extensionType === 'Connectors'\n                                      ? t(\n                                          'extension.supportedConnectorsSectionTitle'\n                                        )\n                                      : t(\n                                          'extension.supportedLibrariesSectionTitle'\n                                        )\n                                  }\n                                  i18nUpdate={t('shared:Update')}\n                                  i18nUpdateTip={t(\n                                    'extension.updateExtensionTip'\n                                  )}\n                                  i18nUsageSectionTitle={t(\n                                    'extension.usageSectionTitle'\n                                  )}\n                                  integrationsSection={\n                                    <ExtensionIntegrations\n                                      extensionId={data.id!}\n                                      uses={\n                                        // TODO: Schema is currently wrong as it has 'uses` as an OptionalInt. Remove cast when schema is fixed.\n                                        data.uses as number\n                                      }\n                                      onSelectIntegration={\n                                        handleSelectIntegration\n                                      }\n                                    />\n                                  }\n                                  linkUpdateExtension={resolvers.customizations.extensions.extension.update(\n                                    { extension: data }\n                                  )}\n                                  onDelete={handleDelete}\n                                  overviewSection={\n                                    <ExtensionOverview\n                                      extensionDescription={data.description}\n                                      extensionName={data.name}\n                                      i18nDescription={t('shared:Description')}\n                                      i18nLastUpdate={t('extension.LastUpdate')}\n                                      i18nLastUpdateDate={\n                                        data.lastUpdated\n                                          ? new Date(\n                                              data.lastUpdated\n                                            ).toLocaleString()\n                                          : ''\n                                      }\n                                      i18nName={t('shared:Name')}\n                                      i18nType={t('shared:Type')}\n                                      i18nTypeMessage={this.getTypeMessage(\n                                        data.extensionType\n                                      )}\n                                    />\n                                  }\n                                  supportsSection={\n                                    <ExtensionSupports\n                                      extensionActions={data.actions.map(\n                                        (action: Action) =>\n                                          ({\n                                            description: action.description,\n                                            name: action.name,\n                                          } as IAction)\n                                      )}\n                                    />\n                                  }\n                                />\n                              </>\n                            )}\n                          </Translation>\n                        )}\n                      </WithLoader>\n                    )}\n                  </WithExtension>\n                );\n              }}\n            </WithExtensionHelpers>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { Extension } from '@syndesis/models';\nimport i18n from '../../i18n';\n\n/**\n * Obtains a localized extension type name.\n * @param extension the extension whose type name is being requested\n */\nexport function getExtensionTypeName(extension: Extension) {\n  const type = extension.extensionType;\n\n  if ('Steps' === type) {\n    return i18n.t('customizations:extension.StepExtension');\n  }\n\n  if ('Connectors' === type) {\n    return i18n.t('customizations:extension.ConnectorExtension');\n  }\n\n  if ('Libraries' === type) {\n    return i18n.t('customizations:extension.LibraryExtension');\n  }\n\n  return i18n.t('customizations:extension.unknownExtensionType');\n}\n","import { WithExtensionHelpers } from '@syndesis/api';\nimport { Action, Extension } from '@syndesis/models';\nimport {\n  Breadcrumb,\n  ButtonLink,\n  Container,\n  ExtensionImportCard,\n  ExtensionImportReview,\n  IImportAction,\n  Loader,\n} from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { AppContext } from '../../../app';\nimport i18n from '../../../i18n';\nimport resolvers from '../../resolvers';\nimport { getExtensionTypeName } from '../customizationsUtils';\nimport './ExtensionImportPage.css';\n\nexport interface IExtensionImportRouteProps {\n  extensionId?: string;\n}\n\nexport interface IExtensionImportPageState {\n  /**\n   * `true` if the dropzone should be disabled. Defaults to `false`. When the review component is being\n   * shown, the dropzone is disabled.\n   */\n  disableDropzone: boolean;\n\n  /**\n   * A general, localized message for when a file upload is rejected. This is shown in the DnD dropzone.\n   */\n  dndUploadFailedMessage?: string;\n\n  /**\n   * A general, localized message for when a file upload is accepted. This is shown in the DnD dropzone.\n   */\n  dndUploadSuccessMessage?: string;\n\n  /**\n   * The existing extension being updated or the extension created by processing the uploaded file.\n   */\n  extension?: Extension;\n\n  /**\n   * A localized error message indicating that the jar file uploading could not be processed as an extension.\n   */\n  i18nAlertMessage?: string;\n\n  /**\n   * `true` if the extension *.jar file is being processed by the server. Defaults to `false`.\n   */\n  loading: boolean;\n}\n\nexport default class ExtensionImportPage extends React.Component<\n  {},\n  IExtensionImportPageState\n> {\n  public constructor(props: IExtensionImportRouteProps) {\n    super(props);\n    this.state = { disableDropzone: false, loading: false };\n  }\n\n  /**\n   * Obtains a localized label for the extension actions.\n   */\n  public getActionsLabel(): string {\n    if (this.state.extension) {\n      switch (this.state.extension.extensionType) {\n        case 'Steps':\n          return i18n.t('shared:Steps');\n        default:\n          break;\n      }\n    }\n\n    return i18n.t('shared:Actions');\n  }\n\n  /**\n   * Obtains a localized message describing the action.\n   * @param name the action name\n   * @param description the action description\n   */\n  public getActionText(name: string, description: string): string {\n    return i18n.t('customizations:action', {\n      actionDescription: description,\n      actionName: name,\n    });\n  }\n\n  public render() {\n    return (\n      <AppContext.Consumer>\n        {({ pushNotification }) => {\n          const onDndUploadRejectedHandler = (failedFileName: string) => {\n            const text = i18n.t(\n              'customizations:extension.importUploadFailedAlertMessage',\n              {\n                fileName: failedFileName,\n              }\n            );\n            pushNotification(text, 'error');\n            return text;\n          };\n          return (\n            <WithRouteData<IExtensionImportRouteProps, null>>\n              {({ extensionId }, _, { history }) => (\n                <WithExtensionHelpers>\n                  {({ importExtension, uploadExtension }) => {\n                    const onDndUploadAcceptedHandler = async (\n                      files: File[]\n                    ) => {\n                      try {\n                        // set state before call to backend\n                        this.setState({\n                          ...this.state,\n                          disableDropzone: true,\n                          dndUploadFailedMessage: undefined,\n                          dndUploadSuccessMessage: undefined,\n                          i18nAlertMessage: undefined,\n                          loading: true,\n                        });\n\n                        // make server call to update existing or to create a new extension\n                        const uploaded = extensionId\n                          ? await uploadExtension(files[0], extensionId)\n                          : await uploadExtension(files[0]);\n\n                        pushNotification(\n                          `${uploaded.id} was uploaded`,\n                          'success'\n                        );\n\n                        // set state based on successful upload\n                        this.setState({\n                          ...this.state,\n                          dndUploadSuccessMessage: i18n.t(\n                            'customizations:extension.importUploadSuccessMessage'\n                          ),\n                          extension: uploaded,\n                          loading: false,\n                        });\n                      } catch (e) {\n                        // set state based on failed upload\n                        this.setState({\n                          ...this.state,\n                          disableDropzone: false,\n                          dndUploadFailedMessage: i18n.t(\n                            'customizations:extension.importUploadFailedMessage'\n                          ),\n                          i18nAlertMessage: i18n.t(\n                            'customizations:extension.importInvalidFileMessage'\n                          ),\n                          loading: false,\n                        });\n                      }\n                    };\n                    const handleImport = async (importExtensionId: string) => {\n                      try {\n                        await importExtension(importExtensionId);\n                        history.push(\n                          resolvers.customizations.extensions.list()\n                        );\n                      } catch (e) {\n                        // TODO: post notification\n                      }\n                    };\n                    return (\n                      <Translation ns={['customizations', 'shared']}>\n                        {t => (\n                          <>\n                            <Container className=\"col-sm-11\">\n                              <Breadcrumb>\n                                <Link to={resolvers.dashboard.root()}>\n                                  {t('shared:Home')}\n                                </Link>\n                                <Link to={resolvers.customizations.root()}>\n                                  {t('shared:Customizations')}\n                                </Link>\n                                <Link\n                                  to={resolvers.customizations.extensions.list()}\n                                >\n                                  {t('shared:Extensions')}\n                                </Link>\n                                <span>\n                                  {t('extension.extensionImportPageTitle')}\n                                </span>\n                              </Breadcrumb>\n                            </Container>\n                            <Container\n                              className={\n                                'extension-import-page__actionContainer col-sm-1'\n                              }\n                            >\n                              <ButtonLink\n                                className={'extension-import-page__action'}\n                                href={resolvers.customizations.extensions.list()}\n                                as={'default'}\n                              >\n                                {t('shared:Cancel')}\n                              </ButtonLink>\n                            </Container>\n                            {this.state.loading ? <Loader /> : null}\n                            <ExtensionImportCard\n                              dndDisabled={this.state.disableDropzone}\n                              i18nAlertMessage={this.state.i18nAlertMessage}\n                              i18nDndHelpMessage={t(\n                                'extension.importHelpMessage'\n                              )}\n                              i18nDndInstructions={t(\n                                'extension.importDndInstructions'\n                              )}\n                              i18nDndNoFileSelectedMessage={t(\n                                'extension.importNoFileSelectedMessage'\n                              )}\n                              i18nDndSelectedFileLabel={t(\n                                'extension.importSelectedFileLabel'\n                              )}\n                              i18nDndUploadFailedMessage={\n                                this.state.dndUploadFailedMessage\n                              }\n                              i18nDndUploadSuccessMessage={\n                                this.state.dndUploadSuccessMessage\n                              }\n                              i18nImportInstructions={t(\n                                'extension.importUpdateMessage'\n                              )}\n                              i18nTitle={t('extension.ImportExtension')}\n                              onDndUploadAccepted={onDndUploadAcceptedHandler}\n                              onDndUploadRejected={onDndUploadRejectedHandler}\n                            />\n                            {this.state.extension &&\n                            this.state.extension.id &&\n                            this.state.extension.extensionId ? (\n                              <ExtensionImportReview\n                                actions={this.state.extension.actions.map(\n                                  (action: Action) =>\n                                    ({\n                                      description: action.description,\n                                      name: action.name,\n                                    } as IImportAction)\n                                )}\n                                cancelLink={resolvers.customizations.extensions.list()}\n                                extensionDescription={\n                                  this.state.extension.description\n                                }\n                                extensionId={this.state.extension.extensionId}\n                                extensionName={this.state.extension.name}\n                                extensionUid={this.state.extension.id}\n                                i18nActionsLabel={this.getActionsLabel()}\n                                i18nCancel={i18n.t('shared:Cancel')}\n                                i18nDescriptionLabel={i18n.t(\n                                  'shared:Description'\n                                )}\n                                i18nExtensionTypeMessage={getExtensionTypeName(\n                                  this.state.extension\n                                )}\n                                i18nIdLabel={i18n.t('shared:ID')}\n                                i18nImport={i18n.t(\n                                  'customizations:extension.ImportExtension'\n                                )}\n                                i18nNameLabel={i18n.t('shared:Name')}\n                                i18nTitle={i18n.t(\n                                  'customizations:extension.ImportReview'\n                                )}\n                                i18nTypeLabel={i18n.t('shared:Type')}\n                                i18nActionText={this.getActionText}\n                                onImport={handleImport}\n                              />\n                            ) : (\n                              <Container />\n                            )}\n                          </>\n                        )}\n                      </Translation>\n                    );\n                  }}\n                </WithExtensionHelpers>\n              )}\n            </WithRouteData>\n          );\n        }}\n      </AppContext.Consumer>\n    );\n  }\n}\n","import { WithExtensionHelpers, WithExtensions } from '@syndesis/api';\nimport { Extension } from '@syndesis/models';\nimport {\n  Container,\n  ExtensionListItem,\n  ExtensionListSkeleton,\n  ExtensionListView,\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers, WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport { getExtensionTypeName } from '../customizationsUtils';\nimport resolvers from '../resolvers';\nimport CustomizationsNavBar from '../shared/CustomizationsNavBar';\n\nfunction getFilteredAndSortedExtensions(\n  extensions: Extension[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSorted = extensions;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter((extension: Extension) =>\n      extension.name.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort((thisExtension, thatExtension) => {\n    if (isSortAscending) {\n      return thisExtension.name.localeCompare(thatExtension.name);\n    }\n\n    // sort descending\n    return thatExtension.name.localeCompare(thisExtension.name);\n  });\n\n  return filteredAndSorted;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport default class ExtensionsPage extends React.Component {\n  public filterUndefinedId(extension: Extension): boolean {\n    return extension.id !== undefined;\n  }\n\n  public getUsedByMessage(extension: Extension): string {\n    // TODO: Schema is currently wrong as it has 'uses` as an OptionalInt. Remove cast when schema is fixed.\n    const numUsedBy = extension.uses as number;\n\n    if (numUsedBy === 1) {\n      return i18n.t('customizations:usedByOne');\n    }\n\n    return i18n.t('customizations:usedByMulti', { count: numUsedBy });\n  }\n\n  public render() {\n    return (\n      <WithExtensionHelpers>\n        {({ deleteExtension }) => {\n          const handleDelete = async (extensionId: string) => {\n            await deleteExtension(extensionId);\n            // TODO: post toast notification\n          };\n          return (\n            <WithExtensions>\n              {({ data, hasData, error }) => (\n                <WithListViewToolbarHelpers\n                  defaultFilterType={filterByName}\n                  defaultSortType={sortByName}\n                >\n                  {helpers => {\n                    const filteredAndSorted = getFilteredAndSortedExtensions(\n                      data.items,\n                      helpers.activeFilters,\n                      helpers.currentSortType,\n                      helpers.isSortAscending\n                    );\n\n                    return (\n                      <Translation ns={['customizations', 'shared']}>\n                        {t => (\n                          <>\n                            <CustomizationsNavBar />\n                            <Container className=\"pf-u-my-md\">\n                              <h1 className=\"pf-c-title pf-m-xl\">\n                                {t('extension.extensionsPageTitle')}\n                              </h1>\n                              <p\n                                dangerouslySetInnerHTML={{\n                                  __html: t(\n                                    'extension.extensionsPageDescription'\n                                  ),\n                                }}\n                              />\n                            </Container>\n                            <ExtensionListView\n                              filterTypes={filterTypes}\n                              sortTypes={sortTypes}\n                              linkImportExtension={resolvers.extensions.import()}\n                              resultsCount={filteredAndSorted.length}\n                              {...helpers}\n                              i18nTitle={''}\n                              i18nDescription={''}\n                              i18nEmptyStateInfo={t(\n                                'extension.emptyStateInfoMessage'\n                              )}\n                              i18nEmptyStateTitle={t(\n                                'extension.emptyStateTitle'\n                              )}\n                              i18nLinkImportExtension={t(\n                                'extension.ImportExtension'\n                              )}\n                              i18nLinkImportExtensionTip={t(\n                                'extension.importExtensionTip'\n                              )}\n                              i18nName={t('shared:Name')}\n                              i18nNameFilterPlaceholder={t(\n                                'shared:nameFilterPlaceholder'\n                              )}\n                              i18nResultsCount={t('shared:resultsCount', {\n                                count: filteredAndSorted.length,\n                              })}\n                            >\n                              <WithLoader\n                                error={error}\n                                loading={!hasData}\n                                loaderChildren={\n                                  <ExtensionListSkeleton\n                                    width={800}\n                                    style={{\n                                      backgroundColor: '#FFF',\n                                      marginTop: 30,\n                                    }}\n                                  />\n                                }\n                                errorChildren={<ApiError />}\n                              >\n                                {() =>\n                                  filteredAndSorted\n                                    .filter((extension: Extension) =>\n                                      this.filterUndefinedId(extension)\n                                    )\n                                    .map(\n                                      (extension: Extension, index: number) => (\n                                        <ExtensionListItem\n                                          key={index}\n                                          detailsPageLink={resolvers.extensions.extension.details(\n                                            { extension }\n                                          )}\n                                          extensionDescription={\n                                            extension.description\n                                          }\n                                          extensionIcon={extension.icon}\n                                          extensionId={extension.id!}\n                                          extensionName={extension.name}\n                                          i18nCancelText={t('shared:Cancel')}\n                                          i18nDelete={t('shared:Delete')}\n                                          i18nDeleteModalMessage={t(\n                                            'extension.deleteModalMessage',\n                                            { name: extension.name }\n                                          )}\n                                          i18nDeleteModalTitle={t(\n                                            'extension.deleteModalTitle'\n                                          )}\n                                          i18nDeleteTip={t(\n                                            'extension.deleteExtensionTip'\n                                          )}\n                                          i18nDetails={t('shared:Details')}\n                                          i18nDetailsTip={t(\n                                            'extension.detailsExtensionTip'\n                                          )}\n                                          i18nExtensionType={getExtensionTypeName(\n                                            extension\n                                          )}\n                                          i18nUpdate={t('shared:Update')}\n                                          i18nUpdateTip={t(\n                                            'extension.updateExtensionTip'\n                                          )}\n                                          i18nUsedByMessage={this.getUsedByMessage(\n                                            extension\n                                          )}\n                                          linkUpdateExtension={resolvers.extensions.extension.update(\n                                            { extension }\n                                          )}\n                                          onDelete={handleDelete}\n                                          usedBy={\n                                            // TODO: Schema is currently wrong as it has 'uses` as an OptionalInt. Remove cast when schema is fixed.\n                                            extension.uses as number\n                                          }\n                                        />\n                                      )\n                                    )\n                                }\n                              </WithLoader>\n                            </ExtensionListView>\n                          </>\n                        )}\n                      </Translation>\n                    );\n                  }}\n                </WithListViewToolbarHelpers>\n              )}\n            </WithExtensions>\n          );\n        }}\n      </WithExtensionHelpers>\n    );\n  }\n}\n","import {\n  Connection,\n  ProjectedColumn,\n  RestDataService,\n  SchemaNode,\n  ViewDefinition,\n  ViewEditorState,\n  ViewInfo,\n  VirtualizationPublishingDetails,\n  VirtualizationSourceStatus,\n} from '@syndesis/models';\n\nconst PREVIEW_VDB_NAME = 'PreviewVdb';\nconst SCHEMA_MODEL_SUFFIX = 'schemamodel';\n\nexport enum DvConnectionStatus {\n  ACTIVE = 'ACTIVE',\n  INACTIVE = 'INACTIVE',\n}\n\nexport enum DvConnectionSelection {\n  SELECTED = 'SELECTED',\n  NOTSELECTED = 'NOTSELECTED',\n}\n\n/**\n * Get the name of the preview VDB used for preview queries\n */\nexport function getPreviewVdbName(): string {\n  return PREVIEW_VDB_NAME;\n}\n\n/**\n * Recursively flattens the tree structure of SchemaNodes,\n * into an array of ViewInfos\n * @param viewInfos the array of ViewInfos\n * @param schemaNode the SchemaNode from which the ViewInfo is generated\n * @param nodePath path for current SchemaNode\n * @param selectedViewNames names of views which are selected\n * @param existingViewNames names of views which exist (marked as update)\n */\nexport function generateViewInfos(\n  viewInfos: ViewInfo[],\n  schemaNode: SchemaNode,\n  nodePath: string[],\n  selectedViewNames: string[],\n  existingViewNames: string[]\n): void {\n  if (schemaNode) {\n    // Generate source path from nodePath array\n    const sourcePath: string[] = [];\n    for (const seg of nodePath) {\n      sourcePath.push(seg);\n    }\n\n    // Creates ViewInfo if the SchemaNode is queryable\n    if (schemaNode.queryable === true) {\n      const vwName = schemaNode.connectionName + '_' + schemaNode.name;\n      // Determine whether ViewInfo should be selected\n      const selectedState =\n        selectedViewNames.findIndex(viewName => viewName === vwName) === -1\n          ? false\n          : true;\n      // Deteremine whether ViewInfo is an update\n      const hasExistingView =\n        existingViewNames.findIndex(viewName => viewName === vwName) === -1\n          ? false\n          : true;\n      // Create ViewInfo\n      const view: ViewInfo = {\n        connectionName: schemaNode.connectionName,\n        isUpdate: hasExistingView,\n        nodePath: sourcePath,\n        selected: selectedState,\n        viewName: vwName,\n        viewSourceNode: schemaNode,\n      };\n      viewInfos.push(view);\n    }\n    // Update path for next level\n    sourcePath.push(schemaNode.name);\n    // Process this nodes children\n    if (schemaNode.children && schemaNode.children.length > 0) {\n      for (const childNode of schemaNode.children) {\n        generateViewInfos(\n          viewInfos,\n          childNode,\n          sourcePath,\n          selectedViewNames,\n          existingViewNames\n        );\n      }\n    }\n  }\n}\n\n/**\n * Generates ViewEditorStates for the supplied ViewInfos\n * @param serviceVdbName the name of the virtualization vdb\n * @param viewInfos the array of ViewInfos\n */\nexport function generateViewEditorStates(\n  serviceVdbName: string,\n  viewInfos: ViewInfo[]\n): ViewEditorState[] {\n  const editorStates: ViewEditorState[] = [];\n  for (const viewInfo of viewInfos) {\n    const srcPaths: string[] = [];\n    const path =\n      'connection=' +\n      viewInfo.connectionName +\n      '/' +\n      viewInfo.viewSourceNode.path;\n    srcPaths.push(path);\n\n    // All columns are projected\n    const projCols: ProjectedColumn[] = [];\n    const projCol: ProjectedColumn = {\n      name: 'ALL',\n      selected: true,\n      type: 'ALL',\n    };\n    projCols.push(projCol);\n\n    // View Definition\n    // TODO: need to supply the description here instead of generate\n    const viewDefn: ViewDefinition = {\n      compositions: [],\n      isComplete: true,\n      keng__description: viewInfo.viewName + ' description',\n      projectedColumns: projCols,\n      sourcePaths: srcPaths,\n      viewName: viewInfo.viewName,\n    };\n\n    // ViewEditorState which is supplied to the user profile\n    const editorState: ViewEditorState = {\n      id: serviceVdbName + '.' + viewInfo.viewName,\n      viewDefinition: viewDefn,\n    };\n    editorStates.push(editorState);\n  }\n  return editorStates;\n}\n\n/**\n * Generate array of DvConnections.  Takes the incoming connections and updates the 'options',\n * based on the Virtualization connection status and selection state\n * @param conns the connections\n * @param virtualizationsSourceStatuses the available virtualization sources\n * @param selectedConn name of a selected connection\n */\nexport function generateDvConnections(\n  conns: Connection[],\n  virtualizationsSourceStatuses: VirtualizationSourceStatus[],\n  selectedConn: string\n): Connection[] {\n  const dvConns: Connection[] = [];\n  for (const conn of conns) {\n    let connStatus = DvConnectionStatus.INACTIVE;\n    const virtSrcStatus = virtualizationsSourceStatuses.find(\n      virtStatus => virtStatus.sourceName === conn.name\n    );\n    if (\n      virtSrcStatus &&\n      virtSrcStatus.vdbState === 'ACTIVE' &&\n      virtSrcStatus.schemaState === 'ACTIVE'\n    ) {\n      connStatus = DvConnectionStatus.ACTIVE;\n    }\n\n    let selectionState = DvConnectionSelection.NOTSELECTED;\n    if (conn.name === selectedConn) {\n      selectionState = DvConnectionSelection.SELECTED;\n    }\n    conn.options = { dvStatus: connStatus, dvSelected: selectionState };\n    dvConns.push(conn);\n  }\n  return dvConns;\n}\n\n/**\n * Get the Connection DV status.  DV uses the options on a connection to set status\n * @param connection the connection\n */\nexport function getDvConnectionStatus(conn: Connection): string {\n  let dvState: string = DvConnectionStatus.INACTIVE;\n  if (conn.options && conn.options.dvStatus) {\n    dvState = conn.options.dvStatus;\n  }\n  return dvState;\n}\n\n/**\n * Determine if the Connection is selected with the DV wizard.  DV uses the options on a connection to set selection\n * @param connection the connection\n */\nexport function isDvConnectionSelected(conn: Connection) {\n  let isSelected = false;\n  if (\n    conn.options &&\n    conn.options.dvSelected &&\n    conn.options.dvSelected === DvConnectionSelection.SELECTED\n  ) {\n    isSelected = true;\n  }\n  return isSelected;\n}\n\n/**\n * Get publishing state details for the specified virtualization\n * @param virtualization the RestDataService\n */\nexport function getPublishingDetails(\n  virtualization: RestDataService\n): VirtualizationPublishingDetails {\n  // Determine published state\n  const publishStepDetails: VirtualizationPublishingDetails = {\n    state: virtualization.publishedState,\n    stepNumber: 0,\n    stepText: '',\n    stepTotal: 4,\n  };\n  switch (virtualization.publishedState) {\n    case 'CONFIGURING':\n      publishStepDetails.stepNumber = 1;\n      publishStepDetails.stepText = 'Configuring';\n      break;\n    case 'BUILDING':\n      publishStepDetails.stepNumber = 2;\n      publishStepDetails.stepText = 'Building';\n      break;\n    case 'DEPLOYING':\n      publishStepDetails.stepNumber = 3;\n      publishStepDetails.stepText = 'Deploying';\n      break;\n    case 'RUNNING':\n      publishStepDetails.stepNumber = 4;\n      publishStepDetails.stepText = 'Published';\n      break;\n  }\n  if (virtualization.publishLogUrl) {\n    publishStepDetails.logUrl = virtualization.publishLogUrl;\n  }\n  return publishStepDetails;\n}\n\n/**\n * Generate preview SQL for the specified view definition\n * @param viewDefinition the ViewDefinition\n */\nexport function getPreviewSql(viewDefinition: ViewDefinition): string {\n  // TODO: This assumes a single source view.  Will need to expand capability later\n  const sourcePath = viewDefinition.sourcePaths[0];\n  if (sourcePath) {\n    return 'SELECT * FROM ' + getPreviewTableName(sourcePath) + ';';\n  }\n  return '';\n}\n\n/**\n * Generates the table name for the preview query, given the source path.\n * Example sourcePath: (connection=pgConn/schema=public/table=account)\n * @param sourcePath the path for the view source\n */\nfunction getPreviewTableName(sourcePath: string): string {\n  // Assemble the name, utilizing the schema model suffix\n  return (\n    getConnectionName(sourcePath).toLowerCase() +\n    SCHEMA_MODEL_SUFFIX +\n    '.' +\n    getNodeName(sourcePath)\n  );\n}\n\n/**\n * Get the connection name from the supplied source path.  connection is always the first segment.\n * Example sourcePath: 'connection=pgConn/schema=public/table=account'\n * @param sourcePath the view definition sourcePath\n */\nfunction getConnectionName(sourcePath: string): string {\n  // Connection name is the value of the first segment\n  return sourcePath.split('/')[0].split('=')[1];\n}\n\n/**\n * Get the node name from the supplied source path.\n * Example sourcePath: 'connection=pgConn/schema=public/table=account'\n * @param sourcePath the view definition sourcePath\n */\nfunction getNodeName(sourcePath: string): string {\n  const segments = sourcePath.split('/');\n  // Node name is the value of the last segment\n  return segments[segments.length - 1].split('=')[1];\n}\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\nimport ApiConnectorsPage from './pages/ApiConnectorsPage';\nimport ExtensionDetailsPage from './pages/ExtensionDetailsPage';\nimport ExtensionImportPage from './pages/ExtensionImportPage';\nimport ExtensionsPage from './pages/ExtensionsPage';\nimport routes from './routes';\n\nexport default class CustomizationApp extends React.Component {\n  public render() {\n    return (\n      <Switch>\n        <Redirect\n          path={routes.root}\n          exact={true}\n          to={routes.apiConnectors.list}\n        />\n        <Route\n          path={routes.apiConnectors.list}\n          exact={true}\n          component={ApiConnectorsPage}\n        />\n        <Route\n          path={routes.extensions.list}\n          exact={true}\n          component={ExtensionsPage}\n        />\n        <Route\n          path={routes.extensions.import}\n          exact={true}\n          component={ExtensionImportPage}\n        />\n        // **This route must appear after import page**\n        <Route\n          path={routes.extensions.extension.details}\n          exact={true}\n          component={ExtensionDetailsPage}\n        />\n        <Route\n          path={routes.extensions.extension.update}\n          exact={true}\n          component={ExtensionImportPage}\n        />\n      </Switch>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport CustomizationsApp from './CustomizationsApp';\nimport routes from './routes';\n\nexport class CustomizationsModule extends React.Component {\n  public render() {\n    return (\n      <Switch>\n        <Route path={routes.root} component={CustomizationsApp} />\n      </Switch>\n    );\n  }\n}\n","import { WithRouter } from '@syndesis/utils';\nimport * as React from 'react';\nimport Loadable from 'react-loadable';\nimport { ModuleLoader } from '../../shared';\n\nconst LoadableDashboardPage = Loadable({\n  loader: () => import(/* webpackChunkName: \"Dashboard\" */ './DashboardApp'),\n  loading: ModuleLoader,\n});\n\nexport class DashboardModule extends React.Component {\n  public render() {\n    return (\n      <WithRouter>\n        {({ match }) => <LoadableDashboardPage baseurl={match.url} />}\n      </WithRouter>\n    );\n  }\n}\n","import customizations from './customizations/routes';\nimport dashboard from './dashboard/routes';\nimport data from './data/routes';\nimport integrations from './integrations/routes';\n\nexport default {\n  customizations,\n  dashboard,\n  data,\n  integrations,\n};\n","import { WithVirtualization } from '@syndesis/api';\nimport { Container, Loader } from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { ApiError } from '../../../shared';\n\nexport interface IWithVirtualizationDetailHeaderProps {\n  virtualizationId: string;\n}\n\nexport class HeaderView extends React.Component<\n  IWithVirtualizationDetailHeaderProps\n> {\n  public constructor(props: IWithVirtualizationDetailHeaderProps) {\n    super(props);\n  }\n\n  public render() {\n    return (\n      <WithVirtualization virtualizationId={this.props.virtualizationId}>\n        {({ data, hasData, error }) => (\n          <WithLoader\n            error={error}\n            loading={!hasData}\n            loaderChildren={<Loader />}\n            errorChildren={<ApiError />}\n          >\n            {() => (\n              <Container>\n                <h2>{data.keng__id}</h2>\n                <h3>{data.tko__description}</h3>\n              </Container>\n            )}\n          </WithLoader>\n        )}\n      </WithVirtualization>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport { Container, TabBar, TabBarItem } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport resolvers from '../resolvers';\n\n/**\n * @param virtualization - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationNavBarProps#virtualization}.\n */\n\nexport interface IVirtualizationNavBarProps {\n  virtualization: RestDataService;\n}\n\n/**\n * A component that displays a nav bar with 4 items:\n *\n * 1. a link to the page that displays a list of Views\n * 2. a link to the page that displays relationships\n * 3. a link to the page that displays the SQL Query editor\n * 4. a link to the page that dispays metrics\n *\n */\nexport class VirtualizationNavBar extends React.Component<\n  IVirtualizationNavBarProps\n> {\n  public render() {\n    const virtualization = this.props.virtualization;\n    return (\n      <Translation ns={['data', 'shared']}>\n        {t => (\n          <Container\n            style={{\n              background: '#fff',\n            }}\n          >\n            <TabBar>\n              <TabBarItem\n                label={t('data:virtualization.views')}\n                to={resolvers.virtualizations.views.root({\n                  virtualization,\n                })}\n              />\n              <TabBarItem\n                label={t('data:virtualization.relationship')}\n                to={resolvers.virtualizations.relationship({\n                  virtualization,\n                })}\n              />\n              <TabBarItem\n                label={t('data:virtualization.sqlClient')}\n                to={resolvers.virtualizations.sqlClient({\n                  virtualization,\n                })}\n              />\n              <TabBarItem\n                label={t('data:virtualization.metrics')}\n                to={resolvers.virtualizations.metrics({\n                  virtualization,\n                })}\n              />\n            </TabBar>\n          </Container>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { WizardStep, WizardSteps } from '@syndesis/ui';\nimport * as React from 'react';\nimport i18n from '../../../i18n';\n\nexport interface IViewsCreateStepsProps {\n  /**\n   * The one-based active step number.\n   */\n  step: number;\n}\n\nexport interface IViewsCreateStepsState {\n  /**\n   * Indicates if the user clicked on a step. Used to show\n   * sub-steps when browsing from a mobile device.\n   */\n  active: boolean;\n}\n\n/**\n * A component to display the PatternFly Wizard Steps specific to the integration\n * creator flow.\n * @see [step]{@link IViewsCreateStepsProps#step}\n * @see [subStep]{@link IViewsCreateStepsProps#subStep}\n */\nexport class ViewsCreateSteps extends React.Component<\n  IViewsCreateStepsProps,\n  IViewsCreateStepsState\n> {\n  public state = {\n    active: false,\n  };\n\n  constructor(props: IViewsCreateStepsProps) {\n    super(props);\n    this.toggleActive = this.toggleActive.bind(this);\n  }\n\n  public toggleActive() {\n    this.setState({\n      active: !this.state.active,\n    });\n  }\n\n  public render() {\n    return (\n      <WizardSteps\n        active={this.state.active}\n        mainSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              onClick={this.toggleActive}\n              step={1}\n              title={i18n.t('data:virtualization.importDataSourceWizardStep1')}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              onClick={this.toggleActive}\n              step={2}\n              title={i18n.t('data:virtualization.importDataSourceWizardStep2')}\n            />\n          </>\n        }\n        altSteps={\n          <>\n            <WizardStep\n              isActive={this.props.step === 1}\n              isDisabled={this.props.step < 1}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={1}\n              title={i18n.t('data:virtualization.importDataSourceWizardStep1')}\n            />\n            <WizardStep\n              isActive={this.props.step === 2}\n              isDisabled={this.props.step < 2}\n              isAlt={true}\n              onClick={this.toggleActive}\n              step={2}\n              title={i18n.t('data:virtualization.importDataSourceWizardStep2')}\n            />\n          </>\n        }\n      />\n    );\n  }\n}\n","import { WithVirtualizationConnectionSchema } from '@syndesis/api';\nimport { SchemaNode, ViewInfo } from '@syndesis/models';\nimport {\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n  ViewInfoList,\n  ViewInfoListItem,\n  ViewInfoListSkeleton,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers, WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport { generateViewInfos } from './VirtualizationUtils';\n\nfunction getFilteredAndSortedSchemaNodes(\n  schemaNodes: SchemaNode[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean,\n  selectedViewNames: string[],\n  existingViewNames: string[]\n) {\n  const viewInfos: ViewInfo[] = [];\n  if (schemaNodes && schemaNodes.length > 0) {\n    generateViewInfos(\n      viewInfos,\n      schemaNodes[0],\n      [],\n      selectedViewNames,\n      existingViewNames\n    );\n  }\n\n  let filteredAndSorted = viewInfos;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter((viewInfo: ViewInfo) =>\n      viewInfo.viewName.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort((thisViewInfo, thatViewInfo) => {\n    if (isSortAscending) {\n      return thisViewInfo.viewName.localeCompare(thatViewInfo.viewName);\n    }\n\n    // sort descending\n    return thatViewInfo.viewName.localeCompare(thisViewInfo.viewName);\n  });\n\n  return filteredAndSorted;\n}\n\nexport interface IViewInfosContentProps {\n  connectionName: string;\n  existingViewNames: string[];\n  onViewSelected: (view: ViewInfo) => void;\n  onViewDeselected: (viewName: string) => void;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport class ViewInfosContent extends React.Component<IViewInfosContentProps> {\n  public displayedViews: ViewInfo[] = [];\n  public selectedViewNames: string[] = [];\n\n  public constructor(props: IViewInfosContentProps) {\n    super(props);\n    this.handleViewSelectionChange = this.handleViewSelectionChange.bind(this);\n  }\n\n  public handleViewSelectionChange(name: string, selected: boolean) {\n    if (selected) {\n      for (const viewInfo of this.displayedViews) {\n        if (viewInfo.viewName === name) {\n          this.props.onViewSelected(viewInfo);\n        }\n      }\n    } else {\n      this.props.onViewDeselected(name);\n    }\n  }\n\n  public render() {\n    return (\n      <WithVirtualizationConnectionSchema\n        connectionId={this.props.connectionName}\n      >\n        {({ data, hasData, error }) => (\n          <WithListViewToolbarHelpers\n            defaultFilterType={filterByName}\n            defaultSortType={sortByName}\n          >\n            {helpers => {\n              const filteredAndSorted = getFilteredAndSortedSchemaNodes(\n                data,\n                helpers.activeFilters,\n                helpers.currentSortType,\n                helpers.isSortAscending,\n                this.selectedViewNames,\n                this.props.existingViewNames\n              );\n              this.displayedViews = filteredAndSorted;\n\n              return (\n                <Translation ns={['data', 'shared']}>\n                  {t => (\n                    <ViewInfoList\n                      filterTypes={filterTypes}\n                      sortTypes={sortTypes}\n                      {...this.state}\n                      resultsCount={filteredAndSorted.length}\n                      {...helpers}\n                      i18nEmptyStateInfo={t(\n                        'virtualization.emptyStateInfoMessage'\n                      )}\n                      i18nEmptyStateTitle={t('virtualization.emptyStateTitle')}\n                      i18nName={t('shared:Name')}\n                      i18nNameFilterPlaceholder={t(\n                        'shared:nameFilterPlaceholder'\n                      )}\n                      i18nResultsCount={t('shared:resultsCount', {\n                        count: filteredAndSorted.length,\n                      })}\n                    >\n                      <WithLoader\n                        error={error}\n                        loading={!hasData}\n                        loaderChildren={\n                          <ViewInfoListSkeleton\n                            width={800}\n                            style={{\n                              backgroundColor: '#FFF',\n                              marginTop: 30,\n                            }}\n                          />\n                        }\n                        errorChildren={<ApiError />}\n                      >\n                        {() =>\n                          filteredAndSorted.map(\n                            (viewInfo: ViewInfo, index: number) => (\n                              <ViewInfoListItem\n                                key={index}\n                                connectionName={viewInfo.connectionName}\n                                name={viewInfo.viewName}\n                                nodePath={viewInfo.nodePath}\n                                selected={viewInfo.selected}\n                                i18nUpdate={t('shared:Update')}\n                                isUpdateView={viewInfo.isUpdate}\n                                onSelectionChanged={\n                                  this.handleViewSelectionChange\n                                }\n                              />\n                            )\n                          )\n                        }\n                      </WithLoader>\n                    </ViewInfoList>\n                  )}\n                </Translation>\n              );\n            }}\n          </WithListViewToolbarHelpers>\n        )}\n      </WithVirtualizationConnectionSchema>\n    );\n  }\n}\n","import { WithVirtualizationHelpers } from '@syndesis/api';\nimport { AutoForm, IFormDefinition } from '@syndesis/auto-form';\nimport { QueryResults, ViewDefinition } from '@syndesis/models';\nimport { Container } from '@syndesis/ui';\n// tslint:disable-next-line:no-implicit-dependencies\nimport { DropdownButton, MenuItem } from 'patternfly-react';\nimport * as React from 'react';\nimport i18n from '../../../i18n';\nimport { getPreviewSql } from './VirtualizationUtils';\n\nexport interface IViewSqlFormProps {\n  /**\n   * @param views the array of view definitions for the current virtualization\n   */\n  views: ViewDefinition[];\n\n  /**\n   * @param targetVdb the name of the vdb to query\n   */\n  targetVdb: string;\n\n  /**\n   * @param onQueryResultsChanged the parameter function called by the parent component to that returns\n   * the promotes the value of the latest query results\n   */\n  onQueryResultsChanged: (queryResults: QueryResults) => void;\n}\n\nexport interface IViewSqlFormState {\n  queryResults: QueryResults;\n  querySql: string;\n  selectedView?: ViewDefinition;\n}\n\nexport class ViewSqlForm extends React.Component<\n  IViewSqlFormProps,\n  IViewSqlFormState\n> {\n  public static queryResultsEmpty: QueryResults = {\n    columns: [],\n    rows: [],\n  };\n\n  public constructor(props: IViewSqlFormProps) {\n    super(props);\n    this.state = {\n      queryResults: ViewSqlForm.queryResultsEmpty,\n      querySql: '',\n    };\n\n    this.updateQueryResults = this.updateQueryResults.bind(this);\n    this.viewSelected = this.viewSelected.bind(this);\n  }\n\n  public updateQueryResults(results: QueryResults) {\n    {\n      results && results.columns.length > 0\n        ? this.setState({ queryResults: results })\n        : this.setState({ queryResults: ViewSqlForm.queryResultsEmpty });\n    }\n\n    this.props.onQueryResultsChanged(this.state.queryResults);\n  }\n\n  public viewSelected() {\n    const viewSql = getPreviewSql(this.props.views[0]);\n    // TODO: change the defaultValue in the SqlStatement text area\n    // to reflect the newly selected view name (if changed)\n    // Maybe even show a text field showing the selected component depending on the PF4 widget type\n    this.setState({\n      queryResults: ViewSqlForm.queryResultsEmpty,\n      querySql: viewSql,\n      selectedView: this.props.views[0],\n    });\n  }\n\n  public render() {\n    const formDefinition = {\n      rowLimit: {\n        componentProperty: true,\n        defaultValue: '10',\n        deprecated: false,\n        description: i18n.t(\n          'data:virtualization.viewSqlFormRowLimitDescription'\n        ),\n        displayName: i18n.t('data:virtualization.viewSqlFormRowLimit'),\n        javaType: 'java.lang.Integer',\n        kind: 'property',\n        order: 3,\n        required: true,\n        secret: false,\n        type: 'number',\n      },\n      rowOffset: {\n        componentProperty: true,\n        defaultValue: '1',\n        deprecated: false,\n        description: i18n.t(\n          'data:virtualization.viewSqlFormRowOffsetDescription'\n        ),\n        displayName: i18n.t('data:virtualization.viewSqlFormRowOffset'),\n        javaType: 'java.lang.Integer',\n        kind: 'property',\n        order: 4,\n        required: false,\n        secret: false,\n        type: 'number',\n      },\n      sqlStatement: {\n        componentProperty: true,\n        defaultValue: this.state.querySql,\n        deprecated: false,\n        description: i18n.t(\n          'data:virtualization.viewSqlFormSqlStatementDescription'\n        ),\n        displayName: i18n.t('data:virtualization.viewSqlFormSqlStatement'),\n        height: 300,\n        javaType: 'java.lang.String',\n        kind: 'property',\n        order: 2,\n        required: true,\n        secret: false,\n        type: 'textarea',\n      },\n    } as IFormDefinition;\n\n    return (\n      // TODO need to retrieve real user here\n      <WithVirtualizationHelpers username=\"developer\">\n        {({ queryVirtualization }) => {\n          const doSubmit = async (value: any) => {\n            const results: QueryResults = await queryVirtualization(\n              this.props.targetVdb,\n              value.sqlStatement,\n              value.rowLimit,\n              value.rowOffset\n            );\n            this.updateQueryResults(results);\n          };\n          return (\n            // NOTE: This is a fake SELECTOR widget (i.e. dropdown menu) just to show a selector-like UI component\n            // TODO replace DropdownButton with\n            <>\n              <Container>\n                <DropdownButton\n                  bsStyle=\"default\"\n                  title={\n                    // TODO: i18n translations\n                    this.props.views.length > 0\n                      ? 'Select View...'\n                      : 'No Views Defined'\n                  }\n                  id=\"dropdown-example\"\n                  onClick={this.viewSelected}\n                >\n                  {this.props.views.map((view, index) => (\n                    <MenuItem key={index}>{view.viewName}</MenuItem>\n                  ))}\n                </DropdownButton>\n              </Container>\n              <Container>\n                <AutoForm\n                  definition={formDefinition}\n                  initialValue={''}\n                  i18nRequiredProperty={'*Required'}\n                  onSave={doSubmit}\n                >\n                  {({ fields, handleSubmit }) => (\n                    <React.Fragment>\n                      {fields}\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-primary\"\n                        onClick={handleSubmit}\n                      >\n                        Submit\n                      </button>\n                    </React.Fragment>\n                  )}\n                </AutoForm>\n              </Container>\n            </>\n          );\n        }}\n      </WithVirtualizationHelpers>\n    );\n  }\n}\n","import { QueryResults, ViewDefinition } from '@syndesis/models';\nimport { Container, GenericTable } from '@syndesis/ui';\n// tslint:disable-next-line:no-implicit-dependencies\nimport { EmptyState, Grid, Table } from 'patternfly-react';\nimport * as React from 'react';\nimport i18n from '../../../i18n';\nimport { ViewSqlForm } from '../shared/';\n\nexport interface IViewSqlFormAndTableProps {\n  /**\n   * @param views the list of ViewDefinitions for the virtualization\n   */\n  views: ViewDefinition[];\n\n  /**\n   * @param targetVdb the name of the vdb to query\n   */\n  targetVdb: string;\n}\n\nexport interface IViewSqlFormAndTableState {\n  queryResults: QueryResults;\n}\n\nexport class ViewSqlFormAndTable extends React.Component<\n  IViewSqlFormAndTableProps,\n  IViewSqlFormAndTableState\n> {\n  public constructor(props: IViewSqlFormAndTableProps) {\n    super(props);\n    this.state = {\n      queryResults: ViewSqlForm.queryResultsEmpty,\n    };\n\n    this.setQueryResults = this.setQueryResults.bind(this);\n  }\n\n  public setQueryResults(results: QueryResults) {\n    {\n      results && results.columns.length > 0\n        ? this.setState({\n            queryResults: results,\n          })\n        : this.setState({\n            queryResults: ViewSqlForm.queryResultsEmpty,\n          });\n    }\n  }\n\n  public render() {\n    const defaultCellFormat = (value: any) => (\n      <Table.Heading>{value}</Table.Heading>\n    );\n    const defaultHeaderFormat = (value: any) => (\n      <Table.Cell>{value}</Table.Cell>\n    );\n\n    return (\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Container>\n            <ViewSqlForm\n              views={this.props.views}\n              targetVdb={this.props.targetVdb}\n              onQueryResultsChanged={this.setQueryResults}\n            />\n          </Container>\n        </Grid.Col>\n        <Grid.Col md={6}>\n          <Container>\n            {this.state.queryResults.rows.length > 0 ? (\n              <GenericTable\n                columns={this.state.queryResults.columns.map(c => ({\n                  cell: {\n                    formatters: [defaultCellFormat],\n                  },\n                  header: {\n                    formatters: [defaultHeaderFormat],\n                    label: c.label,\n                  },\n                  property: c.name,\n                }))}\n                rows={this.state.queryResults.rows\n                  .map(row => row.row)\n                  .map(row =>\n                    row.reduce(\n                      // tslint:disable-next-line:no-shadowed-variable\n                      (row, r, idx) => ({\n                        ...row,\n                        [this.state.queryResults.columns[idx].name]: r,\n                      }),\n                      {}\n                    )\n                  )}\n                rowKey={\n                  this.state.queryResults.columns.length > 0\n                    ? this.state.queryResults.columns[0].name\n                    : ''\n                }\n                {...this.props}\n              />\n            ) : (\n              <EmptyState>\n                <EmptyState.Title>\n                  {i18n.t(\n                    'data:virtualization.queryResultsTableEmptyStateTitle'\n                  )}\n                </EmptyState.Title>\n                <EmptyState.Info>\n                  {i18n.t(\n                    'data:virtualization.queryResultsTableEmptyStateInfo'\n                  )}\n                </EmptyState.Info>\n              </EmptyState>\n            )}\n          </Container>\n        </Grid.Col>\n      </Grid.Row>\n    );\n  }\n}\n","import { getConnectionIcon } from '@syndesis/api';\nimport { Connection } from '@syndesis/models';\nimport {\n  DvConnectionCard,\n  DvConnectionsGrid,\n  DvConnectionsGridCell,\n  DvConnectionSkeleton,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { ApiError } from '../../../shared';\nimport {\n  getDvConnectionStatus,\n  isDvConnectionSelected,\n} from './VirtualizationUtils';\n\nexport interface IDvConnectionsProps {\n  error: boolean;\n  loading: boolean;\n  connections: Connection[];\n  onConnectionSelectionChanged: (name: string, selected: boolean) => void;\n}\n\nexport class DvConnections extends React.Component<IDvConnectionsProps> {\n  public constructor(props: IDvConnectionsProps) {\n    super(props);\n    this.handleConnSourceSelectionChanged = this.handleConnSourceSelectionChanged.bind(\n      this\n    );\n  }\n\n  public handleConnSourceSelectionChanged(name: string, isSelected: boolean) {\n    this.props.onConnectionSelectionChanged(name, isSelected);\n  }\n\n  public render() {\n    return (\n      <DvConnectionsGrid>\n        <WithLoader\n          error={this.props.error}\n          loading={this.props.loading}\n          loaderChildren={\n            <>\n              {new Array(5).fill(0).map((_, index) => (\n                <DvConnectionsGridCell key={index}>\n                  <DvConnectionSkeleton />\n                </DvConnectionsGridCell>\n              ))}\n            </>\n          }\n          errorChildren={<ApiError />}\n        >\n          {() =>\n            this.props.connections.map((c, index) => (\n              <DvConnectionsGridCell key={index}>\n                <DvConnectionCard\n                  name={c.name}\n                  description={c.description || ''}\n                  dvStatus={getDvConnectionStatus(c)}\n                  icon={getConnectionIcon(process.env.PUBLIC_URL, c)}\n                  selected={isDvConnectionSelected(c)}\n                  onSelectionChanged={this.handleConnSourceSelectionChanged}\n                />\n              </DvConnectionsGridCell>\n            ))\n          }\n        </WithLoader>\n      </DvConnectionsGrid>\n    );\n  }\n}\n","import { WithConnections } from '@syndesis/api';\nimport { Connection, VirtualizationSourceStatus } from '@syndesis/models';\nimport {\n  DvConnectionsListView,\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport resolvers from '../../resolvers';\nimport { DvConnections } from './DvConnections';\nimport { generateDvConnections } from './VirtualizationUtils';\n\nfunction getFilteredAndSortedConnections(\n  connections: Connection[],\n  dvSourceStatuses: VirtualizationSourceStatus[],\n  selectedConn: string,\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  // Connections are adjusted to supply dvStatus and selection\n  let filteredAndSortedConnections = generateDvConnections(\n    connections,\n    dvSourceStatuses,\n    selectedConn\n  );\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSortedConnections = filteredAndSortedConnections.filter(\n      (c: Connection) => c.name.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSortedConnections = filteredAndSortedConnections.sort(\n    (miA, miB) => {\n      const left = isSortAscending ? miA : miB;\n      const right = isSortAscending ? miB : miA;\n      return left.name.localeCompare(right.name);\n    }\n  );\n\n  return filteredAndSortedConnections;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport interface IDvConnectionsWithToolbarProps {\n  error: boolean;\n  loading: boolean;\n  dvSourceStatuses: VirtualizationSourceStatus[];\n  onConnectionSelectionChanged: (name: string, selected: boolean) => void;\n  children?: any;\n}\nexport interface IDvConnectionsWithToolbarState {\n  selectedConnection: any;\n}\n\nexport class DvConnectionsWithToolbar extends React.Component<\n  IDvConnectionsWithToolbarProps,\n  IDvConnectionsWithToolbarState\n> {\n  public constructor(props: IDvConnectionsWithToolbarProps) {\n    super(props);\n    this.state = {\n      selectedConnection: '', // initial selected connection empty\n    };\n    this.handleConnectionSelectionChanged = this.handleConnectionSelectionChanged.bind(\n      this\n    );\n  }\n\n  public handleConnectionSelectionChanged(name: string, selected: boolean) {\n    this.props.onConnectionSelectionChanged(name, selected);\n  }\n\n  public render() {\n    return (\n      <Translation ns={['shared']}>\n        {t => (\n          <WithConnections>\n            {({ data, hasData, error }) => (\n              <WithListViewToolbarHelpers\n                defaultFilterType={filterByName}\n                defaultSortType={sortByName}\n              >\n                {helpers => {\n                  const filteredAndSortedConnections = getFilteredAndSortedConnections(\n                    data.connectionsForDisplay,\n                    this.props.dvSourceStatuses,\n                    this.state.selectedConnection,\n                    helpers.activeFilters,\n                    helpers.currentSortType,\n                    helpers.isSortAscending\n                  );\n\n                  return (\n                    <DvConnectionsListView\n                      linkToConnectionCreate={resolvers.connections.create.selectConnector()}\n                      filterTypes={filterTypes}\n                      sortTypes={sortTypes}\n                      resultsCount={filteredAndSortedConnections.length}\n                      {...helpers}\n                      i18nLinkCreateConnection={t(\n                        'shared:linkCreateConnection'\n                      )}\n                      i18nResultsCount={t('shared:resultsCount', {\n                        count: filteredAndSortedConnections.length,\n                      })}\n                    >\n                      {this.props.children}\n                      <DvConnections\n                        error={this.props.error}\n                        loading={this.props.loading}\n                        connections={filteredAndSortedConnections}\n                        onConnectionSelectionChanged={\n                          this.handleConnectionSelectionChanged\n                        }\n                      />\n                    </DvConnectionsListView>\n                  );\n                }}\n              </WithListViewToolbarHelpers>\n            )}\n          </WithConnections>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { WithVirtualizationConnectionStatuses } from '@syndesis/api';\nimport { RestDataService } from '@syndesis/models';\nimport { ViewsCreateLayout } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport resolvers from '../../../resolvers';\nimport { DvConnectionsWithToolbar, ViewsCreateSteps } from '../../shared';\n\n/**\n * @param virtualizationId - the ID of the virtualization for the wizard\n */\nexport interface ISelectConnectionRouteParams {\n  virtualizationId: string;\n}\n\n/**\n * @param virtualization - the virtualization for the wizard.\n */\nexport interface ISelectConnectionRouteState {\n  virtualization: RestDataService;\n}\n\nexport interface ISelectConnectionPageState {\n  selectedConnection: any;\n}\n\nexport class SelectConnectionPage extends React.Component<\n  {},\n  ISelectConnectionPageState\n> {\n  public constructor(props: {}) {\n    super(props);\n    this.state = {\n      selectedConnection: '', // initial selected connection empty\n    };\n    this.handleConnectionSelectionChanged = this.handleConnectionSelectionChanged.bind(\n      this\n    );\n  }\n\n  public handleConnectionSelectionChanged(name: string, selected: boolean) {\n    const selConn = selected ? name : '';\n    this.setState({\n      selectedConnection: selConn,\n    });\n  }\n\n  public render() {\n    const connectionId: string = this.state.selectedConnection;\n    return (\n      <WithRouteData<ISelectConnectionRouteParams, ISelectConnectionRouteState>>\n        {({ virtualizationId }, { virtualization }, { history }) => (\n          <ViewsCreateLayout\n            header={<ViewsCreateSteps step={1} />}\n            content={\n              <WithVirtualizationConnectionStatuses>\n                {({ data, hasData, error }) => (\n                  <DvConnectionsWithToolbar\n                    error={error}\n                    loading={!hasData}\n                    dvSourceStatuses={data}\n                    onConnectionSelectionChanged={\n                      this.handleConnectionSelectionChanged\n                    }\n                  />\n                )}\n              </WithVirtualizationConnectionStatuses>\n            }\n            cancelHref={resolvers.data.virtualizations.views.root({\n              virtualization,\n            })}\n            nextHref={resolvers.data.virtualizations.views.importSource.selectViews(\n              {\n                connectionId,\n                virtualization,\n              }\n            )}\n            isNextDisabled={this.state.selectedConnection.length < 1}\n            isNextLoading={false}\n            isLastStep={false}\n          />\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { WithViewEditorStates, WithVirtualizationHelpers } from '@syndesis/api';\nimport { RestDataService, ViewEditorState, ViewInfo } from '@syndesis/models';\nimport { ViewsCreateLayout } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport resolvers from '../../../resolvers';\nimport { ViewInfosContent, ViewsCreateSteps } from '../../shared';\nimport { generateViewEditorStates } from '../../shared/VirtualizationUtils';\n\n/**\n * @param virtualizationId - the ID of the virtualization for the wizard.\n */\nexport interface ISelectViewsRouteParams {\n  virtualizationId: string;\n}\n\n/**\n * @param virtualization - the virtualization for the wizard.\n * @param connectionId - the id of the selected connection\n */\nexport interface ISelectViewsRouteState {\n  virtualization: RestDataService;\n  connectionId: string;\n}\n\nexport interface ISelectViewsPageState {\n  hasSelectedTables: boolean;\n}\n\nexport class SelectViewsPage extends React.Component<\n  {},\n  ISelectViewsPageState\n> {\n  public selectedViews: ViewInfo[] = []; // Maintains list of selected views\n\n  public constructor(props: {}) {\n    super(props);\n    this.state = {\n      hasSelectedTables: false, // initialize selected tables state\n    };\n    this.handleAddView = this.handleAddView.bind(this);\n    this.handleRemoveView = this.handleRemoveView.bind(this);\n  }\n\n  public getExistingViewNames(editorStates: ViewEditorState[]) {\n    const viewNames: string[] = [];\n    for (const editorState of editorStates) {\n      viewNames.push(editorState.viewDefinition.viewName);\n    }\n    return viewNames;\n  }\n\n  public handleAddView(view: ViewInfo) {\n    this.selectedViews.push(view);\n    this.setState({\n      hasSelectedTables: this.selectedViews.length > 0,\n    });\n  }\n\n  public handleRemoveView(viewName: string) {\n    const index = this.selectedViews.findIndex(\n      view => view.viewName === viewName\n    );\n\n    if (index !== -1) {\n      this.selectedViews.splice(index, 1);\n    }\n    this.setState({\n      hasSelectedTables: this.selectedViews.length > 0,\n    });\n  }\n\n  public render() {\n    return (\n      <WithRouteData<ISelectViewsRouteParams, ISelectViewsRouteState>>\n        {(\n          { virtualizationId },\n          { virtualization, connectionId },\n          { history }\n        ) => (\n          // TODO need to retrieve real user here\n          <WithVirtualizationHelpers username=\"developer\">\n            {({ refreshVirtualizationViews }) => {\n              const handleCreateViews = async () => {\n                const viewEditorStates = generateViewEditorStates(\n                  virtualization.serviceVdbName,\n                  this.selectedViews\n                );\n                await refreshVirtualizationViews(\n                  virtualization.keng__id,\n                  viewEditorStates\n                );\n                // TODO: post toast notification\n                history.push(\n                  resolvers.data.virtualizations.views.root({ virtualization })\n                );\n              };\n              return (\n                <WithViewEditorStates>\n                  {({ data, hasData, error }) => (\n                    <ViewsCreateLayout\n                      header={<ViewsCreateSteps step={2} />}\n                      content={\n                        <ViewInfosContent\n                          connectionName={connectionId}\n                          existingViewNames={this.getExistingViewNames(data)}\n                          onViewSelected={this.handleAddView}\n                          onViewDeselected={this.handleRemoveView}\n                        />\n                      }\n                      cancelHref={resolvers.data.virtualizations.views.root({\n                        virtualization,\n                      })}\n                      backHref={resolvers.data.virtualizations.views.importSource.selectConnection(\n                        { virtualization }\n                      )}\n                      onCreateViews={handleCreateViews}\n                      isNextDisabled={!this.state.hasSelectedTables}\n                      isNextLoading={false}\n                      isLastStep={true}\n                    />\n                  )}\n                </WithViewEditorStates>\n              );\n            }}\n          </WithVirtualizationHelpers>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport { Breadcrumb } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../i18n';\nimport { WithClosedNavigation } from '../../shared';\nimport resolvers from '../resolvers';\nimport routes from '../routes';\nimport { SelectConnectionPage, SelectViewsPage } from './pages/views';\n\nexport interface ICreateViewsAppRouteState {\n  virtualization: RestDataService;\n}\n\nexport default class CreateViewsApp extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<null, ICreateViewsAppRouteState>>\n        {(_, { virtualization }) => (\n          <WithClosedNavigation>\n            <Breadcrumb>\n              <Link to={resolvers.dashboard.root()}>\n                {i18n.t('shared:Home')}\n              </Link>\n              <Link to={resolvers.data.root()}>\n                {i18n.t('shared:DataVirtualizations')}\n              </Link>\n              <Link\n                to={resolvers.data.virtualizations.views.root({\n                  virtualization,\n                })}\n              >\n                {virtualization.keng__id}\n              </Link>\n              <span>{i18n.t('data:virtualization.importDataSource')}</span>\n            </Breadcrumb>\n            <Switch>\n              {/* step 1 */}\n              <Route\n                path={\n                  routes.data.virtualizations.virtualization.views.importSource\n                    .selectConnection\n                }\n                exact={true}\n                component={SelectConnectionPage}\n              />\n              {/* step 2 */}\n              <Route\n                path={\n                  routes.data.virtualizations.virtualization.views.importSource\n                    .selectViews\n                }\n                exact={true}\n                component={SelectViewsPage}\n              />\n            </Switch>\n          </WithClosedNavigation>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { WithVirtualizationHelpers } from '@syndesis/api';\nimport { AutoForm, IFormDefinition } from '@syndesis/auto-form';\nimport { Breadcrumb, Container } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../../i18n';\nimport resolvers from '../../resolvers';\n\nexport class VirtualizationCreatePage extends React.Component {\n  public render() {\n    const formDefinition = {\n      virtDescription: {\n        componentProperty: true,\n        deprecated: false,\n        displayName: i18n.t(\n          'data:virtualization.virtualizationDescriptionDisplay'\n        ),\n        javaType: 'java.lang.String',\n        kind: 'property',\n        order: 1,\n        required: false,\n        secret: false,\n        type: 'textarea',\n      },\n      virtName: {\n        componentProperty: true,\n        deprecated: false,\n        displayName: i18n.t('data:virtualization.virtualizationNameDisplay'),\n        javaType: 'java.lang.String',\n        kind: 'property',\n        order: 0,\n        required: true,\n        secret: false,\n        type: 'string',\n      },\n    } as IFormDefinition;\n    const validate = (v: { virtName: string }) => {\n      const errors: any = {};\n      // TODO Incorporate service call to validate virtualization name\n      if (v.virtName.includes('?')) {\n        errors.virtName = 'Virtualization name contains an illegal character';\n      }\n      return errors;\n    };\n\n    return (\n      <WithRouteData<null, null>>\n        {(p, s, { history }) => (\n          // TODO need to retrieve real user here\n          <WithVirtualizationHelpers username=\"developer\">\n            {({ createVirtualization }) => {\n              const handleCreate = async (value: any) => {\n                const virtualization = await createVirtualization(\n                  value.virtName,\n                  value.virtDescription\n                );\n                // TODO: post toast notification\n                history.push(\n                  resolvers.data.virtualizations.views.root({ virtualization })\n                );\n              };\n              return (\n                <Translation ns={['data', 'shared']}>\n                  {t => (\n                    <>\n                      <Breadcrumb>\n                        <Link to={resolvers.dashboard.root()}>\n                          {t('shared:Home')}\n                        </Link>\n                        <Link to={resolvers.data.root()}>\n                          {t('shared:DataVirtualizations')}\n                        </Link>\n                        <span>\n                          {t(\n                            'data:virtualization.createDataVirtualizationTitle'\n                          )}\n                        </span>\n                      </Breadcrumb>\n                      <Container>\n                        <h1>\n                          {t(\n                            'data:virtualization.createDataVirtualizationTitle'\n                          )}\n                        </h1>\n                        <AutoForm\n                          definition={formDefinition}\n                          initialValue={''}\n                          i18nRequiredProperty={t(\n                            'data:virtualization.requiredPropertyText'\n                          )}\n                          validate={validate}\n                          onSave={handleCreate}\n                        >\n                          {({ fields, handleSubmit }) => (\n                            <React.Fragment>\n                              {fields}\n                              <button\n                                type=\"button\"\n                                className=\"btn btn-primary\"\n                                onClick={handleSubmit}\n                              >\n                                {t('shared:Create')}\n                              </button>\n                            </React.Fragment>\n                          )}\n                        </AutoForm>\n                      </Container>\n                    </>\n                  )}\n                </Translation>\n              );\n            }}\n          </WithVirtualizationHelpers>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport { Breadcrumb, Container } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport resolvers from '../../resolvers';\nimport { HeaderView } from '../shared';\nimport { VirtualizationNavBar } from '../shared';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationMetricsPageRouteParams {\n  virtualizationId: string;\n  virtualization: RestDataService;\n}\n\n/**\n * @param virtualizationId - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationMetricsPageRouteParams#virtualizationId}.\n */\n\nexport interface IVirtualizationMetricsPageRouteState {\n  virtualization: RestDataService;\n}\n\nexport class VirtualizationMetricsPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<\n        IVirtualizationMetricsPageRouteParams,\n        IVirtualizationMetricsPageRouteState\n      >>\n        {({ virtualizationId }, { virtualization }, { history }) => {\n          return (\n            <Translation ns={['data', 'shared']}>\n              {t => (\n                <div>\n                  <Breadcrumb>\n                    <Link to={resolvers.dashboard.root()}>\n                      {t('shared:Home')}\n                    </Link>\n                    <Link to={resolvers.data.root()}>\n                      {t('shared:DataVirtualizations')}\n                    </Link>\n                    <span>\n                      {virtualizationId + ' '}\n                      {t('data:virtualization.metrics')}\n                    </span>\n                  </Breadcrumb>\n                  <HeaderView virtualizationId={virtualizationId} />\n                  <VirtualizationNavBar virtualization={virtualization} />\n                  <Container>\n                    <h3>Metrics are not yet implemented</h3>\n                  </Container>\n                </div>\n              )}\n            </Translation>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport { Breadcrumb, Container } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport resolvers from '../../resolvers';\nimport { HeaderView } from '../shared';\nimport { VirtualizationNavBar } from '../shared';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationRelationshipPageRouteParams {\n  virtualizationId: string;\n  virtualization: RestDataService;\n}\n\n/**\n * @param virtualizationId - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationRelationshipPageRouteState#virtualizationId}.\n */\n\nexport interface IVirtualizationRelationshipPageRouteState {\n  virtualization: RestDataService;\n}\n\nexport class VirtualizationRelationshipPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<\n        IVirtualizationRelationshipPageRouteParams,\n        IVirtualizationRelationshipPageRouteState\n      >>\n        {({ virtualizationId }, { virtualization }, { history }) => {\n          return (\n            <Translation ns={['data', 'shared']}>\n              {t => (\n                <div>\n                  <Breadcrumb>\n                    <Link to={resolvers.dashboard.root()}>\n                      {t('shared:Home')}\n                    </Link>\n                    <Link to={resolvers.data.root()}>\n                      {t('shared:DataVirtualizations')}\n                    </Link>\n                    <span>\n                      {virtualizationId + ' '}\n                      {t('data:virtualization.relationship')}\n                    </span>\n                  </Breadcrumb>\n                  <HeaderView virtualizationId={virtualizationId} />\n                  <VirtualizationNavBar virtualization={virtualization} />\n                  <Container>\n                    <h3>Relationships are not yet implemented</h3>\n                  </Container>\n                </div>\n              )}\n            </Translation>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { WithVirtualizationHelpers, WithVirtualizations } from '@syndesis/api';\nimport { RestDataService } from '@syndesis/models';\nimport {\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n  VirtualizationList,\n  VirtualizationListItem,\n  VirtualizationListSkeleton,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers, WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport resolvers from '../resolvers';\nimport { getPublishingDetails } from '../shared/VirtualizationUtils';\n\nfunction getFilteredAndSortedVirtualizations(\n  virtualizations: RestDataService[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSorted = virtualizations;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter(\n      (virtualization: RestDataService) =>\n        virtualization.keng__id.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort(\n    (thisVirtualization, thatVirtualization) => {\n      if (isSortAscending) {\n        return thisVirtualization.keng__id.localeCompare(\n          thatVirtualization.keng__id\n        );\n      }\n\n      // sort descending\n      return thatVirtualization.keng__id.localeCompare(\n        thisVirtualization.keng__id\n      );\n    }\n  );\n\n  return filteredAndSorted;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport function getVirtualizationsHref(baseUrl: string): string {\n  return `${baseUrl}`;\n}\n\nexport class VirtualizationsPage extends React.Component {\n  public filterUndefinedId(virtualization: RestDataService): boolean {\n    return virtualization.keng__id !== undefined;\n  }\n\n  public handleImportVirt(virtualizationName: string) {\n    // TODO: implement handleImportVirt\n    alert('Import virtualization ' + virtualizationName);\n  }\n\n  public handleExportVirtualization() {\n    // TODO: implement handleExportVirtualization\n    alert('Export virtualization ');\n  }\n\n  public render() {\n    return (\n      <WithVirtualizations>\n        {({ data, hasData, error, read }) => {\n          return (\n            // TODO need to retrieve real username here\n            <WithVirtualizationHelpers username=\"developer\">\n              {({\n                deleteVirtualization,\n                publishVirtualization,\n                unpublishServiceVdb,\n              }) => {\n                const handleDelete = async (virtualizationName: string) => {\n                  await deleteVirtualization(virtualizationName).then(read);\n                  // TODO: post toast notification\n                };\n                const handlePublish = async (virtualizationName: string) => {\n                  await publishVirtualization(virtualizationName);\n                  // TODO: post toast notification\n                };\n                const handleUnpublish = async (serviceVdbName: string) => {\n                  await unpublishServiceVdb(serviceVdbName);\n                  // TODO: post toast notification\n                };\n                return (\n                  <WithListViewToolbarHelpers\n                    defaultFilterType={filterByName}\n                    defaultSortType={sortByName}\n                  >\n                    {helpers => {\n                      const filteredAndSorted = getFilteredAndSortedVirtualizations(\n                        data,\n                        helpers.activeFilters,\n                        helpers.currentSortType,\n                        helpers.isSortAscending\n                      );\n\n                      return (\n                        <Translation ns={['data', 'shared']}>\n                          {t => (\n                            <VirtualizationList\n                              filterTypes={filterTypes}\n                              sortTypes={sortTypes}\n                              resultsCount={filteredAndSorted.length}\n                              {...helpers}\n                              i18nCreateDataVirtualization={t(\n                                'virtualization.createDataVirtualization'\n                              )}\n                              i18nCreateDataVirtualizationTip={t(\n                                'virtualization.createDataVirtualizationTip'\n                              )}\n                              i18nDescription={t(\n                                'virtualization.virtualizationsPageDescription'\n                              )}\n                              i18nEmptyStateInfo={t(\n                                'virtualization.emptyStateInfoMessage'\n                              )}\n                              i18nEmptyStateTitle={t(\n                                'virtualization.emptyStateTitle'\n                              )}\n                              i18nImport={t('shared:Import')}\n                              i18nImportTip={t(\n                                'virtualization.importVirtualizationTip'\n                              )}\n                              i18nLinkCreateVirtualization={t(\n                                'virtualization.createDataVirtualization'\n                              )}\n                              i18nName={t('shared:Name')}\n                              i18nNameFilterPlaceholder={t(\n                                'shared:nameFilterPlaceholder'\n                              )}\n                              i18nResultsCount={t('shared:resultsCount', {\n                                count: filteredAndSorted.length,\n                              })}\n                              i18nTitle={t(\n                                'virtualization.virtualizationsPageTitle'\n                              )}\n                              linkCreateHRef={resolvers.virtualizations.create()}\n                              onImport={this.handleImportVirt}\n                              hasListData={data.length > 0}\n                            >\n                              <WithLoader\n                                error={error}\n                                loading={!hasData}\n                                loaderChildren={\n                                  <VirtualizationListSkeleton\n                                    width={800}\n                                    style={{\n                                      backgroundColor: '#FFF',\n                                      marginTop: 30,\n                                    }}\n                                  />\n                                }\n                                errorChildren={<ApiError />}\n                              >\n                                {() =>\n                                  filteredAndSorted.map(\n                                    (\n                                      virtualization: RestDataService,\n                                      index: number\n                                    ) => {\n                                      const publishingDetails = getPublishingDetails(\n                                        virtualization\n                                      );\n                                      return (\n                                        <VirtualizationListItem\n                                          key={index}\n                                          detailsPageLink={resolvers.virtualizations.views.root(\n                                            { virtualization }\n                                          )}\n                                          virtualizationName={\n                                            virtualization.keng__id\n                                          }\n                                          virtualizationDescription={\n                                            virtualization.tko__description\n                                              ? virtualization.tko__description\n                                              : ''\n                                          }\n                                          serviceVdbName={\n                                            virtualization.serviceVdbName\n                                          }\n                                          i18nCancelText={t('shared:Cancel')}\n                                          i18nDelete={t('shared:Delete')}\n                                          i18nDeleteModalMessage={t(\n                                            'virtualization.deleteModalMessage',\n                                            { name: virtualization.keng__id }\n                                          )}\n                                          i18nDeleteModalTitle={t(\n                                            'virtualization.deleteModalTitle'\n                                          )}\n                                          i18nDraft={t('shared:Draft')}\n                                          i18nEdit={t('shared:Edit')}\n                                          i18nEditTip={t(\n                                            'virtualization.editDataVirtualizationTip'\n                                          )}\n                                          i18nError={t('shared:Error')}\n                                          i18nExport={t('shared:Export')}\n                                          i18nPublish={t('shared:Publish')}\n                                          i18nPublished={t(\n                                            'virtualization.publishedDataVirtualization'\n                                          )}\n                                          i18nUnpublish={t('shared:Unpublish')}\n                                          i18nUnpublishModalMessage={t(\n                                            'virtualization.unpublishModalMessage',\n                                            { name: virtualization.keng__id }\n                                          )}\n                                          i18nUnpublishModalTitle={t(\n                                            'virtualization.unpublishModalTitle'\n                                          )}\n                                          onDelete={handleDelete}\n                                          onExport={\n                                            this.handleExportVirtualization\n                                          }\n                                          onUnpublish={handleUnpublish}\n                                          onPublish={handlePublish}\n                                          currentPublishedState={\n                                            publishingDetails.state\n                                          }\n                                          publishingLogUrl={\n                                            publishingDetails.logUrl\n                                          }\n                                          publishingCurrentStep={\n                                            publishingDetails.stepNumber\n                                          }\n                                          publishingTotalSteps={\n                                            publishingDetails.stepTotal\n                                          }\n                                          publishingStepText={\n                                            publishingDetails.stepText\n                                          }\n                                          i18nPublishInProgress={t(\n                                            'virtualization.publishInProgress'\n                                          )}\n                                          i18nPublishLogUrlText={t(\n                                            'shared:viewLogs'\n                                          )}\n                                        />\n                                      );\n                                    }\n                                  )\n                                }\n                              </WithLoader>\n                            </VirtualizationList>\n                          )}\n                        </Translation>\n                      );\n                    }}\n                  </WithListViewToolbarHelpers>\n                );\n              }}\n            </WithVirtualizationHelpers>\n          );\n        }}\n      </WithVirtualizations>\n    );\n  }\n}\n","import { WithViewEditorStates } from '@syndesis/api';\nimport { RestDataService, ViewEditorState } from '@syndesis/models';\nimport { Breadcrumb } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport resolvers from '../../resolvers';\nimport {\n  HeaderView,\n  ViewSqlFormAndTable,\n  VirtualizationNavBar,\n} from '../shared/';\nimport { getPreviewVdbName } from '../shared/VirtualizationUtils';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationSqlClientPageRouteParams {\n  virtualizationId: string;\n  virtualization: RestDataService;\n}\n\n/**\n * NOTE that this SQL query page requires\n *  1) a list of View children of the Virtualization\n *    - This list will need to be retrieved (already in the VirtualizationViewsPage)\n *  2) Views list needs to populate the View selector DropdownButton's MenuItems\n *  3) If # Views == 0\n *    - Define Example SQL statement and show query results in EMPTY STATE mode\n *  4) if # Views > 0\n *    - Select the first view\n *    - Enter a simple SQL statement like:  \"SELECT * FROM view1\"\n */\n\n/**\n * @param virtualizationId - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationSqlClientPageRouteParams#virtualizationId}.\n */\n\nexport interface IVirtualizationSqlClientPageRouteState {\n  virtualization: RestDataService;\n}\n\nexport class VirtualizationSqlClientPage extends React.Component<\n  IVirtualizationSqlClientPageRouteState\n> {\n  public render() {\n    return (\n      <WithRouteData<\n        IVirtualizationSqlClientPageRouteParams,\n        IVirtualizationSqlClientPageRouteState\n      >>\n        {({ virtualizationId }, { virtualization }, { history }) => (\n          <Translation ns={['data', 'shared']}>\n            {t => (\n              <>\n                <Breadcrumb>\n                  <Link to={resolvers.dashboard.root()}>\n                    {t('shared:Home')}\n                  </Link>\n                  <Link to={resolvers.data.root()}>\n                    {t('shared:DataVirtualizations')}\n                  </Link>\n                  <span>\n                    {virtualizationId + ' '}\n                    {t('data:virtualization.sqlClient')}\n                  </span>\n                </Breadcrumb>\n                <HeaderView virtualizationId={virtualizationId} />\n                <VirtualizationNavBar virtualization={virtualization} />\n                <WithViewEditorStates\n                  idPattern={virtualization.serviceVdbName + '*'}\n                >\n                  {({ data, hasData, error }) => (\n                    <ViewSqlFormAndTable\n                      views={data.map(\n                        (editorState: ViewEditorState) =>\n                          editorState.viewDefinition\n                      )}\n                      targetVdb={getPreviewVdbName()}\n                    />\n                  )}\n                </WithViewEditorStates>\n              </>\n            )}\n          </Translation>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { WithViewEditorStates, WithVirtualizationHelpers } from '@syndesis/api';\nimport { RestDataService } from '@syndesis/models';\nimport { ViewDefinition, ViewEditorState } from '@syndesis/models';\nimport { Breadcrumb } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../../i18n';\nimport { ApiError } from '../../../shared';\nimport { HeaderView } from '../shared';\nimport { VirtualizationNavBar } from '../shared';\n\nimport {\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n  ViewList,\n  ViewListItem,\n  ViewListSkeleton,\n} from '@syndesis/ui';\nimport {\n  WithListViewToolbarHelpers,\n  WithLoader,\n  WithRouteData,\n} from '@syndesis/utils';\nimport { Translation } from 'react-i18next';\nimport resolvers from '../../resolvers';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationViewsPageRouteParams {\n  virtualizationId: string;\n  virtualization: RestDataService;\n}\n\n/**\n * @param virtualizationId - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationViewsPageRouteParams#virtualizationId}.\n */\n\nexport interface IVirtualizationViewsPageRouteState {\n  virtualization: RestDataService;\n}\n\nfunction getFilteredAndSortedViewDefns(\n  viewDefinitions: ViewDefinition[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSorted = viewDefinitions;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter((view: ViewDefinition) =>\n      view.viewName.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort((thisView, thatView) => {\n    if (isSortAscending) {\n      return thisView.viewName.localeCompare(thatView.viewName);\n    }\n\n    // sort descending\n    return thatView.viewName.localeCompare(thisView.viewName);\n  });\n\n  return filteredAndSorted;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport class VirtualizationViewsPage extends React.Component<\n  IVirtualizationViewsPageRouteParams,\n  IVirtualizationViewsPageRouteState\n> {\n  public filterUndefinedId(view: ViewDefinition): boolean {\n    return view.viewName !== undefined;\n  }\n\n  public handleImportView(viewName: string) {\n    // TODO: implement handleImportView\n    alert('Import view ' + viewName);\n  }\n\n  public handleEditView() {\n    // TODO: implement handleEdit\n    alert('Edit view ');\n  }\n\n  public render() {\n    return (\n      <WithRouteData<\n        IVirtualizationViewsPageRouteParams,\n        IVirtualizationViewsPageRouteState\n      >>\n        {({ virtualizationId }, { virtualization }, { history }) => {\n          return (\n            <Translation ns={['data', 'shared']}>\n              {t => (\n                <>\n                  <Breadcrumb>\n                    <Link to={resolvers.dashboard.root()}>\n                      {t('shared:Home')}\n                    </Link>\n                    <Link to={resolvers.data.root()}>\n                      {t('shared:DataVirtualizations')}\n                    </Link>\n                    <span>\n                      {virtualizationId + ' '}\n                      {t('data:virtualization.views')}\n                    </span>\n                  </Breadcrumb>\n                  <HeaderView virtualizationId={virtualizationId} />\n                  <WithViewEditorStates\n                    idPattern={virtualization.serviceVdbName + '*'}\n                  >\n                    {({ data, hasData, error, read }) => {\n                      return (\n                        // TODO need to retrieve real username here\n                        <WithVirtualizationHelpers username=\"developer\">\n                          {({ deleteView }) => {\n                            const handleDeleteView = async (\n                              viewName: string\n                            ) => {\n                              await deleteView(virtualization, viewName).then(\n                                read\n                              );\n                              // TODO: post toast notification\n                            };\n                            return (\n                              <WithListViewToolbarHelpers\n                                defaultFilterType={filterByName}\n                                defaultSortType={sortByName}\n                              >\n                                {helpers => {\n                                  const viewDefns = data.map(\n                                    (editorState: ViewEditorState) =>\n                                      editorState.viewDefinition\n                                  );\n                                  const filteredAndSorted = getFilteredAndSortedViewDefns(\n                                    viewDefns,\n                                    helpers.activeFilters,\n                                    helpers.currentSortType,\n                                    helpers.isSortAscending\n                                  );\n                                  return (\n                                    <>\n                                      <VirtualizationNavBar\n                                        virtualization={virtualization}\n                                      />\n                                      <ViewList\n                                        filterTypes={filterTypes}\n                                        sortTypes={sortTypes}\n                                        {...this.state}\n                                        resultsCount={filteredAndSorted.length}\n                                        {...helpers}\n                                        i18nDescription={t(\n                                          'data:virtualization.viewsPageDescription'\n                                        )}\n                                        i18nEmptyStateInfo={t(\n                                          'data:virtualization.viewEmptyStateInfo'\n                                        )}\n                                        i18nEmptyStateTitle={t(\n                                          'data:virtualization.viewEmptyStateTitle'\n                                        )}\n                                        i18nImportViews={t(\n                                          'data:virtualization.importDataSource'\n                                        )}\n                                        i18nImportViewsTip={t(\n                                          'data:virtualization.importDataSourceTip'\n                                        )}\n                                        i18nCreateView={t(\n                                          'data:virtualization.createView'\n                                        )}\n                                        i18nCreateViewTip={t(\n                                          'data:virtualization.createViewTip'\n                                        )}\n                                        i18nName={t('shared:Name')}\n                                        i18nNameFilterPlaceholder={t(\n                                          'shared:nameFilterPlaceholder'\n                                        )}\n                                        i18nResultsCount={t(\n                                          'shared:resultsCount',\n                                          {\n                                            count: filteredAndSorted.length,\n                                          }\n                                        )}\n                                        // TODO - Point to views.create when available\n                                        linkCreateViewHRef={resolvers.data.virtualizations.create()}\n                                        linkImportViewsHRef={resolvers.data.virtualizations.views.importSource.selectConnection(\n                                          { virtualization }\n                                        )}\n                                        onImportView={this.handleImportView}\n                                        hasListData={data.length > 0}\n                                      />\n                                      <WithLoader\n                                        error={error}\n                                        loading={!hasData}\n                                        loaderChildren={\n                                          <ViewListSkeleton\n                                            width={800}\n                                            style={{\n                                              backgroundColor: '#FFF',\n                                              marginTop: 30,\n                                            }}\n                                          />\n                                        }\n                                        errorChildren={<ApiError />}\n                                      >\n                                        {() =>\n                                          filteredAndSorted\n                                            .filter((view: ViewDefinition) =>\n                                              this.filterUndefinedId(view)\n                                            )\n                                            .map(\n                                              (\n                                                view: ViewDefinition,\n                                                index: number\n                                              ) => (\n                                                <ViewListItem\n                                                  key={index}\n                                                  viewName={view.viewName}\n                                                  viewDescription={\n                                                    view.keng__description\n                                                  }\n                                                  i18nCancelText={t(\n                                                    'shared:Cancel'\n                                                  )}\n                                                  i18nDelete={t(\n                                                    'shared:Delete'\n                                                  )}\n                                                  i18nDeleteModalMessage={t(\n                                                    'virtualization.deleteViewModalMessage',\n                                                    {\n                                                      name: view.viewName,\n                                                    }\n                                                  )}\n                                                  i18nDeleteModalTitle={t(\n                                                    'virtualization.deleteModalTitle'\n                                                  )}\n                                                  i18nEdit={t('shared:Edit')}\n                                                  i18nEditTip={t(\n                                                    'view.editViewTip'\n                                                  )}\n                                                  onDelete={handleDeleteView}\n                                                  onEdit={this.handleEditView}\n                                                />\n                                              )\n                                            )\n                                        }\n                                      </WithLoader>\n                                    </>\n                                  );\n                                }}\n                              </WithListViewToolbarHelpers>\n                            );\n                          }}\n                        </WithVirtualizationHelpers>\n                      );\n                    }}\n                  </WithViewEditorStates>\n                </>\n              )}\n            </Translation>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\nimport CreateViewsApp from './CreateViewsApp';\nimport {\n  VirtualizationCreatePage,\n  VirtualizationMetricsPage,\n  VirtualizationRelationshipPage,\n  VirtualizationsPage,\n  VirtualizationSqlClientPage,\n  VirtualizationViewsPage,\n} from './pages';\nimport routes from './routes';\n\nexport class DataModule extends React.Component {\n  public render() {\n    return (\n      <Switch>\n        <Redirect\n          path={routes.root}\n          exact={true}\n          to={routes.virtualizations.list}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.views.importSource.root}\n          component={CreateViewsApp}\n        />\n        <Route\n          path={routes.virtualizations.create}\n          exact={true}\n          component={VirtualizationCreatePage}\n        />\n        <Route\n          path={routes.virtualizations.list}\n          exact={true}\n          component={VirtualizationsPage}\n        />\n        <Redirect\n          path={routes.virtualizations.virtualization.root}\n          exact={true}\n          to={routes.virtualizations.virtualization.views.root}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.views.root}\n          exact={true}\n          component={VirtualizationViewsPage}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.relationship}\n          exact={true}\n          component={VirtualizationRelationshipPage}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.sqlClient}\n          exact={true}\n          component={VirtualizationSqlClientPage}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.metrics}\n          exact={true}\n          component={VirtualizationMetricsPage}\n        />\n      </Switch>\n    );\n  }\n}\n","import { getSteps } from '@syndesis/api';\nimport { Step } from '@syndesis/models';\nimport { Container, IntegrationEditorLayout } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { PageTitle } from '../../../../shared';\nimport { IntegrationEditorStepAdder } from '../IntegrationEditorStepAdder';\nimport { IBaseRouteParams, IBaseRouteState } from './interfaces';\n\nexport interface IAddStepPageProps {\n  cancelHref: (p: IBaseRouteParams, s: IBaseRouteState) => H.LocationDescriptor;\n  getEditAddStepHref: (\n    position: number,\n    p: IBaseRouteParams,\n    s: IBaseRouteState\n  ) => H.LocationDescriptor;\n  getEditConfigureStepHrefCallback: (\n    stepIdx: number,\n    step: Step,\n    p: IBaseRouteParams,\n    s: IBaseRouteState\n  ) => H.LocationDescriptor;\n  header: React.ReactNode;\n  nextHref: (p: IBaseRouteParams, s: IBaseRouteState) => H.LocationDescriptor;\n}\n\n/**\n * This page shows the steps of an existing integration.\n *\n * This component expects a [state]{@link IBaseRouteState} to be properly set in\n * the route object.\n *\n * **Warning:** this component will throw an exception if the route state is\n * undefined.\n *\n * @todo make this page shareable by making the [integration]{@link IBaseRouteState#integration}\n * optinal and adding a WithIntegration component to retrieve the integration\n * from the backend\n */\nexport class AddStepPage extends React.Component<IAddStepPageProps> {\n  public render() {\n    return (\n      <WithRouteData<IBaseRouteParams, IBaseRouteState>>\n        {({ flow }, { integration }) => (\n          <IntegrationEditorLayout\n            header={this.props.header}\n            content={\n              <>\n                <PageTitle title={'Save or add step'} />\n                <Container>\n                  <h1>Add to Integration</h1>\n                  <p>\n                    You can continue adding steps and connections to your\n                    integration as well.\n                  </p>\n                  <IntegrationEditorStepAdder\n                    steps={getSteps(integration, 0)}\n                    addStepHref={position =>\n                      this.props.getEditAddStepHref(\n                        position,\n                        { flow },\n                        { integration }\n                      )\n                    }\n                    configureStepHref={(stepIdx: number, step: Step) =>\n                      this.props.getEditConfigureStepHrefCallback(\n                        stepIdx,\n                        step,\n                        { flow },\n                        { integration }\n                      )\n                    }\n                  />\n                </Container>\n              </>\n            }\n            cancelHref={this.props.cancelHref({ flow }, { integration })}\n            nextHref={this.props.nextHref({ flow }, { integration })}\n          />\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { Integration } from '@syndesis/models';\nimport { Container, TabBar, TabBarItem } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport resolvers from '../resolvers';\n\n/**\n * @param integration - the integration being displayed. If it\n * exists, it must equal to the [integrationId]{@link IIntegrationDetailNavBarProps#integration}.\n */\nexport interface IIntegrationDetailNavBarProps {\n  integration: Integration;\n}\n\n/**\n * A component that displays a nav bar with 3 items, only showing 1 for now:\n *\n * 1. a link to the page that displays the integration with the Details tab enabled,\n * 2. a link to the page that displays the integration with the Activity tab enabled, and\n * 3. a link to the page that displays the integration with the Metrics tab enabled.\n *\n *\n * @see [DetailsPage]{@link ../pages/detail/DetailsPage}\n * @see [ActivityPage]{@link ../pages/detail/ActivityPage}\n * @see [MetricsPage]{@link ../pages/detail/MetricsPage}\n */\nexport class IntegrationDetailNavBar extends React.Component<\n  IIntegrationDetailNavBarProps\n> {\n  public render() {\n    const integration = this.props.integration;\n    return (\n      <Translation ns={['integration', 'shared']}>\n        {t => (\n          <Container\n            style={{\n              background: '#fff',\n            }}\n          >\n            <TabBar>\n              <TabBarItem\n                label={'Details'}\n                to={resolvers.integration.details({\n                  integration,\n                })}\n              />\n              <TabBarItem\n                label={'Activity'}\n                to={resolvers.integration.activity({\n                  integration,\n                })}\n              />\n              <TabBarItem\n                label={'Metrics'}\n                to={resolvers.integration.metrics({\n                  integration,\n                })}\n              />\n            </TabBar>\n          </Container>\n        )}\n      </Translation>\n    );\n  }\n}\n","import {\n  getActionById,\n  getActionDescriptor,\n  getActionStep,\n  getActionStepDefinition,\n  getActionSteps,\n  getConnectionConnector,\n  getConnectorActions,\n} from '@syndesis/api';\nimport { AutoForm, IFormDefinition } from '@syndesis/auto-form';\nimport { Action, ConnectionOverview } from '@syndesis/models';\nimport {\n  IntegrationEditorForm,\n  IntegrationEditorNothingToConfigure,\n} from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface IWithConfigurationFormChildrenProps {\n  /**\n   * the form (embedded in the right UI elements)\n   */\n  form: JSX.Element;\n  /**\n   * true if the form contains valid values. Can be used to enable/disable the\n   * submit button.\n   */\n  isValid: boolean;\n  /**\n   * true if the form is being submitted. Can be used to enable/disable the\n   * submit button.\n   */\n  isSubmitting: boolean;\n  /**\n   * the callback to fire to submit the form.\n   */\n  submitForm(): any;\n}\n\nexport interface IOnUpdatedIntegrationProps {\n  /**\n   * the action object that has been configured.\n   */\n  action: Action;\n  /**\n   * true if the configuration is not complete because there are other steps,\n   * false otherwise.\n   * If true the form should be re-rendered with an incremented\n   * [configurationStep]{@link IWithConfigurationFormProps#configurationStep}.\n   */\n  moreConfigurationSteps: boolean;\n  /**\n   * the configured values.\n   */\n  values: { [key: string]: string } | null;\n}\n\nexport interface IWithConfigurationFormProps {\n  /**\n   * the connection object that contains the action with the provided\n   * [actionId]{@link IWithConfigurationFormProps#actionId}. Used to retrieve\n   * the form definition.\n   */\n  connection: ConnectionOverview;\n  /**\n   * the ID of the action that needs to be configured.\n   */\n  actionId: string;\n  /**\n   * for actions whose configuration must be performed in multiple steps,\n   * indicates the current step.\n   */\n  configurationStep: number;\n  /**\n   * the values to assign to the form once rendered. These can come either from\n   * an existing integration or from the [onUpdatedIntegration]{@link IWithConfigurationFormProps#onUpdatedIntegration}\n   * callback.\n   */\n  initialValue?: { [key: string]: string };\n\n  /**\n   * the render prop that will receive the ready-to-be-rendered form and some\n   * helpers.\n   *\n   * @see [form]{@link IWithConfigurationFormChildrenProps#form}\n   * @see [isValid]{@link IWithConfigurationFormChildrenProps#isValid}\n   * @see [isSubmitting]{@link IWithConfigurationFormChildrenProps#isSubmitting}\n   * @see [onSubmit]{@link IWithConfigurationFormChildrenProps#submitForm}\n   */\n  children(props: IWithConfigurationFormChildrenProps): any;\n\n  /**\n   * the callback that is fired after the form submit with valid values.\n   *\n   * @see [action]{@link IOnUpdatedIntegrationProps#action}\n   * @see [moreConfigurationSteps]{@link IOnUpdatedIntegrationProps#moreConfigurationSteps}\n   * @see [values]{@link IOnUpdatedIntegrationProps#values}\n   */\n  onUpdatedIntegration(props: IOnUpdatedIntegrationProps): Promise<void>;\n}\n\n/**\n * A component to generate a configuration form for a given action and values.\n *\n * @see [action]{@link IWithConfigurationFormProps#action}\n * @see [moreConfigurationSteps]{@link IWithConfigurationFormProps#moreConfigurationSteps}\n * @see [values]{@link IWithConfigurationFormProps#values}\n */\nexport class WithConfigurationForm extends React.Component<\n  IWithConfigurationFormProps\n> {\n  public static defaultProps = {\n    initialValue: {},\n  };\n\n  constructor(props: IWithConfigurationFormProps) {\n    super(props);\n  }\n\n  public renderConfigurationForm(action: Action): JSX.Element | null {\n    try {\n      const descriptor = getActionDescriptor(action);\n      const steps = getActionSteps(descriptor);\n      const step = getActionStep(steps, this.props.configurationStep);\n      const definition = getActionStepDefinition(step);\n      const moreConfigurationSteps =\n        this.props.configurationStep < steps.length - 1;\n      const onSave = async (\n        values: { [key: string]: string },\n        actions: any\n      ): Promise<void> => {\n        await this.props.onUpdatedIntegration({\n          action,\n          moreConfigurationSteps,\n          values,\n        });\n        actions.setSubmitting(false);\n      };\n      return (\n        <AutoForm<{ [key: string]: string }>\n          i18nRequiredProperty={'* Required field'}\n          definition={definition as IFormDefinition}\n          initialValue={this.props.initialValue!}\n          onSave={onSave}\n          key={this.props.configurationStep}\n        >\n          {({ fields, handleSubmit, isSubmitting, isValid, submitForm }) =>\n            this.props.children({\n              form: (\n                <IntegrationEditorForm\n                  i18nTitle={'Configure action'}\n                  i18nSubtitle={\n                    'Fill in the required information for the selected action.'\n                  }\n                  i18nFormTitle={`${action.name} - ${action.description}`}\n                  handleSubmit={handleSubmit}\n                >\n                  {fields}\n                </IntegrationEditorForm>\n              ),\n              isSubmitting,\n              isValid,\n              submitForm,\n            })\n          }\n        </AutoForm>\n      );\n    } catch (e) {\n      return null;\n    }\n  }\n\n  public renderNoPropertiesInfo(action: Action) {\n    const submitForm = () => {\n      this.props.onUpdatedIntegration({\n        action,\n        moreConfigurationSteps: false,\n        values: null,\n      });\n    };\n    return this.props.children({\n      form: (\n        <IntegrationEditorNothingToConfigure\n          i18nTitle={'Configure action'}\n          i18nSubtitle={\n            'Fill in the required information for the selected action.'\n          }\n          i18nAlert={'There are no properties to configure for this action.'}\n        />\n      ),\n      isSubmitting: false,\n      isValid: true,\n      submitForm,\n    });\n  }\n\n  public render() {\n    const action = getActionById(\n      getConnectorActions(getConnectionConnector(this.props.connection)),\n      this.props.actionId\n    );\n    return (\n      this.renderConfigurationForm(action) ||\n      this.renderNoPropertiesInfo(action)\n    );\n  }\n}\n","import { getSteps, WithIntegrationHelpers } from '@syndesis/api';\nimport { Connection, Integration, Step } from '@syndesis/models';\nimport { IntegrationEditorLayout } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { PageTitle } from '../../../../../shared';\nimport {\n  IOnUpdatedIntegrationProps,\n  WithConfigurationForm,\n} from '../../../shared';\nimport {\n  IConfigureActionRouteParams,\n  IConfigureActionRouteState,\n} from '../interfaces';\n\nexport interface IConfigureActionPageProps {\n  backHref: (\n    p: IConfigureActionRouteParams,\n    s: IConfigureActionRouteState\n  ) => H.LocationDescriptor;\n  cancelHref: (\n    p: IConfigureActionRouteParams,\n    s: IConfigureActionRouteState\n  ) => H.LocationDescriptor;\n  header: React.ReactNode;\n  mode: 'adding' | 'editing';\n  nextStepHref: (\n    p: IConfigureActionRouteParams,\n    s: IConfigureActionRouteState\n  ) => H.LocationDescriptorObject;\n  sidebar: (props: {\n    connection: Connection;\n    steps: Step[];\n    activeIndex: number;\n  }) => React.ReactNode;\n  postConfigureHref: (\n    integration: Integration,\n    p: IConfigureActionRouteParams,\n    s: IConfigureActionRouteState\n  ) => H.LocationDescriptorObject;\n}\n\n/**\n * This page shows the configuration form for a given action.\n *\n * Submitting the form will update an *existing* integration step in\n * the [position specified in the params]{@link IConfigureActionRouteParams#position}\n * of the first flow, set up as specified by the form values.\n *\n * This component expects some [url params]{@link IConfigureActionRouteParams}\n * and [state]{@link IConfigureActionRouteState} to be properly set in\n * the route object.\n *\n * **Warning:** this component will throw an exception if the route state is\n * undefined.\n */\nexport class ConfigureActionPage extends React.Component<\n  IConfigureActionPageProps\n> {\n  public render() {\n    return (\n      <WithIntegrationHelpers>\n        {({ addConnection, updateConnection }) => (\n          <WithRouteData<\n            IConfigureActionRouteParams,\n            IConfigureActionRouteState\n          >>\n            {(\n              { actionId, flow, step = '0', position },\n              {\n                configuredProperties,\n                connection,\n                integration,\n                updatedIntegration,\n              },\n              { history }\n            ) => {\n              const stepAsNumber = parseInt(step, 10);\n              const flowAsNumber = parseInt(flow, 10);\n              const positionAsNumber = parseInt(position, 10);\n              const onUpdatedIntegration = async ({\n                action,\n                moreConfigurationSteps,\n                values,\n              }: IOnUpdatedIntegrationProps) => {\n                updatedIntegration = await (this.props.mode === 'adding' &&\n                  stepAsNumber === 0\n                  ? addConnection\n                  : updateConnection)(\n                  updatedIntegration || integration,\n                  connection,\n                  action,\n                  flowAsNumber,\n                  positionAsNumber,\n                  values\n                );\n                if (moreConfigurationSteps) {\n                  history.push(\n                    this.props.nextStepHref(\n                      {\n                        actionId,\n                        flow,\n                        position,\n                        step: `${stepAsNumber + 1}`,\n                      },\n                      {\n                        configuredProperties,\n                        connection,\n                        integration,\n                        updatedIntegration,\n                      }\n                    )\n                  );\n                } else {\n                  history.push(\n                    this.props.postConfigureHref(\n                      updatedIntegration,\n                      { actionId, flow, step, position },\n                      {\n                        configuredProperties,\n                        connection,\n                        integration,\n                        updatedIntegration,\n                      }\n                    )\n                  );\n                }\n              };\n\n              return (\n                <WithConfigurationForm\n                  connection={connection}\n                  actionId={actionId}\n                  configurationStep={stepAsNumber}\n                  initialValue={configuredProperties}\n                  onUpdatedIntegration={onUpdatedIntegration}\n                >\n                  {({ form, submitForm, isSubmitting }) => (\n                    <>\n                      <PageTitle title={'Configure the action'} />\n                      <IntegrationEditorLayout\n                        header={this.props.header}\n                        sidebar={this.props.sidebar({\n                          activeIndex: positionAsNumber,\n                          connection,\n                          steps: getSteps(updatedIntegration || integration, 0),\n                        })}\n                        content={form}\n                        backHref={this.props.backHref(\n                          { actionId, flow, step, position },\n                          {\n                            configuredProperties,\n                            connection,\n                            integration,\n                            updatedIntegration,\n                          }\n                        )}\n                        cancelHref={this.props.cancelHref(\n                          { actionId, flow, step, position },\n                          {\n                            configuredProperties,\n                            connection,\n                            integration,\n                            updatedIntegration,\n                          }\n                        )}\n                        onNext={submitForm}\n                        isNextLoading={isSubmitting}\n                      />\n                    </>\n                  )}\n                </WithConfigurationForm>\n              );\n            }}\n          </WithRouteData>\n        )}\n      </WithIntegrationHelpers>\n    );\n  }\n}\n","import { getSteps, WithConnection } from '@syndesis/api';\nimport { IConnectionWithIconFile, Step } from '@syndesis/models';\nimport {\n  ButtonLink,\n  IntegrationEditorActionsListItem,\n  IntegrationEditorChooseAction,\n  IntegrationEditorLayout,\n  Loader,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouteData } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { ApiError, PageTitle } from '../../../../../shared';\nimport {\n  ISelectActionRouteParams,\n  ISelectActionRouteState,\n} from '../interfaces';\n\nexport interface ISelectActionPageProps {\n  backHref?: (\n    p: ISelectActionRouteParams,\n    s: ISelectActionRouteState\n  ) => H.LocationDescriptor;\n  cancelHref: (\n    p: ISelectActionRouteParams,\n    s: ISelectActionRouteState\n  ) => H.LocationDescriptor;\n  header: React.ReactNode;\n  sidebar: (props: {\n    steps: Step[];\n    activeIndex: number;\n    connection: IConnectionWithIconFile;\n  }) => React.ReactNode;\n  selectHref: (\n    actionId: string,\n    p: ISelectActionRouteParams,\n    s: ISelectActionRouteState\n  ) => H.LocationDescriptor;\n}\n\n/**\n * This page shows the list of actions of a connection containing either a\n * **to** or **from pattern, depending on the specified [position]{@link ISelectActionRouteParams#position}.\n *\n * This component expects some [params]{@link ISelectActionRouteParams} and\n * [state]{@link ISelectActionRouteState} to be properly set in the route\n * object.\n *\n * **Warning:** this component will throw an exception if the route state is\n * undefined.\n */\nexport class SelectActionPage extends React.Component<ISelectActionPageProps> {\n  public render() {\n    return (\n      <WithRouteData<ISelectActionRouteParams, ISelectActionRouteState>>\n        {({ connectionId, flow, position }, { connection, integration }) => {\n          const flowAsNumber = parseInt(flow, 10);\n          const positionAsNumber = parseInt(position, 10);\n          return (\n            <WithConnection id={connectionId} initialValue={connection}>\n              {({ data, hasData, error }) => (\n                <WithLoader\n                  error={error}\n                  loading={!hasData}\n                  loaderChildren={<Loader />}\n                  errorChildren={<ApiError />}\n                >\n                  {() => (\n                    <>\n                      <PageTitle title={'Choose an action'} />\n                      <IntegrationEditorLayout\n                        header={this.props.header}\n                        sidebar={this.props.sidebar({\n                          activeIndex: positionAsNumber,\n                          connection: connection as IConnectionWithIconFile,\n                          steps: getSteps(integration, flowAsNumber),\n                        })}\n                        content={\n                          <IntegrationEditorChooseAction\n                            i18nTitle={`${connection.name} - Choose Action`}\n                            i18nSubtitle={\n                              'Choose an action for the selected connectionName.'\n                            }\n                          >\n                            {(positionAsNumber > 0\n                              ? data.actionsWithTo\n                              : data.actionsWithFrom\n                            )\n                              .sort((a, b) => a.name.localeCompare(b.name))\n                              .map((a, idx) => (\n                                <IntegrationEditorActionsListItem\n                                  key={idx}\n                                  integrationName={a.name}\n                                  integrationDescription={\n                                    a.description || 'No description available.'\n                                  }\n                                  actions={\n                                    <ButtonLink\n                                      href={this.props.selectHref(\n                                        a.id!,\n                                        { connectionId, flow, position },\n                                        { connection, integration }\n                                      )}\n                                    >\n                                      Select\n                                    </ButtonLink>\n                                  }\n                                />\n                              ))}\n                          </IntegrationEditorChooseAction>\n                        }\n                        backHref={\n                          this.props.backHref\n                            ? this.props.backHref(\n                                { connectionId, flow, position },\n                                { connection, integration }\n                              )\n                            : undefined\n                        }\n                        cancelHref={this.props.cancelHref(\n                          { connectionId, flow, position },\n                          { connection, integration }\n                        )}\n                      />\n                    </>\n                  )}\n                </WithLoader>\n              )}\n            </WithConnection>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { setIntegrationName, WithIntegrationHelpers } from '@syndesis/api';\nimport { AutoForm, IFormDefinition } from '@syndesis/auto-form';\nimport { Integration } from '@syndesis/models';\nimport { IntegrationEditorForm, IntegrationEditorLayout } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { PageTitle } from '../../../../shared';\nimport {\n  ISaveIntegrationForm,\n  ISaveIntegrationRouteParams,\n  ISaveIntegrationRouteState,\n} from './interfaces';\n\nexport interface ISaveIntegrationPageProps {\n  backHref: (\n    p: ISaveIntegrationRouteParams,\n    s: ISaveIntegrationRouteState\n  ) => H.LocationDescriptor;\n  cancelHref: (\n    p: ISaveIntegrationRouteParams,\n    s: ISaveIntegrationRouteState\n  ) => H.LocationDescriptor;\n  header: React.ReactNode;\n  postSaveHref: (i: Integration) => H.LocationDescriptorObject;\n}\n\n/**\n * This page asks for the details of the integration, and saves it.\n *\n * This component expects a [state]{@link ISaveIntegrationRouteState} to be\n * properly set in the route object.\n *\n * **Warning:** this component will throw an exception if the route state is\n * undefined.\n *\n * @todo toast notifications.\n * @todo redirect to the integration detail page once available.\n */\nexport class SaveIntegrationPage extends React.Component<\n  ISaveIntegrationPageProps\n> {\n  public render() {\n    return (\n      <WithRouteData<ISaveIntegrationRouteParams, ISaveIntegrationRouteState>>\n        {({ flow }, { integration }, { history }) => (\n          <WithIntegrationHelpers>\n            {({ saveIntegration }) => {\n              const onSave = async (\n                { name, description }: ISaveIntegrationForm,\n                actions: any\n              ) => {\n                const updatedIntegration = setIntegrationName(\n                  integration,\n                  name\n                );\n                // TODO: set the description\n                await saveIntegration(updatedIntegration);\n                actions.setSubmitting(false);\n                // TODO: toast notification\n                history.push(this.props.postSaveHref(updatedIntegration));\n              };\n              const definition: IFormDefinition = {\n                name: {\n                  defaultValue: '',\n                  displayName: 'Name',\n                  order: 0,\n                  required: true,\n                  type: 'string',\n                },\n                // tslint:disable-next-line\n                description: {\n                  defaultValue: '',\n                  displayName: 'Description',\n                  order: 1,\n                  type: 'textarea',\n                },\n              };\n              return (\n                <AutoForm<ISaveIntegrationForm>\n                  i18nRequiredProperty={'* Required field'}\n                  definition={definition}\n                  initialValue={{\n                    description: integration.description,\n                    name: integration.name,\n                  }}\n                  onSave={onSave}\n                >\n                  {({\n                    fields,\n                    dirty,\n                    handleSubmit,\n                    isSubmitting,\n                    isValid,\n                    submitForm,\n                  }) => (\n                    <IntegrationEditorLayout\n                      header={this.props.header}\n                      content={\n                        <>\n                          <PageTitle title={'Save the integration'} />\n                          <IntegrationEditorForm\n                            i18nTitle={'Save the integration'}\n                            i18nSubtitle={\n                              'Update details about this integration.'\n                            }\n                            handleSubmit={handleSubmit}\n                          >\n                            {fields}\n                          </IntegrationEditorForm>\n                        </>\n                      }\n                      cancelHref={this.props.cancelHref(\n                        { flow },\n                        { integration }\n                      )}\n                      backHref={this.props.backHref({ flow }, { integration })}\n                      onNext={submitForm}\n                      isNextDisabled={dirty && !isValid}\n                      isNextLoading={isSubmitting}\n                      isLastStep={true}\n                    />\n                  )}\n                </AutoForm>\n              );\n            }}\n          </WithIntegrationHelpers>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import {\n  getConnectionIcon,\n  getEmptyIntegration,\n  getExtensionIcon,\n  getStepKindIcon,\n  getSteps,\n  WithConnections,\n  WithExtensions,\n  WithSteps,\n} from '@syndesis/api';\nimport {\n  ConnectionOverview,\n  Extension,\n  Step,\n  StepKind,\n} from '@syndesis/models';\nimport {\n  ButtonLink,\n  IntegrationEditorChooseConnection,\n  IntegrationEditorConnectionsListItem,\n  IntegrationEditorLayout,\n  IntegrationsListSkeleton,\n} from '@syndesis/ui';\nimport { WithLoader, WithRouteData } from '@syndesis/utils';\nimport * as H from 'history';\nimport * as React from 'react';\nimport { ApiError, PageTitle } from '../../../../shared';\nimport {\n  ISelectConnectionRouteParams,\n  ISelectConnectionRouteState,\n} from './interfaces';\n\nexport interface IUIStep extends StepKind {\n  icon: string;\n}\n\nexport function toStepKindCollection(\n  connections: ConnectionOverview[],\n  extensions: Extension[],\n  steps: StepKind[]\n): IUIStep[] {\n  return [\n    ...connections.map(c => ({\n      ...c,\n      description: c.description || '',\n      icon: getConnectionIcon(process.env.PUBLIC_URL, c),\n      properties: undefined,\n    })),\n    ...extensions.map(e => ({\n      ...e,\n      description: e.description || '',\n      icon: `${process.env.PUBLIC_URL}${getExtensionIcon(e)}`,\n      properties: undefined,\n    })),\n    ...steps.map(s => ({\n      ...s,\n      icon: `${process.env.PUBLIC_URL}${getStepKindIcon(s.stepKind)}`,\n    })),\n  ].sort((a, b) => a.name.localeCompare(b.name));\n}\n\nexport const getStepKind = (stepOrConnection: ConnectionOverview | Step) => {\n  if ((stepOrConnection as ConnectionOverview).connectorId === 'api-provider') {\n    return 'api-provider';\n  }\n  if ((stepOrConnection as Step).stepKind) {\n    // not a connection\n  }\n  return 'endpoint';\n};\n\nexport interface ISelectConnectionPageProps {\n  backHref?: (\n    p: ISelectConnectionRouteParams,\n    s: ISelectConnectionRouteState\n  ) => H.LocationDescriptor;\n  cancelHref: (\n    p: ISelectConnectionRouteParams,\n    s: ISelectConnectionRouteState\n  ) => H.LocationDescriptor;\n  header: React.ReactNode;\n  apiProviderHref: (\n    p: ISelectConnectionRouteParams,\n    s: ISelectConnectionRouteState\n  ) => H.LocationDescriptorObject;\n  connectionHref: (\n    connection: ConnectionOverview,\n    p: ISelectConnectionRouteParams,\n    s: ISelectConnectionRouteState\n  ) => H.LocationDescriptorObject;\n  sidebar: (props: { steps: Step[]; activeIndex: number }) => React.ReactNode;\n}\n\n/**\n * This page shows the list of connections containing actions with a **to**\n * pattern.\n *\n * This component expects some [params]{@link ISelectConnectionRouteParams} and\n * [state]{@link ISelectConnectionRouteState} to be properly set in the route\n * object.\n *\n * **Warning:** this component will throw an exception if the route state is\n * undefined.\n */\nexport class SelectConnectionPage extends React.Component<\n  ISelectConnectionPageProps\n> {\n  public render() {\n    return (\n      <WithRouteData<ISelectConnectionRouteParams, ISelectConnectionRouteState>>\n        {(params, state, { history }) => {\n          const { flow, position } = params;\n          const { integration = getEmptyIntegration() } = state;\n          const flowAsNumber = parseInt(flow, 10) || 0;\n          const positionAsNumber = parseInt(position, 10) || 0;\n          const onStepClick = (connectionOrStep: ConnectionOverview | Step) => {\n            const stepKind = getStepKind(connectionOrStep);\n            switch (stepKind) {\n              case 'api-provider':\n                history.push(this.props.apiProviderHref(params, state));\n                break;\n              default:\n                history.push(\n                  this.props.connectionHref(\n                    connectionOrStep as ConnectionOverview,\n                    params,\n                    state\n                  )\n                );\n                break;\n            }\n          };\n          return (\n            <>\n              <PageTitle title={'Choose a connection'} />\n              <IntegrationEditorLayout\n                header={this.props.header}\n                sidebar={this.props.sidebar({\n                  activeIndex: positionAsNumber,\n                  steps: getSteps(integration, flowAsNumber),\n                })}\n                content={\n                  <WithConnections>\n                    {({\n                      data: connectionsData,\n                      hasData: hasConnectionsData,\n                      error: connectionsError,\n                    }) => (\n                      <WithExtensions>\n                        {({\n                          data: extensionsData,\n                          hasData: hasExtensionsData,\n                          error: extensionsError,\n                        }) => (\n                          <WithSteps>\n                            {({ items: steps }) => (\n                              <IntegrationEditorChooseConnection\n                                i18nTitle={'Choose a connection'}\n                                i18nSubtitle={\n                                  'Click the connection that completes the integration. If the connection you need is not available, click Create Connection.'\n                                }\n                              >\n                                <WithLoader\n                                  error={connectionsError || extensionsError}\n                                  loading={\n                                    !hasConnectionsData && !hasExtensionsData\n                                  }\n                                  loaderChildren={<IntegrationsListSkeleton />}\n                                  errorChildren={<ApiError />}\n                                >\n                                  {() => (\n                                    <>\n                                      {toStepKindCollection(\n                                        positionAsNumber === 0\n                                          ? connectionsData.connectionsWithFromAction\n                                          : connectionsData.connectionsWithToAction,\n                                        extensionsData.items,\n                                        steps\n                                      ).map((step, idx) => (\n                                        <IntegrationEditorConnectionsListItem\n                                          key={idx}\n                                          integrationName={step.name}\n                                          integrationDescription={\n                                            step.description ||\n                                            'No description available.'\n                                          }\n                                          icon={\n                                            <img\n                                              src={step.icon}\n                                              width={24}\n                                              height={24}\n                                            />\n                                          }\n                                          actions={\n                                            <ButtonLink\n                                              onClick={() => onStepClick(step)}\n                                            >\n                                              Select\n                                            </ButtonLink>\n                                          }\n                                        />\n                                      ))}\n                                      <IntegrationEditorConnectionsListItem\n                                        integrationName={''}\n                                        integrationDescription={''}\n                                        icon={''}\n                                        actions={\n                                          <ButtonLink href={'#'}>\n                                            Create connection\n                                          </ButtonLink>\n                                        }\n                                      />\n                                    </>\n                                  )}\n                                </WithLoader>\n                              </IntegrationEditorChooseConnection>\n                            )}\n                          </WithSteps>\n                        )}\n                      </WithExtensions>\n                    )}\n                  </WithConnections>\n                }\n                backHref={\n                  this.props.backHref\n                    ? this.props.backHref(params, state)\n                    : undefined\n                }\n                cancelHref={this.props.cancelHref(params, state)}\n              />\n            </>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import {\n  getConnectionIcon,\n  getEmptyIntegration,\n  getSteps,\n} from '@syndesis/api';\nimport {\n  Breadcrumb,\n  IntegrationFlowStepGeneric,\n  IntegrationFlowStepWithOverview,\n  IntegrationVerticalFlow,\n} from '@syndesis/ui';\nimport * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { WithClosedNavigation } from '../../shared';\nimport {\n  IntegrationCreatorBreadcrumbs,\n  IntegrationEditorSidebar,\n} from './components';\nimport { AddStepPage } from './components/editor/AddStepPage';\nimport { ConfigureActionPage } from './components/editor/endpoint/ConfigureActionPage';\nimport { SelectActionPage } from './components/editor/endpoint/SelectActionPage';\nimport { SaveIntegrationPage } from './components/editor/SaveIntegrationPage';\nimport { SelectConnectionPage } from './components/editor/SelectConnectionPage';\nimport resolvers from './resolvers';\nimport routes from './routes';\n\nconst addStepPage = (\n  <AddStepPage\n    cancelHref={resolvers.list}\n    getEditAddStepHref={(position, p, s) =>\n      resolvers.create.configure.addStep.selectStep({\n        position: `${position}`,\n        ...p,\n        ...s,\n      })\n    }\n    getEditConfigureStepHrefCallback={(stepIdx, step, p, s) =>\n      resolvers.create.configure.editStep.connection.configureAction({\n        actionId: step.action!.id!,\n        connection: step.connection!,\n        position: `${stepIdx}`,\n        ...p,\n        ...s,\n      })\n    }\n    header={<IntegrationCreatorBreadcrumbs step={3} />}\n    nextHref={(p, s) =>\n      resolvers.create.configure.saveAndPublish({\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst saveIntegrationPage = (\n  <SaveIntegrationPage\n    backHref={(p, s) => resolvers.create.configure.index({ ...p, ...s })}\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={4} />}\n    postSaveHref={resolvers.list}\n  />\n);\n\nconst startStepSelectConnectionPage = (\n  <SelectConnectionPage\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={1} />}\n    apiProviderHref={(p, s) => ({ pathname: 'todo' })}\n    connectionHref={(connection, params, state) =>\n      resolvers.create.start.connection.selectAction({\n        connection,\n        ...params,\n        ...state,\n      })\n    }\n    sidebar={() => (\n      <IntegrationVerticalFlow>\n        {({ expanded }) => (\n          <>\n            <IntegrationFlowStepGeneric\n              icon={<i className={'fa fa-plus'} />}\n              i18nTitle={'1. Start'}\n              i18nTooltip={'Start'}\n              active={true}\n              showDetails={expanded}\n              description={'Choose a connection'}\n            />\n            <IntegrationFlowStepWithOverview\n              icon={<i className={'fa fa-plus'} />}\n              i18nTitle={'2. Finish'}\n              i18nTooltip={'Finish'}\n              active={false}\n              showDetails={expanded}\n              name={'n/a'}\n              action={'n/a'}\n              dataType={'n/a'}\n            />\n          </>\n        )}\n      </IntegrationVerticalFlow>\n    )}\n  />\n);\n\nconst startStepSelectActionPage = (\n  <SelectActionPage\n    backHref={resolvers.create.start.selectStep}\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={1} />}\n    sidebar={({ connection }) => (\n      <IntegrationVerticalFlow>\n        {({ expanded }) => (\n          <>\n            <IntegrationFlowStepGeneric\n              icon={\n                <img\n                  src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n                  width={24}\n                  height={24}\n                />\n              }\n              i18nTitle={`1. ${connection.connector!.name}`}\n              i18nTooltip={`1. ${connection.name}`}\n              active={true}\n              showDetails={expanded}\n              description={'Choose an action'}\n            />\n            <IntegrationFlowStepWithOverview\n              icon={<i className={'fa fa-plus'} />}\n              i18nTitle={'2. Finish'}\n              i18nTooltip={'Finish'}\n              active={false}\n              showDetails={expanded}\n              name={'n/a'}\n              action={'n/a'}\n              dataType={'n/a'}\n            />\n          </>\n        )}\n      </IntegrationVerticalFlow>\n    )}\n    selectHref={(actionId, p, s) =>\n      resolvers.create.start.connection.configureAction({\n        actionId,\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst startStepConfigureActionPage = (\n  <ConfigureActionPage\n    backHref={(p, s) =>\n      resolvers.create.start.connection.selectAction({ ...p, ...s })\n    }\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={1} subStep={2} />}\n    mode={'adding'}\n    nextStepHref={(p, s) =>\n      resolvers.create.start.connection.configureAction({\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ connection }) => (\n      <IntegrationVerticalFlow>\n        {({ expanded }) => (\n          <>\n            <IntegrationFlowStepGeneric\n              icon={\n                <img\n                  src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n                  width={24}\n                  height={24}\n                />\n              }\n              i18nTitle={`1. ${connection.connector!.name}`}\n              i18nTooltip={`1. ${connection.name}`}\n              active={true}\n              showDetails={expanded}\n              description={'Configure the action'}\n            />\n            <IntegrationFlowStepWithOverview\n              icon={<i className={'fa fa-plus'} />}\n              i18nTitle={'2. Finish'}\n              i18nTooltip={'Finish'}\n              active={false}\n              showDetails={expanded}\n              name={'n/a'}\n              action={'n/a'}\n              dataType={'n/a'}\n            />\n          </>\n        )}\n      </IntegrationVerticalFlow>\n    )}\n    postConfigureHref={(integration, params) =>\n      resolvers.create.finish.selectStep({\n        integration,\n        ...params,\n        position: '1',\n      })\n    }\n  />\n);\n\nconst finishStepSelectConnectionPage = (\n  <SelectConnectionPage\n    backHref={(p, s) => {\n      const startStep = getSteps(s.integration, 0)[0];\n      return resolvers.create.start.connection.configureAction({\n        ...p,\n        ...s,\n        actionId: startStep.action!.id!,\n        connection: startStep.connection!,\n        integration: getEmptyIntegration(), // reset the integration object to force a re-add of the step, to avoid multiple steps being appended\n      });\n    }}\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={2} />}\n    apiProviderHref={(p, s) => ({ pathname: 'todo' })}\n    connectionHref={(connection, params, state) =>\n      resolvers.create.finish.connection.selectAction({\n        connection,\n        ...params,\n        ...state,\n      })\n    }\n    sidebar={({ steps }) => (\n      <IntegrationVerticalFlow>\n        {({ expanded }) => {\n          const startAction = steps[0];\n          return (\n            <>\n              <IntegrationFlowStepWithOverview\n                icon={\n                  <img\n                    src={getConnectionIcon(\n                      process.env.PUBLIC_URL,\n                      startAction.connection!\n                    )}\n                    width={24}\n                    height={24}\n                  />\n                }\n                i18nTitle={`1. ${startAction.connection!.name}`}\n                i18nTooltip={`1. ${startAction.connection!.name}`}\n                active={false}\n                showDetails={expanded}\n                name={startAction.connection!.connector!.name}\n                action={startAction.connection!.name!}\n                dataType={'TODO'}\n              />\n              <IntegrationFlowStepGeneric\n                icon={<i className={'fa fa-plus'} />}\n                i18nTitle={'2. Finish'}\n                i18nTooltip={'Finish'}\n                active={true}\n                showDetails={expanded}\n                description={'Choose a connection'}\n              />\n            </>\n          );\n        }}\n      </IntegrationVerticalFlow>\n    )}\n  />\n);\n\nconst finishStepSelectActionPage = (\n  <SelectActionPage\n    backHref={(p, s) => resolvers.create.finish.selectStep({ ...p, ...s })}\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={2} />}\n    sidebar={({ connection, steps }) => (\n      <IntegrationVerticalFlow>\n        {({ expanded }) => {\n          const startAction = steps[0];\n          return (\n            <>\n              <IntegrationFlowStepWithOverview\n                icon={\n                  <img\n                    src={getConnectionIcon(\n                      process.env.PUBLIC_URL,\n                      startAction.connection!\n                    )}\n                    width={24}\n                    height={24}\n                  />\n                }\n                i18nTitle={`1. ${startAction.connection!.name}`}\n                i18nTooltip={`1. ${startAction.connection!.name}`}\n                active={false}\n                showDetails={expanded}\n                name={startAction.connection!.connector!.name}\n                action={startAction.connection!.name!}\n                dataType={'TODO'}\n              />\n              <IntegrationFlowStepGeneric\n                icon={\n                  <img\n                    src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n                    width={24}\n                    height={24}\n                  />\n                }\n                i18nTitle={`2. ${connection.connector!.name}`}\n                i18nTooltip={`2. ${connection.name}`}\n                active={true}\n                showDetails={expanded}\n                description={'Choose an action'}\n              />\n            </>\n          );\n        }}\n      </IntegrationVerticalFlow>\n    )}\n    selectHref={(actionId, p, s) =>\n      resolvers.create.finish.connection.configureAction({\n        actionId,\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst finishStepConfigureActionPage = (\n  <ConfigureActionPage\n    backHref={(p, s) =>\n      resolvers.create.finish.connection.selectAction({ ...p, ...s })\n    }\n    cancelHref={resolvers.list}\n    header={<IntegrationCreatorBreadcrumbs step={2} subStep={2} />}\n    mode={'adding'}\n    nextStepHref={(p, s) =>\n      resolvers.create.finish.connection.configureAction({\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ connection, steps }) => (\n      <IntegrationVerticalFlow>\n        {({ expanded }) => {\n          const startAction = steps[0];\n          return (\n            <>\n              <IntegrationFlowStepWithOverview\n                icon={\n                  <img\n                    src={getConnectionIcon(\n                      process.env.PUBLIC_URL,\n                      startAction.connection!\n                    )}\n                    width={24}\n                    height={24}\n                  />\n                }\n                i18nTitle={`1. ${startAction.connection!.name}`}\n                i18nTooltip={`1. ${startAction.connection!.name}`}\n                active={false}\n                showDetails={expanded}\n                name={startAction.connection!.connector!.name}\n                action={startAction.connection!.name!}\n                dataType={'TODO'}\n              />\n              <IntegrationFlowStepGeneric\n                icon={\n                  <img\n                    src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n                    width={24}\n                    height={24}\n                  />\n                }\n                i18nTitle={`2. ${connection.connector!.name}`}\n                i18nTooltip={`2. ${connection.name}`}\n                active={true}\n                showDetails={expanded}\n                description={'Configure the action'}\n              />\n            </>\n          );\n        }}\n      </IntegrationVerticalFlow>\n    )}\n    postConfigureHref={(integration, params) =>\n      resolvers.create.configure.index({\n        integration,\n        ...params,\n      })\n    }\n  />\n);\n\nconst addStepSelectConnectionPage = (\n  <SelectConnectionPage\n    cancelHref={(p, s) => resolvers.create.configure.index({ ...p, ...s })}\n    header={<IntegrationCreatorBreadcrumbs step={3} />}\n    apiProviderHref={(p, s) => ({ pathname: 'todo' })}\n    connectionHref={(connection, p, s) =>\n      resolvers.create.configure.addStep.connection.selectAction({\n        connection,\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ steps, activeIndex }) => (\n      <IntegrationEditorSidebar\n        steps={steps}\n        addAtIndex={activeIndex}\n        addI18nTitle={`${activeIndex + 1}. Start`}\n        addI18nTooltip={'Start'}\n        addI18nDescription={'Choose a connection'}\n      />\n    )}\n  />\n);\n\nconst addStepSelectActionPage = (\n  <SelectActionPage\n    cancelHref={(p, s) => resolvers.create.configure.index({ ...p, ...s })}\n    header={<IntegrationCreatorBreadcrumbs step={3} />}\n    sidebar={({ connection, steps, activeIndex }) => (\n      <IntegrationEditorSidebar\n        steps={steps}\n        addAtIndex={activeIndex}\n        addIcon={\n          <img\n            src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n            height={24}\n            width={24}\n          />\n        }\n        addI18nTitle={`${activeIndex + 1}. ${connection.connector!.name}`}\n        addI18nTooltip={`${activeIndex + 1}. ${connection.name}`}\n        addI18nDescription={'Choose an action'}\n      />\n    )}\n    selectHref={(actionId, p, s) =>\n      resolvers.create.configure.addStep.connection.configureAction({\n        actionId,\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst addStepConfigureActionPage = (\n  <ConfigureActionPage\n    backHref={(p, s) =>\n      resolvers.create.configure.addStep.connection.selectAction({ ...p, ...s })\n    }\n    cancelHref={(p, s) => resolvers.create.configure.index({ ...p, ...s })}\n    header={<IntegrationCreatorBreadcrumbs step={3} />}\n    mode={'adding'}\n    nextStepHref={(p, s) =>\n      resolvers.create.configure.addStep.connection.configureAction({\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ connection, steps, activeIndex }) => (\n      <IntegrationEditorSidebar\n        steps={steps}\n        addAtIndex={activeIndex}\n        addIcon={\n          <img\n            src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n            height={24}\n            width={24}\n          />\n        }\n        addI18nTitle={`${activeIndex + 1}. ${connection.connector!.name}`}\n        addI18nTooltip={`${activeIndex + 1}. ${connection.name}`}\n        addI18nDescription={'Configure the action'}\n      />\n    )}\n    postConfigureHref={(integration, params) =>\n      resolvers.create.configure.index({\n        integration,\n        ...params,\n      })\n    }\n  />\n);\n\nconst editStepSelectActionPage = (\n  <SelectActionPage\n    cancelHref={(p, s) => resolvers.create.configure.index({ ...p, ...s })}\n    header={<IntegrationCreatorBreadcrumbs step={3} />}\n    sidebar={({ steps, activeIndex }) => (\n      <IntegrationEditorSidebar steps={steps} activeIndex={activeIndex} />\n    )}\n    selectHref={(actionId, p, s) =>\n      resolvers.create.configure.editStep.connection.configureAction({\n        actionId,\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst editStepConfigureActionPage = (\n  <ConfigureActionPage\n    backHref={(p, s) =>\n      resolvers.create.configure.editStep.connection.selectAction({\n        ...p,\n        ...s,\n      })\n    }\n    cancelHref={(p, s) => resolvers.create.configure.index({ ...p, ...s })}\n    header={<IntegrationCreatorBreadcrumbs step={3} />}\n    mode={'editing'}\n    nextStepHref={(p, s) =>\n      resolvers.create.configure.editStep.connection.configureAction({\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ steps, activeIndex }) => (\n      <IntegrationEditorSidebar steps={steps} activeIndex={activeIndex} />\n    )}\n    postConfigureHref={(integration, params) =>\n      resolvers.create.configure.index({\n        integration,\n        ...params,\n      })\n    }\n  />\n);\n\n/**\n * Entry point for the integration creator app. This is shown when an user clicks\n * the \"Create integration\" button somewhere in the app.\n *\n * Since all the creation routes will show the same breadcrumb and require the\n * left navigation bar to be closed to reclaim space, we do it here.\n *\n * Almost all of the routes *require* some state to be passed for them to\n * properly work, so an url that works for an user *will not work* for another.\n * If you try and open the same url on a different browser, the code will throw\n * an exception because of this.\n *\n * We should set up an error boundary[1] to catch these errors and tell the user\n * that he reached an invalid url, or redirect him to a safe page.\n *\n * [1] https://reactjs.org/docs/error-boundaries.html\n *\n * @todo add an error handler!\n * @todo i18n everywhere!\n */\nexport const IntegrationCreatorApp: React.FunctionComponent = () => {\n  return (\n    <WithClosedNavigation>\n      <Breadcrumb>\n        <Link to={resolvers.list()}>Integrations</Link>\n        <span>New integration</span>\n      </Breadcrumb>\n      <Switch>\n        {/* step 1.1 */}\n        <Route\n          path={routes.create.start.selectStep}\n          exact={true}\n          children={startStepSelectConnectionPage}\n        />\n        {/* step 1.2 */}\n        <Route\n          path={routes.create.start.connection.selectAction}\n          exact={true}\n          children={startStepSelectActionPage}\n        />\n        {/* step 1.3 */}\n        <Route\n          path={routes.create.start.connection.configureAction}\n          exact={true}\n          children={startStepConfigureActionPage}\n        />\n        {/* step 2.1 */}\n        <Route\n          path={routes.create.finish.selectStep}\n          exact={true}\n          children={finishStepSelectConnectionPage}\n        />\n        {/* step 2.2 */}\n        <Route\n          path={routes.create.finish.connection.selectAction}\n          exact={true}\n          children={finishStepSelectActionPage}\n        />\n        {/* step 2.3 */}\n        <Route\n          path={routes.create.finish.connection.configureAction}\n          exact={true}\n          children={finishStepConfigureActionPage}\n        />\n        {/* step 3: index */}\n        <Route\n          path={routes.create.configure.index}\n          exact={true}\n          children={addStepPage}\n        />\n        {/* step 3: add connection.1 */}\n        <Route\n          path={routes.create.configure.addStep.selectStep}\n          exact={true}\n          children={addStepSelectConnectionPage}\n        />\n        {/* step 3: add connection.2 */}\n        <Route\n          path={routes.create.configure.addStep.connection.selectAction}\n          exact={true}\n          children={addStepSelectActionPage}\n        />\n        {/* step 3: add connection.3 */}\n        <Route\n          path={routes.create.configure.addStep.connection.configureAction}\n          exact={true}\n          children={addStepConfigureActionPage}\n        />\n        {/* step 3: edit connection.2 (this is optional and can be reached only from the configuration page), must be declared before the configure route */}\n        <Route\n          path={routes.create.configure.editStep.connection.selectAction}\n          exact={true}\n          children={editStepSelectActionPage}\n        />\n        {/* step 3: edit connection.1 (when editing we link directly to the configuration step) */}\n        <Route\n          path={routes.create.configure.editStep.connection.configureAction}\n          exact={true}\n          children={editStepConfigureActionPage}\n        />\n        {/* step 4 */}\n        <Route\n          path={routes.create.configure.saveAndPublish}\n          exact={true}\n          children={saveIntegrationPage}\n        />\n      </Switch>\n    </WithClosedNavigation>\n  );\n};\n","import { getConnectionIcon } from '@syndesis/api';\nimport { Integration } from '@syndesis/models';\nimport { Breadcrumb } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { WithClosedNavigation } from '../../shared';\nimport {\n  IntegrationEditorBreadcrumbs,\n  IntegrationEditorSidebar,\n} from './components';\nimport { AddStepPage } from './components/editor/AddStepPage';\nimport { ConfigureActionPage } from './components/editor/endpoint/ConfigureActionPage';\nimport { SelectActionPage } from './components/editor/endpoint/SelectActionPage';\nimport { SaveIntegrationPage } from './components/editor/SaveIntegrationPage';\nimport { SelectConnectionPage } from './components/editor/SelectConnectionPage';\nimport resolvers from './resolvers';\nimport routes from './routes';\n\nconst addStepPage = (\n  <AddStepPage\n    cancelHref={resolvers.list}\n    getEditAddStepHref={(position, p, s) =>\n      resolvers.integration.edit.addStep.selectStep({\n        position: `${position}`,\n        ...p,\n        ...s,\n      })\n    }\n    getEditConfigureStepHrefCallback={(stepIdx, step, p, s) =>\n      resolvers.integration.edit.editStep.connection.configureAction({\n        actionId: step.action!.id!,\n        connection: step.connection!,\n        position: `${stepIdx}`,\n        ...p,\n        ...s,\n      })\n    }\n    header={<IntegrationEditorBreadcrumbs step={1} />}\n    nextHref={(p, s) =>\n      resolvers.integration.edit.saveAndPublish({\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst selectConnectionPage = (\n  <SelectConnectionPage\n    cancelHref={(p, s) => resolvers.integration.edit.index({ ...p, ...s })}\n    header={<IntegrationEditorBreadcrumbs step={1} />}\n    apiProviderHref={(p, s) => ({ pathname: 'todo' })}\n    connectionHref={(connection, p, s) =>\n      resolvers.integration.edit.addStep.connection.selectAction({\n        connection,\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ steps, activeIndex }) => (\n      <IntegrationEditorSidebar\n        steps={steps}\n        addAtIndex={activeIndex}\n        addI18nTitle={`${activeIndex + 1}. Start`}\n        addI18nTooltip={'Start'}\n        addI18nDescription={'Choose a connection'}\n      />\n    )}\n  />\n);\n\nconst saveIntegrationPage = (\n  <SaveIntegrationPage\n    backHref={(p, s) => resolvers.integration.edit.index({ ...p, ...s })}\n    cancelHref={resolvers.list}\n    header={<IntegrationEditorBreadcrumbs step={2} />}\n    postSaveHref={resolvers.list}\n  />\n);\n\nconst addStepSelectActionPage = (\n  <SelectActionPage\n    cancelHref={(p, s) => resolvers.integration.edit.index({ ...p, ...s })}\n    header={<IntegrationEditorBreadcrumbs step={1} />}\n    sidebar={({ connection, steps, activeIndex }) => (\n      <IntegrationEditorSidebar\n        steps={steps}\n        addAtIndex={activeIndex}\n        addIcon={\n          <img\n            src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n            height={24}\n            width={24}\n          />\n        }\n        addI18nTitle={`${activeIndex + 1}. ${connection.connector!.name}`}\n        addI18nTooltip={`${activeIndex + 1}. ${connection.name}`}\n        addI18nDescription={'Choose an action'}\n      />\n    )}\n    selectHref={(actionId, p, s) =>\n      resolvers.integration.edit.addStep.connection.configureAction({\n        actionId,\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst addStepConfigureActionPage = (\n  <ConfigureActionPage\n    backHref={(p, s) =>\n      resolvers.integration.edit.addStep.connection.selectAction({ ...p, ...s })\n    }\n    cancelHref={(p, s) => resolvers.integration.edit.index({ ...p, ...s })}\n    header={<IntegrationEditorBreadcrumbs step={1} />}\n    mode={'adding'}\n    nextStepHref={(p, s) =>\n      resolvers.integration.edit.addStep.connection.configureAction({\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ connection, steps, activeIndex }) => (\n      <IntegrationEditorSidebar\n        steps={steps}\n        addAtIndex={activeIndex}\n        addIcon={\n          <img\n            src={getConnectionIcon(process.env.PUBLIC_URL, connection)}\n            height={24}\n            width={24}\n          />\n        }\n        addI18nTitle={`${activeIndex + 1}. ${connection.connector!.name}`}\n        addI18nTooltip={`${activeIndex + 1}. ${connection.name}`}\n        addI18nDescription={'Configure the action'}\n      />\n    )}\n    postConfigureHref={(integration, params) =>\n      resolvers.integration.edit.index({\n        integration,\n        ...params,\n      })\n    }\n  />\n);\n\nconst editStepSelectActionPage = (\n  <SelectActionPage\n    cancelHref={(p, s) => resolvers.integration.edit.index({ ...p, ...s })}\n    header={<IntegrationEditorBreadcrumbs step={1} />}\n    sidebar={({ steps, activeIndex }) => (\n      <IntegrationEditorSidebar steps={steps} activeIndex={activeIndex} />\n    )}\n    selectHref={(actionId, p, s) =>\n      resolvers.integration.edit.editStep.connection.configureAction({\n        actionId,\n        ...p,\n        ...s,\n      })\n    }\n  />\n);\n\nconst editStepConfigureActionPage = (\n  <ConfigureActionPage\n    backHref={(p, s) =>\n      resolvers.integration.edit.editStep.connection.selectAction({\n        ...p,\n        ...s,\n      })\n    }\n    cancelHref={(p, s) => resolvers.integration.edit.index({ ...p, ...s })}\n    header={<IntegrationEditorBreadcrumbs step={1} />}\n    mode={'editing'}\n    nextStepHref={(p, s) =>\n      resolvers.integration.edit.editStep.connection.configureAction({\n        ...p,\n        ...s,\n      })\n    }\n    sidebar={({ steps, activeIndex }) => (\n      <IntegrationEditorSidebar steps={steps} activeIndex={activeIndex} />\n    )}\n    postConfigureHref={(integration, params) =>\n      resolvers.integration.edit.index({\n        integration,\n        ...params,\n      })\n    }\n  />\n);\n\nexport interface IIntegrationEditorAppRouteState {\n  integration: Integration;\n}\n\n/**\n * Entry point for the integration editor app. This is shown when an user clicks\n * on the \"Edit\" button for any existing integration.\n *\n * Since all the creation routes will show the same breadcrumb and require the\n * left navigation bar to be closed to reclaim space, we do it here.\n *\n * Almost all of the routes *require* some state to be passed for them to\n * properly work, so an url that works for an user *will not work* for another.\n * If you try and open the same url on a different browser, the code will throw\n * an exception because of this.\n *\n * We should set up an error boundary[1] to catch these errors and tell the user\n * that he reached an invalid url, or redirect him to a safe page.\n *\n * [1] https://reactjs.org/docs/error-boundaries.html\n *\n * @todo add an error handler!\n * @todo i18n everywhere!\n */\nexport const IntegrationEditorApp: React.FunctionComponent = () => {\n  return (\n    <WithRouteData<null, IIntegrationEditorAppRouteState>>\n      {(_, { integration }) => (\n        <WithClosedNavigation>\n          <Breadcrumb>\n            <Link to={resolvers.list()}>Integrations</Link>\n            <Link to={resolvers.integration.details({ integration })}>\n              {integration.name}\n            </Link>\n            <span>Add to integration</span>\n          </Breadcrumb>\n          <Switch>\n            <Route\n              path={routes.integration.edit.index}\n              exact={true}\n              children={addStepPage}\n            />\n            <Route\n              path={routes.integration.edit.addStep.selectStep}\n              exact={true}\n              children={selectConnectionPage}\n            />\n            <Route\n              path={routes.integration.edit.addStep.connection.selectAction}\n              exact={true}\n              children={addStepSelectActionPage}\n            />\n            <Route\n              path={routes.integration.edit.addStep.connection.configureAction}\n              exact={true}\n              children={addStepConfigureActionPage}\n            />\n            <Route\n              path={routes.integration.edit.editStep.connection.selectAction}\n              exact={true}\n              children={editStepSelectActionPage}\n            />\n            <Route\n              path={routes.integration.edit.editStep.connection.configureAction}\n              exact={true}\n              children={editStepConfigureActionPage}\n            />\n            <Route\n              path={routes.integration.edit.saveAndPublish}\n              exact={true}\n              children={saveIntegrationPage}\n            />\n          </Switch>\n        </WithClosedNavigation>\n      )}\n    </WithRouteData>\n  );\n};\n","import { Integration } from '@syndesis/models';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { IntegrationDetailNavBar } from '../../shared/IntegrationDetailNavBar';\n\n/**\n * @integrationId - the ID of the integration for which details are being displayed.\n */\nexport interface IActivityPageParams {\n  integrationId: string;\n}\n\nexport interface IActivityPageState {\n  integration: Integration;\n}\n\n/**\n * This page shows the second tab of the Integration Detail page.\n *\n * This component expects either an integrationId in the URL,\n * or an integration object set via the state.\n *\n */\nexport class ActivityPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<IActivityPageParams, IActivityPageState>>\n        {({ integrationId }, { integration }, { history }) => {\n          return (\n            <div>\n              <Translation ns={['integration', 'shared']}>\n                {t => <IntegrationDetailNavBar integration={integration} />}\n              </Translation>\n              <p>This is the Integration Detail Activity page.</p>\n            </div>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { Integration } from '@syndesis/models';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { IntegrationDetailNavBar } from '../../shared/IntegrationDetailNavBar';\n\n/**\n * @integrationId - the ID of the integration for which details are being displayed.\n */\nexport interface IDetailsPageParams {\n  integrationId: string;\n}\n\nexport interface IDetailsPageState {\n  integration: Integration;\n}\n\n/**\n * This page shows the first, and default, tab of the Integration Detail page.\n *\n * This component expects either an integrationId in the URL,\n * or an integration object set via the state.\n *\n */\nexport class DetailsPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<IDetailsPageParams, IDetailsPageState>>\n        {({ integrationId }, { integration }, { history }) => {\n          return (\n            <div>\n              <Translation ns={['integration', 'shared']}>\n                {t => <IntegrationDetailNavBar integration={integration} />}\n              </Translation>\n              <p>This is the Integration Detail History page.</p>\n            </div>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { Integration } from '@syndesis/models';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { IntegrationDetailNavBar } from '../../shared/IntegrationDetailNavBar';\n\n/**\n * @integrationId - the ID of the integration for which details are being displayed.\n */\nexport interface IMetricsPageParams {\n  integrationId: string;\n}\n\nexport interface IMetricsPageState {\n  integration: Integration;\n}\n\n/**\n * This page shows the second tab of the Integration Detail page.\n *\n * This component expects either an integrationId in the URL,\n * or an integration object set via the state.\n *\n */\nexport class MetricsPage extends React.Component {\n  public render() {\n    return (\n      <WithRouteData<IMetricsPageParams, IMetricsPageState>>\n        {({ integrationId }, { integration }, { history }) => {\n          return (\n            <div>\n              <Translation ns={['integration', 'shared']}>\n                {t => <IntegrationDetailNavBar integration={integration} />}\n              </Translation>\n              <p>This is the Integration Detail Metrics page.</p>\n            </div>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import { WithIntegrationHelpers } from '@syndesis/api';\nimport { Breadcrumb, ImportPageUI } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../../../i18n';\nimport { PageTitle } from '../../../../shared';\nimport resolvers from '../../resolvers';\n\nexport interface IImportPageState {\n  disableDropzone: boolean;\n  uploadFailedMessages?: string[];\n  uploadSuccessMessages?: string[];\n}\nexport class ImportPage extends React.Component<{}, IImportPageState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      disableDropzone: false,\n    };\n  }\n  public render() {\n    return (\n      <Translation ns={['integrations', 'shared']}>\n        {t => (\n          <WithIntegrationHelpers>\n            {({ importIntegration }) => {\n              const handleUploadAccepted = async (files: File[]) => {\n                let uploadFails: string[] = [];\n                let uploadWins: string[] = [];\n                this.setState({\n                  disableDropzone: true,\n                  uploadFailedMessages: uploadFails,\n                  uploadSuccessMessages: uploadWins,\n                });\n                for (const file of files) {\n                  try {\n                    await importIntegration(file);\n                    uploadWins = uploadWins.concat([\n                      i18n.t('integrations:ImportUploadSuccessMessage', {\n                        fileName: file.name,\n                      }),\n                    ]);\n                  } catch (err) {\n                    uploadFails = uploadFails.concat([\n                      i18n.t('integrations:ImportUploadFailedMessage', {\n                        fileName: file.name,\n                      }),\n                    ]);\n                  }\n                  this.setState({\n                    uploadFailedMessages: uploadFails,\n                    uploadSuccessMessages: uploadWins,\n                  });\n                }\n                this.setState({\n                  disableDropzone: false,\n                });\n              };\n              const handleUploadRejected = (failed: string) => {\n                return i18n.t('integrations:ImportUploadFailedAlertMessage', {\n                  fileName: failed,\n                });\n              };\n              return (\n                <>\n                  <PageTitle title={t('shared:Import')} />\n                  <Breadcrumb>\n                    <Link to={resolvers.list()}>\n                      {t('shared:Integrations')}\n                    </Link>\n                    <span>{t('integrations:ImportIntegration')}</span>\n                  </Breadcrumb>\n                  <ImportPageUI\n                    i18nPageTitle={t('integrations:ImportIntegration')}\n                    i18nPageDescription={t(\n                      'integrations:ImportIntegrationDescription'\n                    )}\n                    i18nNoFileSelectedMessage={t(\n                      'integrations:ImportNoFileSelectedMessage'\n                    )}\n                    i18nSelectedFileLabel={t(\n                      'integrations:ImportSelectedFileLabel'\n                    )}\n                    i18nInstructions={t(\n                      'integrations:ImportIntegrationInstructions'\n                    )}\n                    i18nHelpMessage={t('integrations:ImportHelpMessage')}\n                    i18nUploadSuccessMessages={this.state.uploadSuccessMessages}\n                    i18nUploadFailedMessages={this.state.uploadFailedMessages}\n                    onUploadRejected={handleUploadRejected}\n                    onUploadAccepted={handleUploadAccepted}\n                  />\n                </>\n              );\n            }}\n          </WithIntegrationHelpers>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { WithConnections, WithMonitoredIntegrations } from '@syndesis/api';\nimport { Connection, IntegrationWithMonitoring } from '@syndesis/models';\nimport {\n  IActiveFilter,\n  IFilterType,\n  IntegrationsListView,\n  ISortType,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport { PageTitle } from '../../../shared';\nimport { Integrations } from '../components';\nimport resolvers from '../resolvers';\n\nfunction getFilteredAndSortedIntegrations(\n  integrations: IntegrationWithMonitoring[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSortedIntegrations = integrations;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSortedIntegrations = filteredAndSortedIntegrations.filter(\n      (mi: IntegrationWithMonitoring) => {\n        if (filter.title === 'Name') {\n          return mi.integration.name.toLowerCase().includes(valueToLower);\n        }\n        if (filter.title === 'Connection') {\n          const connectionNames = mi.integration!.flows!.reduce(\n            (acc, flow) => [\n              ...acc,\n              ...flow\n                .steps!.filter(s => s.connection)\n                .map(s => s.connection!.name.toLowerCase()),\n            ],\n            [] as string[]\n          );\n          return connectionNames.reduce(\n            (found, n) => found || n.includes(valueToLower),\n            false\n          );\n        }\n        return false;\n      }\n    );\n  });\n\n  filteredAndSortedIntegrations = filteredAndSortedIntegrations.sort(\n    (miA, miB) => {\n      const left = isSortAscending ? miA : miB;\n      const right = isSortAscending ? miB : miA;\n      if (currentSortType === 'Name') {\n        return left.integration.name.localeCompare(right.integration.name);\n      }\n      return left.integration!.currentState!.localeCompare(\n        right.integration!.currentState!\n      );\n    }\n  );\n\n  return filteredAndSortedIntegrations;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterByConnection = {\n  filterType: 'select',\n  filterValues: [],\n  id: 'connection',\n  placeholder: i18n.t('filterByConnectionPlaceholder'),\n  title: i18n.t('shared:Connection'),\n};\n\nfunction getFilterTypes(connections: Connection[]): IFilterType[] {\n  return [\n    filterByName,\n    {\n      ...filterByConnection,\n      filterValues: connections.map(c => ({\n        id: c.id,\n        title: c.name,\n      })),\n    } as IFilterType,\n  ];\n}\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortByStatus = {\n  id: 'status',\n  isNumeric: false,\n  title: i18n.t('shared:Status'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName, sortByStatus];\n\nexport class IntegrationsPage extends React.Component {\n  public render() {\n    return (\n      <WithMonitoredIntegrations>\n        {({ data: integrationsData, hasData, error }) => (\n          <WithConnections>\n            {({ data: connectionsData }) => (\n              <Translation ns={['integrations', 'shared']}>\n                {t => (\n                  <WithListViewToolbarHelpers\n                    defaultFilterType={filterByName}\n                    defaultSortType={sortByName}\n                  >\n                    {helpers => {\n                      const filteredAndSortedIntegrations = getFilteredAndSortedIntegrations(\n                        integrationsData.items,\n                        helpers.activeFilters,\n                        helpers.currentSortType,\n                        helpers.isSortAscending\n                      );\n\n                      return (\n                        <>\n                          <PageTitle title={t('shared:Integrations')} />\n                          <IntegrationsListView\n                            linkToIntegrationImport={'/integrations/import'}\n                            linkToManageCiCd={resolvers.manageCicd.root()}\n                            linkToIntegrationCreation={resolvers.create.start.selectStep()}\n                            filterTypes={getFilterTypes(\n                              connectionsData.connectionsForDisplay\n                            )}\n                            sortTypes={sortTypes}\n                            resultsCount={filteredAndSortedIntegrations.length}\n                            {...helpers}\n                            i18nImport={t('shared:Import')}\n                            i18nManageCiCd={t('integrations:ManageCiCd')}\n                            i18nLinkCreateConnection={t(\n                              'shared:linkCreateIntegration'\n                            )}\n                            i18nResultsCount={t('shared:resultsCount', {\n                              count: filteredAndSortedIntegrations.length,\n                            })}\n                          >\n                            <Integrations\n                              error={error}\n                              loading={!hasData}\n                              integrations={filteredAndSortedIntegrations}\n                            />\n                          </IntegrationsListView>\n                        </>\n                      );\n                    }}\n                  </WithListViewToolbarHelpers>\n                )}\n              </Translation>\n            )}\n          </WithConnections>\n        )}\n      </WithMonitoredIntegrations>\n    );\n  }\n}\n","import {\n  DataMapperAdapter,\n  DocumentType,\n  InspectionType,\n} from '@syndesis/atlasmap-adapter';\nimport { Breadcrumb, ButtonLink, Container } from '@syndesis/ui';\nimport * as React from 'react';\n\nexport interface ITestAtlasmapPageState {\n  mappings?: string;\n}\n\nexport class TestAtlasmapPage extends React.Component<\n  {},\n  ITestAtlasmapPageState\n> {\n  public state: ITestAtlasmapPageState = {};\n\n  constructor(props: {}) {\n    super(props);\n    this.onReset = this.onReset.bind(this);\n    this.onMappings = this.onMappings.bind(this);\n  }\n\n  public onReset() {\n    this.setState({\n      mappings: undefined,\n    });\n  }\n\n  public onMappings(mappings: string) {\n    this.setState({\n      mappings,\n    });\n  }\n\n  public render() {\n    return (\n      <>\n        <Container>\n          <div className=\"toolbar-pf row\">\n            <div className=\"col-sm-12\">\n              <div className=\"toolbar-pf-actions\">\n                <div className=\"form-group\">\n                  <Breadcrumb>\n                    <span>Home</span>\n                    <span>Library</span>\n                    <span>Data</span>\n                  </Breadcrumb>\n                </div>\n                <div className=\"toolbar-pf-action-right\">\n                  <div className=\"form-group\" style={{ marginTop: '5px' }}>\n                    <ButtonLink>Cancel</ButtonLink>\n                    <ButtonLink\n                      disabled={!this.state.mappings}\n                      onClick={this.onReset}\n                    >\n                      Reset\n                    </ButtonLink>\n                    <ButtonLink as={'success'} disabled={!this.state.mappings}>\n                      Save\n                    </ButtonLink>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Container>\n        <div\n          style={{\n            display: 'flex',\n            flexFlow: 'column',\n            height: 'calc(100% - 57px)',\n          }}\n        >\n          <DataMapperAdapter\n            documentId={'-LRMAUOoTSCTd3Eg7_bi'}\n            inputName={'SQL Result'}\n            inputDescription={'Result of SQL [SELECT * from TODO]'}\n            inputDocumentType={DocumentType.JSON}\n            inputInspectionType={InspectionType.SCHEMA}\n            inputDataShape={\n              '{\"type\":\"object\",\"$schema\":\"http://json-schema.org/schema#\",\"title\":\"SQL_PARAM_OUT\",\"properties\":{\"id\":{\"type\":\"integer\",\"required\":true},\"task\":{\"type\":\"string\",\"required\":true},\"completed\":{\"type\":\"integer\",\"required\":true}}}'\n            }\n            outputName={'add_lead Parameter'}\n            outputDescription={'Parameters of Stored Procedure \"add_lead\"'}\n            outputDocumentType={DocumentType.JSON}\n            outputInspectionType={InspectionType.SCHEMA}\n            outputDataShape={\n              '{\"type\":\"object\",\"$schema\":\"http://json-schema.org/schema#\",\"title\":\"add_lead_IN\",\"properties\":{\"first_and_last_name\":{\"type\":\"string\",\"required\":true},\"company\":{\"type\":\"string\",\"required\":true},\"phone\":{\"type\":\"string\",\"required\":true},\"email\":{\"type\":\"string\",\"required\":true},\"lead_source\":{\"type\":\"string\",\"required\":true},\"lead_status\":{\"type\":\"string\",\"required\":true},\"rating\":{\"type\":\"string\",\"required\":true}}}'\n            }\n            mappings={this.state.mappings}\n            onMappings={this.onMappings}\n          />\n        </div>\n      </>\n    );\n  }\n}\n","import { WithEnvironmentHelpers, WithEnvironments } from '@syndesis/api';\nimport {\n  Breadcrumb,\n  CiCdList,\n  CiCdListEmptyState,\n  CiCdListItem,\n  CiCdListSkeleton,\n  CiCdManagePageUI,\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n  TagNameValidationError,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers, WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../../../i18n';\nimport { ApiError, PageTitle } from '../../../../shared';\nimport resolvers from '../../resolvers';\n\nfunction getFilteredAndSortedEnvironments(\n  environments: string[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let answer = environments;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    answer = answer.filter(name => name.toLowerCase().includes(valueToLower));\n  });\n  answer = answer.sort((a, b) => {\n    const left = isSortAscending ? a : b;\n    const right = isSortAscending ? b : a;\n    return left.localeCompare(right);\n  });\n  return answer.map(name => ({\n    i18nUsesText: '',\n    name,\n  }));\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nfunction createConfirmRemoveString(name: string) {\n  return i18n.t('integrations:ConfirmRemoveTag', { tag: name });\n}\n\nexport interface IManageCiCdPageState {\n  nameValidationError: TagNameValidationError;\n}\n\nexport class ManageCiCdPage extends React.Component<{}, IManageCiCdPageState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      nameValidationError: TagNameValidationError.NoErrors,\n    };\n  }\n  public render() {\n    return (\n      <Translation ns={['integrations', 'shared']}>\n        {t => (\n          <WithEnvironments>\n            {({ data, hasData, error, read }) => (\n              <WithListViewToolbarHelpers\n                defaultFilterType={filterByName}\n                defaultSortType={sortByName}\n              >\n                {helpers => {\n                  const filteredAndSortedEnvironments = getFilteredAndSortedEnvironments(\n                    data,\n                    helpers.activeFilters,\n                    helpers.currentSortType,\n                    helpers.isSortAscending\n                  );\n                  const handleValidateItem = (name: string) => {\n                    if (!name || name === '') {\n                      this.setState({\n                        nameValidationError: TagNameValidationError.NoName,\n                      });\n                    } else if (data.indexOf(name) !== -1) {\n                      this.setState({\n                        nameValidationError: TagNameValidationError.NameInUse,\n                      });\n                    } else {\n                      this.setState({\n                        nameValidationError: TagNameValidationError.NoErrors,\n                      });\n                    }\n                  };\n                  return (\n                    <WithEnvironmentHelpers>\n                      {({\n                        createEnvironment,\n                        deleteEnvironment,\n                        renameEnvironment,\n                      }) => (\n                        <>\n                          <PageTitle title={t('integrations:ManageCiCd')} />\n                          <Breadcrumb>\n                            <Link to={resolvers.list()}>\n                              {t('shared:Integrations')}\n                            </Link>\n                            <span>{t('integrations:ManageCiCd')}</span>\n                          </Breadcrumb>\n                          <CiCdManagePageUI\n                            onEditItem={(name: string, newName: string) =>\n                              renameEnvironment(name, newName).finally(read)\n                            }\n                            onAddItem={(name: string) =>\n                              createEnvironment(name).finally(read)\n                            }\n                            onRemoveItem={(name: string) =>\n                              deleteEnvironment(name).finally(read)\n                            }\n                            onValidateItem={handleValidateItem}\n                            filterTypes={filterTypes}\n                            sortTypes={sortTypes}\n                            {...helpers}\n                            resultsCount={filteredAndSortedEnvironments.length}\n                            i18nResultsCount={t('shared:resultsCount', {\n                              count: filteredAndSortedEnvironments.length,\n                            })}\n                            i18nAddNewButtonText={t('shared:AddNew')}\n                            i18nPageTitle={t('integrations:ManageCiCd')}\n                            i18nCancelButtonText={t('shared:Cancel')}\n                            i18nSaveButtonText={t('shared:Save')}\n                            i18nConfirmRemoveButtonText={t('shared:Yes')}\n                            i18nConfirmCancelButtonText={t('shared:No')}\n                            i18nRemoveConfirmationMessage={\n                              createConfirmRemoveString\n                            }\n                            i18nRemoveConfirmationTitle={t(\n                              'shared:ConfirmRemove'\n                            )}\n                            i18nRemoveConfirmationDetailMessage={t(\n                              'integrations:ConfirmRemoveTagDetail'\n                            )}\n                            i18nAddTagDialogTitle={t(\n                              'integrations:AddTagDialogTitle'\n                            )}\n                            i18nAddTagDialogDescription={t(\n                              'integrations:AddTagDialogDescription'\n                            )}\n                            i18nEditTagDialogTitle={t(\n                              'integrations:EditTagDialogTitle'\n                            )}\n                            i18nEditTagDialogDescription={t(\n                              'integrations:EditTagDialogDescription'\n                            )}\n                            i18nTagInputLabel={t('integrations:TagName')}\n                            i18nPageDescription={t(\n                              'integrations:ManageCiCdDescription'\n                            )}\n                            nameValidationError={this.state.nameValidationError}\n                            i18nNoNameError={t(\n                              'integrations:PleaseEnterATagName'\n                            )}\n                            i18nNameInUseError={t(\n                              'integrations:ThatTagNameIsInUse'\n                            )}\n                          >\n                            {({\n                              openAddDialog,\n                              openEditDialog,\n                              openRemoveDialog,\n                            }) => (\n                              <WithLoader\n                                error={error}\n                                loading={!hasData}\n                                loaderChildren={\n                                  <CiCdList children={<CiCdListSkeleton />} />\n                                }\n                                errorChildren={<ApiError />}\n                              >\n                                {() => (\n                                  <>\n                                    {filteredAndSortedEnvironments.length !==\n                                      0 && (\n                                      <CiCdList\n                                        children={filteredAndSortedEnvironments.map(\n                                          (listItem, index) => (\n                                            <CiCdListItem\n                                              key={index}\n                                              onEditClicked={openEditDialog}\n                                              onRemoveClicked={openRemoveDialog}\n                                              i18nEditButtonText={t(\n                                                'shared:Edit'\n                                              )}\n                                              i18nRemoveButtonText={t(\n                                                'shared:Remove'\n                                              )}\n                                              name={listItem.name}\n                                              i18nUsesText={\n                                                listItem.i18nUsesText\n                                              }\n                                            />\n                                          )\n                                        )}\n                                      />\n                                    )}\n                                    {filteredAndSortedEnvironments.length ===\n                                      0 && (\n                                      <CiCdListEmptyState\n                                        onAddNew={openAddDialog}\n                                        i18nTitle={t(\n                                          'integrations:NoEnvironmentsAvailable'\n                                        )}\n                                        i18nAddNewButtonText={t(\n                                          'shared:AddNew'\n                                        )}\n                                        i18nInfo={t(\n                                          'integrations:NoEnvironmentsAvailableInfo'\n                                        )}\n                                      />\n                                    )}\n                                  </>\n                                )}\n                              </WithLoader>\n                            )}\n                          </CiCdManagePageUI>\n                        </>\n                      )}\n                    </WithEnvironmentHelpers>\n                  );\n                }}\n              </WithListViewToolbarHelpers>\n            )}\n          </WithEnvironments>\n        )}\n      </Translation>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { IntegrationCreatorApp } from './IntegrationCreatorApp';\nimport { IntegrationEditorApp } from './IntegrationEditorApp';\nimport {\n  ActivityPage,\n  DetailsPage,\n  ImportPage,\n  IntegrationsPage,\n  MetricsPage,\n  TestAtlasmapPage,\n} from './pages';\nimport { ManageCiCdPage } from './pages/cicd';\nimport routes from './routes';\n\n/**\n * Entry point for the integrations section.\n *\n * Since the section is logically split in sub-apps, each with their own routes,\n * we do the same thing here: instead of listing all the routes in a single place\n * we have components called \"Apps\" that will define their own route handlers.\n *\n * @todo the IntegrationCreatorApp and IntegrationEditorApp could benefit from\n * some refactoring aimed to DRY the business logic that's embedded in every\n * page of the same type (especially the configuration ones).\n * Actually the IntegrationEditorApp is the result of a copy-paste of this folder\n * `syndesis/src/modules/integrations/pages/create/configure/editStep`,\n * with updated titles and links between the steps.\n * This is an hint that at least those 2 \"areas\" could be DRYed up, but it could\n * be worth exploring options to take it up a notch and figure out a way to\n * simplify also the other pages.\n */\nexport class IntegrationsModule extends React.Component {\n  public render() {\n    return (\n      <Switch>\n        <Route\n          path={routes.manageCicd.root}\n          exact={true}\n          component={ManageCiCdPage}\n        />\n        <Route path={routes.import.root} exact={true} component={ImportPage} />\n        <Route path={routes.create.root} component={IntegrationCreatorApp} />\n        <Route\n          path={routes.integration.edit.root}\n          component={IntegrationEditorApp}\n        />\n        <Route path={routes.list} exact={true} component={IntegrationsPage} />\n        <Route\n          path={'/integrations/atlasmap'}\n          exact={true}\n          component={TestAtlasmapPage}\n        />\n        <Route\n          path={routes.integration.details}\n          exact={true}\n          component={DetailsPage}\n        />\n        <Route\n          path={routes.integration.activity}\n          exact={true}\n          component={ActivityPage}\n        />\n        <Route\n          path={routes.integration.metrics}\n          exact={true}\n          component={MetricsPage}\n        />\n      </Switch>\n    );\n  }\n}\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { I18nextProvider, Translation } from 'react-i18next';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { App } from './app';\nimport i18n from './i18n';\nimport './index.css';\nimport { ConnectionsModule } from './modules/connections';\nimport { CustomizationsModule } from './modules/customizations';\nimport { DashboardModule } from './modules/dashboard';\nimport { DataModule } from './modules/data';\nimport { IntegrationsModule } from './modules/integrations';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <Router>\n    <I18nextProvider i18n={i18n}>\n      <Translation ns={['shared']}>\n        {t => (\n          <App\n            routes={[\n              {\n                component: DashboardModule,\n                exact: true,\n                icon: 'fa fa-tachometer-alt',\n                label: t('Home'),\n                to: '/',\n              },\n              {\n                component: IntegrationsModule,\n                icon: 'pficon pficon-integration',\n                label: t('Integrations'),\n                to: '/integrations',\n              },\n              {\n                component: ConnectionsModule,\n                icon: 'pficon pficon-plugged',\n                label: t('Connections'),\n                to: '/connections',\n              },\n              {\n                component: CustomizationsModule,\n                icon: 'fa fa-cube',\n                label: t('Customizations'),\n                to: '/customizations',\n              },\n              {\n                component: DataModule,\n                icon: 'fa fa-database',\n                label: t('Data'),\n                to: '/data',\n              },\n              // {\n              // component: TODO,\n              // icon: 'pficon pficon-settings',\n              // label: t('Settings'),\n              // to: '/settings',\n              // },\n            ]}\n          />\n        )}\n      </Translation>\n    </I18nextProvider>\n  </Router>,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n","/* tslint:disable:object-literal-sort-keys no-empty-interface */\nimport { RestDataService } from '@syndesis/models';\nimport { makeResolver, makeResolverNoParams } from '@syndesis/utils';\nimport routes from './routes';\n\n// TODO: unit test every single one of these resolvers 😫\nexport default {\n  virtualizations: {\n    views: {\n      root: makeResolver<{ virtualization: RestDataService }>(\n        routes.virtualizations.virtualization.views.root,\n        ({ virtualization }) => ({\n          params: {\n            virtualizationId: virtualization.keng__id,\n          },\n          state: {\n            virtualization,\n          },\n        })\n      ),\n      importSource: {\n        root: makeResolverNoParams(\n          routes.virtualizations.virtualization.views.importSource.root\n        ),\n        selectConnection: makeResolver<{ virtualization: RestDataService }>(\n          routes.virtualizations.virtualization.views.importSource\n            .selectConnection,\n          ({ virtualization }) => ({\n            params: {\n              virtualizationId: virtualization.keng__id,\n            },\n            state: {\n              virtualization,\n            },\n          })\n        ),\n        selectViews: makeResolver<{\n          connectionId: string;\n          virtualization: RestDataService;\n        }>(\n          routes.virtualizations.virtualization.views.importSource.selectViews,\n          ({ connectionId, virtualization }) => ({\n            params: {\n              virtualizationId: virtualization.keng__id,\n            },\n            state: {\n              connectionId,\n              virtualization,\n            },\n          })\n        ),\n      },\n    },\n    relationship: makeResolver<{ virtualization: RestDataService }>(\n      routes.virtualizations.virtualization.relationship,\n      ({ virtualization }) => ({\n        params: {\n          virtualizationId: virtualization.keng__id,\n        },\n        state: {\n          virtualization,\n        },\n      })\n    ),\n    sqlClient: makeResolver<{ virtualization: RestDataService }>(\n      routes.virtualizations.virtualization.sqlClient,\n      ({ virtualization }) => ({\n        params: {\n          virtualizationId: virtualization.keng__id,\n        },\n        state: {\n          virtualization,\n        },\n      })\n    ),\n    metrics: makeResolver<{ virtualization: RestDataService }>(\n      routes.virtualizations.virtualization.metrics,\n      ({ virtualization }) => ({\n        params: {\n          virtualizationId: virtualization.keng__id,\n        },\n        state: {\n          virtualization,\n        },\n      })\n    ),\n    create: makeResolverNoParams(routes.virtualizations.create),\n    import: makeResolverNoParams(routes.virtualizations.import),\n    list: makeResolverNoParams(routes.virtualizations.list),\n  },\n  root: makeResolverNoParams(routes.virtualizations.list),\n};\n"],"sourceRoot":""}